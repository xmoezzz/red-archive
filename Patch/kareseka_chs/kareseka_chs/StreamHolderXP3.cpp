#include "StreamHolderXP3.h"
#include "MyCxdec.h"
#include "ThemidaSDK.h"

static CCxdec* g_cxdec = NULL;

Void ErrorExitXP3()
{
	MessageBoxW(NULL, L"Internal Exception", L"X'moe-CoreLib", MB_OK | MB_ICONERROR);
	Nt_ExitProcess(0);
}

StreamHolderXP3::StreamHolderXP3(LPVOID Buffer, ULONG BufferSize, ULONG64 FileHash) :
mRtcBufferSize(0),
mRtcBuffer(nullptr),
mInitFlag(FALSE),
mStream(nullptr),
Hash(0x12547892)
{
	if (Buffer == nullptr || BufferSize == 0)
		ErrorExitXP3();
	else
	{
		mPreDecodeBuffer = (PUCHAR)Buffer;
		mPreDecodeBufferSize = BufferSize;
		Hash = FileHash;
	}
}

StreamHolderXP3::~StreamHolderXP3()
{
	if (mPreDecodeBuffer)
	{
		FreeMemoryP(mPreDecodeBuffer);
	}
	mPreDecodeBuffer = nullptr;
	mPreDecodeBufferSize = 0;

	if (mRtcBuffer)
		FreeMemoryP(mRtcBuffer);

	if (mStream)
		FreeMemoryP(mStream);

	mRtcBuffer = nullptr;
	mRtcBufferSize = 0;
}

ULONG64 WINAPI StreamHolderXP3::Seek(LONG64 offset, LONG  whence)
{
	if (!mInitFlag)
		DoDecryption();

	if (mRtcBuffer == nullptr || mRtcBufferSize == 0 || mStream == nullptr)
		ErrorExitXP3();

	return mStream->Seek(offset, whence);
}

static BYTE c_emp_decode_table[1024] =
{
	0x41, 0xdd, 0x4e, 0x5e, 0x74, 0x15, 0x78, 0xa7, 0x82, 0x6f, 0x20, 0xd5, 0xc9, 0x63, 0x28, 0x4d,
	0xed, 0x95, 0xf8, 0xee, 0x1d, 0x07, 0xd8, 0xea, 0x98, 0x8d, 0x9c, 0xd4, 0x70, 0x82, 0x87, 0xfa,
	0x8e, 0xba, 0x6a, 0xf4, 0xf7, 0xb7, 0x0c, 0x7d, 0x4e, 0x20, 0xce, 0x82, 0x99, 0x6e, 0x8f, 0x79,
	0x48, 0xe9, 0xce, 0xf4, 0x73, 0xd3, 0x0e, 0x76, 0x63, 0xe3, 0x7f, 0x85, 0x54, 0xf5, 0xda, 0x00,
	0x79, 0xff, 0x8d, 0xb3, 0x41, 0x47, 0x18, 0x29, 0xd9, 0xd3, 0xb7, 0xc1, 0xf2, 0x21, 0x41, 0x04,
	0xc4, 0x19, 0x50, 0x36, 0x52, 0x40, 0xa2, 0x2b, 0xf0, 0x2e, 0xbf, 0x5d, 0x03, 0x42, 0xdc, 0x3b,
	0x09, 0x94, 0x00, 0xc3, 0xd9, 0x2b, 0x65, 0x52, 0x2b, 0x71, 0x21, 0xbb, 0x5a, 0xe3, 0x05, 0x97,
	0x69, 0x0d, 0xc6, 0xdd, 0x45, 0xb6, 0x5a, 0xb3, 0x49, 0x58, 0xa5, 0x83, 0x07, 0xd3, 0x55, 0x50,
	0x46, 0x61, 0x0b, 0x4b, 0x47, 0xcd, 0xbb, 0xa1, 0x4d, 0xe0, 0x55, 0x98, 0x5b, 0x1d, 0xa5, 0xda,
	0x40, 0xae, 0x78, 0x10, 0xd1, 0x9d, 0x00, 0xb3, 0x76, 0x47, 0x79, 0x1f, 0xe8, 0x0e, 0x0d, 0xea,
	0x38, 0x4f, 0xf5, 0x73, 0x14, 0x94, 0xe2, 0xbe, 0x46, 0x0a, 0x9b, 0x7f, 0x7d, 0x35, 0xe7, 0x74,
	0x50, 0xe2, 0xad, 0xf8, 0x80, 0x5d, 0x5a, 0xd6, 0x7d, 0xe5, 0x83, 0x5b, 0x2c, 0x5d, 0xcc, 0xaf,
	0xe8, 0x44, 0x08, 0x65, 0xc7, 0xe7, 0xa1, 0x50, 0x1e, 0xd5, 0x3a, 0x98, 0x47, 0x94, 0x94, 0x0e,
	0xa1, 0x92, 0xae, 0xbd, 0xd9, 0x5e, 0x31, 0xc1, 0x68, 0x18, 0x0a, 0x5d, 0x5d, 0x27, 0x59, 0x47,
	0x5d, 0x29, 0x8a, 0x46, 0xe8, 0x30, 0xc1, 0xff, 0xdd, 0x2b, 0x7c, 0x0c, 0x41, 0xa2, 0x74, 0x4f,
	0x3c, 0xa7, 0xc4, 0x86, 0x64, 0x09, 0x4c, 0x1f, 0x3f, 0xca, 0x58, 0x4d, 0x02, 0xd3, 0x7d, 0x5b,
	0x9f, 0xe7, 0xc4, 0x41, 0xff, 0xd6, 0x0b, 0x75, 0x8c, 0xf3, 0xa7, 0x03, 0xf3, 0xc7, 0x4e, 0xe0,
	0x28, 0x07, 0x35, 0x7b, 0xaa, 0xc4, 0x75, 0x96, 0x08, 0xe2, 0xb3, 0x54, 0xa4, 0xcb, 0x00, 0x93,
	0xb7, 0x64, 0xfe, 0x7b, 0x95, 0x41, 0x44, 0x57, 0x33, 0x15, 0x04, 0xa4, 0xe6, 0x6c, 0xeb, 0x68,
	0x6d, 0x9c, 0x49, 0xc6, 0x32, 0xf8, 0x72, 0xce, 0xcd, 0x48, 0x64, 0x9a, 0xca, 0x76, 0xaa, 0x96,
	0xac, 0x8a, 0x80, 0x1f, 0x31, 0xd8, 0x37, 0x50, 0xd8, 0x78, 0xdb, 0x18, 0xa1, 0xf7, 0x14, 0x90,
	0x14, 0x4c, 0x4a, 0x8c, 0x84, 0x0e, 0x0c, 0x71, 0x95, 0xe4, 0xb3, 0x46, 0xfc, 0x3c, 0x42, 0x0d,
	0x86, 0x40, 0x91, 0x53, 0x5c, 0x05, 0xab, 0x06, 0x85, 0x06, 0x74, 0x87, 0xac, 0xd2, 0x8f, 0x00,
	0x24, 0x01, 0x7e, 0xf8, 0x29, 0x6c, 0x0b, 0x24, 0x69, 0x9e, 0xe7, 0x80, 0xc3, 0x85, 0x92, 0x9f,
	0x4e, 0x6d, 0x7a, 0x3f, 0x9d, 0x30, 0x67, 0x21, 0x41, 0xa6, 0x16, 0x18, 0x90, 0x63, 0x24, 0x5f,
	0xa5, 0xa2, 0x2f, 0x2f, 0xa8, 0x7c, 0x37, 0x91, 0x50, 0x5e, 0x4a, 0x72, 0xa5, 0xb9, 0x60, 0xf5,
	0x0b, 0xfb, 0x84, 0x0d, 0x7c, 0xbf, 0x34, 0x4a, 0x15, 0x40, 0x0b, 0xf3, 0xd4, 0x14, 0x9d, 0x56,
	0xa0, 0x17, 0xa3, 0x5c, 0x89, 0xa5, 0x58, 0x60, 0x52, 0x0c, 0x22, 0x41, 0x2c, 0x40, 0x75, 0xb6,
	0xc5, 0xd1, 0xf4, 0xe2, 0x81, 0x1b, 0xda, 0x29, 0x07, 0xbd, 0x99, 0x41, 0x00, 0x4c, 0xc1, 0x8c,
	0x1b, 0x48, 0x22, 0xa5, 0x55, 0x4e, 0x35, 0x39, 0x77, 0x90, 0xb8, 0x18, 0xe0, 0x83, 0x99, 0x8b,
	0x84, 0xd7, 0x15, 0xe9, 0x35, 0xac, 0x21, 0x65, 0x22, 0x03, 0x09, 0x2a, 0x9d, 0x72, 0x57, 0xaa,
	0x21, 0x1d, 0xf6, 0x32, 0x93, 0xe1, 0x97, 0xc2, 0xc8, 0xd2, 0x54, 0x1d, 0x48, 0xe8, 0x93, 0x1c,
	0x51, 0xf5, 0x2e, 0x47, 0x1f, 0xda, 0xd1, 0xa6, 0x6b, 0xfb, 0xa3, 0xd5, 0x32, 0xf0, 0x28, 0x57,
	0xb7, 0x7e, 0x66, 0x2c, 0xcb, 0xc5, 0x46, 0xa6, 0x4c, 0xba, 0x3e, 0x78, 0xec, 0xd8, 0x2d, 0x10,
	0x33, 0x13, 0x86, 0x27, 0xc8, 0x0e, 0xb1, 0x96, 0xec, 0x8d, 0xae, 0x6b, 0x47, 0x2d, 0xfc, 0x3c,
	0xe7, 0x53, 0xb9, 0xbb, 0x86, 0x62, 0x0a, 0x8b, 0x0b, 0x31, 0xbd, 0x52, 0x54, 0xbc, 0x2d, 0x10,
	0x33, 0x19, 0x66, 0xaf, 0xb6, 0xae, 0x8a, 0xdb, 0xac, 0xa2, 0x74, 0x13, 0x64, 0x91, 0x9a, 0x00,
	0xb8, 0x84, 0x38, 0x06, 0x4a, 0x20, 0xab, 0x1a, 0x0e, 0x1d, 0x1a, 0xd3, 0x09, 0xfa, 0x5c, 0xc3,
	0x58, 0xef, 0x16, 0x07, 0x73, 0x24, 0x24, 0x1d, 0xb3, 0x20, 0x3b, 0xf6, 0x12, 0x84, 0xcc, 0x4c,
	0x33, 0xf9, 0x2b, 0x36, 0xa2, 0x67, 0xf0, 0xfa, 0x5c, 0x68, 0x9e, 0x22, 0x92, 0xfc, 0x82, 0xd2,
	0xaa, 0x7e, 0xde, 0x58, 0x87, 0xd6, 0x47, 0x05, 0x0a, 0xf1, 0x4c, 0x3b, 0xd8, 0x6e, 0x58, 0xc8,
	0x5e, 0x9a, 0xda, 0x72, 0x13, 0x9f, 0xa2, 0xd3, 0xfd, 0xf8, 0x8e, 0x68, 0x77, 0x28, 0x67, 0xe4,
	0x31, 0xac, 0x06, 0xca, 0x78, 0x2e, 0xbb, 0x3a, 0xb8, 0xfb, 0xef, 0x0b, 0x3f, 0xb7, 0x07, 0x1b,
	0x43, 0x50, 0x8c, 0xe3, 0x27, 0x30, 0x89, 0x4f, 0xfa, 0xb7, 0x35, 0xcc, 0x41, 0xe8, 0xd2, 0xa2,
	0xf6, 0x62, 0xd5, 0x84, 0xd0, 0x92, 0x47, 0x65, 0xc5, 0x28, 0x6b, 0x8e, 0xce, 0xc7, 0xa1, 0xee,
	0xea, 0x01, 0x8a, 0xb1, 0x65, 0x82, 0x6d, 0x14, 0x5a, 0x8b, 0xda, 0x77, 0x77, 0xa3, 0x8d, 0xb3,
	0x00, 0x89, 0x94, 0xaf, 0x16, 0x6c, 0xb5, 0x2e, 0x3a, 0x5e, 0x0a, 0xeb, 0x0d, 0x07, 0xee, 0xe8,
	0x59, 0x96, 0x1d, 0x03, 0x55, 0xfd, 0x16, 0xca, 0x25, 0x5e, 0xc4, 0x90, 0xa1, 0xc0, 0x5e, 0xc1,
	0x57, 0x07, 0x8c, 0x72, 0xd3, 0x23, 0xcb, 0x3c, 0x1e, 0x87, 0x12, 0x4b, 0x84, 0xdd, 0xb6, 0xb2,
	0x9a, 0xf8, 0x8b, 0x01, 0x80, 0x0a, 0x4c, 0x1a, 0x64, 0x17, 0x3c, 0x40, 0x47, 0xa9, 0x0e, 0x71,
	0x04, 0xc6, 0x02, 0xf6, 0x8e, 0x1f, 0x52, 0x38, 0x79, 0x8a, 0xcc, 0xd5, 0xbc, 0xb2, 0xc0, 0xf3,
	0xb5, 0x0d, 0x1c, 0xd5, 0x6d, 0x0f, 0xd6, 0xac, 0x1e, 0x9e, 0x8a, 0xaf, 0xf2, 0xc5, 0x65, 0x6d,
	0x0e, 0xac, 0x41, 0x62, 0xcf, 0xc8, 0x11, 0xc9, 0x53, 0x4f, 0x80, 0xb2, 0x3c, 0xef, 0xd5, 0x54,
	0xb0, 0xbf, 0x1a, 0xa4, 0xa4, 0x76, 0x7d, 0x27, 0x5b, 0xdb, 0xf6, 0x04, 0x29, 0x7c, 0x2a, 0x5d,
	0x7d, 0xa3, 0x90, 0xdf, 0x1f, 0x86, 0xd2, 0x98, 0xb5, 0xbe, 0x76, 0x09, 0x8c, 0xfa, 0xbd, 0x7d,
	0x95, 0xf5, 0xcb, 0x99, 0xae, 0xa5, 0x09, 0x33, 0x23, 0xb6, 0xc8, 0x68, 0x75, 0x36, 0x27, 0xe8,
	0x5a, 0x92, 0x36, 0x95, 0x04, 0xc1, 0x5b, 0x4d, 0xa6, 0xbf, 0xf5, 0x03, 0x35, 0x3d, 0x40, 0x15,
	0x6c, 0x97, 0x79, 0xd9, 0x12, 0x06, 0x42, 0x79, 0x7f, 0x17, 0x47, 0x02, 0x5d, 0x5b, 0x22, 0xb7,
	0xac, 0x60, 0x7c, 0xab, 0x08, 0xe1, 0x75, 0x8f, 0x2f, 0x3a, 0x46, 0xc8, 0xbe, 0x1e, 0x25, 0xc5,
	0x3b, 0x8c, 0x6a, 0x8f, 0x58, 0xff, 0xef, 0xa1, 0x76, 0xe6, 0xbc, 0xfb, 0x69, 0x53, 0xe4, 0x72,
	0x7b, 0xf7, 0xaa, 0x4a, 0xb3, 0x4e, 0xe8, 0x06, 0x57, 0x17, 0xb2, 0x7f, 0xaf, 0x07, 0x36, 0x34,
	0x0c, 0xbe, 0xe6, 0xe1, 0x09, 0xfa, 0xda, 0x53, 0x11, 0x0b, 0x6f, 0x7a, 0x21, 0x87, 0x35, 0xc0,
	0xcf, 0x3e, 0x08, 0x99, 0x8c, 0x70, 0x7c, 0x5b, 0x26, 0x3e, 0x7f, 0x51, 0x91, 0x5f, 0x39, 0x0a,
	0xe6, 0x14, 0x37, 0xf7, 0xac, 0x5e, 0xc9, 0x36, 0x57, 0x6e, 0xa8, 0xa8, 0x0e, 0x5d, 0xdc, 0x49,
};


ULONG64 WINAPI StreamHolderXP3::Read(LPVOID ReadBuffer, ULONG ReadSize)
{
	VMStart();

	ULONG64        Result;
	LARGE_INTEGER  Offset;

	if (!mInitFlag)
		DoDecryption();

	if (mRtcBuffer == nullptr || mRtcBufferSize == 0 || mStream == nullptr)
		ErrorExitXP3();

	Offset.LowPart = (ULONG)mStream->Here - (ULONG)mStream->Base;
	Result = mStream->Read(ReadBuffer, 1, ReadSize);

	auto DecryptCxdecInternal = [](ULONG Hash, LARGE_INTEGER Offset, PVOID lpBuffer, ULONG BufferSize)->BOOL
	{
		PBYTE           pbBuffer;
		ULONG           Mask, Mask2;
		LARGE_INTEGER   CurrentPos;
		CCxdec         *pCxdec;

		pCxdec = g_cxdec;
		if (pCxdec == NULL)
		{
			pCxdec = g_cxdec = new CCxdec;
		}

		pbBuffer = (PBYTE)lpBuffer;
		Mask = pCxdec->GetMask(Hash);

		Mask2 = LOWORD(Mask);
		CurrentPos.QuadPart = Offset.QuadPart + BufferSize;

		if (Mask2 >= Offset.QuadPart && Mask2 < CurrentPos.QuadPart)
		{
			*(pbBuffer + Mask2 - Offset.LowPart) ^= Hash >> 16;
		}

		Mask2 = HIWORD(Mask);
		if (Mask2 >= Offset.QuadPart && Mask2 < CurrentPos.QuadPart)
		{
			*(pbBuffer + Mask2 - Offset.LowPart) ^= Hash >> 8;
		}

		XorMemory(pbBuffer, Hash, BufferSize);

		return TRUE;
	};
	//Offset.QuadPart = 0;
	//DecryptCxdecInternal(HIDWORD(Hash), Offset, ReadBuffer, ReadSize);

	VMEnd();
	return Result;
}

ULONG64 WINAPI StreamHolderXP3::Write(LPVOID Buffer, ULONG WriteSize)
{
	if (!mInitFlag)
		DoDecryption();

	if (mRtcBuffer == nullptr || mRtcBufferSize == 0 || mStream == nullptr)
		ErrorExitXP3();

	return mStream->Write(Buffer, 1, WriteSize);
}

ULONG64 WINAPI StreamHolderXP3::GetSize()
{
	if (!mInitFlag)
		DoDecryption();

	if (mRtcBuffer == nullptr || mRtcBufferSize == 0 || mStream == nullptr)
		ErrorExitXP3();

	return mStream->GetMemorySize();
}

HRESULT WINAPI StreamHolderXP3::DoDecryption()
{
	VMStart();

	ULONG ReadSize, Offset;
	PBYTE ReadBuffer;

	mStream = (pMemoryStream)AllocateMemoryP(sizeof(MemoryStream));
	mStream->Init(mPreDecodeBuffer, mPreDecodeBufferSize);

	Offset = 0;
	ReadSize = mPreDecodeBufferSize;
	ReadBuffer = mPreDecodeBuffer;

#if 0
	switch (HIBYTE(Hash) % 8)
	{
	case 0:
		XorMemory(ReadBuffer, LOBYTE(Hash), ReadSize);
		break;

	case 1:
	{
		for (DWORD i = 0; i < ReadSize; i++)
			((PBYTE)ReadBuffer)[i] ^= (BYTE)Hash;
	}
	break;

	case 2:
	{
		BYTE xor = (BYTE)Hash;

		for (DWORD i = 0; i < ReadSize; i++)
			((PBYTE)ReadBuffer)[i] = ~(((PBYTE)ReadBuffer)[i] ^ ~xor);
	}
	break;

	case 3:
	{
		for (DWORD i = 0; i < ReadSize; i++)
			((PBYTE)ReadBuffer)[i] = ((PBYTE)ReadBuffer)[i] ^ (BYTE)(Hash >> 3);
	}
	break;

	case 4:
	{
		DWORD k = (Offset + 48) % 1024;

		for (DWORD i = Offset; i < Offset + ReadSize; ++i)
		{
			((PBYTE)ReadBuffer)[i - Offset] ^= c_emp_decode_table[k++];
			if (k >= 1024)
				k = 0;
		}
	}
	break;

	case 5:
	{
		BYTE a1[256];
		BYTE a2[16];

		for (DWORD i = 0; i < 256; i++)
			a1[i] = i;

		a2[0] = LOBYTE(Hash >> 24) ^ 0xaa;
		a2[1] = LOBYTE(Hash >> 16) ^ 0x5a;
		a2[2] = LOBYTE(Hash >> 8) ^ 0xa5;
		a2[3] = LOBYTE(Hash) ^ 0xee;
		a2[4] = LOBYTE(Hash >> 8);
		a2[5] = LOBYTE(Hash);
		a2[6] = LOBYTE(Hash >> 24);
		a2[7] = LOBYTE(Hash);
		a2[8] = LOBYTE(Hash) - 0x12;
		a2[9] = LOBYTE(Hash >> 8) + 0x55;
		a2[10] = LOBYTE(Hash >> 16) - 0x56;
		a2[11] = LOBYTE(Hash >> 24) - 0x34;
		a2[12] = LOBYTE(Hash) + 0x67;
		a2[13] = LOBYTE(Hash >> 24) - 0x66;
		a2[14] = LOBYTE(Hash) - 0x33;
		a2[15] = LOBYTE(Hash >> 8) - 0x77;

		BYTE idx = 0;
		for (DWORD i = 0; i < 64; i++)
		{
			BYTE tmp;

			tmp = a1[i * 4 + 0];
			idx = tmp + a2[i * 4 + 0] + idx;
			a1[i * 4 + 0] = a1[idx];
			a1[idx] = tmp;

			tmp = a1[i * 4 + 1];
			idx = tmp + a2[i * 4 + 1] + idx;
			a1[i * 4 + 1] = a1[idx];
			a1[idx] = tmp;

			tmp = a1[i * 4 + 2];
			idx = tmp + a2[i * 4 + 2] + idx;
			a1[i * 4 + 2] = a1[idx];
			a1[idx] = tmp;

			tmp = a1[i * 4 + 3];
			idx = tmp + a2[i * 4 + 3] + idx;
			a1[i * 4 + 3] = a1[idx];
			a1[idx] = tmp;
		}

		for (DWORD i = Offset; i < Offset + ReadSize; ++i)
		{
			((PBYTE)ReadBuffer)[i - Offset] ^= a1[i % 256];
		}

		RtlZeroMemory(a1, sizeof(a1));
		RtlZeroMemory(a1, sizeof(a2));
	}
	break;

	case 6:
	{
		PBYTE HashArray = (PBYTE)&Hash;
		for (DWORD i = Offset; i < Offset + ReadSize; ++i)
		{
			((PBYTE)ReadBuffer)[i - Offset] ^= HashArray[i % 8];
		}
	}
	break;

	case 7:
	{
		for (DWORD i = 0; i < ReadSize; ++i)
		{
			((PBYTE)ReadBuffer)[i] ^= 0x85;
		}
	}
	break;
	}
#endif

	auto EncodeOrDecode = [&]()
	{
		BYTE a1[256];
		BYTE a2[16];

		for (DWORD i = 0; i < 256; i++)
			a1[i] = i;

		a2[0] = LOBYTE(Hash >> 24) ^ 0xaa;
		a2[1] = LOBYTE(Hash >> 16) ^ 0x5a;
		a2[2] = LOBYTE(Hash >> 8) ^ 0xa5;
		a2[3] = LOBYTE(Hash) ^ 0xee;
		a2[4] = LOBYTE(Hash >> 8);
		a2[5] = LOBYTE(Hash);
		a2[6] = LOBYTE(Hash >> 24);
		a2[7] = LOBYTE(Hash);
		a2[8] = LOBYTE(Hash) - 0x12;
		a2[9] = LOBYTE(Hash >> 8) + 0x55;
		a2[10] = LOBYTE(Hash >> 16) - 0x56;
		a2[11] = LOBYTE(Hash >> 24) - 0x34;
		a2[12] = LOBYTE(Hash) + 0x67;
		a2[13] = LOBYTE(Hash >> 24) - 0x66;
		a2[14] = LOBYTE(Hash) - 0x33;
		a2[15] = LOBYTE(Hash >> 8) - 0x77;

		BYTE idx = 0;
		for (DWORD i = 0; i < 64; i++)
		{
			BYTE tmp;

			tmp = a1[i * 4 + 0];
			idx = tmp + a2[i * 4 + 0] + idx;
			a1[i * 4 + 0] = a1[idx];
			a1[idx] = tmp;

			tmp = a1[i * 4 + 1];
			idx = tmp + a2[i * 4 + 1] + idx;
			a1[i * 4 + 1] = a1[idx];
			a1[idx] = tmp;

			tmp = a1[i * 4 + 2];
			idx = tmp + a2[i * 4 + 2] + idx;
			a1[i * 4 + 2] = a1[idx];
			a1[idx] = tmp;

			tmp = a1[i * 4 + 3];
			idx = tmp + a2[i * 4 + 3] + idx;
			a1[i * 4 + 3] = a1[idx];
			a1[idx] = tmp;
		}

		for (DWORD i = 0; i < mPreDecodeBufferSize; ++i)
		{
			((PBYTE)mPreDecodeBuffer)[i] ^= a1[i % 256];
		}

		RtlZeroMemory(a1, sizeof(a1));
		RtlZeroMemory(a1, sizeof(a2));
	};

	//EncodeOrDecode();

	for (DWORD i = 0; i < ReadSize; ++i)
	{
		((PBYTE)ReadBuffer)[i] ^= c_emp_decode_table[i % 1024];
	}

	mRtcBuffer = mPreDecodeBuffer;
	mRtcBufferSize = mPreDecodeBufferSize;

	mInitFlag = TRUE;

	VMEnd();
	return S_OK;
}
