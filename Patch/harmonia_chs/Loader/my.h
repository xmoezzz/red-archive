#ifndef _MYLIBRARY_H_9fb91137_38ac_4d5e_8572_b6e12d23cb15_
#define _MYLIBRARY_H_9fb91137_38ac_4d5e_8572_b6e12d23cb15_

#if !defined(USE_NT_VER)
#define USE_NT_VER 1
#endif

#define ML_DISABLE_THIRD_LIB_UCL 1

#if ML_KERNEL_MODE

// #include "Include\MyLibraryKernel.h"

#else
#ifndef _MYLIBRARYUSER_H_e5b0d13b_823a_4f24_88ec_6515f58a7140_
#define _MYLIBRARYUSER_H_e5b0d13b_823a_4f24_88ec_6515f58a7140_

#define ML_USER_MODE  1

#define _CRT_SECURE_NO_WARNINGS
#define _CRT_NON_CONFORMING_SWPRINTFS
#define _CRT_NONSTDC_NO_WARNINGS

#ifndef _WINSOCKAPI_
#include <ws2spi.h>
#endif

#include <intsafe.h>

#ifndef _MACROS_H_6cd488df_3b68_4112_a937_9fcfa63eb723
#define _MACROS_H_6cd488df_3b68_4112_a937_9fcfa63eb723

#ifndef _TYPES_H_54e4879c_024a_491f_b990_859f407442fe
#define _TYPES_H_54e4879c_024a_491f_b990_859f407442fe

#ifndef _CONFIG_H_2a678057_bcdf_4132_9bc3_d6048ac24434
#define _CONFIG_H_2a678057_bcdf_4132_9bc3_d6048ac24434

#if (defined(_MSC_VER) && _MSC_VER >= 1300)
#pragma once
#endif

#if defined(__INTEL_COMPILER)
#define ML_COMPILER_INTEL __INTEL_COMPILER
#define ML_COMPILER_MSC 1700
#define MY_COMPILER_MSC ML_COMPILER_MSC

#elif defined(_MSC_VER)
#define ML_COMPILER_MSC _MSC_VER
#define MY_COMPILER_MSC ML_COMPILER_MSC

#endif // compiler

#if ML_COMPILER_MSC >= 1500
#define MY_MSC_1500 1
#define SUPPORT_VA_ARGS_MACRO 1
#endif  // MY_COMPILER_MSC >= 1500

#if ML_COMPILER_MSC >= 1700
#define ML_SUPPORT_LAMBDA 1
#endif // ML_SUPPORT_LAMBDA

#if defined(UNICODE) || defined(_UNICODE)
#define MY_UNICODE_ENABLE 1
#else
#define MY_UNICODE_ENABLE 0
#endif // set unicode flag

#if !defined(WINCE)
#define MY_OS_WIN32 1
#elif defined(_WIN32_WCE)
#define MY_OS_WINCE 1
#endif // MY_OS


#if MY_OS_WIN32

#if !defined(_WIN32_WINNT)
#define _WIN32_WINNT 0x0503
#endif /* _WIN32_WINNT */

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_IX86)
#define _X86_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_AMD64)
#define _AMD64_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_M68K)
#define _68K_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_MPPC)
#define _MPPC_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_M_IX86) && !defined(_AMD64_) && defined(_M_IA64)
#if !defined(_IA64_)
#define _IA64_
#endif /* !_IA64_ */
#endif

#ifndef _MAC
#if defined(_68K_) || defined(_MPPC_)
#define _MAC
#endif
#endif /* _MAC */

#if defined(_AMD64_)

#define MY_X64 1
#define ML_AMD64    1

#elif defined(_X86_)

#define ML_X86 1
#define ML_I386 1

#endif

#endif // MY_OS_WIN32

/************************************************************************/
/*  compiler settings                                                   */
/************************************************************************/
#pragma warning(disable:4530 4100 4101 4731 4740 4146 4214 4201 4750 4457 4458 4477 4459 4456)

#if MY_MSC_1500
#pragma warning(suppress:4530)
#endif  // MY_MSC_1500

#if defined(ML_COMPILER_INTEL)
#pragma warning(disable:7 157 170 181 186 869 1899 2557)
#endif

#if MY_COMPILER_MSC < 1300
#define for if(1) for
#endif /* fix vc6 for bug */

#ifndef CPP_DEFINED
#if defined(__cplusplus)
#define CPP_DEFINED 1
#else
#define CPP_DEFINED 0
#endif
#endif // CPP_DEFINED

#if defined(__cplusplus_cli)
#define CPP_CLI_DEFINED 1
#else
#define CPP_CLI_DEFINED 0
#endif // cpp cli

#if !ML_DISABLE_THIRD_LIB

#define INCLUDE_LIB(_lib) comment(lib, #_lib)

#else

#define INCLUDE_LIB(_lib) once

#endif // ML_DISABLE_THIRD_LIB

#define USE_STACK_FRAME_POINTER   "y", off
#define UNUSE_STACK_FRAME_POINTER "y", on

#if !defined(IF_EXIST)
#define IF_EXIST __if_exists
#endif /* IF_EXIST */

#if !defined(IF_NOT_EXIST)
#define IF_NOT_EXIST __if_not_exists
#endif /* IF_NOT_EXIST */

#if !defined(typedef_s)
#define typedef_s(s, d) IF_NOT_EXIST(d) { typedef s d; }

#if SUPPORT_VA_ARGS_MACRO
#define typedef_s2(s, ...) IF_NOT_EXIST(d) { typedef s __VA_ARGS__; }
#endif  // SUPPORT_VA_ARGS_MACRO

#endif /* typedef_s */

#ifndef EXTCPP
#if CPP_DEFINED
#define EXTCPP extern "C++"
#else
#define EXTCPP
#endif
#endif /* EXTCPP */

#ifndef NOVTABLE
#define NOVTABLE __declspec(novtable)
#endif /* NOVTABLE */

#if ML_AMD64

#ifndef ASM
#define ASM
#endif /* ASM */

#ifndef NAKED
#define NAKED
#endif /* ASM */

#if !defined(INLINE_ASM)
#if defined(ML_COMPILER_INTEL)
#define INLINE_ASM __asm
#else
#define INLINE_ASM
#endif
#endif /* INLINE_ASM */

#else // x86

#ifndef ASM
#define ASM __declspec(naked)
#endif /* ASM */

#ifndef NAKED
#define NAKED __declspec(naked)
#endif /* ASM */

#if !defined(INLINE_ASM)
#define INLINE_ASM __asm
#endif /* INLINE_ASM */

#endif // x64 x86

#ifndef MY_DLL_EXPORT
#define MY_DLL_EXPORT __declspec(dllexport)
#endif  /* MY_DLL_EXPORT */

#ifdef _MY_NTLIB_DLL_
#define MY_NTLIB_DLL_EXPORT __declspec(dllexport)
#else
#define MY_NTLIB_DLL_EXPORT
#endif  /* _MY_NTLIB_DLL_ */

#ifndef MY_DLL_IMPORT
#define MY_DLL_IMPORT __declspec(dllimport)
#endif /* MY_DLL_IMPORT */

#if !defined(MY_CRT_IMPORT)
#if defined(_DLL)
#define MY_IMPORT MY_DLL_IMPORT
#else
#define MY_IMPORT
#endif
#endif /* MY_CRT_IMPORT */

#define MY_LIB_NAME MY_LIB

/* C++ ÏÂµÄº¯ÊýÐÞÊÎ */
#if  CPP_DEFINED
#define _ML_C_HEAD_     extern "C" {
#define _ML_C_TAIL_     }
#define _ML_CPP_HEAD_     extern "C++" {
#define _ML_CPP_TAIL_     }
#define ML_NAMESPACE_BEGIN(name) namespace name {
#define ML_NAMESPACE_END }
#define ML_NAMESPACE_END_(name) }
#define DEFAULT_VALUE(type, var, value) type var = value
#else
#define _ML_C_HEAD_
#define _ML_C_TAIL_
#define _ML_CPP_HEAD_
#define _ML_CPP_TAIL_
#define ML_NAMESPACE_BEGIN(name)
#define ML_NAMESPACE_END
#define DEFAULT_VALUE(type, var, value) type var
#endif /* _ML_C_HEAD_ */

#define ML_NAMESPACE ML_NAMESPACE_BEGIN(ml)

#define MY_NAMESPACE_BEGIN  ML_NAMESPACE_BEGIN
#define MY_NAMESPACE_END    ML_NAMESPACE_END

#ifndef ForceInline
#if (MY_COMPILER_MSC >= 1200)
#define ForceInline __forceinline
#else
#define ForceInline __inline
#endif
#endif /* ForceInline */

#ifndef NoInline
#if (MY_COMPILER_MSC >= 1300)
#define NoInline __declspec(noinline)
#else
#define NoInline
#endif
#endif /* NoInline */

#if (defined(_M_IX86) || defined(_M_IA64) || defined(_M_AMD64)) && !defined(MIDL_PASS)
#define DECL_IMPORT __declspec(dllimport)
#define DECL_EXPORT __declspec(dllexport)
#else
#define DECL_IMPORT
#define DECL_EXPORT
#endif

#if !defined(DISABLE_SEH)

#define SEH_TRY     __try
#define SEH_FINALLY __finally
#define SEH_LEAVE   __leave

#if SUPPORT_VA_ARGS_MACRO
#define SEH_EXCEPT(...)  __except(__VA_ARGS__)
#else
#define SEH_EXCEPT  __except
#endif  // SUPPORT_VA_ARGS_MACRO

#else

#define SEH_TRY
#define SEH_FINALLY
#define SEH_LEAVE

#if SUPPORT_VA_ARGS_MACRO
#define SEH_EXCEPT(...) for (int __c_false = 0; __c_false; )
#else
#define SEH_EXCEPT()
#endif  // SUPPORT_VA_ARGS_MACRO

#endif // DISABLE_SEH

#ifndef EXTC
#if CPP_DEFINED
#define EXTC extern "C"
#define EXTC_IMPORT EXTC __declspec(dllimport)
#define EXTC_EXPORT EXTC DECL_EXPORT
#else
#define EXTC
#define EXTC_IMPORT __declspec(dllimport)
#endif
#endif /* EXTC */

#ifndef DECL_NORETURN
#if (MY_COMPILER_MSC >= 1200) && !defined(MIDL_PASS)
#define DECL_NORETURN   __declspec(noreturn)
#else
#define DECL_NORETURN
#endif
#endif

#ifndef DECL_NOTHROW
#if (MY_COMPILER_MSC >= 1200) && !defined(MIDL_PASS)
#define DECL_NOTHROW   __declspec(nothrow)
#else
#define DECL_NOTHROW
#endif
#endif

#ifndef DECL_ALIGN
#if (MY_COMPILER_MSC >= 1300) && !defined(MIDL_PASS)
#define DECL_ALIGN(x)   __declspec(align(x))
#else
#define DECL_ALIGN(x)
#endif
#endif

#ifndef SYSTEM_CACHE_ALIGNMENT_SIZE
#if defined(_AMD64_) || defined(_X86_)
#define SYSTEM_CACHE_ALIGNMENT_SIZE 64
#else
#define SYSTEM_CACHE_ALIGNMENT_SIZE 128
#endif
#endif

#ifndef DECL_CACHEALIGN
#define DECL_CACHEALIGN DECL_ALIGN(SYSTEM_CACHE_ALIGNMENT_SIZE)
#endif

#ifndef DECL_UUID
#if (MY_COMPILER_MSC >= 1100) && CPP_DEFINED
#define DECL_UUID(x)    __declspec(uuid(x))
#else
#define DECL_UUID(x)
#endif
#endif

#ifndef DECL_NOVTABLE
#if (MY_COMPILER_MSC >= 1100) && CPP_DEFINED
#define DECL_NOVTABLE   __declspec(novtable)
#else
#define DECL_NOVTABLE
#endif
#endif

#ifndef DECL_SELECTANY
#if (MY_COMPILER_MSC >= 1100)
#define DECL_SELECTANY  __declspec(selectany)
#else
#define DECL_SELECTANY
#endif
#endif

#ifndef NOP_FUNCTION
#if (MY_COMPILER_MSC >= 1210)
#define NOP_FUNCTION __noop
#else
#define NOP_FUNCTION (void)0
#endif
#endif

#ifndef DECL_ADDRSAFE
#if (MY_COMPILER_MSC >= 1200) && (defined(_M_ALPHA) || defined(_M_AXP64))
#define DECL_ADDRSAFE  __declspec(address_safe)
#else
#define DECL_ADDRSAFE
#endif
#endif

#ifndef DECL_DEPRECATED
#if (MY_COMPILER_MSC >= 1300) && !defined(MIDL_PASS)
#define DECL_DEPRECATED   __declspec(deprecated)
#define DEPRECATE_SUPPORTED
#else
#define DECL_DEPRECATED
#undef  DEPRECATE_SUPPORTED
#endif
#endif

#if !defined(DECL_THREAD) && (defined(MY_COMPILER_MSC) || defined(__INTEL_COMPILER))
#define DECL_THREAD __declspec(thread)
#endif // DECL_THREAD

#ifndef UNUSED_VARIABLE
#define UNUSED_VARIABLE(Var) IF_EXIST(Var) { (Var); }
#endif // UNUSED_VARIABLE

#ifndef True
#define True 1l
#endif /* True */

#ifndef False
#define False 0l
#endif /* False */

#ifndef NULL
#define NULL 0l
#endif /* NULL */

#ifdef CDECL
#undef CDECL
#endif /* CDECL */
#define CDECL __cdecl

#ifdef STDCALL
#undef STDCALL
#endif /* STDCALL */
#define STDCALL __stdcall

#ifdef FASTCALL
#undef FASTCALL
#endif /* STDCALL */

#if ML_AMD64 || CPP_CLI_DEFINED
#define FASTCALL
#else
#define FASTCALL __fastcall
#endif

#ifdef THISCALL
#undef THISCALL
#endif

#ifdef ML_COMPILER_MSC
#define THISCALL __thiscall
#else
#define THISCALL
#endif

#ifndef OPTIONAL
#define OPTIONAL
#endif /* OPTIONAL */

#ifndef RESERVED
#define RESERVED
#endif /* RESERVED */

#if ML_USER_MODE

#if !defined(ARGUMENT_PRESENT)
#define ARGUMENT_PRESENT(ArgumentPointer) ((CHAR *)((ULONG_PTR)(ArgumentPointer)) != (CHAR *)(NULL) )
#define ARGUMENT_NOT_PRESENT(ArgumentPointer) (!ARGUMENT_PRESENT(ArgumentPointer))
#endif

#endif


#if ML_COMPILER_MSC

#define PROPERTY(type, name) \
    __declspec(property(put = __property_set_##name, get = __property_get_##name ) ) type name; \
    typedef type __property_type_##name

#define READONLY_PROPERTY(type, name) \
    __declspec(property(get = __property_get_##name) ) type name; \
    typedef type __property_type_##name; \
    GET(name)

#define WRITEONLY_PROPERTY(type, name) \
    __declspec(property(put = __property_set_##name) ) type name; \
    typedef type property__tmp_type_##name; \
    SET(name)

#define GET(name) __property_type_##name __property_get_##name()
#define SET(name) void __property_set_##name(const __property_type_##name & value)

#endif // msc


#if !defined(INTEL_STATIC)
#if defined(__INTEL_COMPILER)
#define INTEL_STATIC static
#else
#define INTEL_STATIC
#endif
#endif /* INTEL_STATIC */

#if !defined(MY_W64)
#if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && (_MSC_VER >= 1300)
#define MY_W64 __w64
#else
#define MY_W64
#endif
#endif

#endif // _CONFIG_H_2a678057_bcdf_4132_9bc3_d6048ac24434

//#pragma warning(disable:4201)

/************************************************************************/
/*  ÀàÐÍ                                                                */
/************************************************************************/

_ML_C_HEAD_

#if !defined(_WCHAR_T_DEFINED)
typedef unsigned short wchar_t;
#define _WCHAR_T_DEFINED
#endif

#if !CPP_DEFINED

#define nullptr NULL

#endif // cpp

typedef float               Float, *PFloat, *LPFloat;
typedef double              Double, *PDouble, *LPDouble;

typedef char                Char, s8, Int8, *ps8, *PInt8, *PChar;
typedef const char         *PCChar;
typedef wchar_t             WChar, *PWChar;
typedef const wchar_t      *PCWChar;
typedef unsigned char       u8, UChar, UInt8, UInt24, Byte, *pu8, *PByte, *PUInt8, *PUChar;
typedef short               Short, s16, Int16, *ps16, *PInt16, *PShort, *LPShort;
typedef unsigned short      UShort, Word, u16, UInt16, *pu16, *PUInt16, *PWord, *LPWord, *PUShort, *LPUShort;
typedef long                Long, *PLong, *LPLong;
typedef long long           Long64, LongLong, *PLong64, *PLongLong;
typedef unsigned long       Dword, ULong, *PULong, *LPULong, *PDword, *LPDword;
typedef unsigned long long  ULong64, ULongLong, *PULong64, *PULongLong;
typedef void                Void, *PVoid, *LPVoid;
typedef const void         *LPCVoid, *PCVoid;

typedef int                 Bool, Int, s32, Int32, *PInt, *ps32, *PInt32;
typedef unsigned int        UInt, u32, UInt32, *PUInt, *pu32, *PUInt32;

typedef __int64             s64, Int64, *ps64, *PInt64;
typedef unsigned __int64    u64, UInt64, *pu64, *PUInt64;

typedef int(__cdecl *QSORT_COMPARE_ROUTINE)(const void *, const void *);

#if CPP_DEFINED

EXTCPP
template<typename T>
class LambdaCastHelper
{
public:

	typedef T FUNC;
};

#endif // CPP_DEFINED

#define QSortCallbackM(...) (QSORT_COMPARE_ROUTINE)(LambdaCastHelper<int(CDECL *)(__VA_ARGS__)>::FUNC)[] (__VA_ARGS__) -> int


#pragma pack(push, 1)

typedef struct
{
	UShort Offset : 12;
	UShort Type : 4;

} IMAGE_RELOCATION_ADDRESS_ENTRY, *PIMAGE_RELOCATION_ADDRESS_ENTRY;

typedef struct
{
	ULong   VirtualAddress;
	ULong   SizeOfBlock;
	IMAGE_RELOCATION_ADDRESS_ENTRY TypeOffset[1];

} *PIMAGE_BASE_RELOCATION2;

#pragma pack(pop)

#if 0 && CPP_DEFINED

class UInt24
{
protected:
	UInt32 m_Value;

public:
	template<class Type>
	UInt24& operator=(Type Value)
	{
		m_Value = (UInt32)Value & 0x00FFFFFF;
		return m_Value;
	}

	template<class Type>
	UInt24& operator+(Type Value)
	{
		m_Value = (m_Value + Value) & 0x00FFFFFF;
	}
};

#endif // CPP_DEFINED


#if defined(MY_X64)
typedef __int64 Int_Ptr, *PInt_Ptr;
typedef unsigned __int64 UInt_Ptr, *PUInt_Ptr;

typedef __int64 Long_Ptr, *PLong_Ptr, LongPtr, *PLongPtr;
typedef unsigned __int64 ULong_Ptr, *PULong_Ptr, ULongPtr, *PULongPtr;
#else
typedef int MY_W64 Int_Ptr, *PInt_Ptr;
typedef unsigned int MY_W64 UInt_Ptr, *PUInt_Ptr;

typedef long MY_W64 Long_Ptr, *PLong_Ptr, LongPtr, *PLongPtr;
typedef unsigned long MY_W64 ULong_Ptr, *PULong_Ptr, ULongPtr, *PULongPtr;
#endif

typedef ULong_Ptr SizeT, *PSizeT;
typedef Long_Ptr  SSizeT, *PSSizeT;

#define MAX_SHORT  (Short) (0x7FFF)
#define MAX_USHORT (UShort)(0xFFFF)
#define MAX_INT    (Int)   (0x7FFFFFFF)
#define MAX_UINT   (UInt)  (0xFFFFFFFF)
#define MAX_INT64  (Int64) (0x7FFFFFFFFFFFFFFF)
#define MAX_UINT64 (UInt64)(0xFFFFFFFFFFFFFFFF)
#define MAX_NTPATH  0x220

#if CPP_DEFINED

IF_NOT_EXIST(_PVFV)
{
	typedef void (CDECL *_PVFV)(void);
	typedef int  (CDECL *_PIFV)(void);
	typedef void (CDECL *_PVFI)(int);
}

EXTC _PVFV __xi_a, __xi_z, __xc_a, __xc_z;

inline void my_initterm(_PVFV *pfbegin, _PVFV *pfend)
{
	/*
	* walk the table of function pointers from the bottom up, until
	* the end is encountered.  Do not skip the first entry.  The initial
	* value of pfbegin points to the first valid entry.  Do not try to
	* execute what pfend points to.  Only entries before pfend are valid.
	*/
	while (pfbegin < pfend)
	{
		/*
		* if current table entry is non-NULL, call thru it.
		*/
		if (*pfbegin != NULL)
			(**pfbegin)();
		++pfbegin;
	}
}

#endif // CPP_DEFINED

#define DR7_LEN_1_BYTE  1
#define DR7_LEN_2_BYTE  2
#define DR7_LEN_4_BYTE  3
#define DR7_RW_EXECUTE  0
#define DR7_RW_WRITE    1
#define DR7_RW_ACCESS   3

#pragma pack(1)

typedef union
{
	ULong Dr6;
	struct
	{
		Byte B0 : 1;
		Byte B1 : 1;
		Byte B2 : 1;
		Byte B3 : 1;
		Byte Reserve1 : 8;
		Byte Reserve2 : 2;
		Byte BD : 1;
		Byte BS : 1;
		Byte BT : 1;
	};

} DR6_INFO, *PDR6_INFO;

typedef union
{
	ULong Dr7;
	struct
	{
		Byte L0 : 1;    // 0x01
		Byte G0 : 1;    // 0x02
		Byte L1 : 1;    // 0x03
		Byte G1 : 1;    // 0x04
		Byte L2 : 1;    // 0x05
		Byte G2 : 1;    // 0x06
		Byte L3 : 1;    // 0x07
		Byte G3 : 1;    // 0x08
		Byte LE : 1;    // 0x09
		Byte GE : 1;    // 0x0A
		Byte Reserve : 3;    // 0x0B
		Byte GD : 1;    // 0x0E
		Byte Reserve2 : 2;    // 0x0F
		Byte RW0 : 2;    // 0x11
		Byte LEN0 : 2;    // 0x13
		Byte RW1 : 2;    // 0x15
		Byte LEN1 : 2;    // 0x17
		Byte RW2 : 2;    // 0x19
		Byte LEN2 : 2;    // 0x1B
		Byte RW3 : 2;    // 0x1D
		Byte LEN3 : 2;    // 0x1F
	};
} DR7_INFO, *PDR7_INFO;

typedef struct
{
	ULong_Ptr Rdi;
	ULong_Ptr Rsi;
	ULong_Ptr Rbp;
	ULong_Ptr Rsp;
	ULong_Ptr Rbx;
	ULong_Ptr Rdx;
	ULong_Ptr Rcx;
	ULong_Ptr Rax;

} PUSHAD_REGISTER, *PPUSHAD_REGISTER;

typedef union
{
	struct
	{
		ULong LowPart;
		Long  HighPart;
	};
	Long64 QuadPart;
} Large_Integer, *PLarge_Integer, *LPLarge_Integer;

typedef union
{
	struct
	{
		ULong LowPart;
		ULong HighPart;
	};
	ULong64 QuadPart;
} ULarge_Integer, *PULarge_Integer, *LPULarge_Integer;

typedef union
{
	struct
	{
		UInt16 w1;
		UInt16 w2;
		UInt16 w3;
		UInt16 w4;
		UInt16 w5;
		UInt16 w6;
		UInt16 w7;
		Int16  w8;
	};

	struct
	{
		UInt32 d1;
		UInt32 d2;
		UInt32 d3;
		Int32  d4;
	};

	struct
	{
		ULarge_Integer q1;
		Large_Integer  q2;
	};
} MMXRegister;

typedef union
{
	LPVoid  lpBuffer;
	PByte   pbBuffer;
	PUInt16 pBuffer16;
	PUInt32 pBuffer32;
	PUInt64 pBuffer64;
	PLarge_Integer  pLi;
	PULarge_Integer pULi;
} MultiTypePointer;

#pragma pack()

#if !CPP_DEFINED
typedef unsigned char bool, *pbool;
#define inline __inline
#else
typedef bool *pbool;
#endif /* __cplusplus */

#if MY_UNICODE_ENABLE
typedef WChar TChar;
#else
typedef Char TChar;
#endif /* UNICODE */

typedef TChar *PTChar;
typedef const TChar *PCTChar;

#if MY_OS_WIN32 && !ML_AMD64

ForceInline Void FASTCALL DebugBreakPoint()
{
	__debugbreak();
}

ForceInline Int CDECL _purecall2()
{
	DebugBreakPoint();
	return 0;
}

ForceInline int CDECL _purecall()
{
	DebugBreakPoint();
	return 0;
}

#endif

// override global operator new/delete

#if !defined(MYAPI)
#define MYAPI(funcname) funcname
#endif

#if ML_KERNEL_MODE
/*
inline PVOID _KiNewAllocate(HANDLE HeapBase, ULONG Flags, SIZE_T Bytes)
{
ULONG_PTR PoolType = (ULONG_PTR)HeapBase;
return AllocateMemory(Bytes, PoolType);
}

BOOLEAN _KiDelete(HANDLE HeapBase, ULONG Flags, LPVOID Memory)
{
FreeMemory(Memory);
}
*/
#define NEW_ALLOC_API(PoolType, Flags, Bytes) AllocateMemory(Bytes, (POOL_TYPE)(ULONG_PTR)(PoolType))
#define NEW_FREE_API(HeapBase, Flags, Memory) FreeMemory(Memory)

#else // r3

#if USE_CRT_ALLOC
#define MY_OPNEW_ALLOC(n) malloc(n)
#define MY_OPNEW_FREE(p)  free(p)
#else
#define MY_OPNEW_ALLOC(n) HeapAlloc(GetProcessHeap(), 0, n)
#define MY_OPNEW_FREE(p)  HeapFree(GetProcessHeap(), 0, p)
#endif

#if USE_NT_VER
#define NEW_ALLOC_API   RtlAllocateHeap
#define NEW_FREE_API    RtlFreeHeap
#else
#define NEW_ALLOC_API   HeapAlloc
#define NEW_FREE_API    HeapFree
#endif // USE_NT_VER

#endif // r0

#ifndef SAFE_DELETE
#define SAFE_DELETE(p) if (p) \
                           { \
                               delete (p); \
                               (p) = NULL; \
                           }
#endif // SAFE_DELETE

#ifndef SAFE_FREE
#define SAFE_FREE(p) if (p) \
                           { \
                               MY_OPNEW_FREE(p); \
                               (p) = NULL; \
                           }
#endif // SAFE_FREE

#if CPP_DEFINED

// && (defined(_INC_MALLOC) || defined(_WINDOWS_))

#define OVERLOAD_OP_NEW  \
    inline Void* CDECL operator new[](size_t size)\
    {\
        return size ? MY_OPNEW_ALLOC(size) : NULL;\
    }\
    \
    inline Void* CDECL operator new(size_t size)\
    {\
        return (Void *)(new char[size]);\
    }\
    \
    inline Void CDECL operator delete(Void *p)\
    {\
        if (p != NULL) \
            MY_OPNEW_FREE(p);\
    }\
    \
    inline Void CDECL operator delete[](Void *p)\
    {\
        delete(p);\
    }

#define OVERLOAD_CPP_NEW_WITH_HEAP(NewHeap) \
    inline PVoid CDECL operator new[](size_t Size) \
    { \
        return NEW_ALLOC_API((NewHeap), 0, Size); \
    } \
    inline PVoid CDECL operator new(size_t Size) \
    { \
        return operator new[](Size); \
    } \
    inline Void CDECL operator delete(PVoid pBuffer) \
    { \
        if (pBuffer != NULL) \
            NEW_FREE_API((NewHeap), 0, pBuffer); \
    } \
    inline Void CDECL operator delete[](PVoid pBuffer) \
    { \
        delete pBuffer; \
    }

#define OVERLOAD_CPP_METHOD_NEW_WITH_HEAP(NewHeap) \
    inline PVoid CDECL operator new[](size_t Size) \
    { \
        return NEW_ALLOC_API((NewHeap), 0, Size); \
    } \
    inline PVoid CDECL operator new(size_t Size) \
    { \
        return operator new[](Size); \
    } \
    inline Void CDECL operator delete(PVoid pBuffer) \
    { \
        if (pBuffer != NULL) \
            NEW_FREE_API((NewHeap), 0, pBuffer); \
    } \
    inline Void CDECL operator delete[](PVoid pBuffer) \
    { \
        delete pBuffer; \
    }

#else

#define OVERLOAD_OP_NEW
#define OVERLOAD_CPP_NEW_WITH_HEAP(Heap)
#define OVERLOAD_CPP_METHOD_NEW_WITH_HEAP(Heap)

#endif /* __cplusplus */


#define ML_OVERLOAD_NEW \
            inline PVoid CDECL operator new[](size_t Size) \
            { \
                return AllocateMemoryP(Size); \
            } \
            inline PVoid CDECL operator new(size_t Size) \
            { \
                return operator new[](Size); \
            } \
            inline Void CDECL operator delete(PVoid Buffer) \
            { \
                if (Buffer != NULL) \
                    FreeMemoryP(Buffer); \
            } \
            inline Void CDECL operator delete(PVoid Buffer, UInt_Ptr) \
            { \
                if (Buffer != NULL) \
                    FreeMemoryP(Buffer); \
            } \
            inline Void CDECL operator delete[](PVoid Buffer) \
            { \
                delete Buffer; \
            } \
            inline Void CDECL operator delete[](PVoid Buffer, UInt_Ptr) \
            { \
                delete Buffer; \
            }

_ML_C_TAIL_

//#pragma warning(default:4201)

#endif // _TYPES_H_54e4879c_024a_491f_b990_859f407442fe

#if ML_DEBUG_KERNEL

#if ML_X86

#define DEBUG_BREAK_POINT     DbgBreakPoint

#elif ML_AMD64

#define DEBUG_BREAK_POINT     DbgBreakPoint

#endif // arch

#if SUPPORT_VA_ARGS_MACRO
#define DebugPrint(...)         DbgPrint(__VA_ARGS__)
#else
#define DebugPrint  DbgPrint
#endif

#else

#define DEBUG_BREAK_POINT()

#if SUPPORT_VA_ARGS_MACRO
#define DebugPrint(...)
#else
#define DebugPrint()
#endif

#endif /* ML_DEBUG_KERNEL */

#define BP DEBUG_BREAK_POINT

#define RTL_CONST_STRING(_str, _string) \
            (_str).Length = sizeof(_string) - sizeof((_str).Buffer[0]); \
            (_str).MaximumLength = sizeof(_string); \
            (_str).Buffer = (_string);

enum // ECodePage
{
	CP_SHIFTJIS = 932,
	CP_GBK = 936,
	CP_GB2312 = CP_GBK,
	CP_BIG5 = 950,
	CP_UTF16_LE = 1200,
	CP_UTF16_BE = 1201,
};

#define BOM_UTF8        (UInt32)(0xBFBBEF)
#define BOM_UTF16_LE    (UInt16)(0xFEFF)
#define BOM_UTF16_BE    (UInt16)(0xFFFE)

#define __MAKE_WSTRING(str) L##str
#define MAKE_WSTRING(str) __MAKE_WSTRING(str)

#define ASM_UNIQUE() INLINE_ASM mov eax, __LINE__

#define ASM_DUMMY(Bytes) ASM_DUMMY_##Bytes

#define ASM_DUMMY_1 INLINE_ASM nop
#define ASM_DUMMY_2 INLINE_ASM mov eax, eax

// lea eax, [eax+0];
#define ASM_DUMMY_3 INLINE_ASM __emit 0x8D INLINE_ASM __emit 0x40 INLINE_ASM __emit 0x00

// // lea esi, [esi]
#define ASM_DUMMY_4 INLINE_ASM __emit 0x8D \
                    INLINE_ASM __emit 0x74 \
                    INLINE_ASM __emit 0x26 \
                    INLINE_ASM __emit 0x00

#define ASM_DUMMY_5 INLINE_ASM mov eax, 1
#define ASM_DUMMY_6 INLINE_ASM __emit 0x8D INLINE_ASM __emit 0x80 INLINE_ASM __emit 0x00 INLINE_ASM __emit 0x00 INLINE_ASM __emit 0x00 INLINE_ASM __emit 0x00

#define ASM_DUMMY_7 INLINE_ASM __emit 0x8D \
                    INLINE_ASM __emit 0xB4 \
                    INLINE_ASM __emit 0x26 \
                    INLINE_ASM __emit 0x00 \
                    INLINE_ASM __emit 0x00 \
                    INLINE_ASM __emit 0x00 \
                    INLINE_ASM __emit 0x00

#define ASM_DUMMY_AUTO() INLINE_ASM mov eax, 1 INLINE_ASM mov ecx, 1 INLINE_ASM mov edx, 1 ASM_UNIQUE() INLINE_ASM ret

#if !defined(_M_IA64)
#define MEMORY_PAGE_SIZE (4 * 1024)
#else
#define MEMORY_PAGE_SIZE (8 * 1024)
#endif

#define NO_BREAK

#define NT6_LIB(lib) "D:/Dev/Windows Kits/8.0/Lib/win8/um/x86/" #lib

#define LOOP_ALWAYS for (;;)
#define LOOP_FOREVER LOOP_ALWAYS
#define LOOP_ONCE   for (Bool __condition_ = True; __condition_; __condition_ = False)

#if !defined(BREAK_IF)
#define BREAK_IF(c) if (c) break;
#endif /* BREAK_IF */

#if !defined(CONTINUE_IF)
#define CONTINUE_IF(c) if (c) continue;
#endif /* CONTINUE_IF */

#if !defined(RETURN_IF)
#define RETURN_IF(c, r) if (c) return r
#endif /* RETURN_IF */

#if !defined(countof)
#define countof(x) (sizeof((x)) / sizeof(*(x)))
#endif /* countof */

#if !defined(CONST_STRLEN)
#define CONST_STRLEN(str) (countof(str) - 1)
#define CONST_STRSIZE(str) (CONST_STRLEN(str) * sizeof(str[0]))
#endif // CONST_STRLEN

#if !defined(bitsof)
#define bitsof(x) (sizeof(x) * 8)
#endif /* bitsof */

#define FIELD_BASE(address, type, field) (type *)((ULONG_PTR)address - (ULONG_PTR)&((type *)0)->field)
#define FIELD_TYPE(_Type, _Field)  TYPE_OF(((_Type*)0)->_Field)

#ifndef FIELD_SIZE
#define FIELD_SIZE(type, field) (sizeof(((type *)0)->field))
#endif // FIELD_SIZE

#define SET_FLAG(_V, _F)    ((_V) |= (_F))
#define CLEAR_FLAG(_V, _F)  ((_V) &= ~(_F))
#define FLAG_ON(_V, _F)     (!!((_V) & (_F)))
#define FLAG_OFF(_V, _F)     (!FLAG_ON(_V, _F))

#if !defined(TEST_BIT)
#define TEST_BIT(value, bit) ((value) & (1 << bit))
#endif /* TEST_BIT */

#if !defined(TEST_BITS)
#define TEST_BITS(value, bits) (Bool)(!!((value) & (bits)))
#endif /* TEST_BITS */

#if !defined(ROUND_DOWN)
#define ROUND_DOWN(Value, Multiple) ((Value) / (Multiple) * (Multiple))
#endif /* ROUND_DOWN */

#if !defined(ROUND_UP)
#define ROUND_UP(Value, Multiple) (ROUND_DOWN((Value) + (Multiple) - 1, (Multiple)))
#endif /* ROUND_UP */

#if !defined(IN_RANGE)
#define IN_RANGE(low, value, high) (((low) <= (value)) && (value) <= (high))
#define IN_RANGEEX(low, value, high) (((low) <= (value)) && (value) < (high))
#endif

#if !defined(MEMORY_PAGE_ADDRESS)
#define MEMORY_PAGE_ADDRESS(Address) (ROUND_DOWN((ULongPtr)(Address), MEMORY_PAGE_SIZE))
#endif /* MEMORY_PAGE_ADDRESS */

#if defined(DEFAULT_VALUE)
#undef DEFAULT_VALUE
#endif // DEFAULT_VALUE

#if CPP_DEFINED
#define DEFAULT_VALUE(type, var, value) type var = value
#define DEF_VAL(var, value)             var = value
#else
#define DEFAULT_VALUE(type, var, value) type var
#define DEF_VAL(var, value)             var
#endif //CPP_DEFINED

#if defined(__INTEL_COMPILER)
#pragma warning(disable:1479)
#endif

#define MAKE_UNIQUE_NAME2(n) _##n
#define MAKE_UNIQUE_NAME(n) MAKE_UNIQUE_NAME2(n)
#define DUMMY_STRUCT(n) DECL_ALIGN(1) struct { char _[n]; } MAKE_UNIQUE_NAME(__LINE__)
// #define DUMMY_STRUCT(size) DECL_ALIGN(1) struct { Byte __dummy[size]; }


#define MAKE_NAME_PREFIX_(prefix, n) prefix##n
#define MAKE_NAME_PREFIX(prefix, n) MAKE_NAME_PREFIX_(prefix, n)

#define GetStructMemberOffset(type, member_begin, member_end) \
    (PByte)&(*(type*)0).member_end - (PByte)&(*(type*)0).member_begin

#if CPP_DEFINED

template<class FunctionType, class FunctionAddress>
ForceInline
FunctionType GetRoutinePtr(FunctionType, FunctionAddress Address)
{
	union
	{
		FunctionType    _Addr1;
		FunctionAddress _Addr2;
	};

	_Addr2 = Address;

	return _Addr1;
}

#if SUPPORT_VA_ARGS_MACRO

#define CallFuncPtr(RoutineType, RoutineAddr, ...) ((TYPE_OF(RoutineType)*)(RoutineAddr))(__VA_ARGS__)

#endif // SUPPORT_VA_ARGS_MACRO

#endif

//#if CPP_DEFINED
/*
template<class Type>
ForceInline const Type& MY_MAX(const Type &Value1, const Type &Value2)
{
return Value1 < Value2 ? Value2 : Value1;
}

template<class Type>
ForceInline const Type& MY_MIN(const Type &Value1, const Type &Value2)
{
return Value2 < Value1 ? Value2 : Value1;
}
*/
//#else // CPP_DEFINED

#define ML_MAX(a, b) ((a) < (b) ? (b) : (a))
#define ML_MIN(a, b) ((a) < (b) ? (a) : (b))

#define MY_MAX ML_MAX
#define MY_MIN ML_MIN

//#endif // CPP_DEFINED

#define CHAR_UPPER(ch) (IN_RANGE('a', (ch), 'z') ? ((ch) & (Byte)0xDF) : ch)
#define CHAR_LOWER(ch) (IN_RANGE('A', (ch), 'Z') ? ((ch) | (Byte)~0xDF) : ch)

#define _CHAR_UPPER4W(ch) (UInt64)((ch) & 0xFFDFFFDFFFDFFFDF)
#define CHAR_UPPER4W(ch) _CHAR_UPPER4W((UInt64)(ch))
#define CHAR_UPPER3W(ch) (UInt64)(CHAR_UPPER4W(ch) & 0x0000FFFFFFFFFFFF)
#define CHAR_UPPER2W(ch) (UInt64)(CHAR_UPPER4W(ch) & 0x00000000FFFFFFFF)
#define CHAR_UPPER1W(ch) (UInt64)(CHAR_UPPER4W(ch) & 0x000000000000FFFF)

#define _CHAR_UPPER4(ch) (UInt32)((ch) & 0xDFDFDFDF)
#define CHAR_UPPER4(ch) (UInt32)_CHAR_UPPER4((UInt32)(ch))
#define CHAR_UPPER3(ch) (UInt32)(CHAR_UPPER4(ch) & 0x00FFFFFF)
#define CHAR_UPPER2(ch) (UInt32)(CHAR_UPPER4(ch) & 0x0000FFFF)
#define CHAR_UPPER1(ch) (UInt32)(CHAR_UPPER4(ch) & 0x000000FF)
#define CHAR_UPPER8(ch) ((UInt64)(ch) & 0xDFDFDFDFDFDFDFDF)

#define _TAG2(s) ((((s) << 8) | ((s) >> 8)) & 0xFFFF)
#define TAG2(s) _TAG2((u16)(s))

#define _TAG3(s) ( \
                (((s) >> 16) & 0xFF)       | \
                (((s)        & 0xFF00))    | \
                (((s) << 16) & 0x00FF0000) \
                )
#define TAG3(s) _TAG3((u32)(s))

#define _TAG4(s) ( \
                (((s) >> 24) & 0xFF)       | \
                (((s) >> 8 ) & 0xFF00)     | \
                (((s) << 24) & 0xFF000000) | \
                (((s) << 8 ) & 0x00FF0000) \
                )
#define TAG4(s) _TAG4((u32)(s))

#define TAG8(left, right) (((UInt64)TAG4(right) << 32) | TAG4(left))

#define _TAG2W(x) (((x) & 0xFF) << 16 | ((x) & 0xFF00) >> 8)
#define TAG2W(x) (UInt32)_TAG2W((UInt32)(x))

#define _TAG3W(x) (TAG4W(x) >> 16)
#define TAG3W(x) (UInt64)_TAG3W((UInt64)(x))

#define _TAG4W(x) (((UInt64)TAG2W((x) & 0xFFFF) << 32) | ((UInt64)TAG2W((x) >> 16)))
#define TAG4W(x) (UInt64)_TAG4W((UInt64)(x))

#pragma warning(disable:4310)
#define SWAP2(v) (u16)(((u32)(v) << 8) | ((u16)(v) >> 8))
#define SWAPCHAR(v) ((u32)SWAP2(v))

#define LoByte(v)  (u8) ((v & 0xFF))
#define HiByte(v)  (u8) (((v) >> 8) & 0xFF)
#define LoWord(v)  (u16)((v) & 0xFFFF)
#define HiWord(v)  (u16)(((v) >> 16) & 0xFFFF)
#define LoDword(v) (u32)((v))
#define HiDword(v) (u32)(((v) >> 32))

#define MakeLong(l, h)   (long)((s32)(l) | ((s32)(h) << 16))
#define MakeLong64(l, h) (s64)((s64)(l) | (s64)(h) << 32)

#define MakeDword(l, h) (u32)((u32)(l) | ((u32)(h) << 16))
#define MakeQword(l, h) (u64)((u64)(l) | (u64)(h) << 32)

#define MAKEINTRESA(i) ((PChar)(Word)(i))
#define MAKEINTRESW(i) ((PWChar)(Word)(i))

#define STRTOULONG(x) (ULong_Ptr)(x)

#define ML_IP_ADDRESS(a1, a2, a3, a4) ((a1) | ((a2) << 8) | ((a3) << 16) | ((a4) << 24))
#define ML_PORT(_port) SWAP2(_port)

#define FOR_EACH(_it, _base, _n) for (auto _Count = ( ((_it) = (_base)), (_n)); _Count != 0; ++(_it), --_Count)
#define FOR_EACH_REVERSE(_it, _base, _n) for (auto _Count = ( ((_it) = (_base) + (_n) - 1), (_n)); _Count != 0; --(_it), --_Count)
#define FOR_EACH_ARRAY(_it, _arr) FOR_EACH(_it, _arr, countof(_arr))
#define FOR_EACH_S(_it, _base, _n, _size) for (auto _Count = ( ((_it) = (_base)), (_n)); _Count != 0; ((_it) = PtrAdd(_it, _size)), --_Count)
#define FOR_EACH_X(_it, _base, _n) for (auto _Count = ( ((_it) = (_base)), (_n); _Count != 0; ++(_it), --(_n), --_Count)

#define FOR_EACH_FORWARD(_it, _n) { (_it) += (_n); (_Count) += (_n); }
#define FOR_EACH_BACKWARD(_it, _n) { (_it) -= (_n); (_Count) -= (_n); }

#if MY_UNICODE_ENABLE
#define MAKEINTRES MAKEINTRESW
#else
#define MAKEINTRES MAKEINTRESA
#endif /* UNICODE */


#define DEFINED_HRESULT(failed, facility, code) \
            ((HRESULT)(((failed) << 31) | ((facility) << 16) | (code)))

#define SET_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) \
        EXTC const GUID DECLSPEC_SELECTANY name \
                = { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }

#define DECL_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) \
        EXTC const GUID FAR name

#endif // _MACROS_H_6cd488df_3b68_4112_a937_9fcfa63eb723
#ifndef _MACROSPLUS_H_86ea4111_75e2_4619_8573_5f8575474b66_
#define _MACROSPLUS_H_86ea4111_75e2_4619_8573_5f8575474b66_


#if CPP_DEFINED

template<class T>
inline void SafeReleaseT(T*& Object)
{
	if (Object != NULL)
	{
		Object->Release();
		Object = NULL;
	}
}

template<class T>
inline void SafeDeleteT(T*& Object)
{
	if (Object != NULL)
	{
		delete Object;
		Object = NULL;
	}
}

template<class T>
inline void SafeDeleteArrayT(T*& Object)
{
	if (Object != NULL)
	{
		delete[] Object;
		Object = NULL;
	}
}

/************************************************************************
bsearch
************************************************************************/

#define BinarySearchM(ValuePtr, Value, Context) [&] (auto ValuePtr, auto Value, auto Context)

template<class ArgType, class ValueType, class RoutineContext, class CompareRoutine>
ArgType
BinarySearch(
ArgType             First,
ArgType             Last,
const ValueType&    Value,
CompareRoutine      CompareFunction,
RoutineContext      Context = NULL
)
{
	ULONG_PTR   Left, Right, Middle;
	LONG_PTR    Result;

	if (First == Last)
		return CompareFunction(&First[0], Value, Context) == 0 ? First : NULL;

	Left = 0;
	Right = Last - First - 1;

	Result = CompareFunction(&First[0], Value, Context);
	if (Result > 0)
		return NULL;

	if (Result == 0)
		return First;

	Result = CompareFunction(&Last[-1], Value, Context);
	if (Result < 0)
		return NULL;

	if (Result == 0)
		return &Last[-1];

	while (Left < Right)
	{
		Middle = (Right - Left) / 2 + Left;

		Result = CompareFunction(&First[Middle], Value, Context);
		if (Result == 0)
			return &First[Middle];

		if (Result < 0)
		{
			Left = Middle + 1;
		}
		else
		{
			Right = Middle - 1;
		}
	}

	Result = CompareFunction(&First[Left], Value, Context);

	return Result == 0 ? &First[Left] : NULL;
}

/************************************************************************
type_of
from boost
************************************************************************/

#define MY_STATIC_CONSTANT(type, seq) static const type seq

# if (_MSC_VER >= 1300) && defined(_MSC_EXTENSIONS)
template<int N> struct the_counter;

template<typename T, int N = 5/*for similarity*/>
struct encode_counter
{
	__if_exists(the_counter<N + 256>)
	{
		MY_STATIC_CONSTANT(unsigned, count = (encode_counter<T, N + 257>::count));
	}
	__if_not_exists(the_counter<N + 256>)
	{
		__if_exists(the_counter<N + 64>)
		{
			MY_STATIC_CONSTANT(unsigned, count = (encode_counter<T, N + 65>::count));
		}
		__if_not_exists(the_counter<N + 64>)
		{
			__if_exists(the_counter<N + 16>)
			{
				MY_STATIC_CONSTANT(unsigned, count = (encode_counter<T, N + 17>::count));
			}
			__if_not_exists(the_counter<N + 16>)
			{
				__if_exists(the_counter<N + 4>)
				{
					MY_STATIC_CONSTANT(unsigned, count = (encode_counter<T, N + 5>::count));
				}
				__if_not_exists(the_counter<N + 4>)
				{
					__if_exists(the_counter<N>)
					{
						MY_STATIC_CONSTANT(unsigned, count = (encode_counter<T, N + 1>::count));
					}
					__if_not_exists(the_counter<N>)
					{
						MY_STATIC_CONSTANT(unsigned, count = N);
						typedef the_counter<N> type;
					}
				}
			}
		}
	}
};

# define MY_TYPEOF_INDEX(T) (encode_counter<T>::count)
# define MY_TYPEOF_NEXT_INDEX(next)
# else
template<int N> struct encode_counter : encode_counter<N - 1> {};
template<> struct encode_counter<0> {};

//Need to default to a larger value than 4, as due to MSVC's ETI errors. (sizeof(int)==4)
char(*encode_index(...))[5];

# define MY_TYPEOF_INDEX(T) (sizeof(*encode_index((encode_counter<1005>*)0)))
# define MY_TYPEOF_NEXT_INDEX(next) friend char (*encode_index(encode_counter<next>*))[next];
# endif

//Typeof code

# if _MSC_VER == 1300
template<typename ID>
struct msvc_extract_type
{
	template<bool>
	struct id2type_impl;

	typedef id2type_impl<true> id2type;
};

template<typename T, typename ID>
struct msvc_register_type : msvc_extract_type<ID>
{
	template<>
	struct id2type_impl<true>  //VC7.0 specific bugfeature
	{
		typedef T type;
	};
};
#elif _MSC_VER >= 1400
struct msvc_extract_type_default_param {};

template<typename ID, typename T = msvc_extract_type_default_param>
struct msvc_extract_type;

template<typename ID>
struct msvc_extract_type<ID, msvc_extract_type_default_param> {
	template<bool>
	struct id2type_impl;

	typedef id2type_impl<true> id2type;
};

template<typename ID, typename T>
struct msvc_extract_type : msvc_extract_type<ID, msvc_extract_type_default_param>
{
	template<>
	struct id2type_impl<true>  //VC8.0 specific bugfeature
	{
		typedef T type;
	};
	template<bool>
	struct id2type_impl;

	typedef id2type_impl<true> id2type;
};

template<typename T, typename ID>
struct msvc_register_type : msvc_extract_type<ID, T>
{
};
# else
template<typename ID>
struct msvc_extract_type
{
	struct id2type;
};

template<typename T, typename ID>
struct msvc_register_type : msvc_extract_type<ID>
{
	typedef msvc_extract_type<ID> base_type;
	struct base_type::id2type // This uses nice VC6.5 and VC7.1 bugfeature
	{
		typedef T type;
	};
};
# endif

template<int N> struct int_;

template<int ID>
struct msvc_typeid_wrapper {
	typedef typename msvc_extract_type<int_<ID> >::id2type id2type;
	typedef typename id2type::type type;
};
//Workaround for ETI-bug for VC6 and VC7
template<>
struct msvc_typeid_wrapper<1> {
	typedef msvc_typeid_wrapper<1> type;
};
//Workaround for ETI-bug for VC7.1
template<>
struct msvc_typeid_wrapper<4> {
	typedef msvc_typeid_wrapper<4> type;
};

//Tie it all together
template<typename T>
struct encode_type
{
	//Get the next available compile time constants index
	MY_STATIC_CONSTANT(unsigned, value = MY_TYPEOF_INDEX(T));
	//Instantiate the template
	typedef typename msvc_register_type<T, int_<value> >::id2type type;
	//Set the next compile time constants index
	MY_STATIC_CONSTANT(unsigned, next = value + 1);
	//Increment the compile time constant (only needed when extensions are not active
	MY_TYPEOF_NEXT_INDEX(next);
};

template<class T>
struct sizer
{
	typedef char(*type)[encode_type<T>::value];
};
# if 0 && (_MSC_VER >= 1310)
template<typename T> typename disable_if<
	typename is_function<T>::type,
	typename sizer<T>::type>::type encode_start(T const&);

template<typename T> typename enable_if<
	typename is_function<T>::type,
	typename sizer<T>::type>::type encode_start(T&);
# else
template<typename T>
typename sizer<T>::type encode_start(T const&);
# endif
template<typename Organizer, typename T>
msvc_register_type<T, Organizer> typeof_register_type(const T&, Organizer* = 0);

#if _MSC_VER < 1500

#define TYPE_OF(expr) \
    msvc_typeid_wrapper<sizeof(*encode_start(expr))>::type

#else

#define TYPE_OF decltype

#endif

#define FUNC_POINTER(__func) TYPE_OF(__func)*
#define API_POINTER(__func) TYPE_OF(&__func)
#define PTR_OF(_var) TYPE_OF(_var)*


/************************************************************************
scope exit
************************************************************************/
#pragma warning(disable:4512)

template<typename Lambda>
struct LambdaWrapper
{
	const Lambda &fn;

	ForceInline LambdaWrapper(const Lambda &fn) : fn(fn)
	{
		;
	}

	ForceInline void operator()()
	{
		fn();
	}

	ForceInline ~LambdaWrapper()
	{
		fn();
	}
};

#pragma warning(default:4512)

template<typename ScopeExitRoutine>
ForceInline
LambdaWrapper<ScopeExitRoutine>
CreateScopeExitObject(
const ScopeExitRoutine &ScopeExitFunction
)
{
	return LambdaWrapper<ScopeExitRoutine>(ScopeExitFunction);
}

#define SCOPE_EXIT auto MAKE_NAME_PREFIX(scope_exit_obj_, __LINE__) = CreateScopeExitObject([&] ()
#define SCOPE_EXIT_END )



template<class InIterator, class Function>
ForceInline Function ForEachZ(InIterator _Count, Function _Func)
{
	for (; _Count; --_Count)
		_Func(_Count);

	return (_Func);
}

template<class InIterator, class Function>
ForceInline Function ForEachR(InIterator _First, InIterator _Last, Function _Func)
{
	for (; _First != _Last; --_First)
		_Func(_First);

	return (_Func);
}

template<class InIterator, class Function>
ForceInline Function ForEach(InIterator _First, InIterator _Last, Function _Func)
{
	for (; _First != _Last; ++_First)
		_Func(_First);

	return (_Func);
}

template<ULong_Ptr StringLength>
struct HashStringConst
{
	template<class StringType> static ULong Hash(StringType String, ULong Initial = 0)
	{
		Initial = _rotl(Initial, 0xD) ^ (Byte)(String[0]);
		return HashStringConst<StringLength - 1>::Hash(++String, Initial);
	}
};

template<>
struct HashStringConst<0>
{
	template<class StringType> static ULong Hash(StringType String, ULong Initial = 0)
	{
		return Initial;
	}
};

#define CONST_STRHASH(_str) HashStringConst<CONST_STRLEN((_str))>::Hash(_str)

#endif // CPP_DEFINED

#endif // _MACROSPLUS_H_86ea4111_75e2_4619_8573_5f8575474b66_

#if ML_KERNEL_MODE

//    #include <ntddk.h>

#else

//    #include <winsock2.h>
#include <Windows.h>
#include <Wininet.h>

#pragma warning(disable:4005)

#include <ntstatus.h>

#pragma warning(default:4005)

#endif // MY_NT_DDK

typedef void * POINTER_64 HANDLE64;
typedef HANDLE64 *PHANDLE64;

#ifndef _DLLFUNCTIONNAMEHASH_H_652abbe6_b2d4_402e_9446_94a6b6a57f1a_
#define _DLLFUNCTIONNAMEHASH_H_652abbe6_b2d4_402e_9446_94a6b6a57f1a_

#define NTOSKRNL_AlpcGetHeaderSize                                           0xCE454899u
#define NTOSKRNL_AlpcGetMessageAttribute                                     0x867E8E6Cu
#define NTOSKRNL_AlpcInitializeMessageAttribute                              0xCC6CB66Au
#define NTOSKRNL_CcCanIWrite                                                 0xA5057BF9u
#define NTOSKRNL_CcCoherencyFlushAndPurgeCache                               0x86FFA034u
#define NTOSKRNL_CcCopyRead                                                  0x83E7AA87u
#define NTOSKRNL_CcCopyWrite                                                 0xD502FB99u
#define NTOSKRNL_CcCopyWriteWontFlush                                        0xDB4F21DDu
#define NTOSKRNL_CcDeferWrite                                                0x99C61D0Fu
#define NTOSKRNL_CcFastCopyRead                                              0xB5C43A05u
#define NTOSKRNL_CcFastCopyWrite                                             0xA712BD5Du
#define NTOSKRNL_CcFastMdlReadWait                                           0x3F2DE71Eu
#define NTOSKRNL_CcFlushCache                                                0x28C01DBBu
#define NTOSKRNL_CcGetDirtyPages                                             0x6163BED7u
#define NTOSKRNL_CcGetFileObjectFromBcb                                      0xEA3DEFDEu
#define NTOSKRNL_CcGetFileObjectFromSectionPtrs                              0x4BDBF701u
#define NTOSKRNL_CcGetFileObjectFromSectionPtrsRef                           0xA5F720C2u
#define NTOSKRNL_CcGetFlushedValidData                                       0x3C14052Eu
#define NTOSKRNL_CcGetLsnForFileObject                                       0x17F73B78u
#define NTOSKRNL_CcInitializeCacheMap                                        0x290D6BD6u
#define NTOSKRNL_CcIsThereDirtyData                                          0x3BB34D05u
#define NTOSKRNL_CcIsThereDirtyDataEx                                        0x14E66D4Cu
#define NTOSKRNL_CcMapData                                                   0x9B1DA1A1u
#define NTOSKRNL_CcMdlRead                                                   0x8ADF0AAEu
#define NTOSKRNL_CcMdlReadComplete                                           0x541FD836u
#define NTOSKRNL_CcMdlWriteAbort                                             0x3A11C408u
#define NTOSKRNL_CcMdlWriteComplete                                          0x8CCFC87Du
#define NTOSKRNL_CcPinMappedData                                             0x1B068414u
#define NTOSKRNL_CcPinRead                                                   0x8AF84AB4u
#define NTOSKRNL_CcPrepareMdlWrite                                           0x835C3A24u
#define NTOSKRNL_CcPreparePinWrite                                           0x6B5F7A20u
#define NTOSKRNL_CcPurgeCacheSection                                         0xAAB93280u
#define NTOSKRNL_CcRemapBcb                                                  0x96657BBBu
#define NTOSKRNL_CcRepinBcb                                                  0x96E57481u
#define NTOSKRNL_CcScheduleReadAhead                                         0x8ECC420Cu
#define NTOSKRNL_CcSetAdditionalCacheAttributes                              0xEC470B2Cu
#define NTOSKRNL_CcSetBcbOwnerPointer                                        0x3A0B3ADEu
#define NTOSKRNL_CcSetDirtyPageThreshold                                     0x989FC58Du
#define NTOSKRNL_CcSetDirtyPinnedData                                        0x888B17E0u
#define NTOSKRNL_CcSetFileSizes                                              0x9B8ED5A9u
#define NTOSKRNL_CcSetFileSizesEx                                            0xA6669B2Eu
#define NTOSKRNL_CcSetLogHandleForFile                                       0x8DB94A59u
#define NTOSKRNL_CcSetParallelFlushFile                                      0xBAF1F725u
#define NTOSKRNL_CcSetReadAheadGranularity                                   0x5CDDDAE9u
#define NTOSKRNL_CcTestControl                                               0x526CE8E4u
#define NTOSKRNL_CcUninitializeCacheMap                                      0x228B59E2u
#define NTOSKRNL_CcUnpinData                                                 0xFE92F6BDu
#define NTOSKRNL_CcUnpinDataForThread                                        0x3D2F0D90u
#define NTOSKRNL_CcUnpinRepinnedBcb                                          0xA1334152u
#define NTOSKRNL_CcWaitForCurrentLazyWriterActivity                          0x3DDE6D90u
#define NTOSKRNL_CcZeroData                                                  0x5A878186u
#define NTOSKRNL_CmCallbackGetKeyObjectID                                    0xDEFFCA26u
#define NTOSKRNL_CmGetBoundTransaction                                       0xB1668AD4u
#define NTOSKRNL_CmGetCallbackVersion                                        0xE60A4E00u
#define NTOSKRNL_CmKeyObjectType                                             0x1A455341u
#define NTOSKRNL_CmRegisterCallback                                          0x7F602EFEu
#define NTOSKRNL_CmRegisterCallbackEx                                        0xF9F520C3u
#define NTOSKRNL_CmSetCallbackObjectContext                                  0x4BA76948u
#define NTOSKRNL_CmUnRegisterCallback                                        0x9EE29AFCu
#define NTOSKRNL_DbgBreakPoint                                               0xC164C4B8u
#define NTOSKRNL_DbgBreakPointWithStatus                                     0x7827EBB4u
#define NTOSKRNL_DbgCommandString                                            0xF643D553u
#define NTOSKRNL_DbgLoadImageSymbols                                         0x856B475Du
#define NTOSKRNL_DbgPrint                                                    0x811579B9u
#define NTOSKRNL_DbgPrintEx                                                  0xE60CF59Eu
#define NTOSKRNL_DbgPrintReturnControlC                                      0x934CF710u
#define NTOSKRNL_DbgPrompt                                                   0xA337B356u
#define NTOSKRNL_DbgQueryDebugFilterState                                    0x9F4060BAu
#define NTOSKRNL_DbgSetDebugFilterState                                      0xF6099B90u
#define NTOSKRNL_DbgSetDebugPrintCallback                                    0xB8455C21u
#define NTOSKRNL_DbgkLkmdRegisterCallback                                    0x19A4A453u
#define NTOSKRNL_DbgkLkmdUnregisterCallback                                  0x2B7989D6u
#define NTOSKRNL_EmClientQueryRuleState                                      0x6A597ECFu
#define NTOSKRNL_EmClientRuleDeregisterNotification                          0x9C8528D6u
#define NTOSKRNL_EmClientRuleEvaluate                                        0xBCD735B7u
#define NTOSKRNL_EmClientRuleRegisterNotification                            0x59A8EF7Cu
#define NTOSKRNL_EmProviderDeregister                                        0x31445882u
#define NTOSKRNL_EmProviderDeregisterEntry                                   0xB6D6C67Cu
#define NTOSKRNL_EmProviderRegister                                          0x96FCF620u
#define NTOSKRNL_EmProviderRegisterEntry                                     0xF9A79B39u
#define NTOSKRNL_EmpProviderRegister                                         0x96E0E225u
#define NTOSKRNL_EtwActivityIdControl                                        0x5E29D371u
#define NTOSKRNL_EtwEnableTrace                                              0xDCAC33BEu
#define NTOSKRNL_EtwEventEnabled                                             0x7BCFD665u
#define NTOSKRNL_EtwProviderEnabled                                          0x6EC252A8u
#define NTOSKRNL_EtwRegister                                                 0x4805AF2Bu
#define NTOSKRNL_EtwRegisterClassicProvider                                  0x5A8457BFu
#define NTOSKRNL_EtwSendTraceBuffer                                          0xDD837A12u
#define NTOSKRNL_EtwUnregister                                               0x1C1FB6E6u
#define NTOSKRNL_EtwWrite                                                    0x8963B988u
#define NTOSKRNL_EtwWriteEndScenario                                         0x87F1F183u
#define NTOSKRNL_EtwWriteEx                                                  0x222D2E9Eu
#define NTOSKRNL_EtwWriteStartScenario                                       0xAFFCB4B5u
#define NTOSKRNL_EtwWriteString                                              0x4D2FDB98u
#define NTOSKRNL_EtwWriteTransfer                                            0x5D4991BAu
#define NTOSKRNL_ExAcquireCacheAwarePushLockExclusive                        0xB10A92CAu
#define NTOSKRNL_ExAcquireFastMutexUnsafe                                    0x9D9BB775u
#define NTOSKRNL_ExAcquireResourceExclusiveLite                              0x538E54A2u
#define NTOSKRNL_ExAcquireResourceSharedLite                                 0xE25AA320u
#define NTOSKRNL_ExAcquireRundownProtection                                  0x17A82D54u
#define NTOSKRNL_ExAcquireRundownProtectionCacheAware                        0xCEC4AF7Du
#define NTOSKRNL_ExAcquireRundownProtectionCacheAwareEx                      0xF733B2C5u
#define NTOSKRNL_ExAcquireRundownProtectionEx                                0x505600CDu
#define NTOSKRNL_ExAcquireSharedStarveExclusive                              0xE139D1E3u
#define NTOSKRNL_ExAcquireSharedWaitForExclusive                             0xFDE5FC78u
#define NTOSKRNL_ExAcquireSpinLockExclusive                                  0x9863EDD3u
#define NTOSKRNL_ExAcquireSpinLockExclusiveAtDpcLevel                        0x957F5167u
#define NTOSKRNL_ExAcquireSpinLockShared                                     0x177ADB60u
#define NTOSKRNL_ExAcquireSpinLockSharedAtDpcLevel                           0xA91B8BA9u
#define NTOSKRNL_ExAllocateCacheAwarePushLock                                0x49AFD117u
#define NTOSKRNL_ExAllocateCacheAwareRundownProtection                       0xC8E7856Au
#define NTOSKRNL_ExAllocateFromPagedLookasideList                            0x79AEEC5Bu
#define NTOSKRNL_ExAllocatePool                                              0x2FE5EC31u
#define NTOSKRNL_ExAllocatePoolWithQuota                                     0x7726118Eu
#define NTOSKRNL_ExAllocatePoolWithQuotaTag                                  0xC304E75Du
#define NTOSKRNL_ExAllocatePoolWithTag                                       0xDE26FBD5u
#define NTOSKRNL_ExAllocatePoolWithTagPriority                               0x0419EC76u
#define NTOSKRNL_ExConvertExclusiveToSharedLite                              0xAB7C8D2Fu
#define NTOSKRNL_ExCreateCallback                                            0xAA66711Bu
#define NTOSKRNL_ExDeleteLookasideListEx                                     0xC9D15895u
#define NTOSKRNL_ExDeleteNPagedLookasideList                                 0x996E356Fu
#define NTOSKRNL_ExDeletePagedLookasideList                                  0xECE997DDu
#define NTOSKRNL_ExDeleteResourceLite                                        0xEFAF435Bu
#define NTOSKRNL_ExDesktopObjectType                                         0xE6054841u
#define NTOSKRNL_ExDisableResourceBoostLite                                  0x32BB6684u
#define NTOSKRNL_ExEnterCriticalRegionAndAcquireFastMutexUnsafe              0x286E723Eu
#define NTOSKRNL_ExEnterCriticalRegionAndAcquireResourceExclusive            0x21FBB86Du
#define NTOSKRNL_ExEnterCriticalRegionAndAcquireResourceShared               0x6A09EBCBu
#define NTOSKRNL_ExEnterCriticalRegionAndAcquireSharedWaitForExclusive       0xA04A5252u
#define NTOSKRNL_ExEnterPriorityRegionAndAcquireResourceExclusive            0x74490E5Bu
#define NTOSKRNL_ExEnterPriorityRegionAndAcquireResourceShared               0x06A28EA7u
#define NTOSKRNL_ExEnumHandleTable                                           0xE04580CAu
#define NTOSKRNL_ExEventObjectType                                           0xFB85E6B7u
#define NTOSKRNL_ExExtendZone                                                0x12D6545Bu
#define NTOSKRNL_ExFetchLicenseData                                          0x2E69AA8Bu
#define NTOSKRNL_ExFlushLookasideListEx                                      0x982C5B2Eu
#define NTOSKRNL_ExFreeCacheAwarePushLock                                    0x6C849020u
#define NTOSKRNL_ExFreeCacheAwareRundownProtection                           0xEE032002u
#define NTOSKRNL_ExFreePool                                                  0x82E130A5u
#define NTOSKRNL_ExFreePoolWithTag                                           0x7B4EDD31u
#define NTOSKRNL_ExFreeToPagedLookasideList                                  0x3CFBAFD8u
#define NTOSKRNL_ExGetCurrentProcessorCounts                                 0xF34DC704u
#define NTOSKRNL_ExGetCurrentProcessorCpuUsage                               0x587614F9u
#define NTOSKRNL_ExGetExclusiveWaiterCount                                   0xC7D2A9BCu
#define NTOSKRNL_ExGetLicenseTamperState                                     0xD66D1DA4u
#define NTOSKRNL_ExGetPreviousMode                                           0xAE2AD802u
#define NTOSKRNL_ExGetSharedWaiterCount                                      0x972EAB86u
#define NTOSKRNL_ExInitializeLookasideListEx                                 0x03D0254Fu
#define NTOSKRNL_ExInitializeNPagedLookasideList                             0x44C29578u
#define NTOSKRNL_ExInitializePagedLookasideList                              0xEC577AB8u
#define NTOSKRNL_ExInitializePushLock                                        0x3A08536Du
#define NTOSKRNL_ExInitializeResourceLite                                    0x5A3B41A0u
#define NTOSKRNL_ExInitializeRundownProtection                               0x87A9F19Au
#define NTOSKRNL_ExInitializeRundownProtectionCacheAware                     0x8EC3DC47u
#define NTOSKRNL_ExInitializeZone                                            0x2953DD6Du
#define NTOSKRNL_ExInterlockedAddLargeInteger                                0x159B5C58u
#define NTOSKRNL_ExInterlockedAddLargeStatistic                              0xA8BE1C30u
#define NTOSKRNL_ExInterlockedAddUlong                                       0xAD20E873u
#define NTOSKRNL_ExInterlockedCompareExchange64                              0x5285E51Du
#define NTOSKRNL_ExInterlockedDecrementLong                                  0xA5EE7F8Fu
#define NTOSKRNL_ExInterlockedExchangeUlong                                  0xACB06B99u
#define NTOSKRNL_ExInterlockedExtendZone                                     0x6E8545C0u
#define NTOSKRNL_ExInterlockedFlushSList                                     0x7D937ADDu
#define NTOSKRNL_ExInterlockedIncrementLong                                  0x75EBFF8Fu
#define NTOSKRNL_ExInterlockedInsertHeadList                                 0x0B99A63Eu
#define NTOSKRNL_ExInterlockedInsertTailList                                 0xEB18A62Eu
#define NTOSKRNL_ExInterlockedPopEntryList                                   0x305AC46Fu
#define NTOSKRNL_ExInterlockedPopEntrySList                                  0x317D14FFu
#define NTOSKRNL_ExInterlockedPushEntryList                                  0xE671BFE5u
#define NTOSKRNL_ExInterlockedPushEntrySList                                 0x5E0C4E3Au
#define NTOSKRNL_ExInterlockedRemoveHeadList                                 0xBB168116u
#define NTOSKRNL_ExIsProcessorFeaturePresent                                 0xE1588056u
#define NTOSKRNL_ExIsResourceAcquiredExclusiveLite                           0x3E903642u
#define NTOSKRNL_ExIsResourceAcquiredSharedLite                              0x22809FE5u
#define NTOSKRNL_ExLocalTimeToSystemTime                                     0x2DD7A26Au
#define NTOSKRNL_ExNotifyCallback                                            0x782EF73Au
#define NTOSKRNL_ExQueryAttributeInformation                                 0x3F73245Au
#define NTOSKRNL_ExQueryPoolBlockSize                                        0xD1677BBAu
#define NTOSKRNL_ExQueueWorkItem                                             0x617D509Bu
#define NTOSKRNL_ExRaiseAccessViolation                                      0xCDEC8BDBu
#define NTOSKRNL_ExRaiseDatatypeMisalignment                                 0x0360307Eu
#define NTOSKRNL_ExRaiseException                                            0x61817844u
#define NTOSKRNL_ExRaiseHardError                                            0xC6D5365Au
#define NTOSKRNL_ExRaiseStatus                                               0x134BB81Bu
#define NTOSKRNL_ExReInitializeRundownProtection                             0xF7A890D4u
#define NTOSKRNL_ExReInitializeRundownProtectionCacheAware                   0x4EC6597Eu
#define NTOSKRNL_ExRegisterAttributeInformationCallback                      0x4043367Du
#define NTOSKRNL_ExRegisterCallback                                          0xBF752EFEu
#define NTOSKRNL_ExRegisterExtension                                         0x45195892u
#define NTOSKRNL_ExReinitializeResourceLite                                  0x627BF107u
#define NTOSKRNL_ExReleaseCacheAwarePushLockExclusive                        0xA1E0E6CCu
#define NTOSKRNL_ExReleaseFastMutexUnsafe                                    0x933CF714u
#define NTOSKRNL_ExReleaseFastMutexUnsafeAndLeaveCriticalRegion              0x283FBF06u
#define NTOSKRNL_ExReleaseResourceAndLeaveCriticalRegion                     0xADEC0F13u
#define NTOSKRNL_ExReleaseResourceAndLeavePriorityRegion                     0x0689637Fu
#define NTOSKRNL_ExReleaseResourceForThreadLite                              0xBC8E8A61u
#define NTOSKRNL_ExReleaseResourceLite                                       0xD026E147u
#define NTOSKRNL_ExReleaseRundownProtection                                  0x9392B055u
#define NTOSKRNL_ExReleaseRundownProtectionCacheAware                        0xDE2EDB7Bu
#define NTOSKRNL_ExReleaseRundownProtectionCacheAwareEx                      0xEF701B15u
#define NTOSKRNL_ExReleaseRundownProtectionEx                                0x5646EAB9u
#define NTOSKRNL_ExReleaseSpinLockExclusive                                  0x1C5970D2u
#define NTOSKRNL_ExReleaseSpinLockExclusiveFromDpcLevel                      0xD0D669ECu
#define NTOSKRNL_ExReleaseSpinLockShared                                     0x1472AE5Au
#define NTOSKRNL_ExReleaseSpinLockSharedFromDpcLevel                         0x5054D404u
#define NTOSKRNL_ExRundownCompleted                                          0x5E18CE44u
#define NTOSKRNL_ExRundownCompletedCacheAware                                0xE807233Cu
#define NTOSKRNL_ExSemaphoreObjectType                                       0xCAE29267u
#define NTOSKRNL_ExSetLicenseTamperState                                     0xD66D1CE4u
#define NTOSKRNL_ExSetResourceOwnerPointer                                   0xCB48E586u
#define NTOSKRNL_ExSetResourceOwnerPointerEx                                 0x1B2583EEu
#define NTOSKRNL_ExSetTimerResolution                                        0xB6D0CFD0u
#define NTOSKRNL_ExSizeOfRundownProtectionCacheAware                         0xA2007E0Cu
#define NTOSKRNL_ExSystemExceptionFilter                                     0x7D61C47Du
#define NTOSKRNL_ExSystemTimeToLocalTime                                     0xEE139FB4u
#define NTOSKRNL_ExTryConvertSharedSpinLockExclusive                         0x2F91F2BDu
#define NTOSKRNL_ExUnregisterAttributeInformationCallback                    0x693D265Fu
#define NTOSKRNL_ExUnregisterCallback                                        0x9DE2CFFCu
#define NTOSKRNL_ExUnregisterExtension                                       0xB9391CC0u
#define NTOSKRNL_ExUpdateLicenseData                                         0xFE03153Du
#define NTOSKRNL_ExUuidCreate                                                0xC1B54681u
#define NTOSKRNL_ExVerifySuite                                               0xB5BB4949u
#define NTOSKRNL_ExWaitForRundownProtectionRelease                           0xB1DA1564u
#define NTOSKRNL_ExWaitForRundownProtectionReleaseCacheAware                 0x570C4FBFu
#define NTOSKRNL_ExWindowStationObjectType                                   0x65431844u
#define NTOSKRNL_ExfAcquirePushLockExclusive                                 0x81F4E65Bu
#define NTOSKRNL_ExfAcquirePushLockShared                                    0x0749F577u
#define NTOSKRNL_ExfInterlockedAddUlong                                      0xA2AAEBA3u
#define NTOSKRNL_ExfInterlockedCompareExchange64                             0x2884145Du
#define NTOSKRNL_ExfInterlockedInsertHeadList                                0x8B6DA5DCu
#define NTOSKRNL_ExfInterlockedInsertTailList                                0x6BECA5CCu
#define NTOSKRNL_ExfInterlockedPopEntryList                                  0x0D5A3CCFu
#define NTOSKRNL_ExfInterlockedPushEntryList                                 0xF965B845u
#define NTOSKRNL_ExfInterlockedRemoveHeadList                                0x3BE282F4u
#define NTOSKRNL_ExfReleasePushLock                                          0x403B2B34u
#define NTOSKRNL_ExfReleasePushLockExclusive                                 0x05CE7B5Au
#define NTOSKRNL_ExfReleasePushLockShared                                    0x0441804Du
#define NTOSKRNL_ExfTryAcquirePushLockShared                                 0xE0637275u
#define NTOSKRNL_ExfTryToWakePushLock                                        0x3B4FA990u
#define NTOSKRNL_ExfUnblockPushLock                                          0xA3FFB30Cu
#define NTOSKRNL_Exfi386InterlockedDecrementLong                             0x9B24015Bu
#define NTOSKRNL_Exfi386InterlockedExchangeUlong                             0x927A154Du
#define NTOSKRNL_Exfi386InterlockedIncrementLong                             0x4B21815Bu
#define NTOSKRNL_Exi386InterlockedDecrementLong                              0xE125F01Bu
#define NTOSKRNL_Exi386InterlockedExchangeUlong                              0xE87BE40Du
#define NTOSKRNL_Exi386InterlockedIncrementLong                              0x3120701Bu
#define NTOSKRNL_ExiAcquireFastMutex                                         0x98FC69DAu
#define NTOSKRNL_ExiReleaseFastMutex                                         0x99785347u
#define NTOSKRNL_ExiTryToAcquireFastMutex                                    0x212AB481u
#define NTOSKRNL_FirstEntrySList                                             0x383BFB53u
#define NTOSKRNL_FsRtlAcknowledgeEcp                                         0x34E37D2Au
#define NTOSKRNL_FsRtlAcquireFileExclusive                                   0xD54D2619u
#define NTOSKRNL_FsRtlAddBaseMcbEntry                                        0x8132D456u
#define NTOSKRNL_FsRtlAddBaseMcbEntryEx                                      0x5A0C6B29u
#define NTOSKRNL_FsRtlAddLargeMcbEntry                                       0xD07BD514u
#define NTOSKRNL_FsRtlAddMcbEntry                                            0xEC30748Du
#define NTOSKRNL_FsRtlAddToTunnelCache                                       0x165E190Cu
#define NTOSKRNL_FsRtlAllocateExtraCreateParameter                           0x75A603CCu
#define NTOSKRNL_FsRtlAllocateExtraCreateParameterFromLookasideList          0x6221FFEFu
#define NTOSKRNL_FsRtlAllocateExtraCreateParameterList                       0x98C91C15u
#define NTOSKRNL_FsRtlAllocateFileLock                                       0xD61A7454u
#define NTOSKRNL_FsRtlAllocatePool                                           0x7B238DA8u
#define NTOSKRNL_FsRtlAllocatePoolWithQuota                                  0x440C8942u
#define NTOSKRNL_FsRtlAllocatePoolWithQuotaTag                               0x56488144u
#define NTOSKRNL_FsRtlAllocatePoolWithTag                                    0x1480C8D9u
#define NTOSKRNL_FsRtlAllocateResource                                       0x02B968E4u
#define NTOSKRNL_FsRtlAreNamesEqual                                          0x7CCFE200u
#define NTOSKRNL_FsRtlAreThereCurrentOrInProgressFileLocks                   0xCEB45499u
#define NTOSKRNL_FsRtlAreVolumeStartupApplicationsComplete                   0xA1CF91D2u
#define NTOSKRNL_FsRtlBalanceReads                                           0x2853F921u
#define NTOSKRNL_FsRtlCancellableWaitForMultipleObjects                      0xBA07AE5Eu
#define NTOSKRNL_FsRtlCancellableWaitForSingleObject                         0x6C5773FBu
#define NTOSKRNL_FsRtlChangeBackingFileObject                                0x505E5815u
#define NTOSKRNL_FsRtlCheckLockForReadAccess                                 0xE9C04431u
#define NTOSKRNL_FsRtlCheckLockForWriteAccess                                0xD26F361Bu
#define NTOSKRNL_FsRtlCheckOplock                                            0xF2E054CCu
#define NTOSKRNL_FsRtlCheckOplockEx                                          0x33C3212Bu
#define NTOSKRNL_FsRtlCopyRead                                               0xE53E24CBu
#define NTOSKRNL_FsRtlCopyWrite                                              0xE4CB7742u
#define NTOSKRNL_FsRtlCreateSectionForDataScan                               0x7D330FBCu
#define NTOSKRNL_FsRtlCurrentBatchOplock                                     0x891E5F50u
#define NTOSKRNL_FsRtlCurrentOplock                                          0x281868A3u
#define NTOSKRNL_FsRtlCurrentOplockH                                         0x0D14654Bu
#define NTOSKRNL_FsRtlDeleteExtraCreateParameterLookasideList                0x8C24C5E2u
#define NTOSKRNL_FsRtlDeleteKeyFromTunnelCache                               0xE0C0A458u
#define NTOSKRNL_FsRtlDeleteTunnelCache                                      0x047F817Du
#define NTOSKRNL_FsRtlDeregisterUncProvider                                  0xB775C9A4u
#define NTOSKRNL_FsRtlDissectDbcs                                            0x4683D690u
#define NTOSKRNL_FsRtlDissectName                                            0x4A821386u
#define NTOSKRNL_FsRtlDoesDbcsContainWildCards                               0xBDE1791Cu
#define NTOSKRNL_FsRtlDoesNameContainWildCards                               0x78F7751Du
#define NTOSKRNL_FsRtlFastCheckLockForRead                                   0x6976B94Cu
#define NTOSKRNL_FsRtlFastCheckLockForWrite                                  0xF77B86CBu
#define NTOSKRNL_FsRtlFastUnlockAll                                          0xC1E5BB60u
#define NTOSKRNL_FsRtlFastUnlockAllByKey                                     0xABE7EA39u
#define NTOSKRNL_FsRtlFastUnlockSingle                                       0x6E803120u
#define NTOSKRNL_FsRtlFindExtraCreateParameter                               0x9DF19C01u
#define NTOSKRNL_FsRtlFindInTunnelCache                                      0xD4F8031Eu
#define NTOSKRNL_FsRtlFreeExtraCreateParameter                               0x5DE79C17u
#define NTOSKRNL_FsRtlFreeExtraCreateParameterList                           0x657B980Cu
#define NTOSKRNL_FsRtlFreeFileLock                                           0x520389E6u
#define NTOSKRNL_FsRtlGetEcpListFromIrp                                      0x0B3DDA35u
#define NTOSKRNL_FsRtlGetFileSize                                            0xC213FA15u
#define NTOSKRNL_FsRtlGetNextBaseMcbEntry                                    0xBD940A1Du
#define NTOSKRNL_FsRtlGetNextExtraCreateParameter                            0xA3BAE3EDu
#define NTOSKRNL_FsRtlGetNextFileLock                                        0xB7D47649u
#define NTOSKRNL_FsRtlGetNextLargeMcbEntry                                   0x0BB2B280u
#define NTOSKRNL_FsRtlGetNextMcbEntry                                        0x81D4C747u
#define NTOSKRNL_FsRtlGetVirtualDiskNestingLevel                             0x28D9C9F1u
#define NTOSKRNL_FsRtlIncrementCcFastMdlReadWait                             0x84D07946u
#define NTOSKRNL_FsRtlIncrementCcFastReadNoWait                              0x7A98BE48u
#define NTOSKRNL_FsRtlIncrementCcFastReadNotPossible                         0xF20D6B7Bu
#define NTOSKRNL_FsRtlIncrementCcFastReadResourceMiss                        0x6943D6BAu
#define NTOSKRNL_FsRtlIncrementCcFastReadWait                                0x9D60438Bu
#define NTOSKRNL_FsRtlInitExtraCreateParameterLookasideList                  0x08D9E6BDu
#define NTOSKRNL_FsRtlInitializeBaseMcb                                      0x35B815D9u
#define NTOSKRNL_FsRtlInitializeBaseMcbEx                                    0x64DE402Fu
#define NTOSKRNL_FsRtlInitializeExtraCreateParameter                         0x19EC34EFu
#define NTOSKRNL_FsRtlInitializeExtraCreateParameterList                     0xEAFFD8B6u
#define NTOSKRNL_FsRtlInitializeFileLock                                     0x12B90662u
#define NTOSKRNL_FsRtlInitializeLargeMcb                                     0xCA9B12D7u
#define NTOSKRNL_FsRtlInitializeMcb                                          0x7873E00Au
#define NTOSKRNL_FsRtlInitializeOplock                                       0x84CC6252u
#define NTOSKRNL_FsRtlInitializeTunnelCache                                  0x89047623u
#define NTOSKRNL_FsRtlInsertExtraCreateParameter                             0xF9316321u
#define NTOSKRNL_FsRtlInsertPerFileContext                                   0x78E912FCu
#define NTOSKRNL_FsRtlInsertPerFileObjectContext                             0x747B6281u
#define NTOSKRNL_FsRtlInsertPerStreamContext                                 0xF5594070u
#define NTOSKRNL_FsRtlIsDbcsInExpression                                     0x99B1D181u
#define NTOSKRNL_FsRtlIsEcpAcknowledged                                      0x5785AF90u
#define NTOSKRNL_FsRtlIsEcpFromUserMode                                      0xA6771846u
#define NTOSKRNL_FsRtlIsFatDbcsLegal                                         0xCD241E25u
#define NTOSKRNL_FsRtlIsHpfsDbcsLegal                                        0x77B9BEFEu
#define NTOSKRNL_FsRtlIsNameInExpression                                     0xF971CDD0u
#define NTOSKRNL_FsRtlIsNtstatusExpected                                     0x37463298u
#define NTOSKRNL_FsRtlIsPagingFile                                           0x4485E8E9u
#define NTOSKRNL_FsRtlIsTotalDeviceFailure                                   0xCDD89D07u
#define NTOSKRNL_FsRtlLegalAnsiCharacterArray                                0x9FBFE2C1u
#define NTOSKRNL_FsRtlLogCcFlushError                                        0x6CD5E540u
#define NTOSKRNL_FsRtlLookupBaseMcbEntry                                     0x924F8F7Du
#define NTOSKRNL_FsRtlLookupLargeMcbEntry                                    0x7B1EB77Bu
#define NTOSKRNL_FsRtlLookupLastBaseMcbEntry                                 0x2E3533D8u
#define NTOSKRNL_FsRtlLookupLastBaseMcbEntryAndIndex                         0xA9B4CF9Du
#define NTOSKRNL_FsRtlLookupLastLargeMcbEntry                                0x2C8A00F4u
#define NTOSKRNL_FsRtlLookupLastLargeMcbEntryAndIndex                        0x1687E39Fu
#define NTOSKRNL_FsRtlLookupLastMcbEntry                                     0x92489E7Du
#define NTOSKRNL_FsRtlLookupMcbEntry                                         0x3982C5BAu
#define NTOSKRNL_FsRtlLookupPerFileContext                                   0xFB6716C7u
#define NTOSKRNL_FsRtlLookupPerFileObjectContext                             0xF5758262u
#define NTOSKRNL_FsRtlLookupPerStreamContextInternal                         0xA13FF99Cu
#define NTOSKRNL_FsRtlMdlRead                                                0xF8BC3C62u
#define NTOSKRNL_FsRtlMdlReadComplete                                        0x37291444u
#define NTOSKRNL_FsRtlMdlReadCompleteDev                                     0x8486826Cu
#define NTOSKRNL_FsRtlMdlReadDev                                             0x4E12910Bu
#define NTOSKRNL_FsRtlMdlWriteComplete                                       0x5541841Bu
#define NTOSKRNL_FsRtlMdlWriteCompleteDev                                    0xB0CEADDDu
#define NTOSKRNL_FsRtlMupGetProviderIdFromName                               0x790EE1D0u
#define NTOSKRNL_FsRtlMupGetProviderInfoFromFileObject                       0x0EEE1AA0u
#define NTOSKRNL_FsRtlNormalizeNtstatus                                      0x0D66FAF1u
#define NTOSKRNL_FsRtlNotifyChangeDirectory                                  0x9A4820D3u
#define NTOSKRNL_FsRtlNotifyCleanup                                          0x462A6D66u
#define NTOSKRNL_FsRtlNotifyCleanupAll                                       0x113B334Eu
#define NTOSKRNL_FsRtlNotifyFilterChangeDirectory                            0x196FC1DAu
#define NTOSKRNL_FsRtlNotifyFilterReportChange                               0xC3768BA8u
#define NTOSKRNL_FsRtlNotifyFullChangeDirectory                              0xA19E3791u
#define NTOSKRNL_FsRtlNotifyFullReportChange                                 0x54076844u
#define NTOSKRNL_FsRtlNotifyInitializeSync                                   0x1090FA29u
#define NTOSKRNL_FsRtlNotifyReportChange                                     0xD070C46Au
#define NTOSKRNL_FsRtlNotifyUninitializeSync                                 0xDD2C95ECu
#define NTOSKRNL_FsRtlNotifyVolumeEvent                                      0xE15950A7u
#define NTOSKRNL_FsRtlNotifyVolumeEventEx                                    0x9F8DC53Au
#define NTOSKRNL_FsRtlNumberOfRunsInBaseMcb                                  0x7788FD3Eu
#define NTOSKRNL_FsRtlNumberOfRunsInLargeMcb                                 0xD787FA91u
#define NTOSKRNL_FsRtlNumberOfRunsInMcb                                      0x76FD9429u
#define NTOSKRNL_FsRtlOplockBreakH                                           0x42569710u
#define NTOSKRNL_FsRtlOplockBreakToNone                                      0x3E50C97Cu
#define NTOSKRNL_FsRtlOplockBreakToNoneEx                                    0xF0F1E35Du
#define NTOSKRNL_FsRtlOplockFsctrl                                           0x1645B43Cu
#define NTOSKRNL_FsRtlOplockFsctrlEx                                         0xF051B6A8u
#define NTOSKRNL_FsRtlOplockIsFastIoPossible                                 0x0F1001E9u
#define NTOSKRNL_FsRtlOplockIsSharedRequest                                  0x348677C5u
#define NTOSKRNL_FsRtlOplockKeysEqual                                        0x45A0BDE8u
#define NTOSKRNL_FsRtlPostPagingFileStackOverflow                            0xE81BBF09u
#define NTOSKRNL_FsRtlPostStackOverflow                                      0x4677057Au
#define NTOSKRNL_FsRtlPrepareMdlWrite                                        0xE06AF656u
#define NTOSKRNL_FsRtlPrepareMdlWriteDev                                     0x25778B07u
#define NTOSKRNL_FsRtlPrivateLock                                            0x58F2C8F6u
#define NTOSKRNL_FsRtlProcessFileLock                                        0x0362DF48u
#define NTOSKRNL_FsRtlQueryMaximumVirtualDiskNestingLevel                    0x340C6DB5u
#define NTOSKRNL_FsRtlRegisterFileSystemFilterCallbacks                      0xA067CC93u
#define NTOSKRNL_FsRtlRegisterFltMgrCalls                                    0xCB9D9112u
#define NTOSKRNL_FsRtlRegisterMupCalls                                       0xE0148338u
#define NTOSKRNL_FsRtlRegisterUncProvider                                    0x0089E265u
#define NTOSKRNL_FsRtlRegisterUncProviderEx                                  0x940A87F1u
#define NTOSKRNL_FsRtlReleaseFile                                            0xDA1328FEu
#define NTOSKRNL_FsRtlRemoveBaseMcbEntry                                     0x0345896Fu
#define NTOSKRNL_FsRtlRemoveDotsFromPath                                     0x0D22005Cu
#define NTOSKRNL_FsRtlRemoveExtraCreateParameter                             0x72399153u
#define NTOSKRNL_FsRtlRemoveLargeMcbEntry                                    0x3BDCE55Au
#define NTOSKRNL_FsRtlRemoveMcbEntry                                         0x99E3ECAAu
#define NTOSKRNL_FsRtlRemovePerFileContext                                   0xB1233EDFu
#define NTOSKRNL_FsRtlRemovePerFileObjectContext                             0xFF7390F3u
#define NTOSKRNL_FsRtlRemovePerStreamContext                                 0x7A7E68C0u
#define NTOSKRNL_FsRtlResetBaseMcb                                           0x49A35D28u
#define NTOSKRNL_FsRtlResetLargeMcb                                          0xA3853D54u
#define NTOSKRNL_FsRtlSetEcpListIntoIrp                                      0x0A9A1B0Du
#define NTOSKRNL_FsRtlSplitBaseMcb                                           0x4A43D17Cu
#define NTOSKRNL_FsRtlSplitLargeMcb                                          0xB20FBD28u
#define NTOSKRNL_FsRtlSyncVolumes                                            0xF90FD354u
#define NTOSKRNL_FsRtlTeardownPerFileContexts                                0x6A852394u
#define NTOSKRNL_FsRtlTeardownPerStreamContexts                              0xC12D746Bu
#define NTOSKRNL_FsRtlTruncateBaseMcb                                        0x314E8CC3u
#define NTOSKRNL_FsRtlTruncateLargeMcb                                       0x19B85249u
#define NTOSKRNL_FsRtlTruncateMcb                                            0x11E24045u
#define NTOSKRNL_FsRtlUninitializeBaseMcb                                    0xAAB2A1B5u
#define NTOSKRNL_FsRtlUninitializeFileLock                                   0x44349583u
#define NTOSKRNL_FsRtlUninitializeLargeMcb                                   0x9C168136u
#define NTOSKRNL_FsRtlUninitializeMcb                                        0xD33529FAu
#define NTOSKRNL_FsRtlUninitializeOplock                                     0x27A89A07u
#define NTOSKRNL_FsRtlValidateReparsePointBuffer                             0x76C95549u
#define NTOSKRNL_HalDispatchTable                                            0x7B214ABFu
#define NTOSKRNL_HalExamineMBR                                               0xB263CBB6u
#define NTOSKRNL_HalPrivateDispatchTable                                     0x76D49728u
#define NTOSKRNL_HeadlessDispatch                                            0xA000A2DFu
#define NTOSKRNL_HvlQueryConnection                                          0x9E49DD2Du
#define NTOSKRNL_InbvAcquireDisplayOwnership                                 0x53652D55u
#define NTOSKRNL_InbvCheckDisplayOwnership                                   0x97E5D3BFu
#define NTOSKRNL_InbvDisplayString                                           0xFDAEBB7Bu
#define NTOSKRNL_InbvEnableBootDriver                                        0xF03082CEu
#define NTOSKRNL_InbvEnableDisplayString                                     0x45DB8F24u
#define NTOSKRNL_InbvInstallDisplayStringFilter                              0xC881186Au
#define NTOSKRNL_InbvIsBootDriverInstalled                                   0x597A8539u
#define NTOSKRNL_InbvNotifyDisplayOwnershipLost                              0x39AFAE0Du
#define NTOSKRNL_InbvResetDisplay                                            0x62E4BA72u
#define NTOSKRNL_InbvSetScrollRegion                                         0x588CD07Eu
#define NTOSKRNL_InbvSetTextColor                                            0xE90AC4C3u
#define NTOSKRNL_InbvSolidColorFill                                          0x1A6E440Bu
#define NTOSKRNL_InitSafeBootMode                                            0xFC3E52F3u
#define NTOSKRNL_InterlockedCompareExchange                                  0x21294A76u
#define NTOSKRNL_InterlockedDecrement                                        0x3914961Eu
#define NTOSKRNL_InterlockedExchange                                         0xB6F6CAAFu
#define NTOSKRNL_InterlockedExchangeAdd                                      0x7F69D7BEu
#define NTOSKRNL_InterlockedIncrement                                        0x61149B1Eu
#define NTOSKRNL_InterlockedPopEntrySList                                    0x497D1C5Fu
#define NTOSKRNL_InterlockedPushEntrySList                                   0x5F18413Au
#define NTOSKRNL_IoAcquireCancelSpinLock                                     0xF6116EACu
#define NTOSKRNL_IoAcquireRemoveLockEx                                       0x0AD858C4u
#define NTOSKRNL_IoAcquireVpbSpinLock                                        0x1560C865u
#define NTOSKRNL_IoAdapterObjectType                                         0x02854E43u
#define NTOSKRNL_IoAdjustStackSizeForRedirection                             0x3257B6E4u
#define NTOSKRNL_IoAllocateAdapterChannel                                    0xEF1CC00Fu
#define NTOSKRNL_IoAllocateController                                        0xC196816Eu
#define NTOSKRNL_IoAllocateDriverObjectExtension                             0x9A9B7DF9u
#define NTOSKRNL_IoAllocateErrorLogEntry                                     0x6220B97Fu
#define NTOSKRNL_IoAllocateIrp                                               0xC6E15F30u
#define NTOSKRNL_IoAllocateMdl                                               0xD6E39F2Cu
#define NTOSKRNL_IoAllocateMiniCompletionPacket                              0x1DC4E638u
#define NTOSKRNL_IoAllocateSfioStreamIdentifier                              0xFB246B57u
#define NTOSKRNL_IoAllocateWorkItem                                          0xAB797A89u
#define NTOSKRNL_IoApplyPriorityInfoThread                                   0x1FDDCA7Eu
#define NTOSKRNL_IoAssignResources                                           0x8EBD6F4Cu
#define NTOSKRNL_IoAttachDevice                                              0x44E62939u
#define NTOSKRNL_IoAttachDeviceByPointer                                     0x39A0496Bu
#define NTOSKRNL_IoAttachDeviceToDeviceStack                                 0x49E11F3Fu
#define NTOSKRNL_IoAttachDeviceToDeviceStackSafe                             0x77F877F5u
#define NTOSKRNL_IoBuildAsynchronousFsdRequest                               0xE454B6D4u
#define NTOSKRNL_IoBuildDeviceIoControlRequest                               0xA55E6C70u
#define NTOSKRNL_IoBuildPartialMdl                                           0x28FE3F52u
#define NTOSKRNL_IoBuildSynchronousFsdRequest                                0xF8AE0A25u
#define NTOSKRNL_IoCallDriver                                                0xB77374C4u
#define NTOSKRNL_IoCancelFileOpen                                            0xF1112EF7u
#define NTOSKRNL_IoCancelIrp                                                 0x27A5B490u
#define NTOSKRNL_IoCheckDesiredAccess                                        0xAB1CCB9Bu
#define NTOSKRNL_IoCheckEaBufferValidity                                     0x42E1973Bu
#define NTOSKRNL_IoCheckFunctionAccess                                       0x99B63E7Du
#define NTOSKRNL_IoCheckQuerySetFileInformation                              0x6F582AFBu
#define NTOSKRNL_IoCheckQuerySetVolumeInformation                            0xA101F9F9u
#define NTOSKRNL_IoCheckQuotaBufferValidity                                  0xAC735599u
#define NTOSKRNL_IoCheckShareAccess                                          0x057D3928u
#define NTOSKRNL_IoCheckShareAccessEx                                        0xA01D549Cu
#define NTOSKRNL_IoClearDependency                                           0x766C2D91u
#define NTOSKRNL_IoClearIrpExtraCreateParameter                              0x0232AF71u
#define NTOSKRNL_IoCompleteRequest                                           0x771B72F2u
#define NTOSKRNL_IoConnectInterrupt                                          0x762E2F27u
#define NTOSKRNL_IoConnectInterruptEx                                        0x9DD018C4u
#define NTOSKRNL_IoCreateArcName                                             0x84746C13u
#define NTOSKRNL_IoCreateController                                          0xE2543017u
#define NTOSKRNL_IoCreateDevice                                              0xFEC46921u
#define NTOSKRNL_IoCreateDisk                                                0x8202F13Du
#define NTOSKRNL_IoCreateDriver                                              0x83B4A6B6u
#define NTOSKRNL_IoCreateFile                                                0x82011033u
#define NTOSKRNL_IoCreateFileEx                                              0xCE00A438u
#define NTOSKRNL_IoCreateFileSpecifyDeviceObjectHint                         0x4A5C975Au
#define NTOSKRNL_IoCreateNotificationEvent                                   0xB07AB114u
#define NTOSKRNL_IoCreateStreamFileObject                                    0xC5A5D0F7u
#define NTOSKRNL_IoCreateStreamFileObjectEx                                  0xDF1E373Bu
#define NTOSKRNL_IoCreateStreamFileObjectLite                                0xAB72FC39u
#define NTOSKRNL_IoCreateSymbolicLink                                        0xDB1C5279u
#define NTOSKRNL_IoCreateSynchronizationEvent                                0x7267D105u
#define NTOSKRNL_IoCreateUnprotectedSymbolicLink                             0xD8847103u
#define NTOSKRNL_IoCsqInitialize                                             0xC15B4775u
#define NTOSKRNL_IoCsqInitializeEx                                           0xD70DCD65u
#define NTOSKRNL_IoCsqInsertIrp                                              0xAD33E072u
#define NTOSKRNL_IoCsqInsertIrpEx                                            0xCABC6FF9u
#define NTOSKRNL_IoCsqRemoveIrp                                              0xF57473E6u
#define NTOSKRNL_IoCsqRemoveNextIrp                                          0x1AE0ED18u
#define NTOSKRNL_IoDeleteAllDependencyRelations                              0xF7A327E6u
#define NTOSKRNL_IoDeleteController                                          0xA794222Fu
#define NTOSKRNL_IoDeleteDevice                                              0xFFE7ED7Du
#define NTOSKRNL_IoDeleteDriver                                              0x829722EAu
#define NTOSKRNL_IoDeleteSymbolicLink                                        0x3A0B5231u
#define NTOSKRNL_IoDetachDevice                                              0x44E4A97Du
#define NTOSKRNL_IoDeviceHandlerObjectSize                                   0xFC04F29Au
#define NTOSKRNL_IoDeviceHandlerObjectType                                   0xBC05B11Au
#define NTOSKRNL_IoDeviceObjectType                                          0x13A9671Au
#define NTOSKRNL_IoDisconnectInterrupt                                       0x41B33AB3u
#define NTOSKRNL_IoDisconnectInterruptEx                                     0xCD0E6C92u
#define NTOSKRNL_IoDriverObjectType                                          0xE66A5947u
#define NTOSKRNL_IoDuplicateDependency                                       0xAB5EA74Bu
#define NTOSKRNL_IoEnqueueIrp                                                0xA3C7DD84u
#define NTOSKRNL_IoEnumerateDeviceObjectList                                 0xCE5FF4A1u
#define NTOSKRNL_IoEnumerateRegisteredFiltersList                            0x2EB4EA46u
#define NTOSKRNL_IoFastQueryNetworkAttributes                                0x61FBDD07u
#define NTOSKRNL_IoFileObjectType                                            0x3141877Bu
#define NTOSKRNL_IoForwardAndCatchIrp                                        0xEEFA2C00u
#define NTOSKRNL_IoForwardIrpSynchronously                                   0xC8028AEDu
#define NTOSKRNL_IoFreeController                                            0xF573F64Fu
#define NTOSKRNL_IoFreeErrorLogEntry                                         0x109B29E5u
#define NTOSKRNL_IoFreeIrp                                                   0x5A4FBB16u
#define NTOSKRNL_IoFreeMdl                                                   0x4A4D7B0Au
#define NTOSKRNL_IoFreeMiniCompletionPacket                                  0xCE513ABCu
#define NTOSKRNL_IoFreeSfioStreamIdentifier                                  0x28B1B7D3u
#define NTOSKRNL_IoFreeWorkItem                                              0x9224B2C4u
#define NTOSKRNL_IoGetAffinityInterrupt                                      0xF6F5B2A4u
#define NTOSKRNL_IoGetAttachedDevice                                         0x3B599749u
#define NTOSKRNL_IoGetAttachedDeviceReference                                0x7E12EB1Fu
#define NTOSKRNL_IoGetBaseFileSystemDeviceObject                             0x61F4D453u
#define NTOSKRNL_IoGetBootDiskInformation                                    0xEC162A73u
#define NTOSKRNL_IoGetBootDiskInformationLite                                0x03306706u
#define NTOSKRNL_IoGetConfigurationInformation                               0x9BC3F27Eu
#define NTOSKRNL_IoGetContainerInformation                                   0xF58421C0u
#define NTOSKRNL_IoGetCurrentProcess                                         0x93359FFFu
#define NTOSKRNL_IoGetDeviceAttachmentBaseRef                                0xBE0D9F8Du
#define NTOSKRNL_IoGetDeviceInterfaceAlias                                   0x349FCB6Eu
#define NTOSKRNL_IoGetDeviceInterfaces                                       0x3DD1C93Bu
#define NTOSKRNL_IoGetDeviceNumaNode                                         0x6B1C2C3Bu
#define NTOSKRNL_IoGetDeviceObjectPointer                                    0xC822620Du
#define NTOSKRNL_IoGetDeviceProperty                                         0xEE0FF9A3u
#define NTOSKRNL_IoGetDevicePropertyData                                     0x1E30429Fu
#define NTOSKRNL_IoGetDeviceToVerify                                         0xA35AF251u
#define NTOSKRNL_IoGetDiskDeviceObject                                       0xB96281C6u
#define NTOSKRNL_IoGetDmaAdapter                                             0xB4FEEA6Cu
#define NTOSKRNL_IoGetDriverObjectExtension                                  0x090C4B4Bu
#define NTOSKRNL_IoGetFileObjectGenericMapping                               0x2A4F7FFDu
#define NTOSKRNL_IoGetInitialStack                                           0x95A92676u
#define NTOSKRNL_IoGetIoPriorityHint                                         0x33C97F75u
#define NTOSKRNL_IoGetIrpExtraCreateParameter                                0x94386B34u
#define NTOSKRNL_IoGetLowerDeviceObject                                      0x1A4826FDu
#define NTOSKRNL_IoGetOplockKeyContext                                       0x285BDCE6u
#define NTOSKRNL_IoGetPagingIoPriority                                       0x3440832Eu
#define NTOSKRNL_IoGetRelatedDeviceObject                                    0x8336B235u
#define NTOSKRNL_IoGetRequestorProcess                                       0xD2ED47D2u
#define NTOSKRNL_IoGetRequestorProcessId                                     0x4B42957Bu
#define NTOSKRNL_IoGetRequestorSessionId                                     0x8785985Bu
#define NTOSKRNL_IoGetSfioStreamIdentifier                                   0x4EB0F7EEu
#define NTOSKRNL_IoGetStackLimits                                            0xFFFE9A6Bu
#define NTOSKRNL_IoGetSymlinkSupportInformation                              0xBCC67C37u
#define NTOSKRNL_IoGetTopLevelIrp                                            0x045DCB81u
#define NTOSKRNL_IoGetTransactionParameterBlock                              0xA98934F2u
#define NTOSKRNL_IoInitializeIrp                                             0xA742C480u
#define NTOSKRNL_IoInitializeRemoveLockEx                                    0x8958D666u
#define NTOSKRNL_IoInitializeTimer                                           0x7741A6E0u
#define NTOSKRNL_IoInitializeWorkItem                                        0x683E4DE9u
#define NTOSKRNL_IoInvalidateDeviceRelations                                 0x32D205A1u
#define NTOSKRNL_IoInvalidateDeviceState                                     0xCB07907Cu
#define NTOSKRNL_IoIsFileObjectIgnoringSharing                               0x33D5616Bu
#define NTOSKRNL_IoIsFileOriginRemote                                        0xB1F0B6B4u
#define NTOSKRNL_IoIsOperationSynchronous                                    0x0790A6F0u
#define NTOSKRNL_IoIsSystemThread                                            0x9F1E3C65u
#define NTOSKRNL_IoIsValidNameGraftingBuffer                                 0xE4B0353Fu
#define NTOSKRNL_IoIsWdmVersionAvailable                                     0xE3538EB0u
#define NTOSKRNL_IoMakeAssociatedIrp                                         0x8D133D57u
#define NTOSKRNL_IoOpenDeviceInterfaceRegistryKey                            0xDAF466FBu
#define NTOSKRNL_IoOpenDeviceRegistryKey                                     0xFAB9FB9Au
#define NTOSKRNL_IoPageRead                                                  0x1B6426A9u
#define NTOSKRNL_IoQueryDeviceDescription                                    0x4866FEC4u
#define NTOSKRNL_IoQueryFileDosDeviceName                                    0xB3976D65u
#define NTOSKRNL_IoQueryFileInformation                                      0x8E12BEA0u
#define NTOSKRNL_IoQueryVolumeInformation                                    0xCE84D3A8u
#define NTOSKRNL_IoQueueThreadIrp                                            0x25508723u
#define NTOSKRNL_IoQueueWorkItem                                             0x627D7E9Bu
#define NTOSKRNL_IoQueueWorkItemEx                                           0x6D815582u
#define NTOSKRNL_IoRaiseHardError                                            0xC315363Au
#define NTOSKRNL_IoRaiseInformationalHardError                               0xFF477FD2u
#define NTOSKRNL_IoReadDiskSignature                                         0x2F408756u
#define NTOSKRNL_IoReadOperationCount                                        0xE9D0E3E7u
#define NTOSKRNL_IoReadPartitionTable                                        0xA5AB1AEFu
#define NTOSKRNL_IoReadPartitionTableEx                                      0xBE9E0C13u
#define NTOSKRNL_IoReadTransferCount                                         0x55CE2AB6u
#define NTOSKRNL_IoRegisterBootDriverReinitialization                        0x15D63B39u
#define NTOSKRNL_IoRegisterContainerNotification                             0x7CBE182Cu
#define NTOSKRNL_IoRegisterDeviceInterface                                   0xF388E0DCu
#define NTOSKRNL_IoRegisterDriverReinitialization                            0x71C1187Du
#define NTOSKRNL_IoRegisterFileSystem                                        0x81D368B4u
#define NTOSKRNL_IoRegisterFsRegistrationChange                              0x0B517224u
#define NTOSKRNL_IoRegisterFsRegistrationChangeMountAware                    0x0CE05C9Fu
#define NTOSKRNL_IoRegisterLastChanceShutdownNotification                    0xF6EB26FFu
#define NTOSKRNL_IoRegisterPlugPlayNotification                              0x659DE16Bu
#define NTOSKRNL_IoRegisterPriorityCallback                                  0xCED2F637u
#define NTOSKRNL_IoRegisterShutdownNotification                              0x14CEDCCAu
#define NTOSKRNL_IoReleaseCancelSpinLock                                     0xF5191B96u
#define NTOSKRNL_IoReleaseRemoveLockAndWaitEx                                0x4047B8E5u
#define NTOSKRNL_IoReleaseRemoveLockEx                                       0xC8C51644u
#define NTOSKRNL_IoReleaseVpbSpinLock                                        0x6166D88Fu
#define NTOSKRNL_IoRemoveShareAccess                                         0x9406081Du
#define NTOSKRNL_IoReplaceFileObjectName                                     0xA1FCEE14u
#define NTOSKRNL_IoReplacePartitionUnit                                      0x2178F913u
#define NTOSKRNL_IoReportDetectedDevice                                      0xE2E33713u
#define NTOSKRNL_IoReportHalResourceUsage                                    0x9C05C5E1u
#define NTOSKRNL_IoReportResourceForDetection                                0xA5F64385u
#define NTOSKRNL_IoReportResourceUsage                                       0xB7E74A00u
#define NTOSKRNL_IoReportRootDevice                                          0x1917D7A0u
#define NTOSKRNL_IoReportTargetDeviceChange                                  0x67357EA1u
#define NTOSKRNL_IoReportTargetDeviceChangeAsynchronous                      0xBB972FB3u
#define NTOSKRNL_IoRequestDeviceEject                                        0x9D7A9729u
#define NTOSKRNL_IoRequestDeviceEjectEx                                      0xA67D4A24u
#define NTOSKRNL_IoRetrievePriorityInfo                                      0xC22FB77Du
#define NTOSKRNL_IoReuseIrp                                                  0xBA075D19u
#define NTOSKRNL_IoSetCompletionRoutineEx                                    0xA6B98FEFu
#define NTOSKRNL_IoSetDependency                                             0x14A728F2u
#define NTOSKRNL_IoSetDeviceInterfaceState                                   0x15BD677Du
#define NTOSKRNL_IoSetDevicePropertyData                                     0x1E3043DFu
#define NTOSKRNL_IoSetDeviceToVerify                                         0xA34EF251u
#define NTOSKRNL_IoSetFileObjectIgnoreSharing                                0x199CB1B8u
#define NTOSKRNL_IoSetFileOrigin                                             0xD18662A7u
#define NTOSKRNL_IoSetHardErrorOrVerifyDevice                                0x36A7577Cu
#define NTOSKRNL_IoSetInformation                                            0x9C3B99DCu
#define NTOSKRNL_IoSetIoCompletion                                           0x968CFD77u
#define NTOSKRNL_IoSetIoCompletionEx                                         0xDE52938Du
#define NTOSKRNL_IoSetIoPriorityHint                                         0x33DD7F75u
#define NTOSKRNL_IoSetIoPriorityHintIntoFileObject                           0xC783180Du
#define NTOSKRNL_IoSetIoPriorityHintIntoThread                               0xF4C24A1Au
#define NTOSKRNL_IoSetIrpExtraCreateParameter                                0x943869B4u
#define NTOSKRNL_IoSetOplockKeyContext                                       0x285B8CE6u
#define NTOSKRNL_IoSetPartitionInformation                                   0xDB4A1786u
#define NTOSKRNL_IoSetPartitionInformationEx                                 0x1B658826u
#define NTOSKRNL_IoSetShareAccess                                            0x44DDD571u
#define NTOSKRNL_IoSetShareAccessEx                                          0xC51BD72Du
#define NTOSKRNL_IoSetStartIoAttributes                                      0x8F349AC6u
#define NTOSKRNL_IoSetSystemPartition                                        0xC73F46BDu
#define NTOSKRNL_IoSetThreadHardErrorMode                                    0x4517379Bu
#define NTOSKRNL_IoSetTopLevelIrp                                            0x045DE381u
#define NTOSKRNL_IoSizeofWorkItem                                            0xE8BA87D0u
#define NTOSKRNL_IoStartNextPacket                                           0x67711EF8u
#define NTOSKRNL_IoStartNextPacketByKey                                      0xE6CEA108u
#define NTOSKRNL_IoStartPacket                                               0xA4B6711Eu
#define NTOSKRNL_IoStartTimer                                                0xB314E1A4u
#define NTOSKRNL_IoStatisticsLock                                            0x4DF65030u
#define NTOSKRNL_IoStopTimer                                                 0x1CB70634u
#define NTOSKRNL_IoSynchronousInvalidateDeviceRelations                      0x8D9913E6u
#define NTOSKRNL_IoSynchronousPageWrite                                      0xB2C097C2u
#define NTOSKRNL_IoThreadToProcess                                           0xD31157EEu
#define NTOSKRNL_IoTranslateBusAddress                                       0x7904E2C5u
#define NTOSKRNL_IoUninitializeWorkItem                                      0x66AC4F1Du
#define NTOSKRNL_IoUnregisterContainerNotification                           0x7DC41F65u
#define NTOSKRNL_IoUnregisterFileSystem                                      0x8F416A40u
#define NTOSKRNL_IoUnregisterFsRegistrationChange                            0x311979F4u
#define NTOSKRNL_IoUnregisterPlugPlayNotification                            0x5FD5EABBu
#define NTOSKRNL_IoUnregisterPlugPlayNotificationEx                          0xED77F7D2u
#define NTOSKRNL_IoUnregisterPriorityCallback                                0x4E6FF593u
#define NTOSKRNL_IoUnregisterShutdownNotification                            0x2E86D71Au
#define NTOSKRNL_IoUpdateShareAccess                                         0xB64114B5u
#define NTOSKRNL_IoValidateDeviceIoControlAccess                             0xEF4CD4E7u
#define NTOSKRNL_IoVerifyPartitionTable                                      0xADF53423u
#define NTOSKRNL_IoVerifyVolume                                              0x1C882C59u
#define NTOSKRNL_IoVolumeDeviceToDosName                                     0x518A2E66u
#define NTOSKRNL_IoWMIAllocateInstanceIds                                    0xB35789B0u
#define NTOSKRNL_IoWMIDeviceObjectToInstanceName                             0x74020DA6u
#define NTOSKRNL_IoWMIExecuteMethod                                          0x69377EDDu
#define NTOSKRNL_IoWMIHandleToInstanceName                                   0x00BEA1F7u
#define NTOSKRNL_IoWMIOpenBlock                                              0xC13E4A87u
#define NTOSKRNL_IoWMIQueryAllData                                           0xC3DF8813u
#define NTOSKRNL_IoWMIQueryAllDataMultiple                                   0x70D8E7FDu
#define NTOSKRNL_IoWMIQuerySingleInstance                                    0x30E819CFu
#define NTOSKRNL_IoWMIQuerySingleInstanceMultiple                            0x47493B0Eu
#define NTOSKRNL_IoWMIRegistrationControl                                    0xCB671BE8u
#define NTOSKRNL_IoWMISetNotificationCallback                                0x365242BCu
#define NTOSKRNL_IoWMISetSingleInstance                                      0x7CA0234Bu
#define NTOSKRNL_IoWMISetSingleItem                                          0xAF383C53u
#define NTOSKRNL_IoWMISuggestInstanceName                                    0x990817E3u
#define NTOSKRNL_IoWMIWriteEvent                                             0xB0C6D69Du
#define NTOSKRNL_IoWithinStackLimits                                         0xD965E166u
#define NTOSKRNL_IoWriteErrorLogEntry                                        0x306FB13Au
#define NTOSKRNL_IoWriteOperationCount                                       0xFA9C07DBu
#define NTOSKRNL_IoWritePartitionTable                                       0xB6E7FED3u
#define NTOSKRNL_IoWritePartitionTableEx                                     0x4ED33F83u
#define NTOSKRNL_IoWriteTransferCount                                        0x742EB0D1u
#define NTOSKRNL_IofCallDriver                                               0x276074E4u
#define NTOSKRNL_IofCompleteRequest                                          0x573D72B3u
#define NTOSKRNL_KdChangeOption                                              0xD715E354u
#define NTOSKRNL_KdDebuggerEnabled                                           0x1B9CFC00u
#define NTOSKRNL_KdDebuggerNotPresent                                        0xF31F4AC4u
#define NTOSKRNL_KdDisableDebugger                                           0x97BEE69Au
#define NTOSKRNL_KdEnableDebugger                                            0x4FF5BFE3u
#define NTOSKRNL_KdEnteredDebugger                                           0xE6DCE9DAu
#define NTOSKRNL_KdPollBreakIn                                               0x779BFD4Cu
#define NTOSKRNL_KdPowerTransition                                           0xC47F7465u
#define NTOSKRNL_KdRefreshDebuggerNotPresent                                 0x3CD4580Du
#define NTOSKRNL_KdSystemDebugControl                                        0x726737B0u
#define NTOSKRNL_Ke386CallBios                                               0x0DE73760u
#define NTOSKRNL_Ke386IoSetAccessProcess                                     0xF39E922Eu
#define NTOSKRNL_Ke386QueryIoAccessMap                                       0x290E1924u
#define NTOSKRNL_Ke386SetIoAccessMap                                         0xDB4C12D6u
#define NTOSKRNL_KeAcquireGuardedMutex                                       0xE076CEF4u
#define NTOSKRNL_KeAcquireGuardedMutexUnsafe                                 0x3151C153u
#define NTOSKRNL_KeAcquireInStackQueuedSpinLockAtDpcLevel                    0x32F595E5u
#define NTOSKRNL_KeAcquireInStackQueuedSpinLockForDpc                        0x41C2F58Eu
#define NTOSKRNL_KeAcquireInterruptSpinLock                                  0x20E1343Du
#define NTOSKRNL_KeAcquireSpinLockAtDpcLevel                                 0x46F57AEDu
#define NTOSKRNL_KeAcquireSpinLockForDpc                                     0x4F3272CEu
#define NTOSKRNL_KeAddGroupAffinityEx                                        0x3EBD4E48u
#define NTOSKRNL_KeAddProcessorAffinityEx                                    0xC13BC626u
#define NTOSKRNL_KeAddProcessorGroupAffinity                                 0x18A30603u
#define NTOSKRNL_KeAddSystemServiceTable                                     0x948EDA2Fu
#define NTOSKRNL_KeAlertThread                                               0xBF23FDCEu
#define NTOSKRNL_KeAllocateCalloutStack                                      0x1CB8AA46u
#define NTOSKRNL_KeAllocateCalloutStackEx                                    0x187A42D1u
#define NTOSKRNL_KeAndAffinityEx                                             0xD8557732u
#define NTOSKRNL_KeAndGroupAffinityEx                                        0x3EB74E48u
#define NTOSKRNL_KeAreAllApcsDisabled                                        0x4FF56C67u
#define NTOSKRNL_KeAreApcsDisabled                                           0xDA4DC46Fu
#define NTOSKRNL_KeAttachProcess                                             0xDC30F9C1u
#define NTOSKRNL_KeBugCheck                                                  0x894171A6u
#define NTOSKRNL_KeBugCheckEx                                                0x9A2DA5BEu
#define NTOSKRNL_KeCancelTimer                                               0x15473B20u
#define NTOSKRNL_KeCapturePersistentThreadState                              0xE8BF7B52u
#define NTOSKRNL_KeCheckProcessorAffinityEx                                  0xE3F38F35u
#define NTOSKRNL_KeCheckProcessorGroupAffinity                               0x7C878F92u
#define NTOSKRNL_KeClearEvent                                                0xB0005606u
#define NTOSKRNL_KeComplementAffinityEx                                      0x12B2DE4Du
#define NTOSKRNL_KeCopyAffinityEx                                            0x33DA391Cu
#define NTOSKRNL_KeCountSetBitsAffinityEx                                    0xADCEDCA3u
#define NTOSKRNL_KeCountSetBitsGroupAffinity                                 0x622E44B5u
#define NTOSKRNL_KeDelayExecutionThread                                      0x07901089u
#define NTOSKRNL_KeDeregisterBugCheckCallback                                0x866AF910u
#define NTOSKRNL_KeDeregisterBugCheckReasonCallback                          0x7D2C5D55u
#define NTOSKRNL_KeDeregisterNmiCallback                                     0x89A15E98u
#define NTOSKRNL_KeDeregisterProcessorChangeCallback                         0x5A7FB0EDu
#define NTOSKRNL_KeDetachProcess                                             0x8C3879C1u
#define NTOSKRNL_KeEnterCriticalRegion                                       0x6927A40Au
#define NTOSKRNL_KeEnterGuardedRegion                                        0x68914560u
#define NTOSKRNL_KeEnterKernelDebugger                                       0x09A93B1Eu
#define NTOSKRNL_KeEnumerateNextProcessor                                    0x738FEB2Fu
#define NTOSKRNL_KeExpandKernelStackAndCallout                               0x153029EAu
#define NTOSKRNL_KeExpandKernelStackAndCalloutEx                             0xA85C60DFu
#define NTOSKRNL_KeFindConfigurationEntry                                    0xEE3F5D98u
#define NTOSKRNL_KeFindConfigurationNextEntry                                0x52439F81u
#define NTOSKRNL_KeFindFirstSetLeftAffinityEx                                0xC6D8943Au
#define NTOSKRNL_KeFindFirstSetLeftGroupAffinity                             0xE90A0800u
#define NTOSKRNL_KeFindFirstSetRightGroupAffinity                            0x9AD369A7u
#define NTOSKRNL_KeFirstGroupAffinityEx                                      0x58BC789Eu
#define NTOSKRNL_KeFlushEntireTb                                             0xC6179A59u
#define NTOSKRNL_KeFlushQueuedDpcs                                           0xA5832D34u
#define NTOSKRNL_KeFreeCalloutStack                                          0xD8653F3Au
#define NTOSKRNL_KeGenericCallDpc                                            0x49E91269u
#define NTOSKRNL_KeGetCurrentNodeNumber                                      0x4966CD4Cu
#define NTOSKRNL_KeGetCurrentProcessorNumberEx                               0xFF03FFDAu
#define NTOSKRNL_KeGetCurrentThread                                          0xA5CE1733u
#define NTOSKRNL_KeGetPreviousMode                                           0xAE24D8EAu
#define NTOSKRNL_KeGetProcessorIndexFromNumber                               0x8ADF0CAAu
#define NTOSKRNL_KeGetProcessorNumberFromIndex                               0xEE5C0F12u
#define NTOSKRNL_KeGetRecommendedSharedDataAlignment                         0x72923FEDu
#define NTOSKRNL_KeGetXSaveFeatureFlags                                      0xCF7C5FEFu
#define NTOSKRNL_KeI386AbiosCall                                             0x173EEAD4u
#define NTOSKRNL_KeI386AllocateGdtSelectors                                  0xD15AB134u
#define NTOSKRNL_KeI386Call16BitCStyleFunction                               0x3D3BBF9Cu
#define NTOSKRNL_KeI386Call16BitFunction                                     0x8D12D036u
#define NTOSKRNL_KeI386FlatToGdtSelector                                     0x03BF6BD4u
#define NTOSKRNL_KeI386GetLid                                                0xFF55287Eu
#define NTOSKRNL_KeI386MachineType                                           0x3C746DA4u
#define NTOSKRNL_KeI386ReleaseGdtSelectors                                   0x64CE2E9Bu
#define NTOSKRNL_KeI386ReleaseLid                                            0x7438A7A7u
#define NTOSKRNL_KeI386SetGdtSelector                                        0x1ACCD7FAu
#define NTOSKRNL_KeInitializeAffinityEx                                      0x56BCD821u
#define NTOSKRNL_KeInitializeApc                                             0x87C29093u
#define NTOSKRNL_KeInitializeCrashDumpHeader                                 0xEE0549C9u
#define NTOSKRNL_KeInitializeDeviceQueue                                     0x1936DCBEu
#define NTOSKRNL_KeInitializeDpc                                             0x93C29093u
#define NTOSKRNL_KeInitializeEnumerationContext                              0x6AA55A53u
#define NTOSKRNL_KeInitializeEnumerationContextFromGroup                     0x62084B03u
#define NTOSKRNL_KeInitializeEvent                                           0x5652C936u
#define NTOSKRNL_KeInitializeGuardedMutex                                    0xE6F65074u
#define NTOSKRNL_KeInitializeInterrupt                                       0x870F104Fu
#define NTOSKRNL_KeInitializeMutant                                          0x6515822Eu
#define NTOSKRNL_KeInitializeMutex                                           0x12D3A8BAu
#define NTOSKRNL_KeInitializeQueue                                           0x5711A8A7u
#define NTOSKRNL_KeInitializeSemaphore                                       0xB7290756u
#define NTOSKRNL_KeInitializeSpinLock                                        0x25696759u
#define NTOSKRNL_KeInitializeThreadedDpc                                     0xFFD6F07Au
#define NTOSKRNL_KeInitializeTimer                                           0x7743A6B0u
#define NTOSKRNL_KeInitializeTimerEx                                         0xC1D5AEE2u
#define NTOSKRNL_KeInsertByKeyDeviceQueue                                    0xA2BFF3DCu
#define NTOSKRNL_KeInsertDeviceQueue                                         0x4914C846u
#define NTOSKRNL_KeInsertHeadQueue                                           0x95BFCCC8u
#define NTOSKRNL_KeInsertQueue                                               0x04F0E82Fu
#define NTOSKRNL_KeInsertQueueApc                                            0x7C7A17E0u
#define NTOSKRNL_KeInsertQueueDpc                                            0x687A17E0u
#define NTOSKRNL_KeInterlockedClearProcessorAffinityEx                       0x944C9490u
#define NTOSKRNL_KeInterlockedSetProcessorAffinityEx                         0x06D92728u
#define NTOSKRNL_KeInvalidateAllCaches                                       0x6360A014u
#define NTOSKRNL_KeInvalidateRangeAllCaches                                  0x905E952Au
#define NTOSKRNL_KeIpiGenericCall                                            0xBFF55E7Fu
#define NTOSKRNL_KeIsAttachedProcess                                         0x4FD2720Au
#define NTOSKRNL_KeIsEmptyAffinityEx                                         0x6B9048D1u
#define NTOSKRNL_KeIsEqualAffinityEx                                         0x3B9AF085u
#define NTOSKRNL_KeIsExecutingDpc                                            0x9B31418Cu
#define NTOSKRNL_KeIsSingleGroupAffinityEx                                   0xE4504F66u
#define NTOSKRNL_KeIsSubsetAffinityEx                                        0xF2226FE0u
#define NTOSKRNL_KeIsWaitListEmpty                                           0xE0F95E9Au
#define NTOSKRNL_KeLeaveCriticalRegion                                       0x0CF28093u
#define NTOSKRNL_KeLeaveGuardedRegion                                        0x4C5A6BC9u
#define NTOSKRNL_KeLoaderBlock                                               0x25E7F6B9u
#define NTOSKRNL_KeNumberProcessors                                          0x9431928Cu
#define NTOSKRNL_KeOrAffinityEx                                              0x8A85AB68u
#define NTOSKRNL_KePollFreezeExecution                                       0xFCBBFD99u
#define NTOSKRNL_KeProcessorGroupAffinity                                    0x188E72A3u
#define NTOSKRNL_KeProfileInterrupt                                          0xB3422D83u
#define NTOSKRNL_KeProfileInterruptWithSource                                0xA90E854Fu
#define NTOSKRNL_KePulseEvent                                                0xFA64CF28u
#define NTOSKRNL_KeQueryActiveGroupCount                                     0x9209BF80u
#define NTOSKRNL_KeQueryActiveProcessorAffinity                              0x5D584A38u
#define NTOSKRNL_KeQueryActiveProcessorCount                                 0xCDD2490Eu
#define NTOSKRNL_KeQueryActiveProcessorCountEx                               0x3B3FE95Cu
#define NTOSKRNL_KeQueryActiveProcessors                                     0xFBEFB1ADu
#define NTOSKRNL_KeQueryDpcWatchdogInformation                               0x88CC030Cu
#define NTOSKRNL_KeQueryGroupAffinity                                        0xCD6A232Cu
#define NTOSKRNL_KeQueryGroupAffinityEx                                      0xB33D08F4u
#define NTOSKRNL_KeQueryHardwareCounterConfiguration                         0xD098B0A6u
#define NTOSKRNL_KeQueryHighestNodeNumber                                    0xBD157CB4u
#define NTOSKRNL_KeQueryInterruptTime                                        0xB6B3DC71u
#define NTOSKRNL_KeQueryLogicalProcessorRelationship                         0x8D3E60E5u
#define NTOSKRNL_KeQueryMaximumGroupCount                                    0x3C9602EAu
#define NTOSKRNL_KeQueryMaximumProcessorCount                                0x1B78A0F5u
#define NTOSKRNL_KeQueryMaximumProcessorCountEx                              0xD46542FBu
#define NTOSKRNL_KeQueryNodeActiveAffinity                                   0x7FBA1879u
#define NTOSKRNL_KeQueryNodeMaximumProcessorCount                            0x0043BCA7u
#define NTOSKRNL_KeQueryPriorityThread                                       0x9042525Bu
#define NTOSKRNL_KeQueryRuntimeThread                                        0xCD5BD451u
#define NTOSKRNL_KeQuerySystemTime                                           0x74921B67u
#define NTOSKRNL_KeQueryTickCount                                            0xDE7742B7u
#define NTOSKRNL_KeQueryTimeIncrement                                        0xB7A59B81u
#define NTOSKRNL_KeQueryUnbiasedInterruptTime                                0xD582DD8Fu
#define NTOSKRNL_KeRaiseUserException                                        0x444C8375u
#define NTOSKRNL_KeReadStateEvent                                            0xDB50A872u
#define NTOSKRNL_KeReadStateMutant                                           0x293D138Eu
#define NTOSKRNL_KeReadStateMutex                                            0x9FD1C9FEu
#define NTOSKRNL_KeReadStateQueue                                            0xDA13C9E3u
#define NTOSKRNL_KeReadStateSemaphore                                        0xA361D770u
#define NTOSKRNL_KeReadStateTimer                                            0xFA41C7F4u
#define NTOSKRNL_KeRegisterBugCheckCallback                                  0x07FFF8D5u
#define NTOSKRNL_KeRegisterBugCheckReasonCallback                            0x3D5D3D30u
#define NTOSKRNL_KeRegisterNmiCallback                                       0x496BDE7Au
#define NTOSKRNL_KeRegisterProcessorChangeCallback                           0x767318E3u
#define NTOSKRNL_KeReleaseGuardedMutex                                       0x226B8074u
#define NTOSKRNL_KeReleaseGuardedMutexUnsafe                                 0x62F1F1D4u
#define NTOSKRNL_KeReleaseInStackQueuedSpinLockForDpc                        0x51288188u
#define NTOSKRNL_KeReleaseInStackQueuedSpinLockFromDpcLevel                  0x5F0A6F14u
#define NTOSKRNL_KeReleaseInterruptSpinLock                                  0xA4DBA93Cu
#define NTOSKRNL_KeReleaseMutant                                             0x25169059u
#define NTOSKRNL_KeReleaseMutex                                              0x8169A8A2u
#define NTOSKRNL_KeReleaseSemaphore                                          0xB6A03CF6u
#define NTOSKRNL_KeReleaseSpinLockForDpc                                     0x4C3A07F4u
#define NTOSKRNL_KeReleaseSpinLockFromDpcLevel                               0xFE956850u
#define NTOSKRNL_KeRemoveByKeyDeviceQueue                                    0x2D98DB6Cu
#define NTOSKRNL_KeRemoveByKeyDeviceQueueIfBusy                              0xE4B54A8Cu
#define NTOSKRNL_KeRemoveDeviceQueue                                         0x0E875C1Eu
#define NTOSKRNL_KeRemoveEntryDeviceQueue                                    0x5858A555u
#define NTOSKRNL_KeRemoveGroupAffinityEx                                     0x29656B77u
#define NTOSKRNL_KeRemoveProcessorAffinityEx                                 0x92CABBA4u
#define NTOSKRNL_KeRemoveProcessorGroupAffinity                              0xE01DC72Au
#define NTOSKRNL_KeRemoveQueue                                               0x5591F661u
#define NTOSKRNL_KeRemoveQueueDpc                                            0xD8F530C8u
#define NTOSKRNL_KeRemoveQueueEx                                             0x855EE7A1u
#define NTOSKRNL_KeRemoveSystemServiceTable                                  0x789C45A4u
#define NTOSKRNL_KeResetEvent                                                0x02215F0Au
#define NTOSKRNL_KeRestoreExtendedProcessorState                             0xB29714C6u
#define NTOSKRNL_KeRestoreFloatingPointState                                 0x21F80929u
#define NTOSKRNL_KeRevertToUserAffinityThread                                0x6DE0B172u
#define NTOSKRNL_KeRevertToUserAffinityThreadEx                              0xC9BF22BDu
#define NTOSKRNL_KeRevertToUserGroupAffinityThread                           0x660DA8F6u
#define NTOSKRNL_KeRundownQueue                                              0xB4EAA9E9u
#define NTOSKRNL_KeSaveExtendedProcessorState                                0x76CA02F1u
#define NTOSKRNL_KeSaveFloatingPointState                                    0xF09B756Cu
#define NTOSKRNL_KeSaveStateForHibernate                                     0xDD0D4899u
#define NTOSKRNL_KeServiceDescriptorTable                                    0x5881CEA0u
#define NTOSKRNL_KeSetActualBasePriorityThread                               0x40E4113Fu
#define NTOSKRNL_KeSetAffinityThread                                         0xE2339C48u
#define NTOSKRNL_KeSetBasePriorityThread                                     0xB78CC7C7u
#define NTOSKRNL_KeSetCoalescableTimer                                       0xE430FC54u
#define NTOSKRNL_KeSetDmaIoCoherency                                         0xA7B43737u
#define NTOSKRNL_KeSetEvent                                                  0x0124DE9Fu
#define NTOSKRNL_KeSetEventBoostPriority                                     0x4508F212u
#define NTOSKRNL_KeSetHardwareCounterConfiguration                           0xD214CD3Du
#define NTOSKRNL_KeSetIdealProcessorThread                                   0x0FE83364u
#define NTOSKRNL_KeSetImportanceDpc                                          0x52D56B68u
#define NTOSKRNL_KeSetKernelStackSwapEnable                                  0x5F6EF063u
#define NTOSKRNL_KeSetPriorityThread                                         0xA1B43E51u
#define NTOSKRNL_KeSetProfileIrql                                            0xB97E8E28u
#define NTOSKRNL_KeSetSystemAffinityThread                                   0x861D7B1Eu
#define NTOSKRNL_KeSetSystemAffinityThreadEx                                 0x7A10D594u
#define NTOSKRNL_KeSetSystemGroupAffinityThread                              0xB1F63C2Fu
#define NTOSKRNL_KeSetTargetProcessorDpc                                     0x18C087F0u
#define NTOSKRNL_KeSetTargetProcessorDpcEx                                   0xC06BA267u
#define NTOSKRNL_KeSetTimeIncrement                                          0xD7F41432u
#define NTOSKRNL_KeSetTimer                                                  0x2035B119u
#define NTOSKRNL_KeSetTimerEx                                                0x648876BCu
#define NTOSKRNL_KeSignalCallDpcDone                                         0x7FA87CC9u
#define NTOSKRNL_KeSignalCallDpcSynchronize                                  0xDBD8343Au
#define NTOSKRNL_KeStackAttachProcess                                        0x93C572C3u
#define NTOSKRNL_KeStartDynamicProcessor                                     0xE2EF9798u
#define NTOSKRNL_KeSubtractAffinityEx                                        0x92674E6Au
#define NTOSKRNL_KeSynchronizeExecution                                      0x7A246159u
#define NTOSKRNL_KeTestAlertThread                                           0x2A60B4E5u
#define NTOSKRNL_KeTestSpinLock                                              0x7CBAA528u
#define NTOSKRNL_KeTickCount                                                 0x9485620Cu
#define NTOSKRNL_KeTryToAcquireGuardedMutex                                  0x00866678u
#define NTOSKRNL_KeTryToAcquireSpinLockAtDpcLevel                            0x6CD642D1u
#define NTOSKRNL_KeUnstackDetachProcess                                      0xCC5BD897u
#define NTOSKRNL_KeUpdateRunTime                                             0xC421B518u
#define NTOSKRNL_KeUpdateSystemTime                                          0x5CFF389Eu
#define NTOSKRNL_KeUserModeCallback                                          0xCAD73DAAu
#define NTOSKRNL_KeWaitForMultipleObjects                                    0xCB857806u
#define NTOSKRNL_KeWaitForMutexObject                                        0x9C4B3B98u
#define NTOSKRNL_KeWaitForSingleObject                                       0xDCB47657u
#define NTOSKRNL_KefAcquireSpinLockAtDpcLevel                                0xC64D7AA8u
#define NTOSKRNL_KefReleaseSpinLockFromDpcLevel                              0xE8978851u
#define NTOSKRNL_Kei386EoiHelper                                             0x3A5FD906u
#define NTOSKRNL_KiAcquireSpinLock                                           0x2C816751u
#define NTOSKRNL_KiBugCheckData                                              0x5E663677u
#define NTOSKRNL_KiCheckForKernelApcDelivery                                 0x9192710Fu
#define NTOSKRNL_KiCheckForSListAddress                                      0x8FA3904Au
#define NTOSKRNL_KiCoprocessorError                                          0x0378090Eu
#define NTOSKRNL_KiDeliverApc                                                0x6AE19D29u
#define NTOSKRNL_KiDispatchInterrupt                                         0x828CBE73u
#define NTOSKRNL_KiIpiServiceRoutine                                         0xEC5891EAu
#define NTOSKRNL_KiReleaseSpinLock                                           0xF8696B70u
#define NTOSKRNL_KiUnexpectedInterrupt                                       0x776DE853u
#define NTOSKRNL_LdrAccessResource                                           0x7C7869B2u
#define NTOSKRNL_LdrEnumResources                                            0xE7D7EC1Fu
#define NTOSKRNL_LdrFindResourceDirectory_U                                  0x9C12DAACu
#define NTOSKRNL_LdrFindResourceEx_U                                         0x9A3DC2BFu
#define NTOSKRNL_LdrFindResource_U                                           0x8D8BFA8Bu
#define NTOSKRNL_LdrResFindResource                                          0xF7E2B63Au
#define NTOSKRNL_LdrResFindResourceDirectory                                 0x357C42E7u
#define NTOSKRNL_LdrResSearchResource                                        0x7826C6E8u
#define NTOSKRNL_LpcPortObjectType                                           0x5202AAF7u
#define NTOSKRNL_LpcReplyWaitReplyPort                                       0x8E56C245u
#define NTOSKRNL_LpcRequestPort                                              0x1FC640DFu
#define NTOSKRNL_LpcRequestWaitReplyPort                                     0xF866C20Au
#define NTOSKRNL_LpcRequestWaitReplyPortEx                                   0x2BE93B70u
#define NTOSKRNL_LpcSendWaitReceivePort                                      0x8A69C0F8u
#define NTOSKRNL_LsaCallAuthenticationPackage                                0xAACB3A83u
#define NTOSKRNL_LsaDeregisterLogonProcess                                   0x06CFFC72u
#define NTOSKRNL_LsaFreeReturnBuffer                                         0x2D0E9F58u
#define NTOSKRNL_LsaLogonUser                                                0xBEF307E2u
#define NTOSKRNL_LsaLookupAuthenticationPackage                              0xDE085B53u
#define NTOSKRNL_LsaRegisterLogonProcess                                     0x1AA26439u
#define NTOSKRNL_Mm64BitPhysicalAddress                                      0x21F4FC62u
#define NTOSKRNL_MmAddPhysicalMemory                                         0x86190386u
#define NTOSKRNL_MmAddVerifierThunks                                         0x732829D6u
#define NTOSKRNL_MmAdjustWorkingSetSize                                      0x1B2CFDC2u
#define NTOSKRNL_MmAdvanceMdl                                                0x8A221786u
#define NTOSKRNL_MmAllocateContiguousMemory                                  0x9B2805A7u
#define NTOSKRNL_MmAllocateContiguousMemorySpecifyCache                      0xB51FD28Fu
#define NTOSKRNL_MmAllocateContiguousMemorySpecifyCacheNode                  0x94F7F699u
#define NTOSKRNL_MmAllocateMappingAddress                                    0xB8E63D08u
#define NTOSKRNL_MmAllocateNonCachedMemory                                   0x77A8A017u
#define NTOSKRNL_MmAllocatePagesForMdl                                       0xF8DF5E00u
#define NTOSKRNL_MmAllocatePagesForMdlEx                                     0x03EBDD00u
#define NTOSKRNL_MmBadPointer                                                0xFEEE771Au
#define NTOSKRNL_MmBuildMdlForNonPagedPool                                   0xD5BF7AF6u
#define NTOSKRNL_MmCanFileBeTruncated                                        0xDDD3604Cu
#define NTOSKRNL_MmCommitSessionMappedView                                   0x9C0844E7u
#define NTOSKRNL_MmCopyVirtualMemory                                         0x60B347D9u
#define NTOSKRNL_MmCreateMdl                                                 0xAEF5B018u
#define NTOSKRNL_MmCreateMirror                                              0xB205E324u
#define NTOSKRNL_MmCreateSection                                             0xA570B536u
#define NTOSKRNL_MmDisableModifiedWriteOfSection                             0x2C84E4E8u
#define NTOSKRNL_MmDoesFileHaveUserWritableReferences                        0x44DB2E74u
#define NTOSKRNL_MmFlushImageSection                                         0xBB2A2D79u
#define NTOSKRNL_MmForceSectionClosed                                        0x724B8271u
#define NTOSKRNL_MmFreeContiguousMemory                                      0xC4E8483Eu
#define NTOSKRNL_MmFreeContiguousMemorySpecifyCache                          0x20E3D656u
#define NTOSKRNL_MmFreeMappingAddress                                        0x48F55B5Fu
#define NTOSKRNL_MmFreeNonCachedMemory                                       0x1B625E15u
#define NTOSKRNL_MmFreePagesFromMdl                                          0x4AC89AB1u
#define NTOSKRNL_MmGetPhysicalAddress                                        0xBCE39EB2u
#define NTOSKRNL_MmGetPhysicalMemoryRanges                                   0x5AFF3751u
#define NTOSKRNL_MmGetSystemRoutineAddress                                   0x9838DA18u
#define NTOSKRNL_MmGetVirtualForPhysical                                     0xB9C25AFAu
#define NTOSKRNL_MmGrowKernelStack                                           0x1C330EF3u
#define NTOSKRNL_MmHighestUserAddress                                        0x00EC00DBu
#define NTOSKRNL_MmIsAddressValid                                            0xBA91B3FFu
#define NTOSKRNL_MmIsDriverVerifying                                         0xA542F830u
#define NTOSKRNL_MmIsDriverVerifyingByAddress                                0x5C4AF3E6u
#define NTOSKRNL_MmIsIoSpaceActive                                           0x361DBFC5u
#define NTOSKRNL_MmIsNonPagedSystemAddressValid                              0x7A22D584u
#define NTOSKRNL_MmIsRecursiveIoFault                                        0xBAD4F77Au
#define NTOSKRNL_MmIsThisAnNtAsSystem                                        0xFA92C85Eu
#define NTOSKRNL_MmIsVerifierEnabled                                         0xBED1C8B0u
#define NTOSKRNL_MmLockPagableDataSection                                    0x0F01EA69u
#define NTOSKRNL_MmLockPagableImageSection                                   0x96960933u
#define NTOSKRNL_MmLockPagableSectionByHandle                                0xF2E3C2DCu
#define NTOSKRNL_MmMapIoSpace                                                0x08A8F80Du
#define NTOSKRNL_MmMapLockedPages                                            0xC78D2A67u
#define NTOSKRNL_MmMapLockedPagesSpecifyCache                                0xB0D58073u
#define NTOSKRNL_MmMapLockedPagesWithReservedMapping                         0xBAFA0FB0u
#define NTOSKRNL_MmMapMemoryDumpMdl                                          0x9F32A955u
#define NTOSKRNL_MmMapUserAddressesToPage                                    0xEC058BC8u
#define NTOSKRNL_MmMapVideoDisplay                                           0xD08BBD62u
#define NTOSKRNL_MmMapViewInSessionSpace                                     0x8A9C3FC8u
#define NTOSKRNL_MmMapViewInSystemSpace                                      0x813F0563u
#define NTOSKRNL_MmMapViewOfSection                                          0x44D03656u
#define NTOSKRNL_MmMarkPhysicalMemoryAsBad                                   0x4AEF1F80u
#define NTOSKRNL_MmMarkPhysicalMemoryAsGood                                  0xDBF16BB9u
#define NTOSKRNL_MmPageEntireDriver                                          0xA9BAF04Fu
#define NTOSKRNL_MmPrefetchPages                                             0x26ADEEB0u
#define NTOSKRNL_MmProbeAndLockPages                                         0x06256E04u
#define NTOSKRNL_MmProbeAndLockProcessPages                                  0x08217D28u
#define NTOSKRNL_MmProbeAndLockSelectedPages                                 0x2C79C413u
#define NTOSKRNL_MmProtectMdlSystemAddress                                   0xCA70DDF0u
#define NTOSKRNL_MmQuerySystemSize                                           0x7496F8A7u
#define NTOSKRNL_MmRemovePhysicalMemory                                      0xAFEDA5C6u
#define NTOSKRNL_MmResetDriverPaging                                         0x7B90F9AFu
#define NTOSKRNL_MmRotatePhysicalView                                        0xCB7266BBu
#define NTOSKRNL_MmSectionObjectType                                         0x9212563Au
#define NTOSKRNL_MmSecureVirtualMemory                                       0x569303D8u
#define NTOSKRNL_MmSetAddressRangeModified                                   0xD7ADAD62u
#define NTOSKRNL_MmSetBankedSection                                          0x1654148Bu
#define NTOSKRNL_MmSizeOfMdl                                                 0x75426190u
#define NTOSKRNL_MmSystemRangeStart                                          0x0578BE9Eu
#define NTOSKRNL_MmTrimAllSystemPagableMemory                                0x6A50042Au
#define NTOSKRNL_MmUnlockPagableImageSection                                 0x8FA21C9Bu
#define NTOSKRNL_MmUnlockPages                                               0x3CE2BD77u
#define NTOSKRNL_MmUnmapIoSpace                                              0xDCA46207u
#define NTOSKRNL_MmUnmapLockedPages                                          0x67206AAEu
#define NTOSKRNL_MmUnmapReservedMapping                                      0x23162B35u
#define NTOSKRNL_MmUnmapVideoDisplay                                         0x78928977u
#define NTOSKRNL_MmUnmapViewInSessionSpace                                   0xC79955CEu
#define NTOSKRNL_MmUnmapViewInSystemSpace                                    0xD10D6D48u
#define NTOSKRNL_MmUnmapViewOfSection                                        0x62528355u
#define NTOSKRNL_MmUnsecureVirtualMemory                                     0x17C9824Bu
#define NTOSKRNL_MmUserProbeAddress                                          0x2B3BB2D7u
#define NTOSKRNL_NlsAnsiCodePage                                             0xB7873811u
#define NTOSKRNL_NlsLeadByteInfo                                             0x81C41997u
#define NTOSKRNL_NlsMbCodePageTag                                            0xB8B9935Fu
#define NTOSKRNL_NlsMbOemCodePageTag                                         0xBB4C5348u
#define NTOSKRNL_NlsOemCodePage                                              0x56DE7894u
#define NTOSKRNL_NlsOemLeadByteInfo                                          0xA1E80807u
#define NTOSKRNL_NtAddAtom                                                   0x765DCE27u
#define NTOSKRNL_NtAdjustPrivilegesToken                                     0x0A74F805u
#define NTOSKRNL_NtAllocateLocallyUniqueId                                   0x0C9C9577u
#define NTOSKRNL_NtAllocateUuids                                             0xA717308Fu
#define NTOSKRNL_NtAllocateVirtualMemory                                     0x977BFFAAu
#define NTOSKRNL_NtBuildGUID                                                 0xF4D30026u
#define NTOSKRNL_NtBuildLab                                                  0x2F1126B3u
#define NTOSKRNL_NtBuildNumber                                               0x01DFFE60u
#define NTOSKRNL_NtClose                                                     0xB82DD68Cu
#define NTOSKRNL_NtCommitComplete                                            0x6B03077Eu
#define NTOSKRNL_NtCommitEnlistment                                          0xF07781D7u
#define NTOSKRNL_NtCommitTransaction                                         0xD7599B8Eu
#define NTOSKRNL_NtConnectPort                                               0x268D47B8u
#define NTOSKRNL_NtCreateEnlistment                                          0x37391193u
#define NTOSKRNL_NtCreateEvent                                               0x763A9FB4u
#define NTOSKRNL_NtCreateFile                                                0x8202905Fu
#define NTOSKRNL_NtCreateResourceManager                                     0x01956BE6u
#define NTOSKRNL_NtCreateSection                                             0xA5B08736u
#define NTOSKRNL_NtCreateTransaction                                         0x05510367u
#define NTOSKRNL_NtCreateTransactionManager                                  0xA2D5582Au
#define NTOSKRNL_NtDeleteAtom                                                0xBEE3E4D7u
#define NTOSKRNL_NtDeleteFile                                                0xCAE3875Fu
#define NTOSKRNL_NtDeviceIoControlFile                                       0x1DB11115u
#define NTOSKRNL_NtDuplicateObject                                           0x2F2D9CEBu
#define NTOSKRNL_NtDuplicateToken                                            0xE1497FE1u
#define NTOSKRNL_NtEnumerateTransactionObject                                0x730B9543u
#define NTOSKRNL_NtFindAtom                                                  0xEF97F432u
#define NTOSKRNL_NtFreeVirtualMemory                                         0x45F67332u
#define NTOSKRNL_NtFreezeTransactions                                        0x816CFCD9u
#define NTOSKRNL_NtFsControlFile                                             0x7C8824B1u
#define NTOSKRNL_NtGetEnvironmentVariableEx                                  0x60DC8292u
#define NTOSKRNL_NtGetNotificationResourceManager                            0xF179256Fu
#define NTOSKRNL_NtGlobalFlag                                                0xC613EE77u
#define NTOSKRNL_NtLockFile                                                  0xCB6617A0u
#define NTOSKRNL_NtMakePermanentObject                                       0xC1AD48AFu
#define NTOSKRNL_NtMapViewOfSection                                          0x24C93656u
#define NTOSKRNL_NtNotifyChangeDirectoryFile                                 0x25DB34CFu
#define NTOSKRNL_NtOpenEnlistment                                            0xE6C5C5DFu
#define NTOSKRNL_NtOpenFile                                                  0xD331D7ACu
#define NTOSKRNL_NtOpenProcess                                               0x0CD0352Du
#define NTOSKRNL_NtOpenProcessToken                                          0xB0ECFDB5u
#define NTOSKRNL_NtOpenProcessTokenEx                                        0xD6CB138Eu
#define NTOSKRNL_NtOpenResourceManager                                       0xA26CC37Fu
#define NTOSKRNL_NtOpenThread                                                0xB350E81Eu
#define NTOSKRNL_NtOpenThreadToken                                           0xCFED47D2u
#define NTOSKRNL_NtOpenThreadTokenEx                                         0x4B371567u
#define NTOSKRNL_NtOpenTransaction                                           0x9FD89958u
#define NTOSKRNL_NtOpenTransactionManager                                    0x5E0114FBu
#define NTOSKRNL_NtPrePrepareComplete                                        0xE61E251Cu
#define NTOSKRNL_NtPrePrepareEnlistment                                      0x7A43F55Eu
#define NTOSKRNL_NtPrepareComplete                                           0xC123F59Eu
#define NTOSKRNL_NtPrepareEnlistment                                         0x72DF021Cu
#define NTOSKRNL_NtPropagationComplete                                       0xF4E19070u
#define NTOSKRNL_NtPropagationFailed                                         0x4B252776u
#define NTOSKRNL_NtQueryDirectoryFile                                        0x54E6A06Du
#define NTOSKRNL_NtQueryEaFile                                               0xDC9987ADu
#define NTOSKRNL_NtQueryEnvironmentVariableInfoEx                            0xA8629218u
#define NTOSKRNL_NtQueryInformationAtom                                      0x814F6C7Bu
#define NTOSKRNL_NtQueryInformationEnlistment                                0x50D20C40u
#define NTOSKRNL_NtQueryInformationFile                                      0xF54F0FF3u
#define NTOSKRNL_NtQueryInformationProcess                                   0x33BC1ABEu
#define NTOSKRNL_NtQueryInformationResourceManager                           0xCE435040u
#define NTOSKRNL_NtQueryInformationThread                                    0xCFC9137Fu
#define NTOSKRNL_NtQueryInformationToken                                     0xFCDE7DC7u
#define NTOSKRNL_NtQueryInformationTransaction                               0x66EB6F9Au
#define NTOSKRNL_NtQueryInformationTransactionManager                        0x49C88B4Du
#define NTOSKRNL_NtQueryQuotaInformationFile                                 0xA50AA97Bu
#define NTOSKRNL_NtQuerySecurityAttributesToken                              0xE08302C0u
#define NTOSKRNL_NtQuerySecurityObject                                       0xE8671844u
#define NTOSKRNL_NtQuerySystemInformation                                    0x8945E91Eu
#define NTOSKRNL_NtQuerySystemInformationEx                                  0x7A2DB7DCu
#define NTOSKRNL_NtQueryVolumeInformationFile                                0x1EED4B2Au
#define NTOSKRNL_NtReadFile                                                  0x3B9497A4u
#define NTOSKRNL_NtReadOnlyEnlistment                                        0x65A594F0u
#define NTOSKRNL_NtRecoverEnlistment                                         0x0356BCF9u
#define NTOSKRNL_NtRecoverResourceManager                                    0x694A3132u
#define NTOSKRNL_NtRecoverTransactionManager                                 0xCD78321Eu
#define NTOSKRNL_NtRequestPort                                               0xFFCD58DCu
#define NTOSKRNL_NtRequestWaitReplyPort                                      0xF81AC369u
#define NTOSKRNL_NtRollbackComplete                                          0x9CF0C6A7u
#define NTOSKRNL_NtRollbackEnlistment                                        0x97A84ED0u
#define NTOSKRNL_NtRollbackTransaction                                       0x2EB97775u
#define NTOSKRNL_NtSetEaFile                                                 0x8480F1D5u
#define NTOSKRNL_NtSetEvent                                                  0x0184CF9Fu
#define NTOSKRNL_NtSetInformationEnlistment                                  0x9019BF82u
#define NTOSKRNL_NtSetInformationFile                                        0x3A440CDDu
#define NTOSKRNL_NtSetInformationProcess                                     0xB63D8DD9u
#define NTOSKRNL_NtSetInformationResourceManager                             0x4FD437C5u
#define NTOSKRNL_NtSetInformationThread                                      0x74F53F73u
#define NTOSKRNL_NtSetInformationToken                                       0x9CBBA426u
#define NTOSKRNL_NtSetInformationTransaction                                 0x10933783u
#define NTOSKRNL_NtSetQuotaInformationFile                                   0x3B1CAF26u
#define NTOSKRNL_NtSetSecurityObject                                         0xF111601Cu
#define NTOSKRNL_NtSetVolumeInformationFile                                  0xDE26F8E8u
#define NTOSKRNL_NtShutdownSystem                                            0xFE3D53EFu
#define NTOSKRNL_NtThawTransactions                                          0x852B1B51u
#define NTOSKRNL_NtTraceControl                                              0xAAF7E47Fu
#define NTOSKRNL_NtTraceEvent                                                0x92E2486Cu
#define NTOSKRNL_NtUnlockFile                                                0xC8210C71u
#define NTOSKRNL_NtVdmControl                                                0xAC1A7F60u
#define NTOSKRNL_NtWaitForSingleObject                                       0xD4347607u
#define NTOSKRNL_NtWriteFile                                                 0x3CC7B5B7u
#define NTOSKRNL_ObAssignSecurity                                            0x1F1E9667u
#define NTOSKRNL_ObCheckCreateObjectAccess                                   0x1124E49Du
#define NTOSKRNL_ObCheckObjectAccess                                         0x6E464CB1u
#define NTOSKRNL_ObCloseHandle                                               0xF3B599FFu
#define NTOSKRNL_ObCreateObject                                              0x1EB46B26u
#define NTOSKRNL_ObCreateObjectType                                          0x566FC122u
#define NTOSKRNL_ObDeleteCapturedInsertInfo                                  0x6BFD19BFu
#define NTOSKRNL_ObDereferenceObject                                         0xBA620F02u
#define NTOSKRNL_ObDereferenceObjectDeferDelete                              0xB1630CCEu
#define NTOSKRNL_ObDereferenceObjectDeferDeleteWithTag                       0x22D2CCD2u
#define NTOSKRNL_ObDereferenceSecurityDescriptor                             0x399E7ECAu
#define NTOSKRNL_ObFindHandleForObject                                       0x05CD4F83u
#define NTOSKRNL_ObGetFilterVersion                                          0xA4AE57A3u
#define NTOSKRNL_ObGetObjectSecurity                                         0x4A542D0Au
#define NTOSKRNL_ObGetObjectType                                             0xD9454D75u
#define NTOSKRNL_ObInsertObject                                              0x2C752F56u
#define NTOSKRNL_ObIsDosDeviceLocallyMapped                                  0x49A8AB3Cu
#define NTOSKRNL_ObIsKernelHandle                                            0x98E3C81Cu
#define NTOSKRNL_ObLogSecurityDescriptor                                     0x5C5F03B7u
#define NTOSKRNL_ObMakeTemporaryObject                                       0xD8208C86u
#define NTOSKRNL_ObOpenObjectByName                                          0x8A85AB1Cu
#define NTOSKRNL_ObOpenObjectByPointer                                       0x929EABAAu
#define NTOSKRNL_ObOpenObjectByPointerWithTag                                0x03CD21E9u
#define NTOSKRNL_ObQueryNameInfo                                             0xC3FE98A7u
#define NTOSKRNL_ObQueryNameString                                           0x86A23031u
#define NTOSKRNL_ObQueryObjectAuditingByHandle                               0x7711A7FFu
#define NTOSKRNL_ObReferenceObjectByHandle                                   0xEE30C104u
#define NTOSKRNL_ObReferenceObjectByHandleWithTag                            0x702852BCu
#define NTOSKRNL_ObReferenceObjectByName                                     0x8F503B7Au
#define NTOSKRNL_ObReferenceObjectByPointer                                  0x785698A8u
#define NTOSKRNL_ObReferenceObjectByPointerWithTag                           0x149B6071u
#define NTOSKRNL_ObReferenceSecurityDescriptor                               0x7D1EDD09u
#define NTOSKRNL_ObRegisterCallbacks                                         0xE5DFFF9Eu
#define NTOSKRNL_ObReleaseObjectSecurity                                     0x5C76A489u
#define NTOSKRNL_ObSetHandleAttributes                                       0xB713F90Du
#define NTOSKRNL_ObSetSecurityDescriptorInfo                                 0x5C79711Au
#define NTOSKRNL_ObSetSecurityObjectByPointer                                0x9D4EF782u
#define NTOSKRNL_ObUnRegisterCallbacks                                       0x54DF936Fu
#define NTOSKRNL_ObfDereferenceObject                                        0x1DE2BB02u
#define NTOSKRNL_ObfDereferenceObjectWithTag                                 0x47B6C16Cu
#define NTOSKRNL_ObfReferenceObject                                          0x1245331Fu
#define NTOSKRNL_ObfReferenceObjectWithTag                                   0xAFCBFD2Cu
#define NTOSKRNL_POGOBuffer                                                  0xAD4F1CF5u
#define NTOSKRNL_PcwAddInstance                                              0xCBEC9502u
#define NTOSKRNL_PcwCloseInstance                                            0xD1C15838u
#define NTOSKRNL_PcwCreateInstance                                           0xC475B19Bu
#define NTOSKRNL_PcwRegister                                                 0x4AE5AF7Fu
#define NTOSKRNL_PcwUnregister                                               0x4C1436E7u
#define NTOSKRNL_PfFileInfoNotify                                            0x1271DBF5u
#define NTOSKRNL_PfxFindPrefix                                               0xE7C77ABFu
#define NTOSKRNL_PfxInitialize                                               0xE3111950u
#define NTOSKRNL_PfxInsertPrefix                                             0x95743AE5u
#define NTOSKRNL_PfxRemovePrefix                                             0xB6BDF0C9u
#define NTOSKRNL_PoCallDriver                                                0xB77FF4C4u
#define NTOSKRNL_PoCancelDeviceNotify                                        0x24A7A70Du
#define NTOSKRNL_PoClearPowerRequest                                         0xD4C03FEAu
#define NTOSKRNL_PoCreatePowerRequest                                        0x0DF1E9A6u
#define NTOSKRNL_PoDeletePowerRequest                                        0xECE6E9EEu
#define NTOSKRNL_PoDisableSleepStates                                        0x82CA0F8Du
#define NTOSKRNL_PoEndDeviceBusy                                             0x2EF3BB29u
#define NTOSKRNL_PoGetSystemWake                                             0x74926DF9u
#define NTOSKRNL_PoQueryWatchdogTime                                         0x85DFCF9Fu
#define NTOSKRNL_PoQueueShutdownWorkItem                                     0xA04F5223u
#define NTOSKRNL_PoReenableSleepStates                                       0xBD46FE61u
#define NTOSKRNL_PoRegisterDeviceForIdleDetection                            0x85BFB6F1u
#define NTOSKRNL_PoRegisterDeviceNotify                                      0x40CF8910u
#define NTOSKRNL_PoRegisterPowerSettingCallback                              0xC3D16179u
#define NTOSKRNL_PoRegisterSystemState                                       0xF5182EB3u
#define NTOSKRNL_PoRequestPowerIrp                                           0xA8CF8576u
#define NTOSKRNL_PoRequestShutdownEvent                                      0xC3E027ADu
#define NTOSKRNL_PoSetDeviceBusyEx                                           0xA1337895u
#define NTOSKRNL_PoSetFixedWakeSource                                        0x45D3977Cu
#define NTOSKRNL_PoSetHiberRange                                             0x8007A6D6u
#define NTOSKRNL_PoSetPowerRequest                                           0x595277FFu
#define NTOSKRNL_PoSetPowerState                                             0x1715CA56u
#define NTOSKRNL_PoSetSystemState                                            0x65FD2C77u
#define NTOSKRNL_PoSetSystemWake                                             0x34926DF8u
#define NTOSKRNL_PoShutdownBugCheck                                          0xD49C938Fu
#define NTOSKRNL_PoStartDeviceBusy                                           0x6E6D8E13u
#define NTOSKRNL_PoStartNextPowerIrp                                         0x15706BA3u
#define NTOSKRNL_PoUnregisterPowerSettingCallback                            0xCB516AA9u
#define NTOSKRNL_PoUnregisterSystemState                                     0xF546AEF7u
#define NTOSKRNL_PoUserShutdownInitiated                                     0x8F3D62DEu
#define NTOSKRNL_ProbeForRead                                                0xB6F5EA70u
#define NTOSKRNL_ProbeForWrite                                               0x9D1C1D3Bu
#define NTOSKRNL_PsAcquireProcessExitSynchronization                         0x0B130880u
#define NTOSKRNL_PsAssignImpersonationToken                                  0x6408F98Au
#define NTOSKRNL_PsChargePoolQuota                                           0xCD0CF839u
#define NTOSKRNL_PsChargeProcessCpuCycles                                    0x053381ADu
#define NTOSKRNL_PsChargeProcessNonPagedPoolQuota                            0x746BD2E3u
#define NTOSKRNL_PsChargeProcessPagedPoolQuota                               0xB8D22C1Du
#define NTOSKRNL_PsChargeProcessPoolQuota                                    0xF3B739E1u
#define NTOSKRNL_PsCreateSystemThread                                        0xB4ED8B0Cu
#define NTOSKRNL_PsDereferenceImpersonationToken                             0x54E9A768u
#define NTOSKRNL_PsDereferenceKernelStack                                    0xED19244Bu
#define NTOSKRNL_PsDereferencePrimaryToken                                   0x25E2B9C5u
#define NTOSKRNL_PsDisableImpersonation                                      0xFF50835Au
#define NTOSKRNL_PsEnterPriorityRegion                                       0xC942C9D6u
#define NTOSKRNL_PsEstablishWin32Callouts                                    0x1AA794FDu
#define NTOSKRNL_PsGetContextThread                                          0x75151740u
#define NTOSKRNL_PsGetCurrentProcess                                         0x1335FBFCu
#define NTOSKRNL_PsGetCurrentProcessId                                       0xF045F78Bu
#define NTOSKRNL_PsGetCurrentProcessSessionId                                0xE907E2BFu
#define NTOSKRNL_PsGetCurrentProcessWin32Process                             0xCE32BC0Cu
#define NTOSKRNL_PsGetCurrentThread                                          0xC5D81730u
#define NTOSKRNL_PsGetCurrentThreadId                                        0xC31E4038u
#define NTOSKRNL_PsGetCurrentThreadPreviousMode                              0xF3F290B6u
#define NTOSKRNL_PsGetCurrentThreadProcess                                   0x14C491AFu
#define NTOSKRNL_PsGetCurrentThreadProcessId                                 0xBC5A3222u
#define NTOSKRNL_PsGetCurrentThreadStackBase                                 0xC4BEE9A3u
#define NTOSKRNL_PsGetCurrentThreadStackLimit                                0xA5D5FCE3u
#define NTOSKRNL_PsGetCurrentThreadTeb                                       0xBC073801u
#define NTOSKRNL_PsGetCurrentThreadWin32Thread                               0x0C38947Cu
#define NTOSKRNL_PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion         0x6A2B8345u
#define NTOSKRNL_PsGetJobLock                                                0x12F6A27Bu
#define NTOSKRNL_PsGetJobSessionId                                           0xCB704C23u
#define NTOSKRNL_PsGetJobUIRestrictionsClass                                 0x9DD5A1B0u
#define NTOSKRNL_PsGetProcessCreateTimeQuadPart                              0xA73CC3DFu
#define NTOSKRNL_PsGetProcessDebugPort                                       0x2941E8DAu
#define NTOSKRNL_PsGetProcessExitProcessCalled                               0x1F189F22u
#define NTOSKRNL_PsGetProcessExitStatus                                      0x7F7B3F33u
#define NTOSKRNL_PsGetProcessExitTime                                        0xA966538Eu
#define NTOSKRNL_PsGetProcessId                                              0x64E1A8B3u
#define NTOSKRNL_PsGetProcessImageFileName                                   0x6AFA914Au
#define NTOSKRNL_PsGetProcessInheritedFromUniqueProcessId                    0x26FAC758u
#define NTOSKRNL_PsGetProcessJob                                             0x39170CFEu
#define NTOSKRNL_PsGetProcessPeb                                             0x51164CFEu
#define NTOSKRNL_PsGetProcessPriorityClass                                   0x81919756u
#define NTOSKRNL_PsGetProcessSectionBaseAddress                              0xB3FBDE4Du
#define NTOSKRNL_PsGetProcessSecurityPort                                    0xB46FFF57u
#define NTOSKRNL_PsGetProcessSessionId                                       0x2DA2C046u
#define NTOSKRNL_PsGetProcessSessionIdEx                                     0x18BE2B79u
#define NTOSKRNL_PsGetProcessWin32Process                                    0x9CA3C0EEu
#define NTOSKRNL_PsGetProcessWin32WindowStation                              0x02C3F7ABu
#define NTOSKRNL_PsGetThreadFreezeCount                                      0x59A4495Cu
#define NTOSKRNL_PsGetThreadHardErrorsAreDisabled                            0xAB264D7Cu
#define NTOSKRNL_PsGetThreadId                                               0x3ADAE51Au
#define NTOSKRNL_PsGetThreadProcess                                          0xE74DDBEAu
#define NTOSKRNL_PsGetThreadProcessId                                        0xAB94170Bu
#define NTOSKRNL_PsGetThreadSessionId                                        0x67531A2Bu
#define NTOSKRNL_PsGetThreadTeb                                              0x28A36739u
#define NTOSKRNL_PsGetThreadWin32Thread                                      0xA867ACE8u
#define NTOSKRNL_PsGetVersion                                                0x0BF03DEAu
#define NTOSKRNL_PsImpersonateClient                                         0x6365DDADu
#define NTOSKRNL_PsInitialSystemProcess                                      0xD843D1A9u
#define NTOSKRNL_PsIsCurrentThreadPrefetching                                0x1029B7B0u
#define NTOSKRNL_PsIsProcessBeingDebugged                                    0x82859F8Au
#define NTOSKRNL_PsIsProtectedProcess                                        0xE8AAA517u
#define NTOSKRNL_PsIsSystemProcess                                           0xD6465044u
#define NTOSKRNL_PsIsSystemThread                                            0x981E3CADu
#define NTOSKRNL_PsIsThreadImpersonating                                     0x87C556DCu
#define NTOSKRNL_PsIsThreadTerminating                                       0x93C021A1u
#define NTOSKRNL_PsJobType                                                   0x7A3CFAB9u
#define NTOSKRNL_PsLeavePriorityRegion                                       0xAC97ED4Fu
#define NTOSKRNL_PsLookupProcessByProcessId                                  0xF4B46DF6u
#define NTOSKRNL_PsLookupProcessThreadByCid                                  0x8CE3CAA0u
#define NTOSKRNL_PsLookupThreadByThreadId                                    0x235824D7u
#define NTOSKRNL_PsProcessType                                               0xF55E84C4u
#define NTOSKRNL_PsQueryProcessExceptionFlags                                0xF7DFF1BEu
#define NTOSKRNL_PsReferenceImpersonationToken                               0xB268F363u
#define NTOSKRNL_PsReferenceKernelStack                                      0x3D33A537u
#define NTOSKRNL_PsReferencePrimaryToken                                     0x75CD23C0u
#define NTOSKRNL_PsReferenceProcessFilePointer                               0x8D2605A6u
#define NTOSKRNL_PsReleaseProcessExitSynchronization                         0xAB238FD3u
#define NTOSKRNL_PsRemoveCreateThreadNotifyRoutine                           0xE76A5956u
#define NTOSKRNL_PsRemoveLoadImageNotifyRoutine                              0x017A4F0Cu
#define NTOSKRNL_PsRestoreImpersonation                                      0xF3C5B332u
#define NTOSKRNL_PsResumeProcess                                             0x80785BDCu
#define NTOSKRNL_PsReturnPoolQuota                                           0x982F626Cu
#define NTOSKRNL_PsReturnProcessNonPagedPoolQuota                            0xDD770049u
#define NTOSKRNL_PsReturnProcessPagedPoolQuota                               0xED8015B8u
#define NTOSKRNL_PsRevertThreadToSelf                                        0xA5AAE651u
#define NTOSKRNL_PsRevertToSelf                                              0x3C096DDFu
#define NTOSKRNL_PsSetContextThread                                          0x751517E0u
#define NTOSKRNL_PsSetCreateProcessNotifyRoutine                             0x07C2B252u
#define NTOSKRNL_PsSetCreateProcessNotifyRoutineEx                           0x4817AAB1u
#define NTOSKRNL_PsSetCreateThreadNotifyRoutine                              0x8EBFAFB8u
#define NTOSKRNL_PsSetCurrentThreadPrefetching                               0x97ACB221u
#define NTOSKRNL_PsSetJobUIRestrictionsClass                                 0x89D5A1B0u
#define NTOSKRNL_PsSetLegoNotifyRoutine                                      0x36F3D37Bu
#define NTOSKRNL_PsSetLoadImageNotifyRoutine                                 0xDDA9E4E1u
#define NTOSKRNL_PsSetProcessPriorityByClass                                 0x04286984u
#define NTOSKRNL_PsSetProcessPriorityClass                                   0x81919753u
#define NTOSKRNL_PsSetProcessSecurityPort                                    0xB447FF57u
#define NTOSKRNL_PsSetProcessWin32Process                                    0x9C8BC0EEu
#define NTOSKRNL_PsSetProcessWindowStation                                   0x22D64648u
#define NTOSKRNL_PsSetThreadHardErrorsAreDisabled                            0x83264D7Cu
#define NTOSKRNL_PsSetThreadWin32Thread                                      0xA267ACE8u
#define NTOSKRNL_PsSuspendProcess                                            0xF2B31A52u
#define NTOSKRNL_PsTerminateSystemThread                                     0x6E908A05u
#define NTOSKRNL_PsThreadType                                                0x78FF0369u
#define NTOSKRNL_PsUILanguageComitted                                        0x2255AC55u
#define NTOSKRNL_PsWrapApcWow64Thread                                        0xFB23A295u
#define NTOSKRNL_READ_REGISTER_BUFFER_UCHAR                                  0xA3837BE6u
#define NTOSKRNL_READ_REGISTER_BUFFER_ULONG                                  0xBF829C73u
#define NTOSKRNL_READ_REGISTER_BUFFER_USHORT                                 0x567CD424u
#define NTOSKRNL_READ_REGISTER_UCHAR                                         0xE08FBA67u
#define NTOSKRNL_READ_REGISTER_ULONG                                         0xFC8E5DF2u
#define NTOSKRNL_READ_REGISTER_USHORT                                        0xCE4CFC45u
#define NTOSKRNL_RtlAbsoluteToSelfRelativeSD                                 0xE8FC0FF6u
#define NTOSKRNL_RtlAddAccessAllowedAce                                      0x945FB807u
#define NTOSKRNL_RtlAddAccessAllowedAceEx                                    0x1E59DE98u
#define NTOSKRNL_RtlAddAce                                                   0xA25700E5u
#define NTOSKRNL_RtlAddAtomToAtomTable                                       0xDAA5EE63u
#define NTOSKRNL_RtlAddRange                                                 0xBBB5BD66u
#define NTOSKRNL_RtlAllocateHeap                                             0x5364422Cu
#define NTOSKRNL_RtlAnsiCharToUnicodeChar                                    0xFC689629u
#define NTOSKRNL_RtlAnsiStringToUnicodeSize                                  0x6C1FAD58u
#define NTOSKRNL_RtlAnsiStringToUnicodeString                                0x506DBAD2u
#define NTOSKRNL_RtlAppendAsciizToString                                     0x874B85CBu
#define NTOSKRNL_RtlAppendStringToString                                     0xF7A33CCBu
#define NTOSKRNL_RtlAppendUnicodeStringToString                              0x55493D30u
#define NTOSKRNL_RtlAppendUnicodeToString                                    0x12125659u
#define NTOSKRNL_RtlAreAllAccessesGranted                                    0x79A8762Du
#define NTOSKRNL_RtlAreAnyAccessesGranted                                    0x79AA7685u
#define NTOSKRNL_RtlAreBitsClear                                             0x00213D58u
#define NTOSKRNL_RtlAreBitsSet                                               0x4B466A91u
#define NTOSKRNL_RtlAssert                                                   0x33252B74u
#define NTOSKRNL_RtlCaptureContext                                           0xBF350CDEu
#define NTOSKRNL_RtlCaptureStackBackTrace                                    0x6D6AAB89u
#define NTOSKRNL_RtlCharToInteger                                            0xC02A5D3Cu
#define NTOSKRNL_RtlCheckRegistryKey                                         0xC5C83A4Bu
#define NTOSKRNL_RtlClearAllBits                                             0xEADFE91Fu
#define NTOSKRNL_RtlClearBit                                                 0x188674F5u
#define NTOSKRNL_RtlClearBits                                                0xCE9EA363u
#define NTOSKRNL_RtlCmDecodeMemIoResource                                    0x08CFB9E9u
#define NTOSKRNL_RtlCmEncodeMemIoResource                                    0x68CFBDE8u
#define NTOSKRNL_RtlCompareAltitudes                                         0x606CCAFAu
#define NTOSKRNL_RtlCompareMemory                                            0x09700C41u
#define NTOSKRNL_RtlCompareMemoryUlong                                       0xABBDEEE4u
#define NTOSKRNL_RtlCompareString                                            0x106383E3u
#define NTOSKRNL_RtlCompareUnicodeString                                     0xC29AA4B3u
#define NTOSKRNL_RtlCompareUnicodeStrings                                    0x54967820u
#define NTOSKRNL_RtlCompressBuffer                                           0xE2643292u
#define NTOSKRNL_RtlCompressChunks                                           0xC3B5FB11u
#define NTOSKRNL_RtlComputeCrc32                                             0xF92A4040u
#define NTOSKRNL_RtlContractHashTable                                        0x192382C9u
#define NTOSKRNL_RtlConvertLongToLargeInteger                                0x2FA9BC35u
#define NTOSKRNL_RtlConvertSidToUnicodeString                                0x5154A9AAu
#define NTOSKRNL_RtlConvertUlongToLargeInteger                               0x00EA14B4u
#define NTOSKRNL_RtlCopyLuid                                                 0xC506ABCFu
#define NTOSKRNL_RtlCopyLuidAndAttributesArray                               0x0AFDF902u
#define NTOSKRNL_RtlCopyRangeList                                            0x8852CFECu
#define NTOSKRNL_RtlCopySid                                                  0x215DA838u
#define NTOSKRNL_RtlCopySidAndAttributesArray                                0x66F22693u
#define NTOSKRNL_RtlCopyString                                               0x0B09D776u
#define NTOSKRNL_RtlCopyUnicodeString                                        0x6A41F617u
#define NTOSKRNL_RtlCreateAcl                                                0x9EFC50FCu
#define NTOSKRNL_RtlCreateAtomTable                                          0x21725781u
#define NTOSKRNL_RtlCreateHashTable                                          0x89755E8Bu
#define NTOSKRNL_RtlCreateHeap                                               0x921E372Fu
#define NTOSKRNL_RtlCreateRegistryKey                                        0x9FA0ABC1u
#define NTOSKRNL_RtlCreateSecurityDescriptor                                 0x7C9B1FE8u
#define NTOSKRNL_RtlCreateSystemVolumeInformationFolder                      0xE54BACAAu
#define NTOSKRNL_RtlCreateUnicodeString                                      0xB4C31524u
#define NTOSKRNL_RtlCustomCPToUnicodeN                                       0xA3F291E9u
#define NTOSKRNL_RtlDecompressBuffer                                         0x601B3B1Cu
#define NTOSKRNL_RtlDecompressChunks                                         0x41CAF29Fu
#define NTOSKRNL_RtlDecompressFragment                                       0x0D9C6896u
#define NTOSKRNL_RtlDelete                                                   0x3245E4EFu
#define NTOSKRNL_RtlDeleteAce                                                0x26FE17FDu
#define NTOSKRNL_RtlDeleteAtomFromAtomTable                                  0xBD0655B8u
#define NTOSKRNL_RtlDeleteElementGenericTable                                0xBE09FD25u
#define NTOSKRNL_RtlDeleteElementGenericTableAvl                             0x00F052B2u
#define NTOSKRNL_RtlDeleteHashTable                                          0x18B7708Bu
#define NTOSKRNL_RtlDeleteNoSplay                                            0xCCBDB781u
#define NTOSKRNL_RtlDeleteOwnersRanges                                       0xF4C3ED47u
#define NTOSKRNL_RtlDeleteRange                                              0xD9A7193Au
#define NTOSKRNL_RtlDeleteRegistryValue                                      0xB3A93CE8u
#define NTOSKRNL_RtlDescribeChunk                                            0xC9775DFBu
#define NTOSKRNL_RtlDestroyAtomTable                                         0xFB629CA8u
#define NTOSKRNL_RtlDestroyHeap                                              0x7F1652BBu
#define NTOSKRNL_RtlDowncaseUnicodeChar                                      0x4DA7FF56u
#define NTOSKRNL_RtlDowncaseUnicodeString                                    0x34FB563Au
#define NTOSKRNL_RtlDuplicateUnicodeString                                   0x88EA092Cu
#define NTOSKRNL_RtlEmptyAtomTable                                           0xE91CB94Bu
#define NTOSKRNL_RtlEndEnumerationHashTable                                  0x6216ACBBu
#define NTOSKRNL_RtlEndWeakEnumerationHashTable                              0xD71A33F5u
#define NTOSKRNL_RtlEnlargedIntegerMultiply                                  0x15B97C04u
#define NTOSKRNL_RtlEnlargedUnsignedDivide                                   0x5BB3DF90u
#define NTOSKRNL_RtlEnlargedUnsignedMultiply                                 0x5CB449B3u
#define NTOSKRNL_RtlEnumerateEntryHashTable                                  0x31344956u
#define NTOSKRNL_RtlEnumerateGenericTable                                    0xCF4ABF63u
#define NTOSKRNL_RtlEnumerateGenericTableAvl                                 0xA151718Au
#define NTOSKRNL_RtlEnumerateGenericTableLikeADirectory                      0xB2C4758Cu
#define NTOSKRNL_RtlEnumerateGenericTableWithoutSplaying                     0x1B00A099u
#define NTOSKRNL_RtlEnumerateGenericTableWithoutSplayingAvl                  0x845E8CE0u
#define NTOSKRNL_RtlEqualLuid                                                0x57790274u
#define NTOSKRNL_RtlEqualSid                                                 0x6C813BC5u
#define NTOSKRNL_RtlEqualString                                              0xE54029D0u
#define NTOSKRNL_RtlEqualUnicodeString                                       0x5D33B9E2u
#define NTOSKRNL_RtlEthernetAddressToStringA                                 0x04859329u
#define NTOSKRNL_RtlEthernetAddressToStringW                                 0x0485933Fu
#define NTOSKRNL_RtlEthernetStringToAddressA                                 0xB06F42C9u
#define NTOSKRNL_RtlEthernetStringToAddressW                                 0xB06F42DFu
#define NTOSKRNL_RtlExpandHashTable                                          0xD8D54AE2u
#define NTOSKRNL_RtlExtendedIntegerMultiply                                  0x77950D84u
#define NTOSKRNL_RtlExtendedLargeIntegerDivide                               0x845D8A61u
#define NTOSKRNL_RtlExtendedMagicDivide                                      0x9BC7C5BAu
#define NTOSKRNL_RtlFillMemory                                               0xF2BF1ED4u
#define NTOSKRNL_RtlFillMemoryUlong                                          0x5C23CBCFu
#define NTOSKRNL_RtlFillMemoryUlonglong                                      0x00F8345Au
#define NTOSKRNL_RtlFindAceByType                                            0x8A3370CFu
#define NTOSKRNL_RtlFindClearBits                                            0xB283F99Fu
#define NTOSKRNL_RtlFindClearBitsAndSet                                      0xB48B7E57u
#define NTOSKRNL_RtlFindClearRuns                                            0xC280B19Fu
#define NTOSKRNL_RtlFindClosestEncodableLength                               0x28D259EBu
#define NTOSKRNL_RtlFindFirstRunClear                                        0xDCB2B824u
#define NTOSKRNL_RtlFindLastBackwardRunClear                                 0xCDF9CBEBu
#define NTOSKRNL_RtlFindLeastSignificantBit                                  0xA057C42Fu
#define NTOSKRNL_RtlFindLongestRunClear                                      0xEBB96152u
#define NTOSKRNL_RtlFindMessage                                              0xEE395232u
#define NTOSKRNL_RtlFindMostSignificantBit                                   0x0307AE10u
#define NTOSKRNL_RtlFindNextForwardRunClear                                  0x59723A33u
#define NTOSKRNL_RtlFindRange                                                0xF89E17FFu
#define NTOSKRNL_RtlFindSetBits                                              0xCE4CAAA4u
#define NTOSKRNL_RtlFindSetBitsAndClear                                      0xD48D3277u
#define NTOSKRNL_RtlFindUnicodePrefix                                        0x51A427BEu
#define NTOSKRNL_RtlFormatCurrentUserKeyPath                                 0x1C0C2D21u
#define NTOSKRNL_RtlFormatMessage                                            0x53B8A371u
#define NTOSKRNL_RtlFreeAnsiString                                           0x0817D9F0u
#define NTOSKRNL_RtlFreeHeap                                                 0xACC0E9F1u
#define NTOSKRNL_RtlFreeOemString                                            0xFACF2DC3u
#define NTOSKRNL_RtlFreeRangeList                                            0xDBDC4FB8u
#define NTOSKRNL_RtlFreeUnicodeString                                        0x6F04CEFFu
#define NTOSKRNL_RtlGUIDFromString                                           0x98E0C776u
#define NTOSKRNL_RtlGenerate8dot3Name                                        0x3970E77Du
#define NTOSKRNL_RtlGetAce                                                   0xA24708E9u
#define NTOSKRNL_RtlGetCallersAddress                                        0xA28E3F2Au
#define NTOSKRNL_RtlGetCompressionWorkSpaceSize                              0x0C61E327u
#define NTOSKRNL_RtlGetDaclSecurityDescriptor                                0xDCC008C0u
#define NTOSKRNL_RtlGetDefaultCodePage                                       0x3C9381F4u
#define NTOSKRNL_RtlGetElementGenericTable                                   0xA11D799Cu
#define NTOSKRNL_RtlGetElementGenericTableAvl                                0x8AB20E3Du
#define NTOSKRNL_RtlGetEnabledExtendedFeatures                               0x08CD6B5Bu
#define NTOSKRNL_RtlGetFirstRange                                            0x48C2224Bu
#define NTOSKRNL_RtlGetGroupSecurityDescriptor                               0x35C9D55Fu
#define NTOSKRNL_RtlGetIntegerAtom                                           0xB99CF8A7u
#define NTOSKRNL_RtlGetLastRange                                             0x6F13359Du
#define NTOSKRNL_RtlGetNextEntryHashTable                                    0x8575F45Du
#define NTOSKRNL_RtlGetNextRange                                             0x4F11F79Du
#define NTOSKRNL_RtlGetNtGlobalFlags                                         0xE4E35A87u
#define NTOSKRNL_RtlGetOwnerSecurityDescriptor                               0x3DC3DD4Du
#define NTOSKRNL_RtlGetProductInfo                                           0xDA7947CDu
#define NTOSKRNL_RtlGetSaclSecurityDescriptor                                0xDCEE08C0u
#define NTOSKRNL_RtlGetSetBootStatusData                                     0x4F4E42ADu
#define NTOSKRNL_RtlGetThreadLangIdByIndex                                   0x08E2E25Au
#define NTOSKRNL_RtlGetVersion                                               0x2BE23D93u
#define NTOSKRNL_RtlHashUnicodeString                                        0x6A8AD467u
#define NTOSKRNL_RtlIdnToAscii                                               0xD1127C80u
#define NTOSKRNL_RtlIdnToNameprepUnicode                                     0x9346425Cu
#define NTOSKRNL_RtlIdnToUnicode                                             0x1BEDCCADu
#define NTOSKRNL_RtlImageDirectoryEntryToData                                0x48650D2Fu
#define NTOSKRNL_RtlImageNtHeader                                            0x6797AE71u
#define NTOSKRNL_RtlInitAnsiString                                           0xC811C7B5u
#define NTOSKRNL_RtlInitAnsiStringEx                                         0xD728E766u
#define NTOSKRNL_RtlInitCodePageTable                                        0x0ACB9AC4u
#define NTOSKRNL_RtlInitEnumerationHashTable                                 0xBB518171u
#define NTOSKRNL_RtlInitString                                               0xC24A9676u
#define NTOSKRNL_RtlInitUnicodeString                                        0x6C0BEC1Fu
#define NTOSKRNL_RtlInitUnicodeStringEx                                      0x7DB88FC8u
#define NTOSKRNL_RtlInitWeakEnumerationHashTable                             0x0BB7A787u
#define NTOSKRNL_RtlInitializeBitMap                                         0x34DC2A33u
#define NTOSKRNL_RtlInitializeGenericTable                                   0x1C859525u
#define NTOSKRNL_RtlInitializeGenericTableAvl                                0x46C452E3u
#define NTOSKRNL_RtlInitializeRangeList                                      0x8A5DF7BBu
#define NTOSKRNL_RtlInitializeSid                                            0xC001A004u
#define NTOSKRNL_RtlInitializeUnicodePrefix                                  0xD3513D7Du
#define NTOSKRNL_RtlInsertElementGenericTable                                0x7B89A542u
#define NTOSKRNL_RtlInsertElementGenericTableAvl                             0xC0DC6150u
#define NTOSKRNL_RtlInsertElementGenericTableFull                            0x802A1BF7u
#define NTOSKRNL_RtlInsertElementGenericTableFullAvl                         0x11033BADu
#define NTOSKRNL_RtlInsertEntryHashTable                                     0xB3470EB3u
#define NTOSKRNL_RtlInsertUnicodePrefix                                      0x0935F49Eu
#define NTOSKRNL_RtlInt64ToUnicodeString                                     0xEE5CB618u
#define NTOSKRNL_RtlIntegerToChar                                            0x0F773D1Cu
#define NTOSKRNL_RtlIntegerToUnicode                                         0x071786EFu
#define NTOSKRNL_RtlIntegerToUnicodeString                                   0x42F63805u
#define NTOSKRNL_RtlInvertRangeList                                          0x96C3CA1Du
#define NTOSKRNL_RtlInvertRangeListEx                                        0x7653AF50u
#define NTOSKRNL_RtlIoDecodeMemIoResource                                    0x09CFB949u
#define NTOSKRNL_RtlIoEncodeMemIoResource                                    0x69CFBD48u
#define NTOSKRNL_RtlIpv4AddressToStringA                                     0x9437CD32u
#define NTOSKRNL_RtlIpv4AddressToStringExA                                   0xDA5FDF75u
#define NTOSKRNL_RtlIpv4AddressToStringExW                                   0xDA5FDF63u
#define NTOSKRNL_RtlIpv4AddressToStringW                                     0x9437CD24u
#define NTOSKRNL_RtlIpv4StringToAddressA                                     0x20DD1CD2u
#define NTOSKRNL_RtlIpv4StringToAddressExA                                   0x588C7432u
#define NTOSKRNL_RtlIpv4StringToAddressExW                                   0x588C7424u
#define NTOSKRNL_RtlIpv4StringToAddressW                                     0x20DD1CC4u
#define NTOSKRNL_RtlIpv6AddressToStringA                                     0x9435CD32u
#define NTOSKRNL_RtlIpv6AddressToStringExA                                   0xDA5FD775u
#define NTOSKRNL_RtlIpv6AddressToStringExW                                   0xDA5FD763u
#define NTOSKRNL_RtlIpv6AddressToStringW                                     0x9435CD24u
#define NTOSKRNL_RtlIpv6StringToAddressA                                     0x20DF1CD2u
#define NTOSKRNL_RtlIpv6StringToAddressExA                                   0x588C7C32u
#define NTOSKRNL_RtlIpv6StringToAddressExW                                   0x588C7C24u
#define NTOSKRNL_RtlIpv6StringToAddressW                                     0x20DF1CC4u
#define NTOSKRNL_RtlIsGenericTableEmpty                                      0xB393BCDCu
#define NTOSKRNL_RtlIsGenericTableEmptyAvl                                   0xCDD0AE34u
#define NTOSKRNL_RtlIsNameLegalDOS8Dot3                                      0x1E246548u
#define NTOSKRNL_RtlIsNormalizedString                                       0x57F6512Cu
#define NTOSKRNL_RtlIsNtDdiVersionAvailable                                  0x94ECA880u
#define NTOSKRNL_RtlIsRangeAvailable                                         0xBEEF5EE9u
#define NTOSKRNL_RtlIsServicePackVersionInstalled                            0xC3C3CB5Au
#define NTOSKRNL_RtlIsValidOemCharacter                                      0x9670E1C0u
#define NTOSKRNL_RtlLargeIntegerAdd                                          0xD822D751u
#define NTOSKRNL_RtlLargeIntegerArithmeticShift                              0xC13ED165u
#define NTOSKRNL_RtlLargeIntegerDivide                                       0xB5B72182u
#define NTOSKRNL_RtlLargeIntegerNegate                                       0x95752916u
#define NTOSKRNL_RtlLargeIntegerShiftLeft                                    0x469BC2B1u
#define NTOSKRNL_RtlLargeIntegerShiftRight                                   0x7DB5AEA7u
#define NTOSKRNL_RtlLargeIntegerSubtract                                     0xA30DB7DAu
#define NTOSKRNL_RtlLengthRequiredSid                                        0x1C1E3FE8u
#define NTOSKRNL_RtlLengthSecurityDescriptor                                 0xBC8D538Du
#define NTOSKRNL_RtlLengthSid                                                0x6EFFD978u
#define NTOSKRNL_RtlLoadString                                               0x82EE9776u
#define NTOSKRNL_RtlLocalTimeToSystemTime                                    0x6DFD3266u
#define NTOSKRNL_RtlLockBootStatusData                                       0xD1DA656Eu
#define NTOSKRNL_RtlLookupAtomInAtomTable                                    0x97CE734Fu
#define NTOSKRNL_RtlLookupElementGenericTable                                0x7C95AD35u
#define NTOSKRNL_RtlLookupElementGenericTableAvl                             0x4ED85AD3u
#define NTOSKRNL_RtlLookupElementGenericTableFull                            0x075A6A37u
#define NTOSKRNL_RtlLookupElementGenericTableFullAvl                         0xA93BDBEEu
#define NTOSKRNL_RtlLookupEntryHashTable                                     0x30C90A88u
#define NTOSKRNL_RtlLookupFirstMatchingElementGenericTableAvl                0x979FCEDCu
#define NTOSKRNL_RtlMapGenericMask                                           0xADE83081u
#define NTOSKRNL_RtlMapSecurityErrorToNtStatus                               0x262DFEE2u
#define NTOSKRNL_RtlMergeRangeLists                                          0xC1905DC2u
#define NTOSKRNL_RtlMoveMemory                                               0x23DD58D4u
#define NTOSKRNL_RtlMultiByteToUnicodeN                                      0x2814CD62u
#define NTOSKRNL_RtlMultiByteToUnicodeSize                                   0xAE69FFF0u
#define NTOSKRNL_RtlNextUnicodePrefix                                        0x542C07DEu
#define NTOSKRNL_RtlNormalizeString                                          0x0D168C2Au
#define NTOSKRNL_RtlNtStatusToDosError                                       0x418982EDu
#define NTOSKRNL_RtlNtStatusToDosErrorNoTeb                                  0xD7FF9239u
#define NTOSKRNL_RtlNumberGenericTableElements                               0xD6AD41E8u
#define NTOSKRNL_RtlNumberGenericTableElementsAvl                            0x52AE3406u
#define NTOSKRNL_RtlNumberOfClearBits                                        0x2DC1B42Cu
#define NTOSKRNL_RtlNumberOfSetBits                                          0x1EDFC643u
#define NTOSKRNL_RtlNumberOfSetBitsUlongPtr                                  0x3133F031u
#define NTOSKRNL_RtlOemStringToCountedUnicodeString                          0xA6BB5BF8u
#define NTOSKRNL_RtlOemStringToUnicodeSize                                   0x085D6673u
#define NTOSKRNL_RtlOemStringToUnicodeString                                 0xFDFCB1FEu
#define NTOSKRNL_RtlOemToUnicodeN                                            0xD995233Fu
#define NTOSKRNL_RtlOwnerAcesPresent                                         0xCBBD0B66u
#define NTOSKRNL_RtlPinAtomInAtomTable                                       0xFA88EE45u
#define NTOSKRNL_RtlPrefetchMemoryNonTemporal                                0x72DA72CFu
#define NTOSKRNL_RtlPrefixString                                             0x335B760Du
#define NTOSKRNL_RtlPrefixUnicodeString                                      0xB383631Cu
#define NTOSKRNL_RtlQueryAtomInAtomTable                                     0xC8FB890Fu
#define NTOSKRNL_RtlQueryDynamicTimeZoneInformation                          0xE1CE4AB4u
#define NTOSKRNL_RtlQueryElevationFlags                                      0x8CE529ADu
#define NTOSKRNL_RtlQueryModuleInformation                                   0x4E9E3BA8u
#define NTOSKRNL_RtlQueryRegistryValues                                      0x94D1C7A1u
#define NTOSKRNL_RtlQueryTimeZoneInformation                                 0x101FB10Cu
#define NTOSKRNL_RtlRaiseException                                           0x64D379CCu
#define NTOSKRNL_RtlRandom                                                   0x360685CBu
#define NTOSKRNL_RtlRandomEx                                                 0x2CD0BA6Fu
#define NTOSKRNL_RtlRealPredecessor                                          0xA0C6341Au
#define NTOSKRNL_RtlRealSuccessor                                            0x52F71127u
#define NTOSKRNL_RtlRemoveEntryHashTable                                     0x7A8D2290u
#define NTOSKRNL_RtlRemoveUnicodePrefix                                      0x682BBACFu
#define NTOSKRNL_RtlReplaceSidInSd                                           0xD1144122u
#define NTOSKRNL_RtlReserveChunk                                             0x9AE9F831u
#define NTOSKRNL_RtlRunOnceBeginInitialize                                   0x2653CB65u
#define NTOSKRNL_RtlRunOnceComplete                                          0x33A67B68u
#define NTOSKRNL_RtlRunOnceExecuteOnce                                       0xF0C78947u
#define NTOSKRNL_RtlRunOnceInitialize                                        0xB1C0D482u
#define NTOSKRNL_RtlSecondsSince1970ToTime                                   0x4B60F981u
#define NTOSKRNL_RtlSecondsSince1980ToTime                                   0x3360F981u
#define NTOSKRNL_RtlSelfRelativeToAbsoluteSD                                 0xCDF91270u
#define NTOSKRNL_RtlSelfRelativeToAbsoluteSD2                                0x224E198Du
#define NTOSKRNL_RtlSetAllBits                                               0x2884851Cu
#define NTOSKRNL_RtlSetBit                                                   0xAE4648D0u
#define NTOSKRNL_RtlSetBits                                                  0xC91A15BBu
#define NTOSKRNL_RtlSetDaclSecurityDescriptor                                0xC8C008C0u
#define NTOSKRNL_RtlSetDynamicTimeZoneInformation                            0x5203638Bu
#define NTOSKRNL_RtlSetGroupSecurityDescriptor                               0x35C9D7DFu
#define NTOSKRNL_RtlSetOwnerSecurityDescriptor                               0x3DC3DFCDu
#define NTOSKRNL_RtlSetSaclSecurityDescriptor                                0xC8EE08C0u
#define NTOSKRNL_RtlSetTimeZoneInformation                                   0x69BA96FAu
#define NTOSKRNL_RtlSidHashInitialize                                        0x4349DA56u
#define NTOSKRNL_RtlSidHashLookup                                            0x16D0AD6Fu
#define NTOSKRNL_RtlSizeHeap                                                 0x04C629CFu
#define NTOSKRNL_RtlSplay                                                    0x252118A2u
#define NTOSKRNL_RtlStringFromGUID                                           0x346E401Au
#define NTOSKRNL_RtlSubAuthorityCountSid                                     0x5867A35Fu
#define NTOSKRNL_RtlSubAuthoritySid                                          0x49459C8Cu
#define NTOSKRNL_RtlSubtreePredecessor                                       0xF3422F4Au
#define NTOSKRNL_RtlSubtreeSuccessor                                         0xB3F1C533u
#define NTOSKRNL_RtlSystemTimeToLocalTime                                    0xAE390FB8u
#define NTOSKRNL_RtlTestBit                                                  0x65686EBCu
#define NTOSKRNL_RtlTimeFieldsToTime                                         0x444FB7C3u
#define NTOSKRNL_RtlTimeToElapsedTimeFields                                  0x5A62C502u
#define NTOSKRNL_RtlTimeToSecondsSince1970                                   0xA91FDCFAu
#define NTOSKRNL_RtlTimeToSecondsSince1980                                   0xA91E3CFAu
#define NTOSKRNL_RtlTimeToTimeFields                                         0x1E020A69u
#define NTOSKRNL_RtlTraceDatabaseAdd                                         0xABDB4F9Cu
#define NTOSKRNL_RtlTraceDatabaseCreate                                      0x68C94EB5u
#define NTOSKRNL_RtlTraceDatabaseDestroy                                     0x30B627CEu
#define NTOSKRNL_RtlTraceDatabaseEnumerate                                   0x01BDD748u
#define NTOSKRNL_RtlTraceDatabaseFind                                        0x5DF2D69Fu
#define NTOSKRNL_RtlTraceDatabaseLock                                        0x45F37390u
#define NTOSKRNL_RtlTraceDatabaseUnlock                                      0x510BAA17u
#define NTOSKRNL_RtlTraceDatabaseValidate                                    0x6D296D4Du
#define NTOSKRNL_RtlUTF8ToUnicodeN                                           0x6FD6D15Au
#define NTOSKRNL_RtlUlongByteSwap                                            0x8AB4F532u
#define NTOSKRNL_RtlUlonglongByteSwap                                        0x052020CCu
#define NTOSKRNL_RtlUnicodeStringToAnsiSize                                  0xA808B1CBu
#define NTOSKRNL_RtlUnicodeStringToAnsiString                                0x1F7DE6A0u
#define NTOSKRNL_RtlUnicodeStringToCountedOemString                          0xF074D44Bu
#define NTOSKRNL_RtlUnicodeStringToInteger                                   0x5D06C64Du
#define NTOSKRNL_RtlUnicodeStringToOemSize                                   0x6494BD4Cu
#define NTOSKRNL_RtlUnicodeStringToOemString                                 0x004F9692u
#define NTOSKRNL_RtlUnicodeToCustomCPN                                       0x6D9B5C10u
#define NTOSKRNL_RtlUnicodeToMultiByteN                                      0x00B770F1u
#define NTOSKRNL_RtlUnicodeToMultiByteSize                                   0xFFB73664u
#define NTOSKRNL_RtlUnicodeToOemN                                            0xF3B37355u
#define NTOSKRNL_RtlUnicodeToUTF8N                                           0xC3C466B8u
#define NTOSKRNL_RtlUnlockBootStatusData                                     0x41B26E9Eu
#define NTOSKRNL_RtlUnwind                                                   0x02F6A94Cu
#define NTOSKRNL_RtlUpcaseUnicodeChar                                        0x322138E6u
#define NTOSKRNL_RtlUpcaseUnicodeString                                      0xF5054D24u
#define NTOSKRNL_RtlUpcaseUnicodeStringToAnsiString                          0x7C0D82ADu
#define NTOSKRNL_RtlUpcaseUnicodeStringToCountedOemString                    0xE9778C97u
#define NTOSKRNL_RtlUpcaseUnicodeStringToOemString                           0x20248D11u
#define NTOSKRNL_RtlUpcaseUnicodeToCustomCPN                                 0x0397DDBCu
#define NTOSKRNL_RtlUpcaseUnicodeToMultiByteN                                0x9082FD30u
#define NTOSKRNL_RtlUpcaseUnicodeToOemN                                      0xC4B53383u
#define NTOSKRNL_RtlUpperChar                                                0x2A9955EAu
#define NTOSKRNL_RtlUpperString                                              0xC567AC90u
#define NTOSKRNL_RtlUshortByteSwap                                           0xEF649500u
#define NTOSKRNL_RtlValidRelativeSecurityDescriptor                          0xF50CF66Cu
#define NTOSKRNL_RtlValidSecurityDescriptor                                  0x6B5A67F1u
#define NTOSKRNL_RtlValidSid                                                 0xF4053FF7u
#define NTOSKRNL_RtlValidateUnicodeString                                    0xD23C3B1Au
#define NTOSKRNL_RtlVerifyVersionInfo                                        0xFFBD5648u
#define NTOSKRNL_RtlVolumeDeviceToDosName                                    0x118EBE69u
#define NTOSKRNL_RtlWalkFrameChain                                           0x8B828AACu
#define NTOSKRNL_RtlWeaklyEnumerateEntryHashTable                            0x72258B44u
#define NTOSKRNL_RtlWriteRegistryValue                                       0xFF139EEEu
#define NTOSKRNL_RtlZeroHeap                                                 0x4C6529DFu
#define NTOSKRNL_RtlZeroMemory                                               0x013FD2D4u
#define NTOSKRNL_RtlxAnsiStringToUnicodeSize                                 0x75570998u
#define NTOSKRNL_RtlxOemStringToUnicodeSize                                  0x2E5DAC36u
#define NTOSKRNL_RtlxUnicodeStringToAnsiSize                                 0xB140150Bu
#define NTOSKRNL_RtlxUnicodeStringToOemSize                                  0x42947709u
#define NTOSKRNL_SeAccessCheck                                               0x8472768Eu
#define NTOSKRNL_SeAccessCheckEx                                             0x3A1969A2u
#define NTOSKRNL_SeAccessCheckFromState                                      0xC0F5B2F3u
#define NTOSKRNL_SeAccessCheckWithHint                                       0x68E12A1Bu
#define NTOSKRNL_SeAppendPrivileges                                          0xF48383B7u
#define NTOSKRNL_SeAssignSecurity                                            0x1EDE9687u
#define NTOSKRNL_SeAssignSecurityEx                                          0x1C73DA22u
#define NTOSKRNL_SeAuditHardLinkCreation                                     0x3598424Cu
#define NTOSKRNL_SeAuditHardLinkCreationWithTransaction                      0x2557BA98u
#define NTOSKRNL_SeAuditTransactionStateChange                               0x4868E892u
#define NTOSKRNL_SeAuditingAnyFileEventsWithContext                          0x3E328CEBu
#define NTOSKRNL_SeAuditingFileEvents                                        0x5434E5C9u
#define NTOSKRNL_SeAuditingFileEventsWithContext                             0xAD3B25EEu
#define NTOSKRNL_SeAuditingFileOrGlobalEvents                                0xC0E17E27u
#define NTOSKRNL_SeAuditingHardLinkEvents                                    0x3DE5B2DAu
#define NTOSKRNL_SeAuditingHardLinkEventsWithContext                         0x06B29106u
#define NTOSKRNL_SeAuditingWithTokenForSubcategory                           0x551AED2Eu
#define NTOSKRNL_SeCaptureSecurityDescriptor                                 0xD0BC0C88u
#define NTOSKRNL_SeCaptureSubjectContext                                     0x0710F9BDu
#define NTOSKRNL_SeCaptureSubjectContextEx                                   0xF414E39Eu
#define NTOSKRNL_SeCloseObjectAuditAlarm                                     0x763BAC03u
#define NTOSKRNL_SeCloseObjectAuditAlarmForNonObObject                       0x1730B83Cu
#define NTOSKRNL_SeComputeAutoInheritByObjectType                            0x204834E1u
#define NTOSKRNL_SeCreateAccessState                                         0x5C72151Eu
#define NTOSKRNL_SeCreateAccessStateEx                                       0x7979682Cu
#define NTOSKRNL_SeCreateClientSecurity                                      0x6EB547D2u
#define NTOSKRNL_SeCreateClientSecurityFromSubjectContext                    0x604374CDu
#define NTOSKRNL_SeDeassignSecurity                                          0x7EBBD635u
#define NTOSKRNL_SeDeleteAccessState                                         0x5E351DA6u
#define NTOSKRNL_SeDeleteObjectAuditAlarm                                    0x167B1E6Eu
#define NTOSKRNL_SeDeleteObjectAuditAlarmWithTransaction                     0x3A4D5B89u
#define NTOSKRNL_SeExamineSacl                                               0xD574E923u
#define NTOSKRNL_SeExports                                                   0xE71FA401u
#define NTOSKRNL_SeFilterToken                                               0x34473A15u
#define NTOSKRNL_SeFreePrivileges                                            0xE1A36F28u
#define NTOSKRNL_SeGetLinkedToken                                            0xB50F348Au
#define NTOSKRNL_SeImpersonateClient                                         0xA365D1AFu
#define NTOSKRNL_SeImpersonateClientEx                                       0xBE85373Eu
#define NTOSKRNL_SeLocateProcessImageName                                    0x39E9C904u
#define NTOSKRNL_SeLockSubjectContext                                        0xDD40A916u
#define NTOSKRNL_SeMarkLogonSessionForTerminationNotification                0xB8314B62u
#define NTOSKRNL_SeOpenObjectAuditAlarm                                      0x67DCD275u
#define NTOSKRNL_SeOpenObjectAuditAlarmForNonObObject                        0x8AB4C1E3u
#define NTOSKRNL_SeOpenObjectAuditAlarmWithTransaction                       0xB7733B52u
#define NTOSKRNL_SeOpenObjectForDeleteAuditAlarm                             0x3F747F2Au
#define NTOSKRNL_SeOpenObjectForDeleteAuditAlarmWithTransaction              0x723651A8u
#define NTOSKRNL_SePrivilegeCheck                                            0x8C71DBE4u
#define NTOSKRNL_SePrivilegeObjectAuditAlarm                                 0x27521A0Fu
#define NTOSKRNL_SePublicDefaultDacl                                         0xAF117204u
#define NTOSKRNL_SeQueryAuthenticationIdToken                                0xB7CF1E8Au
#define NTOSKRNL_SeQueryInformationToken                                     0xBCFC7DC0u
#define NTOSKRNL_SeQuerySecurityAttributesToken                              0xDA8212C0u
#define NTOSKRNL_SeQuerySecurityDescriptorInfo                               0xAA04FBCBu
#define NTOSKRNL_SeQuerySessionIdToken                                       0x08E3DD40u
#define NTOSKRNL_SeRegisterLogonSessionTerminatedRoutine                     0x244EE298u
#define NTOSKRNL_SeReleaseSecurityDescriptor                                 0xC11E2DCFu
#define NTOSKRNL_SeReleaseSubjectContext                                     0x250488A7u
#define NTOSKRNL_SeReportSecurityEvent                                       0x68A3AE49u
#define NTOSKRNL_SeReportSecurityEventWithSubCategory                        0xBC0FF012u
#define NTOSKRNL_SeSetAccessStateGenericMapping                              0xE392501Au
#define NTOSKRNL_SeSetAuditParameter                                         0x3D208EB5u
#define NTOSKRNL_SeSetSecurityAttributesToken                                0x6BC42C01u
#define NTOSKRNL_SeSetSecurityDescriptorInfo                                 0x5C0971FAu
#define NTOSKRNL_SeSetSecurityDescriptorInfoEx                               0xE97885BFu
#define NTOSKRNL_SeSinglePrivilegeCheck                                      0x65317841u
#define NTOSKRNL_SeSrpAccessCheck                                            0x8D385214u
#define NTOSKRNL_SeSystemDefaultDacl                                         0x6B554264u
#define NTOSKRNL_SeTokenImpersonationLevel                                   0xF0B1D6A1u
#define NTOSKRNL_SeTokenIsAdmin                                              0x9D459030u
#define NTOSKRNL_SeTokenIsRestricted                                         0x1E70F0BCu
#define NTOSKRNL_SeTokenIsWriteRestricted                                    0x745918ECu
#define NTOSKRNL_SeTokenObjectType                                           0x1FD65437u
#define NTOSKRNL_SeTokenType                                                 0x9654BFE1u
#define NTOSKRNL_SeUnlockSubjectContext                                      0xDEE68342u
#define NTOSKRNL_SeUnregisterLogonSessionTerminatedRoutine                   0x0E4F318Du
#define NTOSKRNL_SeValidSecurityDescriptor                                   0x4C5A25B1u
#define NTOSKRNL_TmCancelPropagationRequest                                  0x9D375130u
#define NTOSKRNL_TmCommitComplete                                            0x6D4307AEu
#define NTOSKRNL_TmCommitEnlistment                                          0xB06E81D4u
#define NTOSKRNL_TmCommitTransaction                                         0xF759F38Du
#define NTOSKRNL_TmCreateEnlistment                                          0x77201190u
#define NTOSKRNL_TmCurrentTransaction                                        0x6AAF0760u
#define NTOSKRNL_TmDereferenceEnlistmentKey                                  0x91A2D9B2u
#define NTOSKRNL_TmEnableCallbacks                                           0x8FB3CDF7u
#define NTOSKRNL_TmEndPropagationRequest                                     0xB5B361DDu
#define NTOSKRNL_TmEnlistmentObjectType                                      0x55C06E32u
#define NTOSKRNL_TmFreezeTransactions                                        0x8C6C98D9u
#define NTOSKRNL_TmGetTransactionId                                          0x62554FBDu
#define NTOSKRNL_TmInitSystem                                                0x968BF6FDu
#define NTOSKRNL_TmInitSystemPhase2                                          0x3733F5B1u
#define NTOSKRNL_TmInitializeResourceManager                                 0x804830EEu
#define NTOSKRNL_TmInitializeTransaction                                     0xD0E18B7Au
#define NTOSKRNL_TmIsTransactionActive                                       0xAA006CB0u
#define NTOSKRNL_TmPrePrepareComplete                                        0xEB1E411Cu
#define NTOSKRNL_TmPrePrepareEnlistment                                      0x7A77F4CEu
#define NTOSKRNL_TmPrepareComplete                                           0xC139F556u
#define NTOSKRNL_TmPrepareEnlistment                                         0x52DF6A1Fu
#define NTOSKRNL_TmPropagationComplete                                       0xF86191D0u
#define NTOSKRNL_TmPropagationFailed                                         0x6B254F75u
#define NTOSKRNL_TmReadOnlyEnlistment                                        0x68A5F0F0u
#define NTOSKRNL_TmRecoverEnlistment                                         0x2356D4FAu
#define NTOSKRNL_TmRecoverResourceManager                                    0x294AE134u
#define NTOSKRNL_TmRecoverTransactionManager                                 0xCD10313Eu
#define NTOSKRNL_TmReferenceEnlistmentKey                                    0xFCE25330u
#define NTOSKRNL_TmRequestOutcomeEnlistment                                  0x89EFCDEDu
#define NTOSKRNL_TmResourceManagerObjectType                                 0xDBC4E687u
#define NTOSKRNL_TmRollbackComplete                                          0xDCE9C6A4u
#define NTOSKRNL_TmRollbackEnlistment                                        0x9AA82AD0u
#define NTOSKRNL_TmRollbackTransaction                                       0x223976D5u
#define NTOSKRNL_TmSetCurrentTransaction                                     0x72F56645u
#define NTOSKRNL_TmThawTransactions                                          0xC5321B52u
#define NTOSKRNL_TmTransactionManagerObjectType                              0xA2C2B738u
#define NTOSKRNL_TmTransactionObjectType                                     0xCBE8E34Fu
#define NTOSKRNL_TmpIsKTMCommitCoordinator                                   0x113D5875u
#define NTOSKRNL_VerSetConditionMask                                         0xA7705C1Fu
#define NTOSKRNL_VfFailDeviceNode                                            0x0B728DA7u
#define NTOSKRNL_VfFailDriver                                                0x9FDCF4E0u
#define NTOSKRNL_VfFailSystemBIOS                                            0xB910B79Du
#define NTOSKRNL_VfIsVerificationEnabled                                     0xFBA2B2ADu
#define NTOSKRNL_WRITE_REGISTER_BUFFER_UCHAR                                 0xEEDFD3E6u
#define NTOSKRNL_WRITE_REGISTER_BUFFER_ULONG                                 0xF2DE3473u
#define NTOSKRNL_WRITE_REGISTER_BUFFER_USHORT                                0xC37CDD8Fu
#define NTOSKRNL_WRITE_REGISTER_UCHAR                                        0x4B1ABA6Eu
#define NTOSKRNL_WRITE_REGISTER_ULONG                                        0x571B5DFBu
#define NTOSKRNL_WRITE_REGISTER_USHORT                                       0x6E4DC937u
#define NTOSKRNL_WheaAddErrorSource                                          0x00BA2871u
#define NTOSKRNL_WheaConfigureErrorSource                                    0x607DC21Du
#define NTOSKRNL_WheaGetErrorSource                                          0x10B22471u
#define NTOSKRNL_WheaInitializeRecordHeader                                  0x7C3DFD87u
#define NTOSKRNL_WheaReportHwError                                           0x588AEB1Bu
#define NTOSKRNL_WmiGetClock                                                 0x8D857EDCu
#define NTOSKRNL_WmiQueryTraceInformation                                    0xC15B5431u
#define NTOSKRNL_WmiTraceMessage                                             0x22E521E3u
#define NTOSKRNL_WmiTraceMessageVa                                           0x8C8154E6u
#define NTOSKRNL_XIPDispatch                                                 0xFE36416Du
#define NTOSKRNL_ZwAccessCheckAndAuditAlarm                                  0x4EFE5E3Bu
#define NTOSKRNL_ZwAddBootEntry                                              0xD0E5C004u
#define NTOSKRNL_ZwAddDriverEntry                                            0x37F5DF59u
#define NTOSKRNL_ZwAdjustPrivilegesToken                                     0x0A72F800u
#define NTOSKRNL_ZwAlertThread                                               0xAF2AFDCFu
#define NTOSKRNL_ZwAllocateLocallyUniqueId                                   0x189C8D77u
#define NTOSKRNL_ZwAllocateVirtualMemory                                     0x977DFFAFu
#define NTOSKRNL_ZwAlpcAcceptConnectPort                                     0x08E34AA9u
#define NTOSKRNL_ZwAlpcCancelMessage                                         0x233FD0FFu
#define NTOSKRNL_ZwAlpcConnectPort                                           0xD69C1C03u
#define NTOSKRNL_ZwAlpcCreatePort                                            0x47DEDBC4u
#define NTOSKRNL_ZwAlpcCreatePortSection                                     0x8017EC7Bu
#define NTOSKRNL_ZwAlpcCreateResourceReserve                                 0x9405A716u
#define NTOSKRNL_ZwAlpcCreateSectionView                                     0x81882C7Au
#define NTOSKRNL_ZwAlpcCreateSecurityContext                                 0x2AFD388Eu
#define NTOSKRNL_ZwAlpcDeletePortSection                                     0x8250E4C3u
#define NTOSKRNL_ZwAlpcDeleteResourceReserve                                 0x1F858366u
#define NTOSKRNL_ZwAlpcDeleteSectionView                                     0x83CF24C2u
#define NTOSKRNL_ZwAlpcDeleteSecurityContext                                 0xA17D1CFEu
#define NTOSKRNL_ZwAlpcDisconnectPort                                        0x432390B2u
#define NTOSKRNL_ZwAlpcQueryInformation                                      0xCAEBC263u
#define NTOSKRNL_ZwAlpcSendWaitReceivePort                                   0x902A78E8u
#define NTOSKRNL_ZwAlpcSetInformation                                        0x9256441Cu
#define NTOSKRNL_ZwAssignProcessToJobObject                                  0x4B3A6A01u
#define NTOSKRNL_ZwCancelIoFile                                              0xF707F576u
#define NTOSKRNL_ZwCancelTimer                                               0x054E3B21u
#define NTOSKRNL_ZwClearEvent                                                0xB008D64Eu
#define NTOSKRNL_ZwClose                                                     0xB828D68Au
#define NTOSKRNL_ZwCloseObjectAuditAlarm                                     0x361FAC01u
#define NTOSKRNL_ZwCommitComplete                                            0x6BC307DEu
#define NTOSKRNL_ZwCommitEnlistment                                          0x707481D5u
#define NTOSKRNL_ZwCommitTransaction                                         0xB759CB8Eu
#define NTOSKRNL_ZwConnectPort                                               0x668CC7B9u
#define NTOSKRNL_ZwCreateDirectoryObject                                     0xA41BBA61u
#define NTOSKRNL_ZwCreateEnlistment                                          0xB73A1191u
#define NTOSKRNL_ZwCreateEvent                                               0x363B1FB5u
#define NTOSKRNL_ZwCreateFile                                                0x82089053u
#define NTOSKRNL_ZwCreateIoCompletion                                        0xC736032Eu
#define NTOSKRNL_ZwCreateJobObject                                           0xA63EF986u
#define NTOSKRNL_ZwCreateKey                                                 0xB5B59051u
#define NTOSKRNL_ZwCreateKeyTransacted                                       0x02512246u
#define NTOSKRNL_ZwCreateResourceManager                                     0x01936BE3u
#define NTOSKRNL_ZwCreateSection                                             0xA0B08136u
#define NTOSKRNL_ZwCreateSymbolicLinkObject                                  0x9EB2214Cu
#define NTOSKRNL_ZwCreateTimer                                               0x172A7033u
#define NTOSKRNL_ZwCreateTransaction                                         0x65515367u
#define NTOSKRNL_ZwCreateTransactionManager                                  0xA1D55AAAu
#define NTOSKRNL_ZwDeleteBootEntry                                           0x718DBDFDu
#define NTOSKRNL_ZwDeleteDriverEntry                                         0xD1707EAEu
#define NTOSKRNL_ZwDeleteFile                                                0xCAE98753u
#define NTOSKRNL_ZwDeleteKey                                                 0x0DB7D759u
#define NTOSKRNL_ZwDeleteValueKey                                            0xD8323C60u
#define NTOSKRNL_ZwDeviceIoControlFile                                       0x1C311055u
#define NTOSKRNL_ZwDisplayString                                             0xF3E7BA0Bu
#define NTOSKRNL_ZwDuplicateObject                                           0x2F399CF3u
#define NTOSKRNL_ZwDuplicateToken                                            0xE1897F41u
#define NTOSKRNL_ZwEnumerateBootEntries                                      0xD05749F4u
#define NTOSKRNL_ZwEnumerateDriverEntries                                    0x3ADF16F4u
#define NTOSKRNL_ZwEnumerateKey                                              0x7DD24A86u
#define NTOSKRNL_ZwEnumerateTransactionObject                                0x73079549u
#define NTOSKRNL_ZwEnumerateValueKey                                         0x38F907DEu
#define NTOSKRNL_ZwFlushBuffersFile                                          0xF6C76CB7u
#define NTOSKRNL_ZwFlushInstructionCache                                     0x4178B1D8u
#define NTOSKRNL_ZwFlushKey                                                  0x1067E390u
#define NTOSKRNL_ZwFlushVirtualMemory                                        0x2D5C8D0Cu
#define NTOSKRNL_ZwFreeVirtualMemory                                         0x25F62332u
#define NTOSKRNL_ZwFsControlFile                                             0x798822B1u
#define NTOSKRNL_ZwGetNotificationResourceManager                            0xF1D925AFu
#define NTOSKRNL_ZwImpersonateAnonymousToken                                 0x964767C5u
#define NTOSKRNL_ZwInitiatePowerAction                                       0x265B4CA4u
#define NTOSKRNL_ZwIsProcessInJob                                            0x2489E599u
#define NTOSKRNL_ZwLoadDriver                                                0xDE98FAA4u
#define NTOSKRNL_ZwLoadKey                                                   0x920FC8A5u
#define NTOSKRNL_ZwLoadKeyEx                                                 0x96409F5Au
#define NTOSKRNL_ZwLockFile                                                  0xC9E614A0u
#define NTOSKRNL_ZwLockProductActivationKeys                                 0x25C66B61u
#define NTOSKRNL_ZwMakeTemporaryObject                                       0xD2A08DD6u
#define NTOSKRNL_ZwMapViewOfSection                                          0xA4CA3654u
#define NTOSKRNL_ZwModifyBootEntry                                           0xF04BA9B5u
#define NTOSKRNL_ZwModifyDriverEntry                                         0xF37766FFu
#define NTOSKRNL_ZwNotifyChangeKey                                           0x36AACD00u
#define NTOSKRNL_ZwNotifyChangeSession                                       0x74A8B343u
#define NTOSKRNL_ZwOpenDirectoryObject                                       0x066413BDu
#define NTOSKRNL_ZwOpenEnlistment                                            0xE605C57Fu
#define NTOSKRNL_ZwOpenEvent                                                 0x1EA4F5C2u
#define NTOSKRNL_ZwOpenFile                                                  0xD1B1D4ACu
#define NTOSKRNL_ZwOpenJobObject                                             0x014C7078u
#define NTOSKRNL_ZwOpenKey                                                   0x924F0D9Bu
#define NTOSKRNL_ZwOpenKeyEx                                                 0x6E419C4Eu
#define NTOSKRNL_ZwOpenKeyTransacted                                         0x9DBB556Eu
#define NTOSKRNL_ZwOpenKeyTransactedEx                                       0xBA7E4D2Du
#define NTOSKRNL_ZwOpenProcess                                               0x4CD1B52Cu
#define NTOSKRNL_ZwOpenProcessToken                                          0x30EFFDB7u
#define NTOSKRNL_ZwOpenProcessTokenEx                                        0xDCCB1F8Eu
#define NTOSKRNL_ZwOpenResourceManager                                       0xA3ECC23Fu
#define NTOSKRNL_ZwOpenSection                                               0x7C12FE9Fu
#define NTOSKRNL_ZwOpenSession                                               0x7D12FD1Fu
#define NTOSKRNL_ZwOpenSymbolicLinkObject                                    0xA166CF1Du
#define NTOSKRNL_ZwOpenThread                                                0xB35AE812u
#define NTOSKRNL_ZwOpenThreadToken                                           0xCFF947CAu
#define NTOSKRNL_ZwOpenThreadTokenEx                                         0x2B374567u
#define NTOSKRNL_ZwOpenTimer                                                 0x3FB59A44u
#define NTOSKRNL_ZwOpenTransaction                                           0x9FCC9940u
#define NTOSKRNL_ZwOpenTransactionManager                                    0x9E01B4FBu
#define NTOSKRNL_ZwPowerInformation                                          0xDC4FD11Fu
#define NTOSKRNL_ZwPrePrepareComplete                                        0xEC1E291Cu
#define NTOSKRNL_ZwPrePrepareEnlistment                                      0x7A6BF56Eu
#define NTOSKRNL_ZwPrepareComplete                                           0xC137F586u
#define NTOSKRNL_ZwPrepareEnlistment                                         0x12DF521Cu
#define NTOSKRNL_ZwPropagationComplete                                       0xF5619130u
#define NTOSKRNL_ZwPropagationFailed                                         0x2B257776u
#define NTOSKRNL_ZwPulseEvent                                                0xFA6C4F60u
#define NTOSKRNL_ZwQueryBootEntryOrder                                       0x49D3306Au
#define NTOSKRNL_ZwQueryBootOptions                                          0x6BB5129Du
#define NTOSKRNL_ZwQueryDefaultLocale                                        0xBF0668C1u
#define NTOSKRNL_ZwQueryDefaultUILanguage                                    0x73170C87u
#define NTOSKRNL_ZwQueryDirectoryFile                                        0x5EE6AC6Du
#define NTOSKRNL_ZwQueryDirectoryObject                                      0xB5C7F9D7u
#define NTOSKRNL_ZwQueryDriverEntryOrder                                     0xBAE4B765u
#define NTOSKRNL_ZwQueryEaFile                                               0x9C9807ACu
#define NTOSKRNL_ZwQueryFullAttributesFile                                   0xBEA71B4Eu
#define NTOSKRNL_ZwQueryInformationEnlistment                                0x50DE0C4Au
#define NTOSKRNL_ZwQueryInformationFile                                      0xF5670FC3u
#define NTOSKRNL_ZwQueryInformationJobObject                                 0x48E1C6A6u
#define NTOSKRNL_ZwQueryInformationProcess                                   0x27BC02BEu
#define NTOSKRNL_ZwQueryInformationResourceManager                           0xCE5B5054u
#define NTOSKRNL_ZwQueryInformationThread                                    0x0FC9B37Fu
#define NTOSKRNL_ZwQueryInformationToken                                     0xFCD87DC2u
#define NTOSKRNL_ZwQueryInformationTransaction                               0xE6EA2F9Bu
#define NTOSKRNL_ZwQueryInformationTransactionManager                        0x45C8814Du
#define NTOSKRNL_ZwQueryInstallUILanguage                                    0x365A26BEu
#define NTOSKRNL_ZwQueryKey                                                  0xA871AB30u
#define NTOSKRNL_ZwQueryLicenseValue                                         0xA024BB28u
#define NTOSKRNL_ZwQueryObject                                               0xACA9F1A9u
#define NTOSKRNL_ZwQueryQuotaInformationFile                                 0xA55AA91Bu
#define NTOSKRNL_ZwQuerySection                                              0x16A15D75u
#define NTOSKRNL_ZwQuerySecurityAttributesToken                              0xC88332C0u
#define NTOSKRNL_ZwQuerySecurityObject                                       0xE9E71904u
#define NTOSKRNL_ZwQuerySymbolicLinkObject                                   0x7093FA44u
#define NTOSKRNL_ZwQuerySystemInformation                                    0x4945491Eu
#define NTOSKRNL_ZwQueryValueKey                                             0x93BEC4B3u
#define NTOSKRNL_ZwQueryVirtualMemory                                        0xCD05AF8Eu
#define NTOSKRNL_ZwQueryVolumeInformationFile                                0x1EE14B20u
#define NTOSKRNL_ZwReadFile                                                  0x391494A4u
#define NTOSKRNL_ZwReadOnlyEnlistment                                        0x6FA598F0u
#define NTOSKRNL_ZwRecoverEnlistment                                         0x6356ECF9u
#define NTOSKRNL_ZwRecoverResourceManager                                    0xA94A9132u
#define NTOSKRNL_ZwRecoverTransactionManager                                 0xCD28327Eu
#define NTOSKRNL_ZwRemoveIoCompletion                                        0xE4A1076Cu
#define NTOSKRNL_ZwRemoveIoCompletionEx                                      0xB39A2465u
#define NTOSKRNL_ZwRenameKey                                                 0x0C274151u
#define NTOSKRNL_ZwReplaceKey                                                0xA04AF6E5u
#define NTOSKRNL_ZwRequestPort                                               0xBFCCD8DDu
#define NTOSKRNL_ZwRequestWaitReplyPort                                      0xF832C359u
#define NTOSKRNL_ZwResetEvent                                                0x0229DF42u
#define NTOSKRNL_ZwRestoreKey                                                0xB95CF6F9u
#define NTOSKRNL_ZwRollbackComplete                                          0x1CF3C6A5u
#define NTOSKRNL_ZwRollbackEnlistment                                        0x9DA842D0u
#define NTOSKRNL_ZwRollbackTransaction                                       0x2F397635u
#define NTOSKRNL_ZwSaveKey                                                   0x93780839u
#define NTOSKRNL_ZwSaveKeyEx                                                 0xE6454058u
#define NTOSKRNL_ZwSecureConnectPort                                         0x1E17469Du
#define NTOSKRNL_ZwSetBootEntryOrder                                         0x31251972u
#define NTOSKRNL_ZwSetBootOptions                                            0x5B44FECFu
#define NTOSKRNL_ZwSetDefaultLocale                                          0xF7C5AF70u
#define NTOSKRNL_ZwSetDefaultUILanguage                                      0x080380BBu
#define NTOSKRNL_ZwSetDriverEntryOrder                                       0xDB076FC1u
#define NTOSKRNL_ZwSetEaFile                                                 0x84E0F185u
#define NTOSKRNL_ZwSetEvent                                                  0x0304CC9Fu
#define NTOSKRNL_ZwSetInformationEnlistment                                  0x9319BD02u
#define NTOSKRNL_ZwSetInformationFile                                        0x304400DDu
#define NTOSKRNL_ZwSetInformationJobObject                                   0xC2A7D89Bu
#define NTOSKRNL_ZwSetInformationObject                                      0x747D7365u
#define NTOSKRNL_ZwSetInformationProcess                                     0xB63B8DDCu
#define NTOSKRNL_ZwSetInformationResourceManager                             0x49D432C5u
#define NTOSKRNL_ZwSetInformationThread                                      0x74DD3F43u
#define NTOSKRNL_ZwSetInformationToken                                       0x9D3BA566u
#define NTOSKRNL_ZwSetInformationTransaction                                 0x10C337E3u
#define NTOSKRNL_ZwSetQuotaInformationFile                                   0x2F1CB726u
#define NTOSKRNL_ZwSetSecurityObject                                         0x9111301Cu
#define NTOSKRNL_ZwSetSystemInformation                                      0x3251C522u
#define NTOSKRNL_ZwSetSystemTime                                             0x16129C78u
#define NTOSKRNL_ZwSetTimer                                                  0x2215A319u
#define NTOSKRNL_ZwSetTimerEx                                                0x6480F6F4u
#define NTOSKRNL_ZwSetValueKey                                               0x37DF276Bu
#define NTOSKRNL_ZwSetVolumeInformationFile                                  0xDD26FA68u
#define NTOSKRNL_ZwTerminateJobObject                                        0xB08013A4u
#define NTOSKRNL_ZwTerminateProcess                                          0x3FC94200u
#define NTOSKRNL_ZwTraceEvent                                                0x92E84860u
#define NTOSKRNL_ZwTranslateFilePath                                         0x74E73BAEu
#define NTOSKRNL_ZwUnloadDriver                                              0xAA9FCEC7u
#define NTOSKRNL_ZwUnloadKey                                                 0x54E7C6CDu
#define NTOSKRNL_ZwUnloadKeyEx                                               0x355B3F63u
#define NTOSKRNL_ZwUnlockFile                                                0xC82B0C7Du
#define NTOSKRNL_ZwUnmapViewOfSection                                        0x69D2EB55u
#define NTOSKRNL_ZwWaitForMultipleObjects                                    0x4B85F002u
#define NTOSKRNL_ZwWaitForSingleObject                                       0xD5B47747u
#define NTOSKRNL_ZwWriteFile                                                 0x3CA7B5E7u
#define NTOSKRNL_ZwYieldExecution                                            0xE236EECCu
#define NTOSKRNL__CIcos                                                      0x883DC44Cu
#define NTOSKRNL__CIsin                                                      0xC83D0451u
#define NTOSKRNL__CIsqrt                                                     0xC089B973u
#define NTOSKRNL__abnormal_termination                                       0xED26250Bu
#define NTOSKRNL__alldiv                                                     0x96DAD6B5u
#define NTOSKRNL__alldvrm                                                    0x26D632B6u
#define NTOSKRNL__allmul                                                     0xB2D956AFu
#define NTOSKRNL__alloca_probe                                               0x5EA4D76Cu
#define NTOSKRNL__alloca_probe_16                                            0x2E6D9618u
#define NTOSKRNL__alloca_probe_8                                             0xB1717365u
#define NTOSKRNL__allrem                                                     0xCEDB56AEu
#define NTOSKRNL__allshl                                                     0xCADAF6AFu
#define NTOSKRNL__allshr                                                     0xCADAF6B1u
#define NTOSKRNL__aulldiv                                                    0x6ED5569Fu
#define NTOSKRNL__aulldvrm                                                   0xD6D36DB7u
#define NTOSKRNL__aullrem                                                    0x36D4D684u
#define NTOSKRNL__aullshr                                                    0x32D5769Bu
#define NTOSKRNL__chkstk                                                     0xCA99752Cu
#define NTOSKRNL__except_handler2                                            0xF5A41AD2u
#define NTOSKRNL__except_handler3                                            0xF5A41AD3u
#define NTOSKRNL__global_unwind2                                             0x9CB6D7E3u
#define NTOSKRNL__i64toa_s                                                   0xCB460899u
#define NTOSKRNL__i64tow_s                                                   0x93460899u
#define NTOSKRNL__itoa                                                       0xD5FDD4E0u
#define NTOSKRNL__itoa_s                                                     0x835C1720u
#define NTOSKRNL__itow                                                       0xD5FDD4F6u
#define NTOSKRNL__itow_s                                                     0xDB5C1720u
#define NTOSKRNL__local_unwind2                                              0x8B76A7E7u
#define NTOSKRNL__ltoa_s                                                     0x835C172Au
#define NTOSKRNL__ltow_s                                                     0xDB5C172Au
#define NTOSKRNL__makepath_s                                                 0xF3A2FAEDu
#define NTOSKRNL__purecall                                                   0x0240AE0Au
#define NTOSKRNL__snprintf                                                   0x27356B04u
#define NTOSKRNL__snprintf_s                                                 0x109735DFu
#define NTOSKRNL__snscanf_s                                                  0xE5E764B7u
#define NTOSKRNL__snwprintf                                                  0xC4D30704u
#define NTOSKRNL__snwprintf_s                                                0x1318AC6Fu
#define NTOSKRNL__snwscanf_s                                                 0x286778CBu
#define NTOSKRNL__splitpath_s                                                0xE029375Du
#define NTOSKRNL__stricmp                                                    0x7331541Bu
#define NTOSKRNL__strlwr                                                     0xB7591995u
#define NTOSKRNL__strnicmp                                                   0x12F0CB16u
#define NTOSKRNL__strnset                                                    0x3330579Fu
#define NTOSKRNL__strnset_s                                                  0x7CC7212Du
#define NTOSKRNL__strrev                                                     0xCF5B5991u
#define NTOSKRNL__strset                                                     0xCB5B5993u
#define NTOSKRNL__strset_s                                                   0x4F268D15u
#define NTOSKRNL__strtoui64                                                  0x090A095Eu
#define NTOSKRNL__strupr                                                     0xD359F995u
#define NTOSKRNL__swprintf                                                   0x27332B04u
#define NTOSKRNL__ui64toa_s                                                  0xC0A62299u
#define NTOSKRNL__ui64tow_s                                                  0x98A62299u
#define NTOSKRNL__ultoa_s                                                    0x7B569728u
#define NTOSKRNL__ultow_s                                                    0x23569728u
#define NTOSKRNL__vsnprintf                                                  0x2CD54204u
#define NTOSKRNL__vsnprintf_s                                                0x10B8B57Bu
#define NTOSKRNL__vsnwprintf                                                 0xC1F30678u
#define NTOSKRNL__vsnwprintf_s                                               0xE30C2C6Au
#define NTOSKRNL__vswprintf                                                  0x2CD30204u
#define NTOSKRNL__wcsicmp                                                    0x73205435u
#define NTOSKRNL__wcslwr                                                     0xB629191Du
#define NTOSKRNL__wcsnicmp                                                   0x32F50B14u
#define NTOSKRNL__wcsnset                                                    0x332157B1u
#define NTOSKRNL__wcsnset_s                                                  0xC4C7652Du
#define NTOSKRNL__wcsrev                                                     0xCE2B5919u
#define NTOSKRNL__wcsset_s                                                   0x6F234D17u
#define NTOSKRNL__wcsupr                                                     0xD229F91Du
#define NTOSKRNL__wmakepath_s                                                0xF38D7A4Du
#define NTOSKRNL__wsplitpath_s                                               0x103D3758u
#define NTOSKRNL__wtoi                                                       0xD5FDDBE8u
#define NTOSKRNL__wtol                                                       0xD5FDDBEDu
#define NTOSKRNL_atoi                                                        0xD00DD0E8u
#define NTOSKRNL_atol                                                        0xD00DD0EDu
#define NTOSKRNL_bsearch                                                     0xCE44D00Fu
#define NTOSKRNL_isdigit                                                     0x9A575413u
#define NTOSKRNL_islower                                                     0xDAD6D715u
#define NTOSKRNL_isprint                                                     0xA317B993u
#define NTOSKRNL_isspace                                                     0x83261882u
#define NTOSKRNL_isupper                                                     0xC746D895u
#define NTOSKRNL_isxdigit                                                    0xD251D406u
#define NTOSKRNL_mbstowcs                                                    0xB354D717u
#define NTOSKRNL_mbtowc                                                      0xBA2EDAB8u
#define NTOSKRNL_memchr                                                      0x8A5D3629u
#define NTOSKRNL_memcpy                                                      0x8A5E3622u
#define NTOSKRNL_memcpy_s                                                    0x8A2298ABu
#define NTOSKRNL_memmove                                                     0xBAC5B62Eu
#define NTOSKRNL_memmove_s                                                   0xBAE0F6ABu
#define NTOSKRNL_memset                                                      0xCA5C962Fu
#define NTOSKRNL_psMUITest                                                   0x088D7ADCu
#define NTOSKRNL_qsort                                                       0xBB1E79F5u
#define NTOSKRNL_rand                                                        0x840DF965u
#define NTOSKRNL_sprintf                                                     0xBF327407u
#define NTOSKRNL_sprintf_s                                                   0x1EF729A3u
#define NTOSKRNL_srand                                                       0x833DF965u
#define NTOSKRNL_sscanf_s                                                    0x060717B7u
#define NTOSKRNL_strcat                                                      0x8B4C1993u
#define NTOSKRNL_strcat_s                                                    0x4E26D015u
#define NTOSKRNL_strchr                                                      0x8B4D3995u
#define NTOSKRNL_strcmp                                                      0x8B4D9997u
#define NTOSKRNL_strcpy                                                      0x8B4E399Eu
#define NTOSKRNL_strcpy_s                                                    0x7A26D895u
#define NTOSKRNL_strlen                                                      0xB74C9989u
#define NTOSKRNL_strncat                                                     0x8B30D79Du
#define NTOSKRNL_strncat_s                                                   0x7627232Du
#define NTOSKRNL_strncmp                                                     0x8B315799u
#define NTOSKRNL_strncpy                                                     0x8B32F790u
#define NTOSKRNL_strncpy_s                                                   0x42272BADu
#define NTOSKRNL_strnlen                                                     0xB7305787u
#define NTOSKRNL_strrchr                                                     0x8B31F99Bu
#define NTOSKRNL_strspn                                                      0xCB4E3989u
#define NTOSKRNL_strstr                                                      0xCB4EB995u
#define NTOSKRNL_strtok_s                                                    0x3356D715u
#define NTOSKRNL_swprintf                                                    0x27337404u
#define NTOSKRNL_swprintf_s                                                  0x10972DA3u
#define NTOSKRNL_swscanf_s                                                   0x260764B7u
#define NTOSKRNL_tolower                                                     0xDAD1972Du
#define NTOSKRNL_toupper                                                     0xC74198ADu
#define NTOSKRNL_towlower                                                    0x7AD7571Eu
#define NTOSKRNL_towupper                                                    0x6747589Eu
#define NTOSKRNL_vDbgPrintEx                                                 0xE60CF446u
#define NTOSKRNL_vDbgPrintExWithPrefix                                       0xADE4AA41u
#define NTOSKRNL_vsprintf                                                    0x0F327404u
#define NTOSKRNL_vsprintf_s                                                  0x103729A3u
#define NTOSKRNL_vswprintf_s                                                 0x10972C7Bu
#define NTOSKRNL_wcscat                                                      0x8A3C191Bu
#define NTOSKRNL_wcscat_s                                                    0x6E231017u
#define NTOSKRNL_wcschr                                                      0x8A3D391Du
#define NTOSKRNL_wcscmp                                                      0x8A3D991Fu
#define NTOSKRNL_wcscpy                                                      0x8A3E3916u
#define NTOSKRNL_wcscpy_s                                                    0x5A231897u
#define NTOSKRNL_wcscspn                                                     0xCB23F129u
#define NTOSKRNL_wcslen                                                      0xB63C9901u
#define NTOSKRNL_wcsncat                                                     0x8B21D7B3u
#define NTOSKRNL_wcsncat_s                                                   0xCE27672Du
#define NTOSKRNL_wcsncmp                                                     0x8B2057B7u
#define NTOSKRNL_wcsncpy                                                     0x8B23F7BEu
#define NTOSKRNL_wcsncpy_s                                                   0xFA276FADu
#define NTOSKRNL_wcsnlen                                                     0xB72157A9u
#define NTOSKRNL_wcsrchr                                                     0x8B20F9B5u
#define NTOSKRNL_wcsspn                                                      0xCA3E3901u
#define NTOSKRNL_wcsstr                                                      0xCA3EB91Du
#define NTOSKRNL_wcstombs                                                    0x0B54B717u
#define NTOSKRNL_wcstoul                                                     0xBB235AABu
#define NTOSKRNL_wctomb                                                      0xBA3D9A8Du
#define WIN32K_BRUSHOBJ_hGetColorTransform                                   0xB982095Eu
#define WIN32K_BRUSHOBJ_pvAllocRbrush                                        0x9F4701F4u
#define WIN32K_BRUSHOBJ_pvGetRbrush                                          0xC64E5140u
#define WIN32K_BRUSHOBJ_ulGetBrushColor                                      0x9DF01720u
#define WIN32K_CLIPOBJ_GetRgn                                                0xD78F5FA7u
#define WIN32K_CLIPOBJ_bEnum                                                 0x941A4C70u
#define WIN32K_CLIPOBJ_cEnumStart                                            0xA92AE294u
#define WIN32K_CLIPOBJ_ppoGetPath                                            0xA1368598u
#define WIN32K_EngAcquireFastMutex                                           0x58F269D8u
#define WIN32K_EngAcquireSemaphore                                           0x1727126Fu
#define WIN32K_EngAcquireSemaphoreNoWait                                     0x4666CEA0u
#define WIN32K_EngAcquireSemaphoreShared                                     0x0A17558Au
#define WIN32K_EngAcquireSemaphoreSharedNoWait                               0x579F89ECu
#define WIN32K_EngAllocMem                                                   0x3727F722u
#define WIN32K_EngAllocPrivateUserMem                                        0x9DFA8DC3u
#define WIN32K_EngAllocSectionMem                                            0x5098A807u
#define WIN32K_EngAllocUserMem                                               0x46A9EB3Fu
#define WIN32K_EngAlphaBlend                                                 0x48209B3Cu
#define WIN32K_EngAssociateSurface                                           0x8B8F962Au
#define WIN32K_EngBitBlt                                                     0x7E843FF2u
#define WIN32K_EngBugCheckEx                                                 0xCA3F25B2u
#define WIN32K_EngCTGetCurrentGamma                                          0x05059374u
#define WIN32K_EngCTGetGammaTable                                            0x2D2ABBC1u
#define WIN32K_EngCheckAbort                                                 0xC851D838u
#define WIN32K_EngClearEvent                                                 0xE012D60Au
#define WIN32K_EngCombineRgn                                                 0x7EA33CA6u
#define WIN32K_EngComputeGlyphSet                                            0x1D012D67u
#define WIN32K_EngControlSprites                                             0x50CABFB7u
#define WIN32K_EngCopyBits                                                   0xB6450784u
#define WIN32K_EngCopyRgn                                                    0x7FBC7232u
#define WIN32K_EngCreateBitmap                                               0x7F446638u
#define WIN32K_EngCreateClip                                                 0xC6123282u
#define WIN32K_EngCreateDeviceBitmap                                         0xBB544114u
#define WIN32K_EngCreateDeviceSurface                                        0x8844B2B7u
#define WIN32K_EngCreateDriverObj                                            0x46781B62u
#define WIN32K_EngCreateEvent                                                0x763395B6u
#define WIN32K_EngCreateFastMutex                                            0x30FE7AF4u
#define WIN32K_EngCreatePalette                                              0xD9430B9Du
#define WIN32K_EngCreatePath                                                 0xF2119B1Au
#define WIN32K_EngCreateRectRgn                                              0x41B1E31Eu
#define WIN32K_EngCreateRedirectionDeviceBitmap                              0xF3B42E05u
#define WIN32K_EngCreateSemaphore                                            0x7F2B0143u
#define WIN32K_EngCreateWnd                                                  0xC796709Cu
#define WIN32K_EngDebugBreak                                                 0xD8863D3Fu
#define WIN32K_EngDebugPrint                                                 0xE9A7DD20u
#define WIN32K_EngDeleteClip                                                 0x8EF32582u
#define WIN32K_EngDeleteDriverObj                                            0xD7BA3562u
#define WIN32K_EngDeleteEvent                                                0x54D39CAAu
#define WIN32K_EngDeleteFastMutex                                            0xA13C54F4u
#define WIN32K_EngDeleteFile                                                 0x9AF38717u
#define WIN32K_EngDeletePalette                                              0xA9C88BB9u
#define WIN32K_EngDeletePath                                                 0xBAF08C1Au
#define WIN32K_EngDeleteRgn                                                  0x6B95179Eu
#define WIN32K_EngDeleteSafeSemaphore                                        0x21E239FCu
#define WIN32K_EngDeleteSemaphore                                            0xEEE92F43u
#define WIN32K_EngDeleteSurface                                              0xFC2AAA11u
#define WIN32K_EngDeleteWnd                                                  0x7F943794u
#define WIN32K_EngDeviceIoControl                                            0x6B071B0Bu
#define WIN32K_EngDitherColor                                                0x1937E802u
#define WIN32K_EngDxIoctl                                                    0xB82FD91Eu
#define WIN32K_EngEnumForms                                                  0xB0B21393u
#define WIN32K_EngEqualRgn                                                   0x6BC0F093u
#define WIN32K_EngEraseSurface                                               0xC67ABD43u
#define WIN32K_EngFileIoControl                                              0xC1E91E2Cu
#define WIN32K_EngFileWrite                                                  0xE5A77E15u
#define WIN32K_EngFillPath                                                   0xBF148EA7u
#define WIN32K_EngFindImageProcAddress                                       0x4CD595DBu
#define WIN32K_EngFindResource                                               0x3246A3A2u
#define WIN32K_EngFntCacheAlloc                                              0xDFD07A57u
#define WIN32K_EngFntCacheFault                                              0xBBA01CC0u
#define WIN32K_EngFntCacheLookUp                                             0x1F7C3A10u
#define WIN32K_EngFreeMem                                                    0x02ED7C0Bu
#define WIN32K_EngFreeModule                                                 0xA2138165u
#define WIN32K_EngFreePrivateUserMem                                         0xD86E1726u
#define WIN32K_EngFreeSectionMem                                             0x1936FC5Eu
#define WIN32K_EngFreeUserMem                                                0xF43AB797u
#define WIN32K_EngGetCurrentCodePage                                         0x701A0CC5u
#define WIN32K_EngGetCurrentProcessId                                        0xFACFF46Bu
#define WIN32K_EngGetCurrentThreadId                                         0xDC1E1468u
#define WIN32K_EngGetDriverName                                              0xA8023851u
#define WIN32K_EngGetFileChangeTime                                          0xEDD6541Fu
#define WIN32K_EngGetFilePath                                                0x5ED797A9u
#define WIN32K_EngGetForm                                                    0x8BFFCDA5u
#define WIN32K_EngGetLastError                                               0xABA2080Au
#define WIN32K_EngGetPrinter                                                 0x2E5FF30Cu
#define WIN32K_EngGetPrinterData                                             0xB4CC479Fu
#define WIN32K_EngGetPrinterDataFileName                                     0x7E00580Au
#define WIN32K_EngGetPrinterDriver                                           0x23EF9FECu
#define WIN32K_EngGetProcessHandle                                           0xDB7EED7Bu
#define WIN32K_EngGetRgnBox                                                  0x2AA21166u
#define WIN32K_EngGetRgnData                                                 0x7A2D4635u
#define WIN32K_EngGetTickCount                                               0xF7C63EB2u
#define WIN32K_EngGetType1FontList                                           0x06EFC85Bu
#define WIN32K_EngGradientFill                                               0x8617DA7Cu
#define WIN32K_EngHangNotification                                           0x3486385Du
#define WIN32K_EngInitializeSafeSemaphore                                    0x85B7BD5Eu
#define WIN32K_EngIntersectRgn                                               0xB1C42218u
#define WIN32K_EngIsSemaphoreOwned                                           0x467042EBu
#define WIN32K_EngIsSemaphoreOwnedByCurrentThread                            0xFFE91858u
#define WIN32K_EngIsSemaphoreSharedByCurrentThread                           0x61017790u
#define WIN32K_EngLineTo                                                     0xE28332F5u
#define WIN32K_EngLoadImage                                                  0xF4465B97u
#define WIN32K_EngLoadModule                                                 0x8353DC65u
#define WIN32K_EngLoadModuleForWrite                                         0xC2B91C01u
#define WIN32K_EngLockDirectDrawSurface                                      0xCECB9A05u
#define WIN32K_EngLockDriverObj                                              0x7C913024u
#define WIN32K_EngLockSurface                                                0x36EBFBBBu
#define WIN32K_EngLpkInstalled                                               0xAA06C248u
#define WIN32K_EngMapEvent                                                   0xF585DD83u
#define WIN32K_EngMapFile                                                    0x93BE8DA5u
#define WIN32K_EngMapFontFile                                                0x7F451888u
#define WIN32K_EngMapFontFileFD                                              0x21F5D426u
#define WIN32K_EngMapModule                                                  0xD6237E45u
#define WIN32K_EngMapSection                                                 0x7BBE7A3Eu
#define WIN32K_EngMarkBandingSurface                                         0x2B8FE3D2u
#define WIN32K_EngModifySurface                                              0x8DAFB831u
#define WIN32K_EngMovePointer                                                0x135BEA9Cu
#define WIN32K_EngMulDiv                                                     0x674493EEu
#define WIN32K_EngMultiByteToUnicodeN                                        0x2DBACCC2u
#define WIN32K_EngMultiByteToWideChar                                        0x0DDB9AE4u
#define WIN32K_EngNineGrid                                                   0xB387252Fu
#define WIN32K_EngOffsetRgn                                                  0x72879432u
#define WIN32K_EngPaint                                                      0x89167039u
#define WIN32K_EngPlgBlt                                                     0x7ED43656u
#define WIN32K_EngProbeForRead                                               0xD7B53676u
#define WIN32K_EngProbeForReadAndWrite                                       0x1C534F79u
#define WIN32K_EngQueryDeviceAttribute                                       0xC7386AADu
#define WIN32K_EngQueryLocalTime                                             0x9C42261Au
#define WIN32K_EngQueryPalette                                               0x73129DF7u
#define WIN32K_EngQueryPerformanceCounter                                    0xDCB7BA53u
#define WIN32K_EngQueryPerformanceFrequency                                  0xD76ABBAEu
#define WIN32K_EngQuerySystemAttribute                                       0x93F6D2B5u
#define WIN32K_EngQueryW32kCddInterface                                      0xB9644486u
#define WIN32K_EngReadStateEvent                                             0xDB95A95Au
#define WIN32K_EngRectInRgn                                                  0x6846C43Cu
#define WIN32K_EngReleaseFastMutex                                           0x59765345u
#define WIN32K_EngReleaseSemaphore                                           0x16A328F2u
#define WIN32K_EngRestoreFloatingPointState                                  0xA16C094Bu
#define WIN32K_EngSaveFloatingPointState                                     0x359A5D6Cu
#define WIN32K_EngSecureMem                                                  0x17F680BDu
#define WIN32K_EngSetEvent                                                   0x0584DD8Bu
#define WIN32K_EngSetLastError                                               0xABA8080Au
#define WIN32K_EngSetPointerShape                                            0xD881D208u
#define WIN32K_EngSetPointerTag                                              0x3FF5BB70u
#define WIN32K_EngSetPrinterData                                             0xB4CC6F9Fu
#define WIN32K_EngSetRectRgn                                                 0xB47F3E3Eu
#define WIN32K_EngSort                                                       0xBA6F2929u
#define WIN32K_EngStretchBlt                                                 0xC4738106u
#define WIN32K_EngStretchBltROP                                              0x71C96333u
#define WIN32K_EngStrokeAndFillPath                                          0xD174681Du
#define WIN32K_EngStrokePath                                                 0x48121D24u
#define WIN32K_EngSubtractRgn                                                0x00B333E4u
#define WIN32K_EngTextOut                                                    0x0B3BF4BCu
#define WIN32K_EngTransparentBlt                                             0x31246073u
#define WIN32K_EngUnicodeToMultiByteN                                        0x05197151u
#define WIN32K_EngUnionRgn                                                   0xEB2731ABu
#define WIN32K_EngUnloadImage                                                0x1577F17Du
#define WIN32K_EngUnlockDirectDrawSurface                                    0x60D880ABu
#define WIN32K_EngUnlockDriverObj                                            0xD23F233Eu
#define WIN32K_EngUnlockSurface                                              0x9D6F3D10u
#define WIN32K_EngUnmapEvent                                                 0xA2D2D40Eu
#define WIN32K_EngUnmapFile                                                  0xDFD4371Du
#define WIN32K_EngUnmapFontFile                                              0xD4C1DE23u
#define WIN32K_EngUnmapFontFileFD                                            0x8F5BC73Cu
#define WIN32K_EngUnsecureMem                                                0xF6C72A57u
#define WIN32K_EngUpdateDeviceSurface                                        0xC845EAB7u
#define WIN32K_EngWaitForSingleObject                                        0xDD3E7407u
#define WIN32K_EngWideCharToMultiByte                                        0x54F3641Cu
#define WIN32K_EngWritePrinter                                               0x92C3BE5Au
#define WIN32K_EngXorRgn                                                     0x3EE55CDCu
#define WIN32K_FLOATOBJ_Add                                                  0xA97C2F53u
#define WIN32K_FLOATOBJ_AddFloat                                             0xEA9448D2u
#define WIN32K_FLOATOBJ_AddFloatObj                                          0x7628291Eu
#define WIN32K_FLOATOBJ_AddLong                                              0x493771A4u
#define WIN32K_FLOATOBJ_Div                                                  0xBD7D8F41u
#define WIN32K_FLOATOBJ_DivFloat                                             0xC29708F6u
#define WIN32K_FLOATOBJ_DivFloatObj                                          0x77883B0Au
#define WIN32K_FLOATOBJ_DivLong                                              0x481631BEu
#define WIN32K_FLOATOBJ_Equal                                                0x0AE9DA51u
#define WIN32K_FLOATOBJ_EqualLong                                            0x191D48FBu
#define WIN32K_FLOATOBJ_GetFloat                                             0xDA9408F2u
#define WIN32K_FLOATOBJ_GetLong                                              0x4836F1A6u
#define WIN32K_FLOATOBJ_GreaterThan                                          0xD1DE5817u
#define WIN32K_FLOATOBJ_GreaterThanLong                                      0x3D70FB83u
#define WIN32K_FLOATOBJ_LessThan                                             0x9DC414E6u
#define WIN32K_FLOATOBJ_LessThanLong                                         0xF2643A27u
#define WIN32K_FLOATOBJ_Mul                                                  0x997E0F5Bu
#define WIN32K_FLOATOBJ_MulFloat                                             0x8A9008C2u
#define WIN32K_FLOATOBJ_MulFloatObj                                          0x7408212Eu
#define WIN32K_FLOATOBJ_MulLong                                              0x49B47186u
#define WIN32K_FLOATOBJ_Neg                                                  0x957C0F50u
#define WIN32K_FLOATOBJ_SetFloat                                             0x7A9408F2u
#define WIN32K_FLOATOBJ_SetLong                                              0x4833F1A6u
#define WIN32K_FLOATOBJ_Sub                                                  0xE17E0F55u
#define WIN32K_FLOATOBJ_SubFloat                                             0x7A9008DEu
#define WIN32K_FLOATOBJ_SubFloatObj                                          0x74082F56u
#define WIN32K_FLOATOBJ_SubLong                                              0x4953F186u
#define WIN32K_FONTOBJ_cGetAllGlyphHandles                                   0x69C799FEu
#define WIN32K_FONTOBJ_cGetGlyphs                                            0x17DAE67Fu
#define WIN32K_FONTOBJ_pQueryGlyphAttrs                                      0xF7DBC399u
#define WIN32K_FONTOBJ_pfdg                                                  0xEC0F6DCCu
#define WIN32K_FONTOBJ_pifi                                                  0xD00F2DC2u
#define WIN32K_FONTOBJ_pjOpenTypeTablePointer                                0x34FB77F0u
#define WIN32K_FONTOBJ_pvTrueTypeFontFile                                    0xBB17EF03u
#define WIN32K_FONTOBJ_pwszFontFilePaths                                     0xE8BA54D7u
#define WIN32K_FONTOBJ_pxoGetXform                                           0xDD3743EBu
#define WIN32K_FONTOBJ_vGetInfo                                              0x55FA641Au
#define WIN32K_HT_ComputeRGBGammaTable                                       0x51CC606Fu
#define WIN32K_HT_Get8BPPFormatPalette                                       0xAC5C6115u
#define WIN32K_HT_Get8BPPMaskPalette                                         0x46B63F3Cu
#define WIN32K_HeapVidMemAllocAligned                                        0x981432F2u
#define WIN32K_PALOBJ_cGetColors                                             0xADF6AC87u
#define WIN32K_PATHOBJ_bCloseFigure                                          0x0FFFCF10u
#define WIN32K_PATHOBJ_bEnum                                                 0xA71CCC05u
#define WIN32K_PATHOBJ_bEnumClipLines                                        0x5C627488u
#define WIN32K_PATHOBJ_bMoveTo                                               0x3686F2CFu
#define WIN32K_PATHOBJ_bPolyBezierTo                                         0xC16563BBu
#define WIN32K_PATHOBJ_bPolyLineTo                                           0x6B3EDF31u
#define WIN32K_PATHOBJ_vEnumStart                                            0xCD87E27Eu
#define WIN32K_PATHOBJ_vEnumStartClipLines                                   0x930F27EDu
#define WIN32K_PATHOBJ_vGetBounds                                            0xAA4560A7u
#define WIN32K_RtlAnsiCharToUnicodeChar                                      0xFC689629u
#define WIN32K_RtlMultiByteToUnicodeN                                        0x2814CD62u
#define WIN32K_RtlRaiseException                                             0x64D379CCu
#define WIN32K_RtlUnicodeToMultiByteN                                        0x00B770F1u
#define WIN32K_RtlUnicodeToMultiByteSize                                     0xFFB73664u
#define WIN32K_RtlUnwind                                                     0x02F6A94Cu
#define WIN32K_RtlUpcaseUnicodeChar                                          0x322138E6u
#define WIN32K_RtlUpcaseUnicodeToMultiByteN                                  0x9082FD30u
#define WIN32K_STROBJ_bEnum                                                  0xA455CC00u
#define WIN32K_STROBJ_bEnumPositionsOnly                                     0x51A993A6u
#define WIN32K_STROBJ_bGetAdvanceWidths                                      0x0A1343D5u
#define WIN32K_STROBJ_dwGetCodePage                                          0xAD9211AEu
#define WIN32K_STROBJ_fxBreakExtra                                           0x94E69522u
#define WIN32K_STROBJ_fxCharacterExtra                                       0x41215644u
#define WIN32K_STROBJ_vEnumStart                                             0xCB15E274u
#define WIN32K_VidMemFree                                                    0xE40FAAADu
#define WIN32K_WNDOBJ_bEnum                                                  0xA697CC68u
#define WIN32K_WNDOBJ_cEnumStart                                             0xCC31E2A4u
#define WIN32K_WNDOBJ_vSetConsumer                                           0x8779E515u
#define WIN32K_XFORMOBJ_bApplyXform                                          0x4E091C70u
#define WIN32K_XFORMOBJ_iGetFloatObjXform                                    0xB33033D5u
#define WIN32K_XFORMOBJ_iGetXform                                            0x6E90C3D9u
#define WIN32K_XLATEOBJ_cGetPalette                                          0xC180E08Du
#define WIN32K_XLATEOBJ_hGetColorTransform                                   0xEDEA329Du
#define WIN32K_XLATEOBJ_iXlate                                               0xDE53ADA4u
#define WIN32K_XLATEOBJ_piVector                                             0x1F38E530u
#define WIN32K__abnormal_termination                                         0xED26250Bu
#define WIN32K__except_handler2                                              0xF5A41AD2u
#define WIN32K__global_unwind2                                               0x9CB6D7E3u
#define WIN32K__itoa                                                         0xD5FDD4E0u
#define WIN32K__itow                                                         0xD5FDD4F6u
#define WIN32K__local_unwind2                                                0x8B76A7E7u

//#define WIN32K_NtUserCreateWindowEx                                         0xD7126686
//#define WIN32K_NtUserMessageCall                                             0x53D276B2u
#define NTDLL_A_SHAFinal                                                     0x2C5E4B6Du
#define NTDLL_A_SHAInit                                                      0x44098567u
#define NTDLL_A_SHAUpdate                                                    0xC8FEA0C8u
#define NTDLL_AlpcAdjustCompletionListConcurrencyCount                       0x7C4F8F86u
#define NTDLL_AlpcFreeCompletionListMessage                                  0xF3D80642u
#define NTDLL_AlpcGetCompletionListLastMessageInformation                    0x8F4E82C3u
#define NTDLL_AlpcGetCompletionListMessageAttributes                         0x242E9EF2u
#define NTDLL_AlpcGetHeaderSize                                              0xCE454899u
#define NTDLL_AlpcGetMessageAttribute                                        0x867E8E6Cu
#define NTDLL_AlpcGetMessageFromCompletionList                               0xF98EF8B1u
#define NTDLL_AlpcGetOutstandingCompletionListMessageCount                   0x11C390F6u
#define NTDLL_AlpcInitializeMessageAttribute                                 0xCC6CB66Au
#define NTDLL_AlpcMaxAllowedMessageLength                                    0xF47E7E9Cu
#define NTDLL_AlpcRegisterCompletionList                                     0x1C904D20u
#define NTDLL_AlpcRegisterCompletionListWorkerThread                         0xB53277A0u
#define NTDLL_AlpcRundownCompletionList                                      0x1FE9BAE6u
#define NTDLL_AlpcUnregisterCompletionList                                   0xD2616323u
#define NTDLL_AlpcUnregisterCompletionListWorkerThread                       0x89DD6540u
#define NTDLL_CsrAllocateCaptureBuffer                                       0x3A714239u
#define NTDLL_CsrAllocateMessagePointer                                      0x2E30CA14u
#define NTDLL_CsrCaptureMessageBuffer                                        0x848479AAu
#define NTDLL_CsrCaptureMessageMultiUnicodeStringsInPlace                    0xD296B808u
#define NTDLL_CsrCaptureMessageString                                        0xB895139Du
#define NTDLL_CsrCaptureTimeout                                              0x9090646Au
#define NTDLL_CsrClientCallServer                                            0x9D632516u
#define NTDLL_CsrClientConnectToServer                                       0xD45949C5u
#define NTDLL_CsrFreeCaptureBuffer                                           0x497222AEu
#define NTDLL_CsrGetProcessId                                                0x6421EEB3u
#define NTDLL_CsrIdentifyAlertableThread                                     0x9A60AFFFu
#define NTDLL_CsrSetPriorityClass                                            0xBCC9C3B4u
#define NTDLL_CsrVerifyRegion                                                0xACE81DDBu
#define NTDLL_DbgBreakPoint                                                  0xC164C4B8u
#define NTDLL_DbgPrint                                                       0x811579B9u
#define NTDLL_DbgPrintEx                                                     0xE60CF59Eu
#define NTDLL_DbgPrintReturnControlC                                         0x934CF710u
#define NTDLL_DbgPrompt                                                      0xA337B356u
#define NTDLL_DbgQueryDebugFilterState                                       0x9F4060BAu
#define NTDLL_DbgSetDebugFilterState                                         0xF6099B90u
#define NTDLL_DbgUiConnectToDbg                                              0xB931F1A7u
#define NTDLL_DbgUiContinue                                                  0xEDC43CA2u
#define NTDLL_DbgUiConvertStateChangeStructure                               0x144E593Eu
#define NTDLL_DbgUiDebugActiveProcess                                        0x109BC9B8u
#define NTDLL_DbgUiGetThreadDebugObject                                      0x1D5BBD39u
#define NTDLL_DbgUiIssueRemoteBreakin                                        0xB8E90E49u
#define NTDLL_DbgUiRemoteBreakin                                             0x3ABDB489u
#define NTDLL_DbgUiSetThreadDebugObject                                      0x175BBD39u
#define NTDLL_DbgUiStopDebugging                                             0x217DE786u
#define NTDLL_DbgUiWaitStateChange                                           0x57BBB96Fu
#define NTDLL_DbgUserBreakPoint                                              0xA8E3EDFFu
#define NTDLL_EtwCreateTraceInstanceId                                       0x1F7CA1BFu
#define NTDLL_EtwDeliverDataBlock                                            0xB77CDD17u
#define NTDLL_EtwEnumerateProcessRegGuids                                    0x3E3D07C3u
#define NTDLL_EtwEventActivityIdControl                                      0xABA01C0Cu
#define NTDLL_EtwEventEnabled                                                0x7BCFD665u
#define NTDLL_EtwEventProviderEnabled                                        0x0CB18DD5u
#define NTDLL_EtwEventRegister                                               0x067E4087u
#define NTDLL_EtwEventUnregister                                             0xAD265958u
#define NTDLL_EtwEventWrite                                                  0xD1FF4E57u
#define NTDLL_EtwEventWriteEndScenario                                       0xFC1E5DCDu
#define NTDLL_EtwEventWriteEx                                                0x5F4F5D41u
#define NTDLL_EtwEventWriteFull                                              0x3170BC99u
#define NTDLL_EtwEventWriteNoRegistration                                    0x533D51C9u
#define NTDLL_EtwEventWriteStartScenario                                     0x96130A04u
#define NTDLL_EtwEventWriteString                                            0x70D80DBFu
#define NTDLL_EtwEventWriteTransfer                                          0xC1BE4EE2u
#define NTDLL_EtwGetTraceEnableFlags                                         0x2A7AED45u
#define NTDLL_EtwGetTraceEnableLevel                                         0x76DAA9DAu
#define NTDLL_EtwGetTraceLoggerHandle                                        0x19BA07B2u
#define NTDLL_EtwLogTraceEvent                                               0x4FF2240Cu
#define NTDLL_EtwNotificationRegister                                        0xA69FC8C2u
#define NTDLL_EtwNotificationUnregister                                      0xBBA5DF79u
#define NTDLL_EtwProcessPrivateLoggerRequest                                 0xFE086EF3u
#define NTDLL_EtwRegisterSecurityProvider                                    0xFFA2E011u
#define NTDLL_EtwRegisterTraceGuidsA                                         0x5692D01Fu
#define NTDLL_EtwRegisterTraceGuidsW                                         0x5692D009u
#define NTDLL_EtwReplyNotification                                           0xD273F937u
#define NTDLL_EtwSendNotification                                            0x45963886u
#define NTDLL_EtwSetMark                                                     0x33FAD223u
#define NTDLL_EtwTraceEventInstance                                          0x081FB4C2u
#define NTDLL_EtwTraceMessage                                                0xC66513E2u
#define NTDLL_EtwTraceMessageVa                                              0x8B13542Eu
#define NTDLL_EtwUnregisterTraceGuids                                        0xD29AD3A3u
#define NTDLL_EtwWriteUMSecurityEvent                                        0xB88F5E49u
#define NTDLL_EtwpCreateEtwThread                                            0xFEB7EE96u
#define NTDLL_EtwpGetCpuSpeed                                                0xE4F80596u
#define NTDLL_EtwpNotificationThread                                         0x950279A5u
#define NTDLL_EvtIntReportAuthzEventAndSourceAsync                           0x379D3732u
#define NTDLL_EvtIntReportEventAndSourceAsync                                0x45D1A8C7u
#define NTDLL_ExpInterlockedPopEntrySListEnd                                 0x20846FF9u
#define NTDLL_ExpInterlockedPopEntrySListFault                               0xA0BF964Bu
#define NTDLL_ExpInterlockedPopEntrySListResume                              0x968A575Au
#define NTDLL_KiFastSystemCall                                               0x1AD9D7AAu
#define NTDLL_KiFastSystemCallRet                                            0x24E77578u
#define NTDLL_KiIntSystemCall                                                0x92570BF0u
#define NTDLL_KiRaiseUserExceptionDispatcher                                 0x26E235E7u
#define NTDLL_KiUserApcDispatcher                                            0x1EFC322Fu
#define NTDLL_KiUserCallbackDispatcher                                       0x2EA929DAu
#define NTDLL_KiUserExceptionDispatcher                                      0x8960C8EEu
#define NTDLL_LdrAccessResource                                              0x7C7869B2u
#define NTDLL_LdrAddLoadAsDataTable                                          0x9A67E4CFu
#define NTDLL_LdrAddRefDll                                                   0x3822F35Au
#define NTDLL_LdrDisableThreadCalloutsForDll                                 0xB29E6B03u
#define NTDLL_LdrEnumResources                                               0xE7D7EC1Fu
#define NTDLL_LdrEnumerateLoadedModules                                      0x11926557u
#define NTDLL_LdrFindEntryForAddress                                         0x4210B637u
#define NTDLL_LdrFindResourceDirectory_U                                     0x9C12DAACu
#define NTDLL_LdrFindResourceEx_U                                            0x9A3DC2BFu
#define NTDLL_LdrFindResource_U                                              0x8D8BFA8Bu
#define NTDLL_LdrFlushAlternateResourceModules                               0x228730C5u
#define NTDLL_LdrGetDllHandle                                                0xCBA5BA64u
#define NTDLL_LdrGetDllHandleByMapping                                       0x27878E10u
#define NTDLL_LdrGetDllHandleByName                                          0xED04B509u
#define NTDLL_LdrGetDllHandleEx                                              0x93263691u
#define NTDLL_LdrGetFailureData                                              0xA29507B9u
#define NTDLL_LdrGetFileNameFromLoadAsDataTable                              0x9A135F54u
#define NTDLL_LdrGetProcedureAddress                                         0x01A12CE3u
#define NTDLL_LdrGetProcedureAddressEx                                       0x8C0E24CBu
#define NTDLL_LdrHotPatchRoutine                                             0x3F85C5A3u
#define NTDLL_LdrInitShimEngineDynamic                                       0x6A1F664Cu
#define NTDLL_LdrInitializeThunk                                             0x976DC698u
#define NTDLL_LdrLoadAlternateResourceModule                                 0xC7300463u
#define NTDLL_LdrLoadAlternateResourceModuleEx                               0x8F146069u
#define NTDLL_LdrLoadDll                                                     0x8F8ED6B0u
#define NTDLL_LdrLockLoaderLock                                              0x56483329u
#define NTDLL_LdrOpenImageFileOptionsKey                                     0x39E39C41u
#define NTDLL_LdrProcessRelocationBlock                                      0x73F10197u
#define NTDLL_LdrQueryImageFileExecutionOptions                              0x62029B74u
#define NTDLL_LdrQueryImageFileExecutionOptionsEx                            0xD180AA15u
#define NTDLL_LdrQueryImageFileKeyOption                                     0xC3C2E283u
#define NTDLL_LdrQueryModuleServiceTags                                      0x39B97FC6u
#define NTDLL_LdrQueryProcessModuleInformation                               0xC21219B4u
#define NTDLL_LdrRegisterDllNotification                                     0x1D8D7A6Au
#define NTDLL_LdrRemoveLoadAsDataTable                                       0x5A13F93Bu
#define NTDLL_LdrResFindResource                                             0xF7E2B63Au
#define NTDLL_LdrResFindResourceDirectory                                    0x357C42E7u
#define NTDLL_LdrResGetRCConfig                                              0x4EB885D8u
#define NTDLL_LdrResRelease                                                  0xD0A8B6E1u
#define NTDLL_LdrResSearchResource                                           0x7826C6E8u
#define NTDLL_LdrRscIsTypeExist                                              0x4ADF2EBFu
#define NTDLL_LdrSetAppCompatDllRedirectionCallback                          0xF3B1BE2Eu
#define NTDLL_LdrSetDllManifestProber                                        0xB9CBF9AFu
#define NTDLL_LdrSetMUICacheType                                             0x37E4E17Du
#define NTDLL_LdrShutdownProcess                                             0x2B94F41Bu
#define NTDLL_LdrShutdownThread                                              0xBAE1D238u
#define NTDLL_LdrUnloadAlternateResourceModule                               0xB9D30D6Du
#define NTDLL_LdrUnloadAlternateResourceModuleEx                             0xB6EFEC4Du
#define NTDLL_LdrUnloadDll                                                   0x6860E620u
#define NTDLL_LdrUnlockLoaderLock                                            0xD17742ADu
#define NTDLL_LdrUnregisterDllNotification                                   0x2D1D9D84u
#define NTDLL_LdrVerifyImageMatchesChecksum                                  0xAD104FDFu
#define NTDLL_LdrVerifyImageMatchesChecksumEx                                0x7EBCE147u
#define NTDLL_LdrWx86FormatVirtualImage                                      0x6D6DDD98u
#define NTDLL_LdrpResGetMappingSize                                          0x50EC19EFu
#define NTDLL_LdrpResGetResourceDirectory                                    0xE2517DB8u
#define NTDLL_MD4Final                                                       0xD47D1487u
#define NTDLL_MD4Init                                                        0xBB5E447Du
#define NTDLL_MD4Update                                                      0xA303FFCCu
#define NTDLL_MD5Final                                                       0xD47D1485u
#define NTDLL_MD5Init                                                        0xBB4E447Du
#define NTDLL_MD5Update                                                      0xA303BFCCu
#define NTDLL_NlsAnsiCodePage                                                0xB7873811u
#define NTDLL_NlsMbCodePageTag                                               0xB8B9935Fu
#define NTDLL_NlsMbOemCodePageTag                                            0xBB4C5348u
#define NTDLL_NtAcceptConnectPort                                            0x5E0DB6ADu
#define NTDLL_NtAccessCheck                                                  0x547AF68Fu
#define NTDLL_NtAccessCheckAndAuditAlarm                                     0x4DFE5CBBu
#define NTDLL_NtAccessCheckByType                                            0x5E3DFFFEu
#define NTDLL_NtAccessCheckByTypeAndAuditAlarm                               0xC3ECBEAFu
#define NTDLL_NtAccessCheckByTypeResultList                                  0x49E49C57u
#define NTDLL_NtAccessCheckByTypeResultListAndAuditAlarm                     0x712BEC80u
#define NTDLL_NtAccessCheckByTypeResultListAndAuditAlarmByHandle             0xADEF7787u
#define NTDLL_NtAddAtom                                                      0x765DCE27u
#define NTDLL_NtAddBootEntry                                                 0xE0E5E804u
#define NTDLL_NtAddDriverEntry                                               0x3735DFF9u
#define NTDLL_NtAdjustGroupsToken                                            0xA5EA283Fu
#define NTDLL_NtAdjustPrivilegesToken                                        0x0A74F805u
#define NTDLL_NtAlertResumeThread                                            0x2DDCF233u
#define NTDLL_NtAlertThread                                                  0xEF2B7DCEu
#define NTDLL_NtAllocateLocallyUniqueId                                      0x0C9C9577u
#define NTDLL_NtAllocateReserveObject                                        0x452D9B27u
#define NTDLL_NtAllocateUserPhysicalPages                                    0x4631E7F7u
#define NTDLL_NtAllocateUuids                                                0xA717308Fu
#define NTDLL_NtAllocateVirtualMemory                                        0x977BFFAAu
#define NTDLL_NtAlpcAcceptConnectPort                                        0x08E54AACu
#define NTDLL_NtAlpcCancelMessage                                            0x433F80FFu
#define NTDLL_NtAlpcConnectPort                                              0xD6881C1Bu
#define NTDLL_NtAlpcCreatePort                                               0x471EDB64u
#define NTDLL_NtAlpcCreatePortSection                                        0x8011EC7Eu
#define NTDLL_NtAlpcCreateResourceReserve                                    0x9455A776u
#define NTDLL_NtAlpcCreateSectionView                                        0x818E2C7Fu
#define NTDLL_NtAlpcCreateSecurityContext                                    0x2AAD38EEu
#define NTDLL_NtAlpcDeletePortSection                                        0x8256E4C6u
#define NTDLL_NtAlpcDeleteResourceReserve                                    0x1FD58306u
#define NTDLL_NtAlpcDeleteSectionView                                        0x83C924C7u
#define NTDLL_NtAlpcDeleteSecurityContext                                    0xA12D1C9Eu
#define NTDLL_NtAlpcDisconnectPort                                           0x49239CB2u
#define NTDLL_NtAlpcImpersonateClientOfPort                                  0xEC055D88u
#define NTDLL_NtAlpcOpenSenderProcess                                        0xF1BEAE27u
#define NTDLL_NtAlpcOpenSenderThread                                         0x6B07036Au
#define NTDLL_NtAlpcQueryInformation                                         0xCAC3C253u
#define NTDLL_NtAlpcQueryInformationMessage                                  0x1D79873Cu
#define NTDLL_NtAlpcRevokeSecurityContext                                    0xE13275FFu
#define NTDLL_NtAlpcSendWaitReceivePort                                      0x842A60E8u
#define NTDLL_NtAlpcSetInformation                                           0x9856481Cu
#define NTDLL_NtApphelpCacheControl                                          0xC98D289Du
#define NTDLL_NtAreMappedFilesTheSame                                        0x5263B41Fu
#define NTDLL_NtAssignProcessToJobObject                                     0x483A6881u
#define NTDLL_NtCallbackReturn                                               0xCB325E0Eu
#define NTDLL_NtCancelIoFile                                                 0xC707DD76u
#define NTDLL_NtCancelIoFileEx                                               0xDB14BF0Du
#define NTDLL_NtCancelSynchronousIoFile                                      0xA38BFA7Au
#define NTDLL_NtCancelTimer                                                  0x454FBB20u
#define NTDLL_NtClearEvent                                                   0xB002D642u
#define NTDLL_NtClose                                                        0xB82DD68Cu
#define NTDLL_NtCloseObjectAuditAlarm                                        0x3619AC04u
#define NTDLL_NtCommitComplete                                               0x6B03077Eu
#define NTDLL_NtCommitEnlistment                                             0xF07781D7u
#define NTDLL_NtCommitTransaction                                            0xD7599B8Eu
#define NTDLL_NtCompactKeys                                                  0xFE8D293Fu
#define NTDLL_NtCompareTokens                                                0x2F53BDE9u
#define NTDLL_NtCompleteConnectPort                                          0x47E906D6u
#define NTDLL_NtCompressKey                                                  0x46FA7539u
#define NTDLL_NtConnectPort                                                  0x268D47B8u
#define NTDLL_NtContinue                                                     0xAE95203Au
#define NTDLL_NtCreateDebugObject                                            0xEFA58F61u
#define NTDLL_NtCreateDirectoryObject                                        0xA41DBA64u
#define NTDLL_NtCreateEnlistment                                             0x37391193u
#define NTDLL_NtCreateEvent                                                  0x763A9FB4u
#define NTDLL_NtCreateEventPair                                              0x7F4A6BDAu
#define NTDLL_NtCreateFile                                                   0x8202905Fu
#define NTDLL_NtCreateIoCompletion                                           0xCD360F2Eu
#define NTDLL_NtCreateJobObject                                              0xA62AF99Eu
#define NTDLL_NtCreateJobSet                                                 0xA664AD2Du
#define NTDLL_NtCreateKey                                                    0xB5D59001u
#define NTDLL_NtCreateKeyTransacted                                          0x03D12306u
#define NTDLL_NtCreateKeyedEvent                                             0x9DEA173Du
#define NTDLL_NtCreateMailslotFile                                           0x3963751Bu
#define NTDLL_NtCreateMutant                                                 0x6FC5C623u
#define NTDLL_NtCreateNamedPipeFile                                          0xA9B3C7D0u
#define NTDLL_NtCreatePagingFile                                             0x5CA94B38u
#define NTDLL_NtCreatePort                                                   0x9A015B4Eu
#define NTDLL_NtCreatePrivateNamespace                                       0x4957F4C9u
#define NTDLL_NtCreateProcess                                                0x9573CC85u
#define NTDLL_NtCreateProcessEx                                              0x165D6F4Au
#define NTDLL_NtCreateProfile                                                0xA5702E13u
#define NTDLL_NtCreateProfileEx                                              0x4E9D60C0u
#define NTDLL_NtCreateResourceManager                                        0x01956BE6u
#define NTDLL_NtCreateSection                                                0xA5B08736u
#define NTDLL_NtCreateSemaphore                                              0xDF0B01D3u
#define NTDLL_NtCreateSymbolicLinkObject                                     0x9DB223CCu
#define NTDLL_NtCreateThread                                                 0x7E142501u
#define NTDLL_NtCreateThreadEx                                               0x05F0F0ECu
#define NTDLL_NtCreateTimer                                                  0x572BF032u
#define NTDLL_NtCreateToken                                                  0x4F2BF32Eu
#define NTDLL_NtCreateTransaction                                            0x05510367u
#define NTDLL_NtCreateTransactionManager                                     0xA2D5582Au
#define NTDLL_NtCreateUserProcess                                            0xD5BA4CD8u
#define NTDLL_NtCreateWaitablePort                                           0xB07E260Cu
#define NTDLL_NtCreateWorkerFactory                                          0x301CDF92u
#define NTDLL_NtCurrentTeb                                                   0xCEB76E7Au
#define NTDLL_NtDebugActiveProcess                                           0x1DDFBBD9u
#define NTDLL_NtDebugContinue                                                0xFA475AB6u
#define NTDLL_NtDelayExecution                                               0x21525458u
#define NTDLL_NtDeleteAtom                                                   0xBEE3E4D7u
#define NTDLL_NtDeleteBootEntry                                              0x7199BDE5u
#define NTDLL_NtDeleteDriverEntry                                            0xB1702EAEu
#define NTDLL_NtDeleteFile                                                   0xCAE3875Fu
#define NTDLL_NtDeleteKey                                                    0x0DD7D709u
#define NTDLL_NtDeleteObjectAuditAlarm                                       0x567BF66Au
#define NTDLL_NtDeletePrivateNamespace                                       0x4DD9E5B9u
#define NTDLL_NtDeleteValueKey                                               0xD8F23CC0u
#define NTDLL_NtDeviceIoControlFile                                          0x1DB11115u
#define NTDLL_NtDisableLastKnownGood                                         0x5DBAA39Eu
#define NTDLL_NtDisplayString                                                0xF6E7BC0Bu
#define NTDLL_NtDrawText                                                     0xBAA3DEB5u
#define NTDLL_NtDuplicateObject                                              0x2F2D9CEBu
#define NTDLL_NtDuplicateToken                                               0xE1497FE1u
#define NTDLL_NtEnableLastKnownGood                                          0xE526103Du
#define NTDLL_NtEnumerateBootEntries                                         0xD07F49C4u
#define NTDLL_NtEnumerateDriverEntries                                       0xFADFB6F4u
#define NTDLL_NtEnumerateKey                                                 0x4DD26286u
#define NTDLL_NtEnumerateSystemEnvironmentValuesEx                           0x775D9007u
#define NTDLL_NtEnumerateTransactionObject                                   0x730B9543u
#define NTDLL_NtEnumerateValueKey                                            0x58F957DEu
#define NTDLL_NtExtendSection                                                0xCD359D72u
#define NTDLL_NtFilterToken                                                  0xE44FBA14u
#define NTDLL_NtFindAtom                                                     0xEF97F432u
#define NTDLL_NtFlushBuffersFile                                             0x76C46CB5u
#define NTDLL_NtFlushInstallUILanguage                                       0xDE74832Cu
#define NTDLL_NtFlushInstructionCache                                        0x417EB1DDu
#define NTDLL_NtFlushKey                                                     0x12E7E090u
#define NTDLL_NtFlushProcessWriteBuffers                                     0x9EB39DA9u
#define NTDLL_NtFlushVirtualMemory                                           0x275C810Cu
#define NTDLL_NtFlushWriteBuffer                                             0xDA455396u
#define NTDLL_NtFreeUserPhysicalPages                                        0x8FBCCF2Fu
#define NTDLL_NtFreeVirtualMemory                                            0x45F67332u
#define NTDLL_NtFreezeRegistry                                               0x74F553D7u
#define NTDLL_NtFreezeTransactions                                           0x816CFCD9u
#define NTDLL_NtFsControlFile                                                0x7C8824B1u
#define NTDLL_NtGetContextThread                                             0xB5121743u
#define NTDLL_NtGetCurrentProcessorNumber                                    0xC2C3EA9Fu
#define NTDLL_NtGetDevicePowerState                                          0x2023E2DDu
#define NTDLL_NtGetMUIRegistryInfo                                           0x6F6CF531u
#define NTDLL_NtGetNextProcess                                               0x7370A45Bu
#define NTDLL_NtGetNextThread                                                0x38E3151Au
#define NTDLL_NtGetNlsSectionPtr                                             0x6D81395Bu
#define NTDLL_NtGetNotificationResourceManager                               0xF179256Fu
#define NTDLL_NtGetPlugPlayEvent                                             0x25A70064u
#define NTDLL_NtGetTickCount                                                 0xD6867EB3u
#define NTDLL_NtGetWriteWatch                                                0xF4334BF4u
#define NTDLL_NtImpersonateAnonymousToken                                    0x961767A5u
#define NTDLL_NtImpersonateClientOfPort                                      0xD3050832u
#define NTDLL_NtImpersonateThread                                            0x83244813u
#define NTDLL_NtInitializeNlsFiles                                           0xC16EF1F5u
#define NTDLL_NtInitializeRegistry                                           0x439E5CD7u
#define NTDLL_NtInitiatePowerAction                                          0x27DB4DE4u
#define NTDLL_NtIsProcessInJob                                               0x2449E539u
#define NTDLL_NtIsSystemResumeAutomatic                                      0xE4DB70C8u
#define NTDLL_NtIsUILanguageComitted                                         0x2E49AB15u
#define NTDLL_NtListenPort                                                   0x2B54006Cu
#define NTDLL_NtLoadDriver                                                   0xDE92FAA8u
#define NTDLL_NtLoadKey                                                      0x8A0FDCA5u
#define NTDLL_NtLoadKey2                                                     0xFB94B173u
#define NTDLL_NtLoadKeyEx                                                    0x96209F0Au
#define NTDLL_NtLockFile                                                     0xCB6617A0u
#define NTDLL_NtLockProductActivationKeys                                    0x25966B01u
#define NTDLL_NtLockRegistryKey                                              0x4CEB67FDu
#define NTDLL_NtLockVirtualMemory                                            0x447C6FDAu
#define NTDLL_NtMakePermanentObject                                          0xC1AD48AFu
#define NTDLL_NtMakeTemporaryObject                                          0xD3208C96u
#define NTDLL_NtMapCMFModule                                                 0xF4CA6C7Fu
#define NTDLL_NtMapUserPhysicalPages                                         0xB048DC1Eu
#define NTDLL_NtMapUserPhysicalPagesScatter                                  0x238A1C55u
#define NTDLL_NtMapViewOfSection                                             0x24C93656u
#define NTDLL_NtModifyBootEntry                                              0xF05FA9ADu
#define NTDLL_NtModifyDriverEntry                                            0x937736FFu
#define NTDLL_NtNotifyChangeDirectoryFile                                    0x25DB34CFu
#define NTDLL_NtNotifyChangeKey                                              0x36BECD18u
#define NTDLL_NtNotifyChangeMultipleKeys                                     0x7BE6A6B0u
#define NTDLL_NtNotifyChangeSession                                          0x7528B203u
#define NTDLL_NtOpenDirectoryObject                                          0x07E412FDu
#define NTDLL_NtOpenEnlistment                                               0xE6C5C5DFu
#define NTDLL_NtOpenEvent                                                    0x1EC4F592u
#define NTDLL_NtOpenEventPair                                                0xDD2CE43Cu
#define NTDLL_NtOpenFile                                                     0xD331D7ACu
#define NTDLL_NtOpenIoCompletion                                             0xFE71FC7Fu
#define NTDLL_NtOpenJobObject                                                0x044C7678u
#define NTDLL_NtOpenKey                                                      0x8A4F199Bu
#define NTDLL_NtOpenKeyEx                                                    0x6E219C1Eu
#define NTDLL_NtOpenKeyTransacted                                            0xFDBB056Eu
#define NTDLL_NtOpenKeyTransactedEx                                          0xBBFE4C6Du
#define NTDLL_NtOpenKeyedEvent                                               0x4C16C371u
#define NTDLL_NtOpenMutant                                                   0xA2810B3Cu
#define NTDLL_NtOpenObjectAuditAlarm                                         0x67E6D365u
#define NTDLL_NtOpenPrivateNamespace                                         0x7C44C0B6u
#define NTDLL_NtOpenProcess                                                  0x0CD0352Du
#define NTDLL_NtOpenProcessToken                                             0xB0ECFDB5u
#define NTDLL_NtOpenProcessTokenEx                                           0xD6CB138Eu
#define NTDLL_NtOpenResourceManager                                          0xA26CC37Fu
#define NTDLL_NtOpenSection                                                  0x3C137E9Eu
#define NTDLL_NtOpenSemaphore                                                0x7D6D8E35u
#define NTDLL_NtOpenSession                                                  0x3D137D1Eu
#define NTDLL_NtOpenSymbolicLinkObject                                       0x61666F1Du
#define NTDLL_NtOpenThread                                                   0xB350E81Eu
#define NTDLL_NtOpenThreadToken                                              0xCFED47D2u
#define NTDLL_NtOpenThreadTokenEx                                            0x4B371567u
#define NTDLL_NtOpenTimer                                                    0x3FD59A14u
#define NTDLL_NtOpenTransaction                                              0x9FD89958u
#define NTDLL_NtOpenTransactionManager                                       0x5E0114FBu
#define NTDLL_NtPlugPlayControl                                              0x4F002157u
#define NTDLL_NtPowerInformation                                             0x5C4CD11Du
#define NTDLL_NtPrePrepareComplete                                           0xE61E251Cu
#define NTDLL_NtPrePrepareEnlistment                                         0x7A43F55Eu
#define NTDLL_NtPrepareComplete                                              0xC123F59Eu
#define NTDLL_NtPrepareEnlistment                                            0x72DF021Cu
#define NTDLL_NtPrivilegeCheck                                               0x8831DB0Cu
#define NTDLL_NtPrivilegeObjectAuditAlarm                                    0x2726182Fu
#define NTDLL_NtPrivilegedServiceAuditAlarm                                  0xBFD8E101u
#define NTDLL_NtPropagationComplete                                          0xF4E19070u
#define NTDLL_NtPropagationFailed                                            0x4B252776u
#define NTDLL_NtProtectVirtualMemory                                         0x0CD8A6C9u
#define NTDLL_NtPulseEvent                                                   0xFA664F6Cu
#define NTDLL_NtQueryAttributesFile                                          0xC21E011Cu
#define NTDLL_NtQueryBootEntryOrder                                          0x4853312Au
#define NTDLL_NtQueryBootOptions                                             0xEBB6129Fu
#define NTDLL_NtQueryDebugFilterState                                        0x9F6440B1u
#define NTDLL_NtQueryDefaultLocale                                           0xB50664C1u
#define NTDLL_NtQueryDefaultUILanguage                                       0xB317AC87u
#define NTDLL_NtQueryDirectoryFile                                           0x54E6A06Du
#define NTDLL_NtQueryDirectoryObject                                         0xB5EFF9E7u
#define NTDLL_NtQueryDriverEntryOrder                                        0xBAE2B760u
#define NTDLL_NtQueryEaFile                                                  0xDC9987ADu
#define NTDLL_NtQueryEvent                                                   0xB2460F54u
#define NTDLL_NtQueryFullAttributesFile                                      0xAAA7034Eu
#define NTDLL_NtQueryInformationAtom                                         0x814F6C7Bu
#define NTDLL_NtQueryInformationEnlistment                                   0x50D20C40u
#define NTDLL_NtQueryInformationFile                                         0xF54F0FF3u
#define NTDLL_NtQueryInformationJobObject                                    0x48B1C6C6u
#define NTDLL_NtQueryInformationPort                                         0xED4CC4E2u
#define NTDLL_NtQueryInformationProcess                                      0x33BC1ABEu
#define NTDLL_NtQueryInformationResourceManager                              0xCE435040u
#define NTDLL_NtQueryInformationThread                                       0xCFC9137Fu
#define NTDLL_NtQueryInformationToken                                        0xFCDE7DC7u
#define NTDLL_NtQueryInformationTransaction                                  0x66EB6F9Au
#define NTDLL_NtQueryInformationTransactionManager                           0x49C88B4Du
#define NTDLL_NtQueryInformationWorkerFactory                                0xC5923621u
#define NTDLL_NtQueryInstallUILanguage                                       0xF65A86BEu
#define NTDLL_NtQueryIntervalProfile                                         0x16345FC8u
#define NTDLL_NtQueryIoCompletion                                            0xCB15EBA9u
#define NTDLL_NtQueryKey                                                     0xAAF1A830u
#define NTDLL_NtQueryLicenseValue                                            0xC024EB28u
#define NTDLL_NtQueryMultipleValueKey                                        0x31A07D80u
#define NTDLL_NtQueryMutant                                                  0xFDD9DEACu
#define NTDLL_NtQueryObject                                                  0xECA871A8u
#define NTDLL_NtQueryOpenSubKeys                                             0x1133E9A1u
#define NTDLL_NtQueryOpenSubKeysEx                                           0x844C6FDEu
#define NTDLL_NtQueryPerformanceCounter                                      0xFCB72AF3u
#define NTDLL_NtQueryPortInformationProcess                                  0x19B6F08Eu
#define NTDLL_NtQueryQuotaInformationFile                                    0xA50AA97Bu
#define NTDLL_NtQuerySection                                                 0x26A17575u
#define NTDLL_NtQuerySecurityAttributesToken                                 0xE08302C0u
#define NTDLL_NtQuerySecurityObject                                          0xE8671844u
#define NTDLL_NtQuerySemaphore                                               0xD107461Au
#define NTDLL_NtQuerySymbolicLinkObject                                      0x6493E244u
#define NTDLL_NtQuerySystemEnvironmentValue                                  0xA6053B85u
#define NTDLL_NtQuerySystemEnvironmentValueEx                                0x1690B496u
#define NTDLL_NtQuerySystemInformation                                       0x8945E91Eu
#define NTDLL_NtQuerySystemInformationEx                                     0x7A2DB7DCu
#define NTDLL_NtQuerySystemTime                                              0x74971BEFu
#define NTDLL_NtQueryTimer                                                   0x935760D2u
#define NTDLL_NtQueryTimerResolution                                         0x7C5BFCFEu
#define NTDLL_NtQueryValueKey                                                0x96BEC2B3u
#define NTDLL_NtQueryVirtualMemory                                           0xC705A38Eu
#define NTDLL_NtQueryVolumeInformationFile                                   0x1EED4B2Au
#define NTDLL_NtQueueApcThread                                               0x5306B96Du
#define NTDLL_NtQueueApcThreadEx                                             0xB544BA9Du
#define NTDLL_NtRaiseException                                               0x6281781Cu
#define NTDLL_NtRaiseHardError                                               0xC5D53602u
#define NTDLL_NtReadFile                                                     0x3B9497A4u
#define NTDLL_NtReadFileScatter                                              0xF7D4FE08u
#define NTDLL_NtReadOnlyEnlistment                                           0x65A594F0u
#define NTDLL_NtReadRequestData                                              0x230B5B6Bu
#define NTDLL_NtReadVirtualMemory                                            0x44E2718Au
#define NTDLL_NtRecoverEnlistment                                            0x0356BCF9u
#define NTDLL_NtRecoverResourceManager                                       0x694A3132u
#define NTDLL_NtRecoverTransactionManager                                    0xCD78321Eu
#define NTDLL_NtRegisterProtocolAddressInformation                           0x2ABD8D86u
#define NTDLL_NtRegisterThreadTerminatePort                                  0x0040F9A0u
#define NTDLL_NtReleaseKeyedEvent                                            0xDA4EAE0Au
#define NTDLL_NtReleaseMutant                                                0x2456B259u
#define NTDLL_NtReleaseSemaphore                                             0x16B13CF6u
#define NTDLL_NtReleaseWorkerFactoryWorker                                   0xBBF0E14Du
#define NTDLL_NtRemoveIoCompletion                                           0xEEA10B6Cu
#define NTDLL_NtRemoveIoCompletionEx                                         0xB3B22455u
#define NTDLL_NtRemoveProcessDebug                                           0x853E0FAFu
#define NTDLL_NtRenameKey                                                    0x0C474101u
#define NTDLL_NtRenameTransactionManager                                     0x6E43D02Fu
#define NTDLL_NtReplaceKey                                                   0xA040F6E9u
#define NTDLL_NtReplacePartitionUnit                                         0x2176F8A3u
#define NTDLL_NtReplyPort                                                    0x9D023B96u
#define NTDLL_NtReplyWaitReceivePort                                         0x32EF1852u
#define NTDLL_NtReplyWaitReceivePortEx                                       0x48C31C19u
#define NTDLL_NtReplyWaitReplyPort                                           0x91569A85u
#define NTDLL_NtRequestPort                                                  0xFFCD58DCu
#define NTDLL_NtRequestWaitReplyPort                                         0xF81AC369u
#define NTDLL_NtResetEvent                                                   0x0223DF4Eu
#define NTDLL_NtResetWriteWatch                                              0xB37D6A57u
#define NTDLL_NtRestoreKey                                                   0xB956F6F5u
#define NTDLL_NtResumeProcess                                                0x87F855DCu
#define NTDLL_NtResumeThread                                                 0xB4DCB15Du
#define NTDLL_NtRollbackComplete                                             0x9CF0C6A7u
#define NTDLL_NtRollbackEnlistment                                           0x97A84ED0u
#define NTDLL_NtRollbackTransaction                                          0x2EB97775u
#define NTDLL_NtRollforwardTransactionManager                                0xDA450BDDu
#define NTDLL_NtSaveKey                                                      0x8B781C39u
#define NTDLL_NtSaveKeyEx                                                    0xE6254008u
#define NTDLL_NtSaveMergedKeys                                               0x06CD05D9u
#define NTDLL_NtSecureConnectPort                                            0x7E17169Du
#define NTDLL_NtSerializeBoot                                                0xF4D5894Fu
#define NTDLL_NtSetBootEntryOrder                                            0x51254972u
#define NTDLL_NtSetBootOptions                                               0x5B84FE6Fu
#define NTDLL_NtSetContextThread                                             0xB51217E3u
#define NTDLL_NtSetDebugFilterState                                          0xFF019950u
#define NTDLL_NtSetDefaultHardErrorPort                                      0xD02BF494u
#define NTDLL_NtSetDefaultLocale                                             0x77C6AF72u
#define NTDLL_NtSetDefaultUILanguage                                         0x082B808Bu
#define NTDLL_NtSetDriverEntryOrder                                          0xDA876E81u
#define NTDLL_NtSetEaFile                                                    0x8480F1D5u
#define NTDLL_NtSetEvent                                                     0x0184CF9Fu
#define NTDLL_NtSetEventBoostPriority                                        0x052AF213u
#define NTDLL_NtSetHighEventPair                                             0x675466A5u
#define NTDLL_NtSetHighWaitLowEventPair                                      0x2F72DFF7u
#define NTDLL_NtSetInformationDebugObject                                    0xFA67BB85u
#define NTDLL_NtSetInformationEnlistment                                     0x9019BF82u
#define NTDLL_NtSetInformationFile                                           0x3A440CDDu
#define NTDLL_NtSetInformationJobObject                                      0xD6A7C09Bu
#define NTDLL_NtSetInformationKey                                            0x51C05235u
#define NTDLL_NtSetInformationObject                                         0x74557355u
#define NTDLL_NtSetInformationProcess                                        0xB63D8DD9u
#define NTDLL_NtSetInformationResourceManager                                0x4FD437C5u
#define NTDLL_NtSetInformationThread                                         0x74F53F73u
#define NTDLL_NtSetInformationToken                                          0x9CBBA426u
#define NTDLL_NtSetInformationTransaction                                    0x10933783u
#define NTDLL_NtSetInformationTransactionManager                             0x827B498Du
#define NTDLL_NtSetInformationWorkerFactory                                  0xA04BD741u
#define NTDLL_NtSetIntervalProfile                                           0xD93F5CE6u
#define NTDLL_NtSetIoCompletion                                              0x968BFDAFu
#define NTDLL_NtSetIoCompletionEx                                            0xBE528F8Eu
#define NTDLL_NtSetLdtEntries                                                0x296FD478u
#define NTDLL_NtSetLowEventPair                                              0x691CC5B7u
#define NTDLL_NtSetLowWaitHighEventPair                                      0xECBF7C66u
#define NTDLL_NtSetQuotaInformationFile                                      0x3B1CAF26u
#define NTDLL_NtSetSecurityObject                                            0xF111601Cu
#define NTDLL_NtSetSystemEnvironmentValue                                    0xD07D639Cu
#define NTDLL_NtSetSystemEnvironmentValueEx                                  0x734955F6u
#define NTDLL_NtSetSystemInformation                                         0x3279C512u
#define NTDLL_NtSetSystemPowerState                                          0xF720B844u
#define NTDLL_NtSetSystemTime                                                0x13129A78u
#define NTDLL_NtSetThreadExecutionState                                      0xBA1A0162u
#define NTDLL_NtSetTimer                                                     0x2095A019u
#define NTDLL_NtSetTimerEx                                                   0x648AF6F8u
#define NTDLL_NtSetTimerResolution                                           0xB350FFD0u
#define NTDLL_NtSetUuidSeed                                                  0xD6CBBC7Du
#define NTDLL_NtSetValueKey                                                  0x77DEA76Au
#define NTDLL_NtSetVolumeInformationFile                                     0xDE26F8E8u
#define NTDLL_NtShutdownSystem                                               0xFE3D53EFu
#define NTDLL_NtShutdownWorkerFactory                                        0x7E351021u
#define NTDLL_NtSignalAndWaitForSingleObject                                 0xAF1630D5u
#define NTDLL_NtSinglePhaseReject                                            0x5CA500D2u
#define NTDLL_NtStartProfile                                                 0x4EE0DC54u
#define NTDLL_NtStopProfile                                                  0xCC53DDCBu
#define NTDLL_NtSuspendProcess                                               0xF3731AA2u
#define NTDLL_NtSuspendThread                                                0xCF2F1507u
#define NTDLL_NtSystemDebugControl                                           0x70E777B0u
#define NTDLL_NtTerminateJobObject                                           0xBA801FA4u
#define NTDLL_NtTerminateProcess                                             0xBFCA4202u
#define NTDLL_NtTerminateThread                                              0x0A2D70CDu
#define NTDLL_NtTestAlert                                                    0xB682E3A6u
#define NTDLL_NtThawRegistry                                                 0x0A8DD393u
#define NTDLL_NtThawTransactions                                             0x852B1B51u
#define NTDLL_NtTraceControl                                                 0xAAF7E47Fu
#define NTDLL_NtTraceEvent                                                   0x92E2486Cu
#define NTDLL_NtTranslateFilePath                                            0x14E76BAEu
#define NTDLL_NtUmsThreadYield                                               0x79BCAF08u
#define NTDLL_NtUnloadDriver                                                 0x9A9FE6C7u
#define NTDLL_NtUnloadKey                                                    0x5487C69Du
#define NTDLL_NtUnloadKey2                                                   0xF8D3AAA2u
#define NTDLL_NtUnloadKeyEx                                                  0x755ABF62u
#define NTDLL_NtUnlockFile                                                   0xC8210C71u
#define NTDLL_NtUnlockVirtualMemory                                          0x3E5C0739u
#define NTDLL_NtUnmapViewOfSection                                           0x63D2E755u
#define NTDLL_NtVdmControl                                                   0xAC1A7F60u
#define NTDLL_NtWaitForDebugEvent                                            0x72E18C72u
#define NTDLL_NtWaitForKeyedEvent                                            0xAB058C74u
#define NTDLL_NtWaitForMultipleObjects                                       0x8B855002u
#define NTDLL_NtWaitForMultipleObjects32                                     0x0A287572u
#define NTDLL_NtWaitForSingleObject                                          0xD4347607u
#define NTDLL_NtWaitForWorkViaWorkerFactory                                  0xCE5729E1u
#define NTDLL_NtWaitHighEventPair                                            0x24765F32u
#define NTDLL_NtWaitLowEventPair                                             0xA5A6DCA6u
#define NTDLL_NtWorkerFactoryWorkerReady                                     0xAFEFA33Fu
#define NTDLL_NtWow64CallFunction64                                          0x010E9CB5u
#define NTDLL_NtWow64CsrAllocateCaptureBuffer                                0x67A8274Eu
#define NTDLL_NtWow64CsrAllocateMessagePointer                               0x029E21AFu
#define NTDLL_NtWow64CsrCaptureMessageBuffer                                 0xAF3E9761u
#define NTDLL_NtWow64CsrCaptureMessageString                                 0x932FFD56u
#define NTDLL_NtWow64CsrClientCallServer                                     0x338F97ADu
#define NTDLL_NtWow64CsrClientConnectToServer                                0x89802CB2u
#define NTDLL_NtWow64CsrFreeCaptureBuffer                                    0xDF255773u
#define NTDLL_NtWow64CsrGetProcessId                                         0xAF0A545Du
#define NTDLL_NtWow64CsrIdentifyAlertableThread                              0x4717CA6Au
#define NTDLL_NtWow64CsrVerifyRegion                                         0x67C3A735u
#define NTDLL_NtWow64DebuggerCall                                            0x6AC042C5u
#define NTDLL_NtWow64GetCurrentProcessorNumberEx                             0x93B5F446u
#define NTDLL_NtWow64GetNativeSystemInformation                              0x37534476u
#define NTDLL_NtWow64InterlockedPopEntrySList                                0x14A47928u
#define NTDLL_NtWow64QueryInformationProcess64                               0xD55ED565u
#define NTDLL_NtWow64QueryVirtualMemory64                                    0xADD1A427u
#define NTDLL_NtWow64ReadVirtualMemory64                                     0xBDF9FFA9u
#define NTDLL_NtWow64WriteVirtualMemory64                                    0x2ED7B8C6u
#define NTDLL_NtWriteFile                                                    0x3CC7B5B7u
#define NTDLL_NtWriteFileGather                                              0x4B7155CCu
#define NTDLL_NtWriteRequestData                                             0xBB31C27Bu
#define NTDLL_NtWriteVirtualMemory                                           0x06829BEEu
#define NTDLL_NtYieldExecution                                               0xE2F6EE6Cu
#define NTDLL_NtdllDefWindowProc_A                                           0x28B0EBADu
#define NTDLL_NtdllDefWindowProc_W                                           0x28B0EBBBu
#define NTDLL_NtdllDialogWndProc_A                                           0x518980B5u
#define NTDLL_NtdllDialogWndProc_W                                           0x518980A3u
#define NTDLL_PfxFindPrefix                                                  0xE7C77ABFu
#define NTDLL_PfxInitialize                                                  0xE3111950u
#define NTDLL_PfxInsertPrefix                                                0x95743AE5u
#define NTDLL_PfxRemovePrefix                                                0xB6BDF0C9u
#define NTDLL_RtlAbortRXact                                                  0xD12AAF2Bu
#define NTDLL_RtlAbsoluteToSelfRelativeSD                                    0xE8FC0FF6u
#define NTDLL_RtlAcquirePebLock                                              0xB47234D1u
#define NTDLL_RtlAcquirePrivilege                                            0xC6BFEF42u
#define NTDLL_RtlAcquireReleaseSRWLockExclusive                              0x1ACEDDBFu
#define NTDLL_RtlAcquireResourceExclusive                                    0x1A646958u
#define NTDLL_RtlAcquireResourceShared                                       0x007ED469u
#define NTDLL_RtlAcquireSRWLockExclusive                                     0xF4B09861u
#define NTDLL_RtlAcquireSRWLockShared                                        0x73A37D8Bu
#define NTDLL_RtlActivateActivationContext                                   0x422E07BFu
#define NTDLL_RtlActivateActivationContextEx                                 0xFD001866u
#define NTDLL_RtlActivateActivationContextUnsafeFast                         0x185E7347u
#define NTDLL_RtlAddAccessAllowedAce                                         0x945FB807u
#define NTDLL_RtlAddAccessAllowedAceEx                                       0x1E59DE98u
#define NTDLL_RtlAddAccessAllowedObjectAce                                   0xE43E71B9u
#define NTDLL_RtlAddAccessDeniedAce                                          0x1E306777u
#define NTDLL_RtlAddAccessDeniedAceEx                                        0xDC7061E5u
#define NTDLL_RtlAddAccessDeniedObjectAce                                    0x13E25322u
#define NTDLL_RtlAddAce                                                      0xA25700E5u
#define NTDLL_RtlAddActionToRXact                                            0x7545207Au
#define NTDLL_RtlAddAtomToAtomTable                                          0xDAA5EE63u
#define NTDLL_RtlAddAttributeActionToRXact                                   0xAB1A8929u
#define NTDLL_RtlAddAuditAccessAce                                           0xF5D688A3u
#define NTDLL_RtlAddAuditAccessAceEx                                         0x8FDFFA5Au
#define NTDLL_RtlAddAuditAccessObjectAce                                     0xA81769DBu
#define NTDLL_RtlAddCompoundAce                                              0xD4777F27u
#define NTDLL_RtlAddIntegrityLabelToBoundaryDescriptor                       0xA36821EFu
#define NTDLL_RtlAddMandatoryAce                                             0x16E372D1u
#define NTDLL_RtlAddRefActivationContext                                     0x4F643D7Bu
#define NTDLL_RtlAddRefMemoryStream                                          0x6031CB53u
#define NTDLL_RtlAddSIDToBoundaryDescriptor                                  0x82F60798u
#define NTDLL_RtlAddVectoredContinueHandler                                  0xFCDC8901u
#define NTDLL_RtlAddVectoredExceptionHandler                                 0x93C40BAFu
#define NTDLL_RtlAddressInSectionTable                                       0x47611032u
#define NTDLL_RtlAdjustPrivilege                                             0xFC088C2Bu
#define NTDLL_RtlAllocateActivationContextStack                              0x0578A7B8u
#define NTDLL_RtlAllocateAndInitializeSid                                    0x1AF734F9u
#define NTDLL_RtlAllocateHandle                                              0xE10016EDu
#define NTDLL_RtlAllocateHeap                                                0x5364422Cu
#define NTDLL_RtlAllocateMemoryBlockLookaside                                0xC9A3604Eu
#define NTDLL_RtlAllocateMemoryZone                                          0xCBB13959u
#define NTDLL_RtlAnsiCharToUnicodeChar                                       0xFC689629u
#define NTDLL_RtlAnsiStringToUnicodeSize                                     0x6C1FAD58u
#define NTDLL_RtlAnsiStringToUnicodeString                                   0x506DBAD2u
#define NTDLL_RtlAppendAsciizToString                                        0x874B85CBu
#define NTDLL_RtlAppendPathElement                                           0x8B1EDAE5u
#define NTDLL_RtlAppendStringToString                                        0xF7A33CCBu
#define NTDLL_RtlAppendUnicodeStringToString                                 0x55493D30u
#define NTDLL_RtlAppendUnicodeToString                                       0x12125659u
#define NTDLL_RtlApplicationVerifierStop                                     0x719FF556u
#define NTDLL_RtlApplyRXact                                                  0x292D3D31u
#define NTDLL_RtlApplyRXactNoFlush                                           0x5934BF5Eu
#define NTDLL_RtlAreAllAccessesGranted                                       0x79A8762Du
#define NTDLL_RtlAreAnyAccessesGranted                                       0x79AA7685u
#define NTDLL_RtlAreBitsClear                                                0x00213D58u
#define NTDLL_RtlAreBitsSet                                                  0x4B466A91u
#define NTDLL_RtlAssert                                                      0x33252B74u
#define NTDLL_RtlBarrier                                                     0xC97C6DB2u
#define NTDLL_RtlBarrierForDelete                                            0x5C1B5F62u
#define NTDLL_RtlCancelTimer                                                 0xE5431F23u
#define NTDLL_RtlCaptureContext                                              0xBF350CDEu
#define NTDLL_RtlCaptureStackBackTrace                                       0x6D6AAB89u
#define NTDLL_RtlCaptureStackContext                                         0x9D63F492u
#define NTDLL_RtlCharToInteger                                               0xC02A5D3Cu
#define NTDLL_RtlCheckForOrphanedCriticalSections                            0x10CFE88Du
#define NTDLL_RtlCheckRegistryKey                                            0xC5C83A4Bu
#define NTDLL_RtlCleanUpTEBLangLists                                         0x65FFDB69u
#define NTDLL_RtlClearAllBits                                                0xEADFE91Fu
#define NTDLL_RtlClearBits                                                   0xCE9EA363u
#define NTDLL_RtlCloneMemoryStream                                           0xEC56B836u
#define NTDLL_RtlCloneUserProcess                                            0x77D52151u
#define NTDLL_RtlCmDecodeMemIoResource                                       0x08CFB9E9u
#define NTDLL_RtlCmEncodeMemIoResource                                       0x68CFBDE8u
#define NTDLL_RtlCommitDebugInfo                                             0x18667CCFu
#define NTDLL_RtlCommitMemoryStream                                          0x0FFAD31Au
#define NTDLL_RtlCompactHeap                                                 0x5E828CBFu
#define NTDLL_RtlCompareAltitudes                                            0x606CCAFAu
#define NTDLL_RtlCompareMemory                                               0x09700C41u
#define NTDLL_RtlCompareMemoryUlong                                          0xABBDEEE4u
#define NTDLL_RtlCompareString                                               0x106383E3u
#define NTDLL_RtlCompareUnicodeString                                        0xC29AA4B3u
#define NTDLL_RtlCompareUnicodeStrings                                       0x54967820u
#define NTDLL_RtlCompressBuffer                                              0xE2643292u
#define NTDLL_RtlComputeCrc32                                                0xF92A4040u
#define NTDLL_RtlComputeImportTableHash                                      0x52C1AEB0u
#define NTDLL_RtlComputePrivatizedDllName_U                                  0x6A497F61u
#define NTDLL_RtlConnectToSm                                                 0x8685C1A2u
#define NTDLL_RtlConsoleMultiByteToUnicodeN                                  0x825894A4u
#define NTDLL_RtlContractHashTable                                           0x192382C9u
#define NTDLL_RtlConvertExclusiveToShared                                    0x37FCB6D7u
#define NTDLL_RtlConvertLCIDToString                                         0x85DB9034u
#define NTDLL_RtlConvertLongToLargeInteger                                   0x2FA9BC35u
#define NTDLL_RtlConvertSharedToExclusive                                    0x399043DCu
#define NTDLL_RtlConvertSidToUnicodeString                                   0x5154A9AAu
#define NTDLL_RtlConvertToAutoInheritSecurityObject                          0xDAE23EC7u
#define NTDLL_RtlConvertUiListToApiList                                      0xC48C7C19u
#define NTDLL_RtlConvertUlongToLargeInteger                                  0x00EA14B4u
#define NTDLL_RtlCopyContext                                                 0x17292FA3u
#define NTDLL_RtlCopyExtendedContext                                         0x39D8E692u
#define NTDLL_RtlCopyLuid                                                    0xC506ABCFu
#define NTDLL_RtlCopyLuidAndAttributesArray                                  0x0AFDF902u
#define NTDLL_RtlCopyMappedMemory                                            0x97CC2DF4u
#define NTDLL_RtlCopyMemoryStreamTo                                          0x301F641Au
#define NTDLL_RtlCopyOutOfProcessMemoryStreamTo                              0x00182ABFu
#define NTDLL_RtlCopySecurityDescriptor                                      0xC19ED98Fu
#define NTDLL_RtlCopySid                                                     0x215DA838u
#define NTDLL_RtlCopySidAndAttributesArray                                   0x66F22693u
#define NTDLL_RtlCopyString                                                  0x0B09D776u
#define NTDLL_RtlCopyUnicodeString                                           0x6A41F617u
#define NTDLL_RtlCreateAcl                                                   0x9EFC50FCu
#define NTDLL_RtlCreateActivationContext                                     0xB6C8796Bu
#define NTDLL_RtlCreateAndSetSD                                              0xE8C1B32Cu
#define NTDLL_RtlCreateAtomTable                                             0x21725781u
#define NTDLL_RtlCreateBootStatusDataFile                                    0x467B30A5u
#define NTDLL_RtlCreateBoundaryDescriptor                                    0xDA52335Au
#define NTDLL_RtlCreateEnvironment                                           0x270190A6u
#define NTDLL_RtlCreateEnvironmentEx                                         0x9894A63Au
#define NTDLL_RtlCreateHashTable                                             0x89755E8Bu
#define NTDLL_RtlCreateHeap                                                  0x921E372Fu
#define NTDLL_RtlCreateMemoryBlockLookaside                                  0xBCA0A134u
#define NTDLL_RtlCreateMemoryZone                                            0x56F1C907u
#define NTDLL_RtlCreateProcessParameters                                     0x6789A3FDu
#define NTDLL_RtlCreateProcessParametersEx                                   0xF59686F7u
#define NTDLL_RtlCreateProcessReflection                                     0xF7A947F0u
#define NTDLL_RtlCreateQueryDebugBuffer                                      0xE6F85B5Eu
#define NTDLL_RtlCreateRegistryKey                                           0x9FA0ABC1u
#define NTDLL_RtlCreateSecurityDescriptor                                    0x7C9B1FE8u
#define NTDLL_RtlCreateServiceSid                                            0x5C9776B0u
#define NTDLL_RtlCreateSystemVolumeInformationFolder                         0xE54BACAAu
#define NTDLL_RtlCreateTagHeap                                               0x9B70ABB0u
#define NTDLL_RtlCreateTimer                                                 0xF7275431u
#define NTDLL_RtlCreateTimerQueue                                            0x7F503287u
#define NTDLL_RtlCreateUnicodeString                                         0xB4C31524u
#define NTDLL_RtlCreateUnicodeStringFromAsciiz                               0x00EA77E8u
#define NTDLL_RtlCreateUserProcess                                           0xFCBAA4DBu
#define NTDLL_RtlCreateUserSecurityObject                                    0x0731DC94u
#define NTDLL_RtlCreateUserStack                                             0x15012931u
#define NTDLL_RtlCreateUserThread                                            0x3CE76B4Au
#define NTDLL_RtlCreateVirtualAccountSid                                     0x32566F7Fu
#define NTDLL_RtlCultureNameToLCID                                           0x895B1DD8u
#define NTDLL_RtlCustomCPToUnicodeN                                          0xA3F291E9u
#define NTDLL_RtlCutoverTimeToSystemTime                                     0x59D09FABu
#define NTDLL_RtlDeCommitDebugInfo                                           0xF157AC80u
#define NTDLL_RtlDeNormalizeProcessParams                                    0x3C636845u
#define NTDLL_RtlDeactivateActivationContext                                 0xC6E94680u
#define NTDLL_RtlDeactivateActivationContextUnsafeFast                       0x0B4377B9u
#define NTDLL_RtlDebugPrintTimes                                             0x82192EE9u
#define NTDLL_RtlDecodePointer                                               0xAE5AA8B6u
#define NTDLL_RtlDecodeSystemPointer                                         0x0FF2AD53u
#define NTDLL_RtlDecompressBuffer                                            0x601B3B1Cu
#define NTDLL_RtlDecompressFragment                                          0x0D9C6896u
#define NTDLL_RtlDefaultNpAcl                                                0x7095D014u
#define NTDLL_RtlDelete                                                      0x3245E4EFu
#define NTDLL_RtlDeleteAce                                                   0x26FE17FDu
#define NTDLL_RtlDeleteAtomFromAtomTable                                     0xBD0655B8u
#define NTDLL_RtlDeleteBarrier                                               0xDAAE3696u
#define NTDLL_RtlDeleteBoundaryDescriptor                                    0x1A400B1Fu
#define NTDLL_RtlDeleteCriticalSection                                       0xDC9CB97Du
#define NTDLL_RtlDeleteElementGenericTable                                   0xBE09FD25u
#define NTDLL_RtlDeleteElementGenericTableAvl                                0x00F052B2u
#define NTDLL_RtlDeleteHashTable                                             0x18B7708Bu
#define NTDLL_RtlDeleteNoSplay                                               0xCCBDB781u
#define NTDLL_RtlDeleteRegistryValue                                         0xB3A93CE8u
#define NTDLL_RtlDeleteResource                                              0x1B01F532u
#define NTDLL_RtlDeleteSecurityObject                                        0x578FCA43u
#define NTDLL_RtlDeleteTimer                                                 0xD5C75D2Du
#define NTDLL_RtlDeleteTimerQueue                                            0x3A9020BFu
#define NTDLL_RtlDeleteTimerQueueEx                                          0xFCE2E0FAu
#define NTDLL_RtlDeregisterSecureMemoryCacheCallback                         0x7D96AE19u
#define NTDLL_RtlDeregisterWait                                              0x5CBBE80Eu
#define NTDLL_RtlDeregisterWaitEx                                            0x397A4FD8u
#define NTDLL_RtlDestroyAtomTable                                            0xFB629CA8u
#define NTDLL_RtlDestroyEnvironment                                          0x8069D38Au
#define NTDLL_RtlDestroyHandleTable                                          0xF62E0DBBu
#define NTDLL_RtlDestroyHeap                                                 0x7F1652BBu
#define NTDLL_RtlDestroyMemoryBlockLookaside                                 0xD9344C3Cu
#define NTDLL_RtlDestroyMemoryZone                                           0x4F94F245u
#define NTDLL_RtlDestroyProcessParameters                                    0x77428A27u
#define NTDLL_RtlDestroyQueryDebugBuffer                                     0xA828DD07u
#define NTDLL_RtlDetectHeapLeaks                                             0xB71312F0u
#define NTDLL_RtlDetermineDosPathNameType_U                                  0x4E2F6D5Eu
#define NTDLL_RtlDisableThreadProfiling                                      0x20521685u
#define NTDLL_RtlDllShutdownInProgress                                       0xA0CAD9EFu
#define NTDLL_RtlDnsHostNameToComputerName                                   0xB3527633u
#define NTDLL_RtlDoesFileExists_U                                            0x452B3E09u
#define NTDLL_RtlDosApplyFileIsolationRedirection_Ustr                       0x7F298F97u
#define NTDLL_RtlDosPathNameToNtPathName_U                                   0xAE75CE59u
#define NTDLL_RtlDosPathNameToNtPathName_U_WithStatus                        0x9A982F11u
#define NTDLL_RtlDosPathNameToRelativeNtPathName_U                           0x887E0FA6u
#define NTDLL_RtlDosPathNameToRelativeNtPathName_U_WithStatus                0x7A67BC14u
#define NTDLL_RtlDosSearchPath_U                                             0xD37CF40Eu
#define NTDLL_RtlDosSearchPath_Ustr                                          0x7274871Au
#define NTDLL_RtlDowncaseUnicodeChar                                         0x4DA7FF56u
#define NTDLL_RtlDowncaseUnicodeString                                       0x34FB563Au
#define NTDLL_RtlDumpResource                                                0x87E783D2u
#define NTDLL_RtlDuplicateUnicodeString                                      0x88EA092Cu
#define NTDLL_RtlEmptyAtomTable                                              0xE91CB94Bu
#define NTDLL_RtlEnableEarlyCriticalSectionEventCreation                     0x87840EB1u
#define NTDLL_RtlEnableThreadProfiling                                       0x7C832443u
#define NTDLL_RtlEncodePointer                                               0xBE5F28B6u
#define NTDLL_RtlEncodeSystemPointer                                         0x6FF2A952u
#define NTDLL_RtlEndEnumerationHashTable                                     0x6216ACBBu
#define NTDLL_RtlEndWeakEnumerationHashTable                                 0xD71A33F5u
#define NTDLL_RtlEnlargedIntegerMultiply                                     0x15B97C04u
#define NTDLL_RtlEnlargedUnsignedDivide                                      0x5BB3DF90u
#define NTDLL_RtlEnlargedUnsignedMultiply                                    0x5CB449B3u
#define NTDLL_RtlEnterCriticalSection                                        0x6CBF234Eu
#define NTDLL_RtlEnumProcessHeaps                                            0xEEB730FFu
#define NTDLL_RtlEnumerateEntryHashTable                                     0x31344956u
#define NTDLL_RtlEnumerateGenericTable                                       0xCF4ABF63u
#define NTDLL_RtlEnumerateGenericTableAvl                                    0xA151718Au
#define NTDLL_RtlEnumerateGenericTableLikeADirectory                         0xB2C4758Cu
#define NTDLL_RtlEnumerateGenericTableWithoutSplaying                        0x1B00A099u
#define NTDLL_RtlEnumerateGenericTableWithoutSplayingAvl                     0x845E8CE0u
#define NTDLL_RtlEqualComputerName                                           0x52B56792u
#define NTDLL_RtlEqualDomainName                                             0xE371C868u
#define NTDLL_RtlEqualLuid                                                   0x57790274u
#define NTDLL_RtlEqualPrefixSid                                              0xDC6C0489u
#define NTDLL_RtlEqualSid                                                    0x6C813BC5u
#define NTDLL_RtlEqualString                                                 0xE54029D0u
#define NTDLL_RtlEqualUnicodeString                                          0x5D33B9E2u
#define NTDLL_RtlEraseUnicodeString                                          0x59B0AB42u
#define NTDLL_RtlEthernetAddressToStringA                                    0x04859329u
#define NTDLL_RtlEthernetAddressToStringW                                    0x0485933Fu
#define NTDLL_RtlEthernetStringToAddressA                                    0xB06F42C9u
#define NTDLL_RtlEthernetStringToAddressW                                    0xB06F42DFu
#define NTDLL_RtlExitUserProcess                                             0xCD84C62Du
#define NTDLL_RtlExitUserThread                                              0x2B56E2B9u
#define NTDLL_RtlExpandEnvironmentStrings                                    0x032A2C9Du
#define NTDLL_RtlExpandEnvironmentStrings_U                                  0x740748E7u
#define NTDLL_RtlExpandHashTable                                             0xD8D54AE2u
#define NTDLL_RtlExtendMemoryBlockLookaside                                  0xB69429E5u
#define NTDLL_RtlExtendMemoryZone                                            0x147CEB33u
#define NTDLL_RtlExtendedIntegerMultiply                                     0x77950D84u
#define NTDLL_RtlExtendedLargeIntegerDivide                                  0x845D8A61u
#define NTDLL_RtlExtendedMagicDivide                                         0x9BC7C5BAu
#define NTDLL_RtlFillMemory                                                  0xF2BF1ED4u
#define NTDLL_RtlFillMemoryUlong                                             0x5C23CBCFu
#define NTDLL_RtlFillMemoryUlonglong                                         0x00F8345Au
#define NTDLL_RtlFinalReleaseOutOfProcessMemoryStream                        0x9B2BD7FBu
#define NTDLL_RtlFindAceByType                                               0x8A3370CFu
#define NTDLL_RtlFindActivationContextSectionGuid                            0x8ADC320Eu
#define NTDLL_RtlFindActivationContextSectionString                          0x0E36BD07u
#define NTDLL_RtlFindCharInUnicodeString                                     0x0BF2684Eu
#define NTDLL_RtlFindClearBits                                               0xB283F99Fu
#define NTDLL_RtlFindClearBitsAndSet                                         0xB48B7E57u
#define NTDLL_RtlFindClearRuns                                               0xC280B19Fu
#define NTDLL_RtlFindClosestEncodableLength                                  0x28D259EBu
#define NTDLL_RtlFindLastBackwardRunClear                                    0xCDF9CBEBu
#define NTDLL_RtlFindLeastSignificantBit                                     0xA057C42Fu
#define NTDLL_RtlFindLongestRunClear                                         0xEBB96152u
#define NTDLL_RtlFindMessage                                                 0xEE395232u
#define NTDLL_RtlFindMostSignificantBit                                      0x0307AE10u
#define NTDLL_RtlFindNextForwardRunClear                                     0x59723A33u
#define NTDLL_RtlFindSetBits                                                 0xCE4CAAA4u
#define NTDLL_RtlFindSetBitsAndClear                                         0xD48D3277u
#define NTDLL_RtlFirstEntrySList                                             0x784FF839u
#define NTDLL_RtlFirstFreeAce                                                0x78AE48A1u
#define NTDLL_RtlFlsAlloc                                                    0x8A86BBCEu
#define NTDLL_RtlFlsFree                                                     0xA56D77BFu
#define NTDLL_RtlFlushSecureMemoryCache                                      0xAC2EDFD8u
#define NTDLL_RtlFormatCurrentUserKeyPath                                    0x1C0C2D21u
#define NTDLL_RtlFormatMessage                                               0x53B8A371u
#define NTDLL_RtlFormatMessageEx                                             0xC54642F5u
#define NTDLL_RtlFreeActivationContextStack                                  0x97D7D046u
#define NTDLL_RtlFreeAnsiString                                              0x0817D9F0u
#define NTDLL_RtlFreeHandle                                                  0x96FE8442u
#define NTDLL_RtlFreeHeap                                                    0xACC0E9F1u
#define NTDLL_RtlFreeMemoryBlockLookaside                                    0x627E9FEAu
#define NTDLL_RtlFreeOemString                                               0xFACF2DC3u
#define NTDLL_RtlFreeSid                                                     0x200CE602u
#define NTDLL_RtlFreeThreadActivationContextStack                            0x40FA1A3Bu
#define NTDLL_RtlFreeUnicodeString                                           0x6F04CEFFu
#define NTDLL_RtlFreeUserStack                                               0x68BC948Du
#define NTDLL_RtlGUIDFromString                                              0x98E0C776u
#define NTDLL_RtlGenerate8dot3Name                                           0x3970E77Du
#define NTDLL_RtlGetAce                                                      0xA24708E9u
#define NTDLL_RtlGetActiveActivationContext                                  0x225F92E1u
#define NTDLL_RtlGetCallersAddress                                           0xA28E3F2Au
#define NTDLL_RtlGetCompressionWorkSpaceSize                                 0x0C61E327u
#define NTDLL_RtlGetControlSecurityDescriptor                                0x36E28E7Cu
#define NTDLL_RtlGetCriticalSectionRecursionCount                            0xE5725432u
#define NTDLL_RtlGetCurrentDirectory_U                                       0x6957E75Cu
#define NTDLL_RtlGetCurrentPeb                                               0xB3A234EEu
#define NTDLL_RtlGetCurrentProcessorNumber                                   0xC22BE9B6u
#define NTDLL_RtlGetCurrentProcessorNumberEx                                 0xDB000FDEu
#define NTDLL_RtlGetCurrentTransaction                                       0x72F5F70Du
#define NTDLL_RtlGetDaclSecurityDescriptor                                   0xDCC008C0u
#define NTDLL_RtlGetElementGenericTable                                      0xA11D799Cu
#define NTDLL_RtlGetElementGenericTableAvl                                   0x8AB20E3Du
#define NTDLL_RtlGetEnabledExtendedFeatures                                  0x08CD6B5Bu
#define NTDLL_RtlGetExtendedContextLength                                    0xCC797AABu
#define NTDLL_RtlGetExtendedFeaturesMask                                     0x680CF7DEu
#define NTDLL_RtlGetFileMUIPath                                              0xEEC5087Eu
#define NTDLL_RtlGetFrame                                                    0xB6F4B4C6u
#define NTDLL_RtlGetFullPathName_U                                           0xDC71E9D9u
#define NTDLL_RtlGetFullPathName_UEx                                         0x677967DFu
#define NTDLL_RtlGetFullPathName_UstrEx                                      0x77DB49CAu
#define NTDLL_RtlGetGroupSecurityDescriptor                                  0x35C9D55Fu
#define NTDLL_RtlGetIntegerAtom                                              0xB99CF8A7u
#define NTDLL_RtlGetLastNtStatus                                             0xB8A12CBFu
#define NTDLL_RtlGetLastWin32Error                                           0x12CEBAE7u
#define NTDLL_RtlGetLengthWithoutLastFullDosOrNtPathElement                  0xF6CDB8A7u
#define NTDLL_RtlGetLengthWithoutTrailingPathSeperators                      0x22745EA5u
#define NTDLL_RtlGetLocaleFileMappingAddress                                 0x49B1518Au
#define NTDLL_RtlGetLongestNtPathLength                                      0xE1C1A45Bu
#define NTDLL_RtlGetNativeSystemInformation                                  0xEB9101D9u
#define NTDLL_RtlGetNextEntryHashTable                                       0x8575F45Du
#define NTDLL_RtlGetNtGlobalFlags                                            0xE4E35A87u
#define NTDLL_RtlGetNtProductType                                            0xB404A6D3u
#define NTDLL_RtlGetNtVersionNumbers                                         0x34052A6Du
#define NTDLL_RtlGetOwnerSecurityDescriptor                                  0x3DC3DD4Du
#define NTDLL_RtlGetParentLocaleName                                         0x4D6354A5u
#define NTDLL_RtlGetProcessHeaps                                             0xB4EE59B2u
#define NTDLL_RtlGetProcessPreferredUILanguages                              0xFDB12848u
#define NTDLL_RtlGetProductInfo                                              0xDA7947CDu
#define NTDLL_RtlGetSaclSecurityDescriptor                                   0xDCEE08C0u
#define NTDLL_RtlGetSecurityDescriptorRMControl                              0x47CE608Au
#define NTDLL_RtlGetSetBootStatusData                                        0x4F4E42ADu
#define NTDLL_RtlGetSystemPreferredUILanguages                               0x7C3F8BD6u
#define NTDLL_RtlGetThreadErrorMode                                          0xC8E68432u
#define NTDLL_RtlGetThreadLangIdByIndex                                      0x08E2E25Au
#define NTDLL_RtlGetThreadPreferredUILanguages                               0x2D3783A2u
#define NTDLL_RtlGetUILanguageInfo                                           0x3FE4BB86u
#define NTDLL_RtlGetUnloadEventTrace                                         0xDC96EFFDu
#define NTDLL_RtlGetUnloadEventTraceEx                                       0xF77AFBC7u
#define NTDLL_RtlGetUserInfoHeap                                             0xC7D9BE1Eu
#define NTDLL_RtlGetUserPreferredUILanguages                                 0x4F6191E3u
#define NTDLL_RtlGetVersion                                                  0x2BE23D93u
#define NTDLL_RtlHashUnicodeString                                           0x6A8AD467u
#define NTDLL_RtlHeapTrkInitialize                                           0x12122A39u
#define NTDLL_RtlIdentifierAuthoritySid                                      0xE7C8A282u
#define NTDLL_RtlIdnToAscii                                                  0xD1127C80u
#define NTDLL_RtlIdnToNameprepUnicode                                        0x9346425Cu
#define NTDLL_RtlIdnToUnicode                                                0x1BEDCCADu
#define NTDLL_RtlImageDirectoryEntryToData                                   0x48650D2Fu
#define NTDLL_RtlImageNtHeader                                               0x6797AE71u
#define NTDLL_RtlImageNtHeaderEx                                             0xC596FEC1u
#define NTDLL_RtlImageRvaToSection                                           0x3728521Du
#define NTDLL_RtlImageRvaToVa                                                0x4A8A643Du
#define NTDLL_RtlImpersonateSelf                                             0xBE23DEA9u
#define NTDLL_RtlImpersonateSelfEx                                           0xA6F02F02u
#define NTDLL_RtlInitAnsiString                                              0xC811C7B5u
#define NTDLL_RtlInitAnsiStringEx                                            0xD728E766u
#define NTDLL_RtlInitBarrier                                                 0x4ECAD591u
#define NTDLL_RtlInitCodePageTable                                           0x0ACB9AC4u
#define NTDLL_RtlInitEnumerationHashTable                                    0xBB518171u
#define NTDLL_RtlInitMemoryStream                                            0xD5392F1Cu
#define NTDLL_RtlInitNlsTables                                               0x55B7C4E9u
#define NTDLL_RtlInitOutOfProcessMemoryStream                                0x09AEB725u
#define NTDLL_RtlInitString                                                  0xC24A9676u
#define NTDLL_RtlInitUnicodeString                                           0x6C0BEC1Fu
#define NTDLL_RtlInitUnicodeStringEx                                         0x7DB88FC8u
#define NTDLL_RtlInitWeakEnumerationHashTable                                0x0BB7A787u
#define NTDLL_RtlInitializeAtomPackage                                       0xE828DAADu
#define NTDLL_RtlInitializeBitMap                                            0x34DC2A33u
#define NTDLL_RtlInitializeConditionVariable                                 0xA0FF57F8u
#define NTDLL_RtlInitializeContext                                           0x94E73A63u
#define NTDLL_RtlInitializeCriticalSection                                   0x56735602u
#define NTDLL_RtlInitializeCriticalSectionAndSpinCount                       0x79E050F2u
#define NTDLL_RtlInitializeCriticalSectionEx                                 0x09516D20u
#define NTDLL_RtlInitializeExceptionChain                                    0x06276D25u
#define NTDLL_RtlInitializeExtendedContext                                   0xF7CD2611u
#define NTDLL_RtlInitializeGenericTable                                      0x1C859525u
#define NTDLL_RtlInitializeGenericTableAvl                                   0x46C452E3u
#define NTDLL_RtlInitializeHandleTable                                       0xADF6BE81u
#define NTDLL_RtlInitializeNtUserPfn                                         0xC6519489u
#define NTDLL_RtlInitializeRXact                                             0x071C7E74u
#define NTDLL_RtlInitializeResource                                          0x46FC1AC3u
#define NTDLL_RtlInitializeSListHead                                         0xD34E7482u
#define NTDLL_RtlInitializeSRWLock                                           0xBF704606u
#define NTDLL_RtlInitializeSid                                               0xC001A004u
#define NTDLL_RtlInsertElementGenericTable                                   0x7B89A542u
#define NTDLL_RtlInsertElementGenericTableAvl                                0xC0DC6150u
#define NTDLL_RtlInsertElementGenericTableFull                               0x802A1BF7u
#define NTDLL_RtlInsertElementGenericTableFullAvl                            0x11033BADu
#define NTDLL_RtlInsertEntryHashTable                                        0xB3470EB3u
#define NTDLL_RtlInt64ToUnicodeString                                        0xEE5CB618u
#define NTDLL_RtlIntegerToChar                                               0x0F773D1Cu
#define NTDLL_RtlIntegerToUnicodeString                                      0x42F63805u
#define NTDLL_RtlInterlockedClearBitRun                                      0x2B0C996Fu
#define NTDLL_RtlInterlockedCompareExchange64                                0x3084B19Du
#define NTDLL_RtlInterlockedFlushSList                                       0x3DB9EAD1u
#define NTDLL_RtlInterlockedPopEntrySList                                    0x243512DFu
#define NTDLL_RtlInterlockedPushEntrySList                                   0x5EC84C93u
#define NTDLL_RtlInterlockedPushListSList                                    0xC99870C9u
#define NTDLL_RtlInterlockedSetBitRun                                        0x653A2B30u
#define NTDLL_RtlIoDecodeMemIoResource                                       0x09CFB949u
#define NTDLL_RtlIoEncodeMemIoResource                                       0x69CFBD48u
#define NTDLL_RtlIpv4AddressToStringA                                        0x9437CD32u
#define NTDLL_RtlIpv4AddressToStringExA                                      0xDA5FDF75u
#define NTDLL_RtlIpv4AddressToStringExW                                      0xDA5FDF63u
#define NTDLL_RtlIpv4AddressToStringW                                        0x9437CD24u
#define NTDLL_RtlIpv4StringToAddressA                                        0x20DD1CD2u
#define NTDLL_RtlIpv4StringToAddressExA                                      0x588C7432u
#define NTDLL_RtlIpv4StringToAddressExW                                      0x588C7424u
#define NTDLL_RtlIpv4StringToAddressW                                        0x20DD1CC4u
#define NTDLL_RtlIpv6AddressToStringA                                        0x9435CD32u
#define NTDLL_RtlIpv6AddressToStringExA                                      0xDA5FD775u
#define NTDLL_RtlIpv6AddressToStringExW                                      0xDA5FD763u
#define NTDLL_RtlIpv6AddressToStringW                                        0x9435CD24u
#define NTDLL_RtlIpv6StringToAddressA                                        0x20DF1CD2u
#define NTDLL_RtlIpv6StringToAddressExA                                      0x588C7C32u
#define NTDLL_RtlIpv6StringToAddressExW                                      0x588C7C24u
#define NTDLL_RtlIpv6StringToAddressW                                        0x20DF1CC4u
#define NTDLL_RtlIsActivationContextActive                                   0x5BB48BE4u
#define NTDLL_RtlIsCriticalSectionLocked                                     0x7998E883u
#define NTDLL_RtlIsCriticalSectionLockedByThread                             0x1A7ADAB6u
#define NTDLL_RtlIsCurrentThreadAttachExempt                                 0x2DD9232Au
#define NTDLL_RtlIsDosDeviceName_U                                           0x0CA8F34Du
#define NTDLL_RtlIsGenericTableEmpty                                         0xB393BCDCu
#define NTDLL_RtlIsGenericTableEmptyAvl                                      0xCDD0AE34u
#define NTDLL_RtlIsNameInExpression                                          0x7997CDC1u
#define NTDLL_RtlIsNameLegalDOS8Dot3                                         0x1E246548u
#define NTDLL_RtlIsNormalizedString                                          0x57F6512Cu
#define NTDLL_RtlIsTextUnicode                                               0x9B10D2FFu
#define NTDLL_RtlIsThreadWithinLoaderCallout                                 0x9FB63923u
#define NTDLL_RtlIsValidHandle                                               0x5F1D803Bu
#define NTDLL_RtlIsValidIndexHandle                                          0x21C3BD4Cu
#define NTDLL_RtlIsValidLocaleName                                           0xEF3938BCu
#define NTDLL_RtlKnownExceptionFilter                                        0xC46BB393u
#define NTDLL_RtlLCIDToCultureName                                           0xD7DA709Fu
#define NTDLL_RtlLargeIntegerAdd                                             0xD822D751u
#define NTDLL_RtlLargeIntegerArithmeticShift                                 0xC13ED165u
#define NTDLL_RtlLargeIntegerDivide                                          0xB5B72182u
#define NTDLL_RtlLargeIntegerNegate                                          0x95752916u
#define NTDLL_RtlLargeIntegerShiftLeft                                       0x469BC2B1u
#define NTDLL_RtlLargeIntegerShiftRight                                      0x7DB5AEA7u
#define NTDLL_RtlLargeIntegerSubtract                                        0xA30DB7DAu
#define NTDLL_RtlLargeIntegerToChar                                          0xB1D79B35u
#define NTDLL_RtlLcidToLocaleName                                            0x4B42316Bu
#define NTDLL_RtlLeaveCriticalSection                                        0xC82C0FF4u
#define NTDLL_RtlLengthRequiredSid                                           0x1C1E3FE8u
#define NTDLL_RtlLengthSecurityDescriptor                                    0xBC8D538Du
#define NTDLL_RtlLengthSid                                                   0x6EFFD978u
#define NTDLL_RtlLoadString                                                  0x82EE9776u
#define NTDLL_RtlLocalTimeToSystemTime                                       0x6DFD3266u
#define NTDLL_RtlLocaleNameToLcid                                            0x60BFAA32u
#define NTDLL_RtlLocateExtendedFeature                                       0xB8D2F5EBu
#define NTDLL_RtlLocateLegacyContext                                         0x5D2BE675u
#define NTDLL_RtlLockBootStatusData                                          0xD1DA656Eu
#define NTDLL_RtlLockCurrentThread                                           0x6D66F877u
#define NTDLL_RtlLockHeap                                                    0xFC27A9FDu
#define NTDLL_RtlLockMemoryBlockLookaside                                    0x2272CF0Du
#define NTDLL_RtlLockMemoryStreamRegion                                      0xEC909A15u
#define NTDLL_RtlLockMemoryZone                                              0x31455289u
#define NTDLL_RtlLockModuleSection                                           0xE533F247u
#define NTDLL_RtlLogStackBackTrace                                           0x74892F4Fu
#define NTDLL_RtlLookupAtomInAtomTable                                       0x97CE734Fu
#define NTDLL_RtlLookupElementGenericTable                                   0x7C95AD35u
#define NTDLL_RtlLookupElementGenericTableAvl                                0x4ED85AD3u
#define NTDLL_RtlLookupElementGenericTableFull                               0x075A6A37u
#define NTDLL_RtlLookupElementGenericTableFullAvl                            0xA93BDBEEu
#define NTDLL_RtlLookupEntryHashTable                                        0x30C90A88u
#define NTDLL_RtlMakeSelfRelativeSD                                          0x2BD46F41u
#define NTDLL_RtlMapGenericMask                                              0xADE83081u
#define NTDLL_RtlMapSecurityErrorToNtStatus                                  0x262DFEE2u
#define NTDLL_RtlMoveMemory                                                  0x23DD58D4u
#define NTDLL_RtlMultiAppendUnicodeStringBuffer                              0x813AE48Fu
#define NTDLL_RtlMultiByteToUnicodeN                                         0x2814CD62u
#define NTDLL_RtlMultiByteToUnicodeSize                                      0xAE69FFF0u
#define NTDLL_RtlMultipleAllocateHeap                                        0xEDF9A3BDu
#define NTDLL_RtlMultipleFreeHeap                                            0x72D9F218u
#define NTDLL_RtlNewInstanceSecurityObject                                   0xE3ADAB7Au
#define NTDLL_RtlNewSecurityGrantedAccess                                    0x6589221Cu
#define NTDLL_RtlNewSecurityObject                                           0xD8CC881Fu
#define NTDLL_RtlNewSecurityObjectEx                                         0x7F6B9258u
#define NTDLL_RtlNewSecurityObjectWithMultipleInheritance                    0x701D172Au
#define NTDLL_RtlNormalizeProcessParams                                      0x432AE6C7u
#define NTDLL_RtlNormalizeString                                             0x0D168C2Au
#define NTDLL_RtlNtPathNameToDosPathName                                     0x902643CDu
#define NTDLL_RtlNtStatusToDosError                                          0x418982EDu
#define NTDLL_RtlNtStatusToDosErrorNoTeb                                     0xD7FF9239u
#define NTDLL_RtlNumberGenericTableElements                                  0xD6AD41E8u
#define NTDLL_RtlNumberGenericTableElementsAvl                               0x52AE3406u
#define NTDLL_RtlNumberOfClearBits                                           0x2DC1B42Cu
#define NTDLL_RtlNumberOfSetBits                                             0x1EDFC643u
#define NTDLL_RtlNumberOfSetBitsUlongPtr                                     0x3133F031u
#define NTDLL_RtlOemStringToUnicodeSize                                      0x085D6673u
#define NTDLL_RtlOemStringToUnicodeString                                    0xFDFCB1FEu
#define NTDLL_RtlOemToUnicodeN                                               0xD995233Fu
#define NTDLL_RtlOpenCurrentUser                                             0x56765A4Cu
#define NTDLL_RtlOwnerAcesPresent                                            0xCBBD0B66u
#define NTDLL_RtlPcToFileHeader                                              0xD5FD1B7Au
#define NTDLL_RtlPinAtomInAtomTable                                          0xFA88EE45u
#define NTDLL_RtlPopFrame                                                    0x0EF634CEu
#define NTDLL_RtlPrefixString                                                0x335B760Du
#define NTDLL_RtlPrefixUnicodeString                                         0xB383631Cu
#define NTDLL_RtlProcessFlsData                                              0x2CEA7390u
#define NTDLL_RtlProtectHeap                                                 0x7D238EF3u
#define NTDLL_RtlPushFrame                                                   0x25D80867u
#define NTDLL_RtlQueryActivationContextApplicationSettings                   0x31577D81u
#define NTDLL_RtlQueryAtomInAtomTable                                        0xC8FB890Fu
#define NTDLL_RtlQueryCriticalSectionOwner                                   0x31AC05DBu
#define NTDLL_RtlQueryDepthSList                                             0x2DAECB2Eu
#define NTDLL_RtlQueryDynamicTimeZoneInformation                             0xE1CE4AB4u
#define NTDLL_RtlQueryElevationFlags                                         0x8CE529ADu
#define NTDLL_RtlQueryEnvironmentVariable                                    0x1E844D68u
#define NTDLL_RtlQueryEnvironmentVariable_U                                  0xA071F160u
#define NTDLL_RtlQueryHeapInformation                                        0xDDE22684u
#define NTDLL_RtlQueryInformationAcl                                         0x6C12E9D8u
#define NTDLL_RtlQueryInformationActivationContext                           0xFFF4C2C5u
#define NTDLL_RtlQueryInformationActiveActivationContext                     0xC701816Du
#define NTDLL_RtlQueryInterfaceMemoryStream                                  0x25A3A4F1u
#define NTDLL_RtlQueryModuleInformation                                      0x4E9E3BA8u
#define NTDLL_RtlQueryPerformanceCounter                                     0xC6B7E0B3u
#define NTDLL_RtlQueryPerformanceFrequency                                   0x5702BAC5u
#define NTDLL_RtlQueryProcessBackTraceInformation                            0x943D5540u
#define NTDLL_RtlQueryProcessDebugInformation                                0xD475F957u
#define NTDLL_RtlQueryProcessHeapInformation                                 0xC2EBA1A8u
#define NTDLL_RtlQueryProcessLockInformation                                 0xE3E635A8u
#define NTDLL_RtlQueryRegistryValues                                         0x94D1C7A1u
#define NTDLL_RtlQuerySecurityObject                                         0xE4C31BE4u
#define NTDLL_RtlQueryTagHeap                                                0x82611F62u
#define NTDLL_RtlQueryThreadProfiling                                        0x032FE63Au
#define NTDLL_RtlQueryTimeZoneInformation                                    0x101FB10Cu
#define NTDLL_RtlQueueApcWow64Thread                                         0xA0D02D71u
#define NTDLL_RtlQueueWorkItem                                               0x6D3D7A0Bu
#define NTDLL_RtlRaiseException                                              0x64D379CCu
#define NTDLL_RtlRaiseStatus                                                 0x03411C18u
#define NTDLL_RtlRandom                                                      0x360685CBu
#define NTDLL_RtlRandomEx                                                    0x2CD0BA6Fu
#define NTDLL_RtlReAllocateHeap                                              0xCCB60D8Cu
#define NTDLL_RtlReadMemoryStream                                            0xD7F93FC5u
#define NTDLL_RtlReadOutOfProcessMemoryStream                                0x9982B628u
#define NTDLL_RtlReadThreadProfilingData                                     0x30677D67u
#define NTDLL_RtlRealPredecessor                                             0xA0C6341Au
#define NTDLL_RtlRealSuccessor                                               0x52F71127u
#define NTDLL_RtlRegisterSecureMemoryCacheCallback                           0xBAD7919Du
#define NTDLL_RtlRegisterThreadWithCsrss                                     0xFDBCFC18u
#define NTDLL_RtlRegisterWait                                                0xC3798BAEu
#define NTDLL_RtlReleaseActivationContext                                    0x2FBD91A2u
#define NTDLL_RtlReleaseMemoryStream                                         0xD05D1D3Fu
#define NTDLL_RtlReleasePebLock                                              0xD57C9391u
#define NTDLL_RtlReleasePrivilege                                            0xC73BD5DFu
#define NTDLL_RtlReleaseRelativeName                                         0xF1670D7Du
#define NTDLL_RtlReleaseResource                                             0xC44337E8u
#define NTDLL_RtlReleaseSRWLockExclusive                                     0x1CBCB9B5u
#define NTDLL_RtlReleaseSRWLockShared                                        0xDA7365C8u
#define NTDLL_RtlRemoteCall                                                  0xC03C05B3u
#define NTDLL_RtlRemoveEntryHashTable                                        0x7A8D2290u
#define NTDLL_RtlRemovePrivileges                                            0xB1C7F12Fu
#define NTDLL_RtlRemoveVectoredContinueHandler                               0xB44899C9u
#define NTDLL_RtlRemoveVectoredExceptionHandler                              0x11DD02BDu
#define NTDLL_RtlReplaceSidInSd                                              0xD1144122u
#define NTDLL_RtlReportException                                             0x39561703u
#define NTDLL_RtlReportSilentProcessExit                                     0x49454044u
#define NTDLL_RtlReportSqmEscalation                                         0x08C8CC31u
#define NTDLL_RtlResetMemoryBlockLookaside                                   0x1CE785D3u
#define NTDLL_RtlResetMemoryZone                                             0xBEE0003Eu
#define NTDLL_RtlResetRtlTranslations                                        0x3250E287u
#define NTDLL_RtlRestoreLastWin32Error                                       0x0DFC3361u
#define NTDLL_RtlRetrieveNtUserPfn                                           0xCE884171u
#define NTDLL_RtlRevertMemoryStream                                          0x2DF0E5C0u
#define NTDLL_RtlRunDecodeUnicodeString                                      0x03C6A95Du
#define NTDLL_RtlRunEncodeUnicodeString                                      0x63C6AD5Cu
#define NTDLL_RtlRunOnceBeginInitialize                                      0x2653CB65u
#define NTDLL_RtlRunOnceComplete                                             0x33A67B68u
#define NTDLL_RtlRunOnceExecuteOnce                                          0xF0C78947u
#define NTDLL_RtlRunOnceInitialize                                           0xB1C0D482u
#define NTDLL_RtlSecondsSince1970ToTime                                      0x4B60F981u
#define NTDLL_RtlSecondsSince1980ToTime                                      0x3360F981u
#define NTDLL_RtlSeekMemoryStream                                            0x27F937CDu
#define NTDLL_RtlSelfRelativeToAbsoluteSD                                    0xCDF91270u
#define NTDLL_RtlSelfRelativeToAbsoluteSD2                                   0x224E198Du
#define NTDLL_RtlSendMsgToSm                                                 0xD6FFC1C2u
#define NTDLL_RtlSetAllBits                                                  0x2884851Cu
#define NTDLL_RtlSetAttributesSecurityDescriptor                             0x23CF0228u
#define NTDLL_RtlSetBits                                                     0xC91A15BBu
#define NTDLL_RtlSetControlSecurityDescriptor                                0x36E28E76u
#define NTDLL_RtlSetCriticalSectionSpinCount                                 0x41E57ECFu
#define NTDLL_RtlSetCurrentDirectory_U                                       0x6957E61Cu
#define NTDLL_RtlSetCurrentEnvironment                                       0x79A58D8Fu
#define NTDLL_RtlSetCurrentTransaction                                       0x72F5F64Du
#define NTDLL_RtlSetDaclSecurityDescriptor                                   0xC8C008C0u
#define NTDLL_RtlSetDynamicTimeZoneInformation                               0x5203638Bu
#define NTDLL_RtlSetEnvironmentStrings                                       0x6BDAD93Eu
#define NTDLL_RtlSetEnvironmentVar                                           0x74DE6D3Du
#define NTDLL_RtlSetEnvironmentVariable                                      0x67216A9Eu
#define NTDLL_RtlSetExtendedFeaturesMask                                     0x680CF7DBu
#define NTDLL_RtlSetGroupSecurityDescriptor                                  0x35C9D7DFu
#define NTDLL_RtlSetHeapInformation                                          0x8F9D411Eu
#define NTDLL_RtlSetInformationAcl                                           0x50C07A23u
#define NTDLL_RtlSetIoCompletionCallback                                     0x2B297466u
#define NTDLL_RtlSetLastWin32Error                                           0x12DABAE7u
#define NTDLL_RtlSetLastWin32ErrorAndNtStatusFromNtStatus                    0x55EEFB5Du
#define NTDLL_RtlSetMemoryStreamSize                                         0x470ECFE3u
#define NTDLL_RtlSetOwnerSecurityDescriptor                                  0x3DC3DFCDu
#define NTDLL_RtlSetProcessDebugInformation                                  0xAB126305u
#define NTDLL_RtlSetProcessIsCritical                                        0xF8B031BDu
#define NTDLL_RtlSetProcessPreferredUILanguages                              0xD5B12848u
#define NTDLL_RtlSetSaclSecurityDescriptor                                   0xC8EE08C0u
#define NTDLL_RtlSetSecurityDescriptorRMControl                              0x6FCE608Au
#define NTDLL_RtlSetSecurityObject                                           0xD811881Fu
#define NTDLL_RtlSetSecurityObjectEx                                         0x7F68E658u
#define NTDLL_RtlSetThreadErrorMode                                          0x48E68430u
#define NTDLL_RtlSetThreadIsCritical                                         0x4691CB47u
#define NTDLL_RtlSetThreadPoolStartFunc                                      0x0E744C52u
#define NTDLL_RtlSetThreadPreferredUILanguages                               0x2D36C3A2u
#define NTDLL_RtlSetTimeZoneInformation                                      0x69BA96FAu
#define NTDLL_RtlSetTimer                                                    0x27D5B951u
#define NTDLL_RtlSetUnhandledExceptionFilter                                 0x67887F8Au
#define NTDLL_RtlSetUserCallbackExceptionFilter                              0x962456B6u
#define NTDLL_RtlSetUserFlagsHeap                                            0x347021BBu
#define NTDLL_RtlSetUserValueHeap                                            0x5D13719Fu
#define NTDLL_RtlSidDominates                                                0x76DEFD81u
#define NTDLL_RtlSidEqualLevel                                               0x5140F833u
#define NTDLL_RtlSidHashInitialize                                           0x4349DA56u
#define NTDLL_RtlSidHashLookup                                               0x16D0AD6Fu
#define NTDLL_RtlSidIsHigherLevel                                            0x9BE1B6B8u
#define NTDLL_RtlSizeHeap                                                    0x04C629CFu
#define NTDLL_RtlSleepConditionVariableCS                                    0x376A81CBu
#define NTDLL_RtlSleepConditionVariableSRW                                   0x103946BAu
#define NTDLL_RtlSplay                                                       0x252118A2u
#define NTDLL_RtlStartRXact                                                  0xA36AB92Bu
#define NTDLL_RtlStatMemoryStream                                            0xD3B93FCCu
#define NTDLL_RtlStringFromGUID                                              0x346E401Au
#define NTDLL_RtlSubAuthorityCountSid                                        0x5867A35Fu
#define NTDLL_RtlSubAuthoritySid                                             0x49459C8Cu
#define NTDLL_RtlSubtreePredecessor                                          0xF3422F4Au
#define NTDLL_RtlSubtreeSuccessor                                            0xB3F1C533u
#define NTDLL_RtlSystemTimeToLocalTime                                       0xAE390FB8u
#define NTDLL_RtlTestBit                                                     0x65686EBCu
#define NTDLL_RtlTimeFieldsToTime                                            0x444FB7C3u
#define NTDLL_RtlTimeToElapsedTimeFields                                     0x5A62C502u
#define NTDLL_RtlTimeToSecondsSince1970                                      0xA91FDCFAu
#define NTDLL_RtlTimeToSecondsSince1980                                      0xA91E3CFAu
#define NTDLL_RtlTimeToTimeFields                                            0x1E020A69u
#define NTDLL_RtlTraceDatabaseAdd                                            0xABDB4F9Cu
#define NTDLL_RtlTraceDatabaseCreate                                         0x68C94EB5u
#define NTDLL_RtlTraceDatabaseDestroy                                        0x30B627CEu
#define NTDLL_RtlTraceDatabaseEnumerate                                      0x01BDD748u
#define NTDLL_RtlTraceDatabaseFind                                           0x5DF2D69Fu
#define NTDLL_RtlTraceDatabaseLock                                           0x45F37390u
#define NTDLL_RtlTraceDatabaseUnlock                                         0x510BAA17u
#define NTDLL_RtlTraceDatabaseValidate                                       0x6D296D4Du
#define NTDLL_RtlTryAcquirePebLock                                           0x1835E4ECu
#define NTDLL_RtlTryAcquireSRWLockExclusive                                  0xF305109Bu
#define NTDLL_RtlTryAcquireSRWLockShared                                     0x87AC169Au
#define NTDLL_RtlTryEnterCriticalSection                                     0x98B0485Fu
#define NTDLL_RtlUTF8ToUnicodeN                                              0x6FD6D15Au
#define NTDLL_RtlUlongByteSwap                                               0x8AB4F532u
#define NTDLL_RtlUlonglongByteSwap                                           0x052020CCu
#define NTDLL_RtlUnhandledExceptionFilter                                    0xDB8B3D9Cu
#define NTDLL_RtlUnhandledExceptionFilter2                                   0x67B39B43u
#define NTDLL_RtlUnicodeStringToAnsiSize                                     0xA808B1CBu
#define NTDLL_RtlUnicodeStringToAnsiString                                   0x1F7DE6A0u
#define NTDLL_RtlUnicodeStringToCountedOemString                             0xF074D44Bu
#define NTDLL_RtlUnicodeStringToInteger                                      0x5D06C64Du
#define NTDLL_RtlUnicodeStringToOemSize                                      0x6494BD4Cu
#define NTDLL_RtlUnicodeStringToOemString                                    0x004F9692u
#define NTDLL_RtlUnicodeToCustomCPN                                          0x6D9B5C10u
#define NTDLL_RtlUnicodeToMultiByteN                                         0x00B770F1u
#define NTDLL_RtlUnicodeToMultiByteSize                                      0xFFB73664u
#define NTDLL_RtlUnicodeToOemN                                               0xF3B37355u
#define NTDLL_RtlUnicodeToUTF8N                                              0xC3C466B8u
#define NTDLL_RtlUniform                                                     0xD0CB47B3u
#define NTDLL_RtlUnlockBootStatusData                                        0x41B26E9Eu
#define NTDLL_RtlUnlockCurrentThread                                         0x32E27B37u
#define NTDLL_RtlUnlockHeap                                                  0xD83DAB01u
#define NTDLL_RtlUnlockMemoryBlockLookaside                                  0x208EEB17u
#define NTDLL_RtlUnlockMemoryStreamRegion                                    0x53999C95u
#define NTDLL_RtlUnlockMemoryZone                                            0xB1FA5B8Fu
#define NTDLL_RtlUnlockModuleSection                                         0xBAB77107u
#define NTDLL_RtlUnwind                                                      0x02F6A94Cu
#define NTDLL_RtlUpcaseUnicodeChar                                           0x322138E6u
#define NTDLL_RtlUpcaseUnicodeString                                         0xF5054D24u
#define NTDLL_RtlUpcaseUnicodeStringToAnsiString                             0x7C0D82ADu
#define NTDLL_RtlUpcaseUnicodeStringToCountedOemString                       0xE9778C97u
#define NTDLL_RtlUpcaseUnicodeStringToOemString                              0x20248D11u
#define NTDLL_RtlUpcaseUnicodeToCustomCPN                                    0x0397DDBCu
#define NTDLL_RtlUpcaseUnicodeToMultiByteN                                   0x9082FD30u
#define NTDLL_RtlUpcaseUnicodeToOemN                                         0xC4B53383u
#define NTDLL_RtlUpdateClonedCriticalSection                                 0x794D6332u
#define NTDLL_RtlUpdateClonedSRWLock                                         0x8F5F7833u
#define NTDLL_RtlUpdateTimer                                                 0xF7675569u
#define NTDLL_RtlUpperChar                                                   0x2A9955EAu
#define NTDLL_RtlUpperString                                                 0xC567AC90u
#define NTDLL_RtlUserThreadStart                                             0xA12BAC82u
#define NTDLL_RtlUshortByteSwap                                              0xEF649500u
#define NTDLL_RtlValidAcl                                                    0xBC047FFFu
#define NTDLL_RtlValidRelativeSecurityDescriptor                             0xF50CF66Cu
#define NTDLL_RtlValidSecurityDescriptor                                     0x6B5A67F1u
#define NTDLL_RtlValidSid                                                    0xF4053FF7u
#define NTDLL_RtlValidateHeap                                                0x6B6FC418u
#define NTDLL_RtlValidateProcessHeaps                                        0xC69AF920u
#define NTDLL_RtlValidateUnicodeString                                       0xD23C3B1Au
#define NTDLL_RtlVerifyVersionInfo                                           0xFFBD5648u
#define NTDLL_RtlWakeAllConditionVariable                                    0x3581541Du
#define NTDLL_RtlWakeConditionVariable                                       0x28C76DB9u
#define NTDLL_RtlWalkFrameChain                                              0x8B828AACu
#define NTDLL_RtlWalkHeap                                                    0x242429E3u
#define NTDLL_RtlWeaklyEnumerateEntryHashTable                               0x72258B44u
#define NTDLL_RtlWerpReportException                                         0xEFF54CA5u
#define NTDLL_RtlWow64CallFunction64                                         0x0DAA9F15u
#define NTDLL_RtlWow64EnableFsRedirection                                    0xEA7CD70Cu
#define NTDLL_RtlWow64EnableFsRedirectionEx                                  0x33A15324u
#define NTDLL_RtlWow64LogMessageInEventLogger                                0x7441D656u
#define NTDLL_RtlWriteMemoryStream                                           0xEDC28CC6u
#define NTDLL_RtlWriteRegistryValue                                          0xFF139EEEu
#define NTDLL_RtlZeroHeap                                                    0x4C6529DFu
#define NTDLL_RtlZeroMemory                                                  0x013FD2D4u
#define NTDLL_RtlZombifyActivationContext                                    0x2BBF85D3u
#define NTDLL_RtlpApplyLengthFunction                                        0x6A4E6A91u
#define NTDLL_RtlpCheckDynamicTimeZoneInformation                            0x13628E25u
#define NTDLL_RtlpCleanupRegistryKeys                                        0x24478E57u
#define NTDLL_RtlpConvertCultureNamesToLCIDs                                 0x28791168u
#define NTDLL_RtlpConvertLCIDsToCultureNames                                 0xE9D740AAu
#define NTDLL_RtlpCreateProcessRegistryInfo                                  0x729290EFu
#define NTDLL_RtlpEnsureBufferSize                                           0x79BEA99Bu
#define NTDLL_RtlpGetLCIDFromLangInfoNode                                    0x984518C0u
#define NTDLL_RtlpGetNameFromLangInfoNode                                    0x196490C4u
#define NTDLL_RtlpGetSystemDefaultUILanguage                                 0x3B01683Au
#define NTDLL_RtlpGetUserOrMachineUILanguage4NLS                             0x0BD00F8Fu
#define NTDLL_RtlpInitializeLangRegistryInfo                                 0xFE7AF1EFu
#define NTDLL_RtlpIsQualifiedLanguage                                        0xBE0F06EAu
#define NTDLL_RtlpLoadMachineUIByPolicy                                      0xD59AAD97u
#define NTDLL_RtlpLoadUserUIByPolicy                                         0x27BAB054u
#define NTDLL_RtlpMuiFreeLangRegistryInfo                                    0xEDCD12F4u
#define NTDLL_RtlpMuiRegCreateRegistryInfo                                   0x00FB9B2Fu
#define NTDLL_RtlpMuiRegFreeRegistryInfo                                     0x87B761ABu
#define NTDLL_RtlpMuiRegLoadRegistryInfo                                     0x90F769FBu
#define NTDLL_RtlpNotOwnerCriticalSection                                    0x44C2C84Au
#define NTDLL_RtlpNtCreateKey                                                0x616D7807u
#define NTDLL_RtlpNtEnumerateSubKey                                          0xFE3C5BC0u
#define NTDLL_RtlpNtMakeTemporaryKey                                         0xE02B7E8Au
#define NTDLL_RtlpNtOpenKey                                                  0xA475182Eu
#define NTDLL_RtlpNtQueryValueKey                                            0x16D3893Du
#define NTDLL_RtlpNtSetValueKey                                              0x6C8C44CAu
#define NTDLL_RtlpQueryDefaultUILanguage                                     0xC716B6C6u
#define NTDLL_RtlpQueryProcessDebugInformationRemote                         0xB66B4FF9u
#define NTDLL_RtlpRefreshCachedUILanguage                                    0xC45E8A4Eu
#define NTDLL_RtlpSetInstallLanguage                                         0x9B5EEF53u
#define NTDLL_RtlpSetPreferredUILanguages                                    0xF333FB9Du
#define NTDLL_RtlpSetUserPreferredUILanguages                                0x0330056Du
#define NTDLL_RtlpUnWaitCriticalSection                                      0x0B3864E3u
#define NTDLL_RtlpVerifyAndCommitUILanguageSettings                          0x96DB2B10u
#define NTDLL_RtlpWaitForCriticalSection                                     0xCEF021D0u
#define NTDLL_RtlxAnsiStringToUnicodeSize                                    0x75570998u
#define NTDLL_RtlxOemStringToUnicodeSize                                     0x2E5DAC36u
#define NTDLL_RtlxUnicodeStringToAnsiSize                                    0xB140150Bu
#define NTDLL_RtlxUnicodeStringToOemSize                                     0x42947709u
#define NTDLL_SbExecuteProcedure                                             0x00BDAB55u
#define NTDLL_SbSelectProcedure                                              0x9864AA3Bu
#define NTDLL_ShipAssert                                                     0xD1421174u
#define NTDLL_ShipAssertGetBufferInfo                                        0x73657951u
#define NTDLL_ShipAssertMsgA                                                 0xDB41D2E1u
#define NTDLL_ShipAssertMsgW                                                 0xDB41D2F7u
#define NTDLL_TpAllocAlpcCompletion                                          0xA2B4340Bu
#define NTDLL_TpAllocAlpcCompletionEx                                        0x2E8270A8u
#define NTDLL_TpAllocCleanupGroup                                            0xEFA2B44Au
#define NTDLL_TpAllocIoCompletion                                            0xE945B960u
#define NTDLL_TpAllocPool                                                    0xD42688E0u
#define NTDLL_TpAllocTimer                                                   0xD95D39F6u
#define NTDLL_TpAllocWait                                                    0xEC264B78u
#define NTDLL_TpAllocWork                                                    0xD4252B67u
#define NTDLL_TpAlpcRegisterCompletionList                                   0x1D504D0Au
#define NTDLL_TpAlpcUnregisterCompletionList                                 0x7A666323u
#define NTDLL_TpCallbackIndependent                                          0x87E9DFB2u
#define NTDLL_TpCallbackLeaveCriticalSectionOnCompletion                     0x56DE152Eu
#define NTDLL_TpCallbackMayRunLong                                           0x3A08814Du
#define NTDLL_TpCallbackReleaseMutexOnCompletion                             0x3F80F387u
#define NTDLL_TpCallbackReleaseSemaphoreOnCompletion                         0x79716EC6u
#define NTDLL_TpCallbackSetEventOnCompletion                                 0x37C464BCu
#define NTDLL_TpCallbackUnloadDllOnCompletion                                0x07077ADFu
#define NTDLL_TpCancelAsyncIoOperation                                       0x44FC8EA2u
#define NTDLL_TpCaptureCaller                                                0x0DB5C232u
#define NTDLL_TpCheckTerminateWorker                                         0xB3595729u
#define NTDLL_TpDbgDumpHeapUsage                                             0x7F8E9C9Du
#define NTDLL_TpDbgGetFreeInfo                                               0xBED31B9Cu
#define NTDLL_TpDbgSetLogRoutine                                             0x3A0B5846u
#define NTDLL_TpDisablePoolCallbackChecks                                    0x261EA38Fu
#define NTDLL_TpDisassociateCallback                                         0xFA688BA4u
#define NTDLL_TpIsTimerSet                                                   0xE34CAB6Du
#define NTDLL_TpPoolFreeUnusedNodes                                          0x98E98146u
#define NTDLL_TpPostWork                                                     0x31D5DB0Eu
#define NTDLL_TpQueryPoolStackInformation                                    0x222E6088u
#define NTDLL_TpReleaseAlpcCompletion                                        0x8959809Fu
#define NTDLL_TpReleaseCleanupGroup                                          0x14CF9140u
#define NTDLL_TpReleaseCleanupGroupMembers                                   0x926B4D32u
#define NTDLL_TpReleaseIoCompletion                                          0x12289C6Au
#define NTDLL_TpReleasePool                                                  0xDEDDE5C5u
#define NTDLL_TpReleaseTimer                                                 0xB4F998A9u
#define NTDLL_TpReleaseWait                                                  0xE6DD265Du
#define NTDLL_TpReleaseWork                                                  0xDEDE4642u
#define NTDLL_TpSetDefaultPoolMaxThreads                                     0x85B0FF22u
#define NTDLL_TpSetDefaultPoolStackInformation                               0xB1F48EC6u
#define NTDLL_TpSetPoolMaxThreads                                            0xA7FCA1B1u
#define NTDLL_TpSetPoolMinThreads                                            0x17FCA9B1u
#define NTDLL_TpSetPoolStackInformation                                      0xA6504655u
#define NTDLL_TpSetTimer                                                     0x23D5A419u
#define NTDLL_TpSetWait                                                      0x03599F3Cu
#define NTDLL_TpSimpleTryPost                                                0xB8BF4523u
#define NTDLL_TpStartAsyncIoOperation                                        0xA9802589u
#define NTDLL_TpWaitForAlpcCompletion                                        0xAEBE942Du
#define NTDLL_TpWaitForIoCompletion                                          0xEBEDB0E3u
#define NTDLL_TpWaitForTimer                                                 0x8C5C0996u
#define NTDLL_TpWaitForWait                                                  0x6F24E371u
#define NTDLL_TpWaitForWork                                                  0x5727836Eu
#define NTDLL_VerSetConditionMask                                            0xA7705C1Fu
#define NTDLL_WerReportSQMEvent                                              0x4AE6697Fu
#define NTDLL_WinSqmAddToAverageDWORD                                        0x9CC1310Au
#define NTDLL_WinSqmAddToStream                                              0x34369983u
#define NTDLL_WinSqmAddToStreamEx                                            0x0CD87A1Eu
#define NTDLL_WinSqmCheckEscalationAddToStreamEx                             0x78FBE7C6u
#define NTDLL_WinSqmCheckEscalationSetDWORD                                  0x04552789u
#define NTDLL_WinSqmCheckEscalationSetDWORD64                                0x241794AAu
#define NTDLL_WinSqmCheckEscalationSetString                                 0x4AC47E43u
#define NTDLL_WinSqmCommonDatapointDelete                                    0x06F9BA59u
#define NTDLL_WinSqmCommonDatapointSetDWORD                                  0x7601B71Du
#define NTDLL_WinSqmCommonDatapointSetDWORD64                                0x75DEC6E8u
#define NTDLL_WinSqmCommonDatapointSetStreamEx                               0x0FABFC38u
#define NTDLL_WinSqmCommonDatapointSetString                                 0xD8D6F009u
#define NTDLL_WinSqmEndSession                                               0xA1F1282Fu
#define NTDLL_WinSqmEventEnabled                                             0x3E26DF1Eu
#define NTDLL_WinSqmEventWrite                                               0xABBD1086u
#define NTDLL_WinSqmGetEscalationRuleStatus                                  0x47F41680u
#define NTDLL_WinSqmGetInstrumentationProperty                               0xA9F2FB1Au
#define NTDLL_WinSqmIncrementDWORD                                           0x0C523265u
#define NTDLL_WinSqmIsOptedIn                                                0xF713C8CEu
#define NTDLL_WinSqmIsOptedInEx                                              0x3BD4EF5Bu
#define NTDLL_WinSqmSetDWORD                                                 0x3E44E965u
#define NTDLL_WinSqmSetDWORD64                                               0x94FFD391u
#define NTDLL_WinSqmSetEscalationInfo                                        0x77470F60u
#define NTDLL_WinSqmSetIfMaxDWORD                                            0x556F4877u
#define NTDLL_WinSqmSetIfMinDWORD                                            0x556D485Bu
#define NTDLL_WinSqmSetString                                                0x7319F901u
#define NTDLL_WinSqmStartSession                                             0x2B890B8Au
#define NTDLL_ZwAcceptConnectPort                                            0x3E0DE6ADu
#define NTDLL_ZwAccessCheck                                                  0x147B768Eu
#define NTDLL_ZwAccessCheckAndAuditAlarm                                     0x4EFE5E3Bu
#define NTDLL_ZwAccessCheckByType                                            0x3E3DAFFEu
#define NTDLL_ZwAccessCheckByTypeAndAuditAlarm                               0xC34CBE6Fu
#define NTDLL_ZwAccessCheckByTypeResultList                                  0xC9E5DC56u
#define NTDLL_ZwAccessCheckByTypeResultListAndAuditAlarm                     0x73ABEF80u
#define NTDLL_ZwAccessCheckByTypeResultListAndAuditAlarmByHandle             0x2DEC7785u
#define NTDLL_ZwAddAtom                                                      0x6E5DDA27u
#define NTDLL_ZwAddBootEntry                                                 0xD0E5C004u
#define NTDLL_ZwAddDriverEntry                                               0x37F5DF59u
#define NTDLL_ZwAdjustGroupsToken                                            0xC5EA783Fu
#define NTDLL_ZwAdjustPrivilegesToken                                        0x0A72F800u
#define NTDLL_ZwAlertResumeThread                                            0x4DDCA233u
#define NTDLL_ZwAlertThread                                                  0xAF2AFDCFu
#define NTDLL_ZwAllocateLocallyUniqueId                                      0x189C8D77u
#define NTDLL_ZwAllocateReserveObject                                        0x452B9B22u
#define NTDLL_ZwAllocateUserPhysicalPages                                    0x4661E797u
#define NTDLL_ZwAllocateUuids                                                0xA217368Fu
#define NTDLL_ZwAllocateVirtualMemory                                        0x977DFFAFu
#define NTDLL_ZwAlpcAcceptConnectPort                                        0x08E34AA9u
#define NTDLL_ZwAlpcCancelMessage                                            0x233FD0FFu
#define NTDLL_ZwAlpcConnectPort                                              0xD69C1C03u
#define NTDLL_ZwAlpcCreatePort                                               0x47DEDBC4u
#define NTDLL_ZwAlpcCreatePortSection                                        0x8017EC7Bu
#define NTDLL_ZwAlpcCreateResourceReserve                                    0x9405A716u
#define NTDLL_ZwAlpcCreateSectionView                                        0x81882C7Au
#define NTDLL_ZwAlpcCreateSecurityContext                                    0x2AFD388Eu
#define NTDLL_ZwAlpcDeletePortSection                                        0x8250E4C3u
#define NTDLL_ZwAlpcDeleteResourceReserve                                    0x1F858366u
#define NTDLL_ZwAlpcDeleteSectionView                                        0x83CF24C2u
#define NTDLL_ZwAlpcDeleteSecurityContext                                    0xA17D1CFEu
#define NTDLL_ZwAlpcDisconnectPort                                           0x432390B2u
#define NTDLL_ZwAlpcImpersonateClientOfPort                                  0x6C041D89u
#define NTDLL_ZwAlpcOpenSenderProcess                                        0xF1B8AE22u
#define NTDLL_ZwAlpcOpenSenderThread                                         0x6B2F035Au
#define NTDLL_ZwAlpcQueryInformation                                         0xCAEBC263u
#define NTDLL_ZwAlpcQueryInformationMessage                                  0x9D78C73Du
#define NTDLL_ZwAlpcRevokeSecurityContext                                    0xE162759Fu
#define NTDLL_ZwAlpcSendWaitReceivePort                                      0x902A78E8u
#define NTDLL_ZwAlpcSetInformation                                           0x9256441Cu
#define NTDLL_ZwApphelpCacheControl                                          0xC80D29DDu
#define NTDLL_ZwAreMappedFilesTheSame                                        0x5265B41Au
#define NTDLL_ZwAssignProcessToJobObject                                     0x4B3A6A01u
#define NTDLL_ZwCallbackReturn                                               0xCBF25EAEu
#define NTDLL_ZwCancelIoFile                                                 0xF707F576u
#define NTDLL_ZwCancelIoFileEx                                               0xDBD4BFADu
#define NTDLL_ZwCancelSynchronousIoFile                                      0xB78BE27Au
#define NTDLL_ZwCancelTimer                                                  0x054E3B21u
#define NTDLL_ZwClearEvent                                                   0xB008D64Eu
#define NTDLL_ZwClose                                                        0xB828D68Au
#define NTDLL_ZwCloseObjectAuditAlarm                                        0x361FAC01u
#define NTDLL_ZwCommitComplete                                               0x6BC307DEu
#define NTDLL_ZwCommitEnlistment                                             0x707481D5u
#define NTDLL_ZwCommitTransaction                                            0xB759CB8Eu
#define NTDLL_ZwCompactKeys                                                  0xBE8CA93Eu
#define NTDLL_ZwCompareTokens                                                0x2A53BBE9u
#define NTDLL_ZwCompleteConnectPort                                          0x46690796u
#define NTDLL_ZwCompressKey                                                  0x06FBF538u
#define NTDLL_ZwConnectPort                                                  0x668CC7B9u
#define NTDLL_ZwContinue                                                     0xAC15233Au
#define NTDLL_ZwCreateDebugObject                                            0x8FA5DF61u
#define NTDLL_ZwCreateDirectoryObject                                        0xA41BBA61u
#define NTDLL_ZwCreateEnlistment                                             0xB73A1191u
#define NTDLL_ZwCreateEvent                                                  0x363B1FB5u
#define NTDLL_ZwCreateEventPair                                              0x7F5E6BC2u
#define NTDLL_ZwCreateFile                                                   0x82089053u
#define NTDLL_ZwCreateIoCompletion                                           0xC736032Eu
#define NTDLL_ZwCreateJobObject                                              0xA63EF986u
#define NTDLL_ZwCreateJobSet                                                 0x9664852Du
#define NTDLL_ZwCreateKey                                                    0xB5B59051u
#define NTDLL_ZwCreateKeyTransacted                                          0x02512246u
#define NTDLL_ZwCreateKeyedEvent                                             0x1DE9173Fu
#define NTDLL_ZwCreateMailslotFile                                           0x3363791Bu
#define NTDLL_ZwCreateMutant                                                 0x5FC5EE23u
#define NTDLL_ZwCreateNamedPipeFile                                          0xA833C690u
#define NTDLL_ZwCreatePagingFile                                             0xDCAA4B3Au
#define NTDLL_ZwCreatePort                                                   0x9A0B5B42u
#define NTDLL_ZwCreatePrivateNamespace                                       0x895754C9u
#define NTDLL_ZwCreateProcess                                                0x9073CA85u
#define NTDLL_ZwCreateProcessEx                                              0x16496F52u
#define NTDLL_ZwCreateProfile                                                0xA0702813u
#define NTDLL_ZwCreateProfileEx                                              0x4E8960D8u
#define NTDLL_ZwCreateResourceManager                                        0x01936BE3u
#define NTDLL_ZwCreateSection                                                0xA0B08136u
#define NTDLL_ZwCreateSemaphore                                              0xDF1F01CBu
#define NTDLL_ZwCreateSymbolicLinkObject                                     0x9EB2214Cu
#define NTDLL_ZwCreateThread                                                 0x4E140D01u
#define NTDLL_ZwCreateThreadEx                                               0x0530F04Cu
#define NTDLL_ZwCreateTimer                                                  0x172A7033u
#define NTDLL_ZwCreateToken                                                  0x0F2A732Fu
#define NTDLL_ZwCreateTransaction                                            0x65515367u
#define NTDLL_ZwCreateTransactionManager                                     0xA1D55AAAu
#define NTDLL_ZwCreateUserProcess                                            0xB5BA1CD8u
#define NTDLL_ZwCreateWaitablePort                                           0xBA7E2A0Cu
#define NTDLL_ZwCreateWorkerFactory                                          0x319CDED2u
#define NTDLL_ZwDebugActiveProcess                                           0x17DFB7D9u
#define NTDLL_ZwDebugContinue                                                0xFF475CB6u
#define NTDLL_ZwDelayExecution                                               0x219254F8u
#define NTDLL_ZwDeleteAtom                                                   0xBEE9E4DBu
#define NTDLL_ZwDeleteBootEntry                                              0x718DBDFDu
#define NTDLL_ZwDeleteDriverEntry                                            0xD1707EAEu
#define NTDLL_ZwDeleteFile                                                   0xCAE98753u
#define NTDLL_ZwDeleteKey                                                    0x0DB7D759u
#define NTDLL_ZwDeleteObjectAuditAlarm                                       0x967B566Au
#define NTDLL_ZwDeletePrivateNamespace                                       0x8DD945B9u
#define NTDLL_ZwDeleteValueKey                                               0xD8323C60u
#define NTDLL_ZwDeviceIoControlFile                                          0x1C311055u
#define NTDLL_ZwDisableLastKnownGood                                         0x5D92A3AEu
#define NTDLL_ZwDisplayString                                                0xF3E7BA0Bu
#define NTDLL_ZwDrawText                                                     0xB823DDB5u
#define NTDLL_ZwDuplicateObject                                              0x2F399CF3u
#define NTDLL_ZwDuplicateToken                                               0xE1897F41u
#define NTDLL_ZwEnableLastKnownGood                                          0xE4A6117Du
#define NTDLL_ZwEnumerateBootEntries                                         0xD05749F4u
#define NTDLL_ZwEnumerateDriverEntries                                       0x3ADF16F4u
#define NTDLL_ZwEnumerateKey                                                 0x7DD24A86u
#define NTDLL_ZwEnumerateSystemEnvironmentValuesEx                           0x7B5D9A07u
#define NTDLL_ZwEnumerateTransactionObject                                   0x73079549u
#define NTDLL_ZwEnumerateValueKey                                            0x38F907DEu
#define NTDLL_ZwExtendSection                                                0xC8359B72u
#define NTDLL_ZwFilterToken                                                  0xA44E3A15u
#define NTDLL_ZwFindAtom                                                     0xED17F732u
#define NTDLL_ZwFlushBuffersFile                                             0xF6C76CB7u
#define NTDLL_ZwFlushInstallUILanguage                                       0x1E74232Cu
#define NTDLL_ZwFlushInstructionCache                                        0x4178B1D8u
#define NTDLL_ZwFlushKey                                                     0x1067E390u
#define NTDLL_ZwFlushProcessWriteBuffers                                     0x9DB39F29u
#define NTDLL_ZwFlushVirtualMemory                                           0x2D5C8D0Cu
#define NTDLL_ZwFlushWriteBuffer                                             0x5A465394u
#define NTDLL_ZwFreeUserPhysicalPages                                        0x8FBACF2Au
#define NTDLL_ZwFreeVirtualMemory                                            0x25F62332u
#define NTDLL_ZwFreezeRegistry                                               0x74355377u
#define NTDLL_ZwFreezeTransactions                                           0x8B6CF0D9u
#define NTDLL_ZwFsControlFile                                                0x798822B1u
#define NTDLL_ZwGetContextThread                                             0x35111741u
#define NTDLL_ZwGetCurrentProcessorNumber                                    0xC293EAFFu
#define NTDLL_ZwGetDevicePowerState                                          0x21A3E39Du
#define NTDLL_ZwGetMUIRegistryInfo                                           0x656CF931u
#define NTDLL_ZwGetNextProcess                                               0x73B0A4FBu
#define NTDLL_ZwGetNextThread                                                0x3DE3131Au
#define NTDLL_ZwGetNlsSectionPtr                                             0xED823959u
#define NTDLL_ZwGetNotificationResourceManager                               0xF1D925AFu
#define NTDLL_ZwGetPlugPlayEvent                                             0xA5A40066u
#define NTDLL_ZwGetWriteWatch                                                0xF1334DF4u
#define NTDLL_ZwImpersonateAnonymousToken                                    0x964767C5u
#define NTDLL_ZwImpersonateClientOfPort                                      0xC7051032u
#define NTDLL_ZwImpersonateThread                                            0xE3241813u
#define NTDLL_ZwInitializeNlsFiles                                           0xCB6EFDF5u
#define NTDLL_ZwInitializeRegistry                                           0x499E50D7u
#define NTDLL_ZwInitiatePowerAction                                          0x265B4CA4u
#define NTDLL_ZwIsProcessInJob                                               0x2489E599u
#define NTDLL_ZwIsSystemResumeAutomatic                                      0xF0DB68C8u
#define NTDLL_ZwIsUILanguageComitted                                         0x2E61AB25u
#define NTDLL_ZwListenPort                                                   0x2B5E0060u
#define NTDLL_ZwLoadDriver                                                   0xDE98FAA4u
#define NTDLL_ZwLoadKey                                                      0x920FC8A5u
#define NTDLL_ZwLoadKey2                                                     0xF914B273u
#define NTDLL_ZwLoadKeyEx                                                    0x96409F5Au
#define NTDLL_ZwLockFile                                                     0xC9E614A0u
#define NTDLL_ZwLockProductActivationKeys                                    0x25C66B61u
#define NTDLL_ZwLockRegistryKey                                              0x4CFF67E5u
#define NTDLL_ZwLockVirtualMemory                                            0x247C3FDAu
#define NTDLL_ZwMakePermanentObject                                          0xC02D49EFu
#define NTDLL_ZwMakeTemporaryObject                                          0xD2A08DD6u
#define NTDLL_ZwMapCMFModule                                                 0xC4CA447Fu
#define NTDLL_ZwMapUserPhysicalPages                                         0xB060DC2Eu
#define NTDLL_ZwMapUserPhysicalPagesScatter                                  0xA38B5C54u
#define NTDLL_ZwMapViewOfSection                                             0xA4CA3654u
#define NTDLL_ZwModifyBootEntry                                              0xF04BA9B5u
#define NTDLL_ZwModifyDriverEntry                                            0xF37766FFu
#define NTDLL_ZwNotifyChangeDirectoryFile                                    0x258B34AFu
#define NTDLL_ZwNotifyChangeKey                                              0x36AACD00u
#define NTDLL_ZwNotifyChangeMultipleKeys                                     0x78E6A430u
#define NTDLL_ZwNotifyChangeSession                                          0x74A8B343u
#define NTDLL_ZwOpenDirectoryObject                                          0x066413BDu
#define NTDLL_ZwOpenEnlistment                                               0xE605C57Fu
#define NTDLL_ZwOpenEvent                                                    0x1EA4F5C2u
#define NTDLL_ZwOpenEventPair                                                0xD82CE23Cu
#define NTDLL_ZwOpenFile                                                     0xD1B1D4ACu
#define NTDLL_ZwOpenIoCompletion                                             0x7E72FC7Du
#define NTDLL_ZwOpenJobObject                                                0x014C7078u
#define NTDLL_ZwOpenKey                                                      0x924F0D9Bu
#define NTDLL_ZwOpenKeyEx                                                    0x6E419C4Eu
#define NTDLL_ZwOpenKeyTransacted                                            0x9DBB556Eu
#define NTDLL_ZwOpenKeyTransactedEx                                          0xBA7E4D2Du
#define NTDLL_ZwOpenKeyedEvent                                               0x4CD6C3D1u
#define NTDLL_ZwOpenMutant                                                   0xA28B0B30u
#define NTDLL_ZwOpenObjectAuditAlarm                                         0x67CED355u
#define NTDLL_ZwOpenPrivateNamespace                                         0x7C6CC086u
#define NTDLL_ZwOpenProcess                                                  0x4CD1B52Cu
#define NTDLL_ZwOpenProcessToken                                             0x30EFFDB7u
#define NTDLL_ZwOpenProcessTokenEx                                           0xDCCB1F8Eu
#define NTDLL_ZwOpenResourceManager                                          0xA3ECC23Fu
#define NTDLL_ZwOpenSection                                                  0x7C12FE9Fu
#define NTDLL_ZwOpenSemaphore                                                0x786D8835u
#define NTDLL_ZwOpenSession                                                  0x7D12FD1Fu
#define NTDLL_ZwOpenSymbolicLinkObject                                       0xA166CF1Du
#define NTDLL_ZwOpenThread                                                   0xB35AE812u
#define NTDLL_ZwOpenThreadToken                                              0xCFF947CAu
#define NTDLL_ZwOpenThreadTokenEx                                            0x2B374567u
#define NTDLL_ZwOpenTimer                                                    0x3FB59A44u
#define NTDLL_ZwOpenTransaction                                              0x9FCC9940u
#define NTDLL_ZwOpenTransactionManager                                       0x9E01B4FBu
#define NTDLL_ZwPlugPlayControl                                              0x4F14214Fu
#define NTDLL_ZwPowerInformation                                             0xDC4FD11Fu
#define NTDLL_ZwPrePrepareComplete                                           0xEC1E291Cu
#define NTDLL_ZwPrePrepareEnlistment                                         0x7A6BF56Eu
#define NTDLL_ZwPrepareComplete                                              0xC137F586u
#define NTDLL_ZwPrepareEnlistment                                            0x12DF521Cu
#define NTDLL_ZwPrivilegeCheck                                               0x88F1DBACu
#define NTDLL_ZwPrivilegeObjectAuditAlarm                                    0x2776184Fu
#define NTDLL_ZwPrivilegedServiceAuditAlarm                                  0x3FD9A100u
#define NTDLL_ZwPropagationComplete                                          0xF5619130u
#define NTDLL_ZwPropagationFailed                                            0x2B257776u
#define NTDLL_ZwProtectVirtualMemory                                         0x0CF0A6F9u
#define NTDLL_ZwPulseEvent                                                   0xFA6C4F60u
#define NTDLL_ZwQueryAttributesFile                                          0xC39E005Cu
#define NTDLL_ZwQueryBootEntryOrder                                          0x49D3306Au
#define NTDLL_ZwQueryBootOptions                                             0x6BB5129Du
#define NTDLL_ZwQueryDebugFilterState                                        0x9F6240B4u
#define NTDLL_ZwQueryDefaultLocale                                           0xBF0668C1u
#define NTDLL_ZwQueryDefaultUILanguage                                       0x73170C87u
#define NTDLL_ZwQueryDirectoryFile                                           0x5EE6AC6Du
#define NTDLL_ZwQueryDirectoryObject                                         0xB5C7F9D7u
#define NTDLL_ZwQueryDriverEntryOrder                                        0xBAE4B765u
#define NTDLL_ZwQueryEaFile                                                  0x9C9807ACu
#define NTDLL_ZwQueryEvent                                                   0xB24C0F58u
#define NTDLL_ZwQueryFullAttributesFile                                      0xBEA71B4Eu
#define NTDLL_ZwQueryInformationAtom                                         0x81676C4Bu
#define NTDLL_ZwQueryInformationEnlistment                                   0x50DE0C4Au
#define NTDLL_ZwQueryInformationFile                                         0xF5670FC3u
#define NTDLL_ZwQueryInformationJobObject                                    0x48E1C6A6u
#define NTDLL_ZwQueryInformationPort                                         0xED64C4D2u
#define NTDLL_ZwQueryInformationProcess                                      0x27BC02BEu
#define NTDLL_ZwQueryInformationResourceManager                              0xCE5B5054u
#define NTDLL_ZwQueryInformationThread                                       0x0FC9B37Fu
#define NTDLL_ZwQueryInformationToken                                        0xFCD87DC2u
#define NTDLL_ZwQueryInformationTransaction                                  0xE6EA2F9Bu
#define NTDLL_ZwQueryInformationTransactionManager                           0x45C8814Du
#define NTDLL_ZwQueryInformationWorkerFactory                                0xC3923321u
#define NTDLL_ZwQueryInstallUILanguage                                       0x365A26BEu
#define NTDLL_ZwQueryIntervalProfile                                         0x161C5FF8u
#define NTDLL_ZwQueryIoCompletion                                            0xAB15BBA9u
#define NTDLL_ZwQueryKey                                                     0xA871AB30u
#define NTDLL_ZwQueryLicenseValue                                            0xA024BB28u
#define NTDLL_ZwQueryMultipleValueKey                                        0x31A67D85u
#define NTDLL_ZwQueryMutant                                                  0xBDD85EADu
#define NTDLL_ZwQueryObject                                                  0xACA9F1A9u
#define NTDLL_ZwQueryOpenSubKeys                                             0x9130E9A3u
#define NTDLL_ZwQueryOpenSubKeysEx                                           0x8E4C63DEu
#define NTDLL_ZwQueryPerformanceCounter                                      0xE8B732F3u
#define NTDLL_ZwQueryPortInformationProcess                                  0x99B7B08Fu
#define NTDLL_ZwQueryQuotaInformationFile                                    0xA55AA91Bu
#define NTDLL_ZwQuerySection                                                 0x16A15D75u
#define NTDLL_ZwQuerySecurityAttributesToken                                 0xC88332C0u
#define NTDLL_ZwQuerySecurityObject                                          0xE9E71904u
#define NTDLL_ZwQuerySemaphore                                               0xD1C746BAu
#define NTDLL_ZwQuerySymbolicLinkObject                                      0x7093FA44u
#define NTDLL_ZwQuerySystemEnvironmentValue                                  0x26047B84u
#define NTDLL_ZwQuerySystemEnvironmentValueEx                                0x1090B196u
#define NTDLL_ZwQuerySystemInformation                                       0x4945491Eu
#define NTDLL_ZwQuerySystemInformationEx                                     0x792DB55Cu
#define NTDLL_ZwQuerySystemTime                                              0x74831BF7u
#define NTDLL_ZwQueryTimer                                                   0x935D60DEu
#define NTDLL_ZwQueryTimerResolution                                         0x7C73FCCEu
#define NTDLL_ZwQueryValueKey                                                0x93BEC4B3u
#define NTDLL_ZwQueryVirtualMemory                                           0xCD05AF8Eu
#define NTDLL_ZwQueryVolumeInformationFile                                   0x1EE14B20u
#define NTDLL_ZwQueueApcThread                                               0x53C6B9CDu
#define NTDLL_ZwQueueApcThreadEx                                             0x3547BA9Fu
#define NTDLL_ZwRaiseException                                               0x624178BCu
#define NTDLL_ZwRaiseHardError                                               0xC51536A2u
#define NTDLL_ZwReadFile                                                     0x391494A4u
#define NTDLL_ZwReadFileScatter                                              0xF7C0FE10u
#define NTDLL_ZwReadOnlyEnlistment                                           0x6FA598F0u
#define NTDLL_ZwReadRequestData                                              0x231F5B73u
#define NTDLL_ZwReadVirtualMemory                                            0x24E2218Au
#define NTDLL_ZwRecoverEnlistment                                            0x6356ECF9u
#define NTDLL_ZwRecoverResourceManager                                       0xA94A9132u
#define NTDLL_ZwRecoverTransactionManager                                    0xCD28327Eu
#define NTDLL_ZwRegisterProtocolAddressInformation                           0x26BD8786u
#define NTDLL_ZwRegisterThreadTerminatePort                                  0x8041B9A1u
#define NTDLL_ZwReleaseKeyedEvent                                            0xBA4EFE0Au
#define NTDLL_ZwReleaseMutant                                                0x2156B459u
#define NTDLL_ZwReleaseSemaphore                                             0x96B23CF4u
#define NTDLL_ZwReleaseWorkerFactoryWorker                                   0xBBFCE147u
#define NTDLL_ZwRemoveIoCompletion                                           0xE4A1076Cu
#define NTDLL_ZwRemoveIoCompletionEx                                         0xB39A2465u
#define NTDLL_ZwRemoveProcessDebug                                           0x8F3E03AFu
#define NTDLL_ZwRenameKey                                                    0x0C274151u
#define NTDLL_ZwRenameTransactionManager                                     0x6D43D2AFu
#define NTDLL_ZwReplaceKey                                                   0xA04AF6E5u
#define NTDLL_ZwReplacePartitionUnit                                         0x215EF893u
#define NTDLL_ZwReplyPort                                                    0x9D623BC6u
#define NTDLL_ZwReplyWaitReceivePort                                         0x32C71862u
#define NTDLL_ZwReplyWaitReceivePortEx                                       0x88C3BC19u
#define NTDLL_ZwReplyWaitReplyPort                                           0x9B569685u
#define NTDLL_ZwRequestPort                                                  0xBFCCD8DDu
#define NTDLL_ZwRequestWaitReplyPort                                         0xF832C359u
#define NTDLL_ZwResetEvent                                                   0x0229DF42u
#define NTDLL_ZwResetWriteWatch                                              0xB3696A4Fu
#define NTDLL_ZwRestoreKey                                                   0xB95CF6F9u
#define NTDLL_ZwResumeProcess                                                0x82F853DCu
#define NTDLL_ZwResumeThread                                                 0x84DC995Du
#define NTDLL_ZwRollbackComplete                                             0x1CF3C6A5u
#define NTDLL_ZwRollbackEnlistment                                           0x9DA842D0u
#define NTDLL_ZwRollbackTransaction                                          0x2F397635u
#define NTDLL_ZwRollforwardTransactionManager                                0xDC450EDDu
#define NTDLL_ZwSaveKey                                                      0x93780839u
#define NTDLL_ZwSaveKeyEx                                                    0xE6454058u
#define NTDLL_ZwSaveMergedKeys                                               0x060D0579u
#define NTDLL_ZwSecureConnectPort                                            0x1E17469Du
#define NTDLL_ZwSerializeBoot                                                0xF1D58F4Fu
#define NTDLL_ZwSetBootEntryOrder                                            0x31251972u
#define NTDLL_ZwSetBootOptions                                               0x5B44FECFu
#define NTDLL_ZwSetContextThread                                             0x351117E1u
#define NTDLL_ZwSetDebugFilterState                                          0xFE819810u
#define NTDLL_ZwSetDefaultHardErrorPort                                      0xC42BEC94u
#define NTDLL_ZwSetDefaultLocale                                             0xF7C5AF70u
#define NTDLL_ZwSetDefaultUILanguage                                         0x080380BBu
#define NTDLL_ZwSetDriverEntryOrder                                          0xDB076FC1u
#define NTDLL_ZwSetEaFile                                                    0x84E0F185u
#define NTDLL_ZwSetEvent                                                     0x0304CC9Fu
#define NTDLL_ZwSetEventBoostPriority                                        0x052CF216u
#define NTDLL_ZwSetHighEventPair                                             0xE75766A7u
#define NTDLL_ZwSetHighWaitLowEventPair                                      0x3B72C7F7u
#define NTDLL_ZwSetInformationDebugObject                                    0xFA37BBE5u
#define NTDLL_ZwSetInformationEnlistment                                     0x9319BD02u
#define NTDLL_ZwSetInformationFile                                           0x304400DDu
#define NTDLL_ZwSetInformationJobObject                                      0xC2A7D89Bu
#define NTDLL_ZwSetInformationKey                                            0x31C00235u
#define NTDLL_ZwSetInformationObject                                         0x747D7365u
#define NTDLL_ZwSetInformationProcess                                        0xB63B8DDCu
#define NTDLL_ZwSetInformationResourceManager                                0x49D432C5u
#define NTDLL_ZwSetInformationThread                                         0x74DD3F43u
#define NTDLL_ZwSetInformationToken                                          0x9D3BA566u
#define NTDLL_ZwSetInformationTransaction                                    0x10C337E3u
#define NTDLL_ZwSetInformationTransactionManager                             0x8279C98Eu
#define NTDLL_ZwSetInformationWorkerFactory                                  0x204A9740u
#define NTDLL_ZwSetIntervalProfile                                           0xD33F50E6u
#define NTDLL_ZwSetIoCompletion                                              0x969FFDB7u
#define NTDLL_ZwSetIoCompletionEx                                            0xDE52DF8Eu
#define NTDLL_ZwSetLdtEntries                                                0x2C6FD278u
#define NTDLL_ZwSetLowEventPair                                              0x6908C5AFu
#define NTDLL_ZwSetLowWaitHighEventPair                                      0xF8BF6466u
#define NTDLL_ZwSetQuotaInformationFile                                      0x2F1CB726u
#define NTDLL_ZwSetSecurityObject                                            0x9111301Cu
#define NTDLL_ZwSetSystemEnvironmentValue                                    0xD02D63FCu
#define NTDLL_ZwSetSystemEnvironmentValueEx                                  0xF34815F7u
#define NTDLL_ZwSetSystemInformation                                         0x3251C522u
#define NTDLL_ZwSetSystemPowerState                                          0xF6A0B904u
#define NTDLL_ZwSetSystemTime                                                0x16129C78u
#define NTDLL_ZwSetThreadExecutionState                                      0xAE1A1962u
#define NTDLL_ZwSetTimer                                                     0x2215A319u
#define NTDLL_ZwSetTimerEx                                                   0x6480F6F4u
#define NTDLL_ZwSetTimerResolution                                           0xB950F3D0u
#define NTDLL_ZwSetUuidSeed                                                  0x96CA3C7Cu
#define NTDLL_ZwSetValueKey                                                  0x37DF276Bu
#define NTDLL_ZwSetVolumeInformationFile                                     0xDD26FA68u
#define NTDLL_ZwShutdownSystem                                               0xFEFD534Fu
#define NTDLL_ZwShutdownWorkerFactory                                        0x7E331024u
#define NTDLL_ZwSignalAndWaitForSingleObject                                 0x871600D5u
#define NTDLL_ZwSinglePhaseReject                                            0x3CA550D2u
#define NTDLL_ZwStartProfile                                                 0x7EE0F454u
#define NTDLL_ZwStopProfile                                                  0x8C525DCAu
#define NTDLL_ZwSuspendProcess                                               0xF3B31A02u
#define NTDLL_ZwSuspendThread                                                0xCA2F1307u
#define NTDLL_ZwSystemDebugControl                                           0x7AE77BB0u
#define NTDLL_ZwTerminateJobObject                                           0xB08013A4u
#define NTDLL_ZwTerminateProcess                                             0x3FC94200u
#define NTDLL_ZwTerminateThread                                              0x0A3970D5u
#define NTDLL_ZwTestAlert                                                    0xB6E2E3F6u
#define NTDLL_ZwThawRegistry                                                 0x3A8DFB93u
#define NTDLL_ZwThawTransactions                                             0x05281B53u
#define NTDLL_ZwTraceControl                                                 0x9AF7CC7Fu
#define NTDLL_ZwTraceEvent                                                   0x92E84860u
#define NTDLL_ZwTranslateFilePath                                            0x74E73BAEu
#define NTDLL_ZwUmsThreadYield                                               0x797CAFA8u
#define NTDLL_ZwUnloadDriver                                                 0xAA9FCEC7u
#define NTDLL_ZwUnloadKey                                                    0x54E7C6CDu
#define NTDLL_ZwUnloadKey2                                                   0xF8D9AAAEu
#define NTDLL_ZwUnloadKeyEx                                                  0x355B3F63u
#define NTDLL_ZwUnlockFile                                                   0xC82B0C7Du
#define NTDLL_ZwUnlockVirtualMemory                                          0x3FDC0679u
#define NTDLL_ZwUnmapViewOfSection                                           0x69D2EB55u
#define NTDLL_ZwVdmControl                                                   0xAC107F6Cu
#define NTDLL_ZwWaitForDebugEvent                                            0x12E1DC72u
#define NTDLL_ZwWaitForKeyedEvent                                            0xCB05DC74u
#define NTDLL_ZwWaitForMultipleObjects                                       0x4B85F002u
#define NTDLL_ZwWaitForMultipleObjects32                                     0x092877F2u
#define NTDLL_ZwWaitForSingleObject                                          0xD5B47747u
#define NTDLL_ZwWaitForWorkViaWorkerFactory                                  0x4E5669E0u
#define NTDLL_ZwWaitHighEventPair                                            0x44760F32u
#define NTDLL_ZwWaitLowEventPair                                             0x25A5DCA4u
#define NTDLL_ZwWorkerFactoryWorkerReady                                     0xACEFA1BFu
#define NTDLL_ZwWow64CallFunction64                                          0x008E9DF5u
#define NTDLL_ZwWow64CsrAllocateCaptureBuffer                                0x61A8224Eu
#define NTDLL_ZwWow64CsrAllocateMessagePointer                               0x023E216Fu
#define NTDLL_ZwWow64CsrCaptureMessageBuffer                                 0x873EA761u
#define NTDLL_ZwWow64CsrCaptureMessageString                                 0xBB2FCD56u
#define NTDLL_ZwWow64CsrClientCallServer                                     0x308F952Du
#define NTDLL_ZwWow64CsrClientConnectToServer                                0x8F8029B2u
#define NTDLL_ZwWow64CsrFreeCaptureBuffer                                    0xDF755713u
#define NTDLL_ZwWow64CsrGetProcessId                                         0xAF22546Du
#define NTDLL_ZwWow64CsrIdentifyAlertableThread                              0x470FCA7Eu
#define NTDLL_ZwWow64CsrVerifyRegion                                         0x67EBA705u
#define NTDLL_ZwWow64DebuggerCall                                            0x0AC012C5u
#define NTDLL_ZwWow64GetCurrentProcessorNumberEx                             0x93B77445u
#define NTDLL_ZwWow64GetNativeSystemInformation                              0x374B4462u
#define NTDLL_ZwWow64InterlockedPopEntrySList                                0x12A47C28u
#define NTDLL_ZwWow64QueryInformationProcess64                               0xD5FED5A5u
#define NTDLL_ZwWow64QueryVirtualMemory64                                    0xAD81A447u
#define NTDLL_ZwWow64ReadVirtualMemory64                                     0xBEF9FD29u
#define NTDLL_ZwWow64WriteVirtualMemory64                                    0x2E87B8A6u
#define NTDLL_ZwWriteFile                                                    0x3CA7B5E7u
#define NTDLL_ZwWriteFileGather                                              0x4B6555D4u
#define NTDLL_ZwWriteRequestData                                             0x3B32C279u
#define NTDLL_ZwWriteVirtualMemory                                           0x0C8297EEu
#define NTDLL_ZwYieldExecution                                               0xE236EECCu
#define NTDLL__CIcos                                                         0x883DC44Cu
#define NTDLL__CIlog                                                         0xB43DC458u
#define NTDLL__CIpow                                                         0xC43DC448u
#define NTDLL__CIsin                                                         0xC83D0451u
#define NTDLL__CIsqrt                                                        0xC089B973u
#define NTDLL___isascii                                                      0x7207060Cu
#define NTDLL___iscsym                                                       0x3328D13Cu
#define NTDLL___iscsymf                                                      0x1A278603u
#define NTDLL___toascii                                                      0x72004634u
#define NTDLL__alldiv                                                        0x96DAD6B5u
#define NTDLL__alldvrm                                                       0x26D632B6u
#define NTDLL__allmul                                                        0xB2D956AFu
#define NTDLL__alloca_probe                                                  0x5EA4D76Cu
#define NTDLL__alloca_probe_16                                               0x2E6D9618u
#define NTDLL__alloca_probe_8                                                0xB1717365u
#define NTDLL__allrem                                                        0xCEDB56AEu
#define NTDLL__allshl                                                        0xCADAF6AFu
#define NTDLL__allshr                                                        0xCADAF6B1u
#define NTDLL__atoi64                                                        0xA3513777u
#define NTDLL__aulldiv                                                       0x6ED5569Fu
#define NTDLL__aulldvrm                                                      0xD6D36DB7u
#define NTDLL__aullrem                                                       0x36D4D684u
#define NTDLL__aullshr                                                       0x32D5769Bu
#define NTDLL__chkstk                                                        0xCA99752Cu
#define NTDLL__fltused                                                       0x33551A3Fu
#define NTDLL__ftol                                                          0xD5FDD36Du
#define NTDLL__i64toa                                                        0xD37A3AB2u
#define NTDLL__i64toa_s                                                      0xCB460899u
#define NTDLL__i64tow                                                        0xD37A3AA4u
#define NTDLL__i64tow_s                                                      0x93460899u
#define NTDLL__itoa                                                          0xD5FDD4E0u
#define NTDLL__itoa_s                                                        0x835C1720u
#define NTDLL__itow                                                          0xD5FDD4F6u
#define NTDLL__itow_s                                                        0xDB5C1720u
#define NTDLL__lfind                                                         0xA2CDF3DBu
#define NTDLL__ltoa                                                          0xD5FDD660u
#define NTDLL__ltoa_s                                                        0x835C172Au
#define NTDLL__ltow                                                          0xD5FDD676u
#define NTDLL__ltow_s                                                        0xDB5C172Au
#define NTDLL__makepath_s                                                    0xF3A2FAEDu
#define NTDLL__memccpy                                                       0x72C57130u
#define NTDLL__memicmp                                                       0x72C6D439u
#define NTDLL__snprintf                                                      0x27356B04u
#define NTDLL__snprintf_s                                                    0x109735DFu
#define NTDLL__snscanf_s                                                     0xE5E764B7u
#define NTDLL__snwprintf                                                     0xC4D30704u
#define NTDLL__snwprintf_s                                                   0x1318AC6Fu
#define NTDLL__snwscanf_s                                                    0x286778CBu
#define NTDLL__splitpath                                                     0x08B5CBB8u
#define NTDLL__splitpath_s                                                   0xE029375Du
#define NTDLL__strcmpi                                                       0x4B32F102u
#define NTDLL__stricmp                                                       0x7331541Bu
#define NTDLL__strlwr                                                        0xB7591995u
#define NTDLL__strnicmp                                                      0x12F0CB16u
#define NTDLL__strnset_s                                                     0x7CC7212Du
#define NTDLL__strset_s                                                      0x4F268D15u
#define NTDLL__strupr                                                        0xD359F995u
#define NTDLL__swprintf                                                      0x27332B04u
#define NTDLL__ui64toa                                                       0x2B70BAB0u
#define NTDLL__ui64toa_s                                                     0xC0A62299u
#define NTDLL__ui64tow                                                       0x2B70BAA6u
#define NTDLL__ui64tow_s                                                     0x98A62299u
#define NTDLL__ultoa                                                         0xD75DD6DEu
#define NTDLL__ultoa_s                                                       0x7B569728u
#define NTDLL__ultow                                                         0xD75DD6C8u
#define NTDLL__ultow_s                                                       0x23569728u
#define NTDLL__vscwprintf                                                    0xA9F30678u
#define NTDLL__vsnprintf                                                     0x2CD54204u
#define NTDLL__vsnprintf_s                                                   0x10B8B57Bu
#define NTDLL__vsnwprintf                                                    0xC1F30678u
#define NTDLL__vsnwprintf_s                                                  0xE30C2C6Au
#define NTDLL__vswprintf                                                     0x2CD30204u
#define NTDLL__wcsicmp                                                       0x73205435u
#define NTDLL__wcslwr                                                        0xB629191Du
#define NTDLL__wcsnicmp                                                      0x32F50B14u
#define NTDLL__wcsnset_s                                                     0xC4C7652Du
#define NTDLL__wcsset_s                                                      0x6F234D17u
#define NTDLL__wcstoui64                                                     0xB10A4D5Eu
#define NTDLL__wcsupr                                                        0xD229F91Du
#define NTDLL__wmakepath_s                                                   0xF38D7A4Du
#define NTDLL__wsplitpath_s                                                  0x103D3758u
#define NTDLL__wtoi                                                          0xD5FDDBE8u
#define NTDLL__wtoi64                                                        0xA351375Bu
#define NTDLL__wtol                                                          0xD5FDDBEDu
#define NTDLL_abs                                                            0x840C4072u
#define NTDLL_atan                                                           0xD00C10EFu
#define NTDLL_atoi                                                           0xD00DD0E8u
#define NTDLL_atol                                                           0xD00DD0EDu
#define NTDLL_bsearch                                                        0xCE44D00Fu
#define NTDLL_ceil                                                           0x940D11EDu
#define NTDLL_cos                                                            0x8C0DE072u
#define NTDLL_fabs                                                           0x840C7372u
#define NTDLL_floor                                                          0xBA6DD673u
#define NTDLL_isalnum                                                        0xBE04D68Au
#define NTDLL_isalpha                                                        0xC6077686u
#define NTDLL_iscntrl                                                        0xD624378Bu
#define NTDLL_isdigit                                                        0x9A575413u
#define NTDLL_isgraph                                                        0x8264798Fu
#define NTDLL_islower                                                        0xDAD6D715u
#define NTDLL_isprint                                                        0xA317B993u
#define NTDLL_ispunct                                                        0xBF161A13u
#define NTDLL_isspace                                                        0x83261882u
#define NTDLL_isupper                                                        0xC746D895u
#define NTDLL_iswalpha                                                       0x8E01F68Du
#define NTDLL_iswctype                                                       0xAA22FA89u
#define NTDLL_iswdigit                                                       0xD251D418u
#define NTDLL_iswlower                                                       0x92D0571Eu
#define NTDLL_iswspace                                                       0xCB209889u
#define NTDLL_iswxdigit                                                      0x0250BD06u
#define NTDLL_isxdigit                                                       0xD251D406u
#define NTDLL_labs                                                           0x840C7672u
#define NTDLL_log                                                            0xB00DE066u
#define NTDLL_mbstowcs                                                       0xB354D717u
#define NTDLL_memchr                                                         0x8A5D3629u
#define NTDLL_memcmp                                                         0x8A5D962Bu
#define NTDLL_memcpy                                                         0x8A5E3622u
#define NTDLL_memcpy_s                                                       0x8A2298ABu
#define NTDLL_memmove                                                        0xBAC5B62Eu
#define NTDLL_memmove_s                                                      0xBAE0F6ABu
#define NTDLL_memset                                                         0xCA5C962Fu
#define NTDLL_pow                                                            0xC00DE076u
#define NTDLL_qsort                                                          0xBB1E79F5u
#define NTDLL_sin                                                            0xCC0D206Fu
#define NTDLL_sprintf                                                        0xBF327407u
#define NTDLL_sprintf_s                                                      0x1EF729A3u
#define NTDLL_sqrt                                                           0xC40E79F5u
#define NTDLL_sscanf                                                         0x833DF101u
#define NTDLL_sscanf_s                                                       0x060717B7u
#define NTDLL_strcat                                                         0x8B4C1993u
#define NTDLL_strcat_s                                                       0x4E26D015u
#define NTDLL_strchr                                                         0x8B4D3995u
#define NTDLL_strcmp                                                         0x8B4D9997u
#define NTDLL_strcpy                                                         0x8B4E399Eu
#define NTDLL_strcpy_s                                                       0x7A26D895u
#define NTDLL_strcspn                                                        0xCB32F107u
#define NTDLL_strlen                                                         0xB74C9989u
#define NTDLL_strncat                                                        0x8B30D79Du
#define NTDLL_strncat_s                                                      0x7627232Du
#define NTDLL_strncmp                                                        0x8B315799u
#define NTDLL_strncpy                                                        0x8B32F790u
#define NTDLL_strncpy_s                                                      0x42272BADu
#define NTDLL_strnlen                                                        0xB7305787u
#define NTDLL_strpbrk                                                        0x8F32B882u
#define NTDLL_strrchr                                                        0x8B31F99Bu
#define NTDLL_strspn                                                         0xCB4E3989u
#define NTDLL_strstr                                                         0xCB4EB995u
#define NTDLL_strtok_s                                                       0x3356D715u
#define NTDLL_strtol                                                         0xD74DD98Bu
#define NTDLL_strtoul                                                        0xBB325A85u
#define NTDLL_swprintf                                                       0x27337404u
#define NTDLL_swprintf_s                                                     0x10972DA3u
#define NTDLL_swscanf_s                                                      0x260764B7u
#define NTDLL_tan                                                            0xD00C206Fu
#define NTDLL_tolower                                                        0xDAD1972Du
#define NTDLL_toupper                                                        0xC74198ADu
#define NTDLL_towlower                                                       0x7AD7571Eu
#define NTDLL_towupper                                                       0x6747589Eu
#define NTDLL_vDbgPrintEx                                                    0xE60CF446u
#define NTDLL_vDbgPrintExWithPrefix                                          0xADE4AA41u
#define NTDLL_vsprintf                                                       0x0F327404u
#define NTDLL_vsprintf_s                                                     0x103729A3u
#define NTDLL_vswprintf_s                                                    0x10972C7Bu
#define NTDLL_wcscat                                                         0x8A3C191Bu
#define NTDLL_wcscat_s                                                       0x6E231017u
#define NTDLL_wcschr                                                         0x8A3D391Du
#define NTDLL_wcscmp                                                         0x8A3D991Fu
#define NTDLL_wcscpy                                                         0x8A3E3916u
#define NTDLL_wcscpy_s                                                       0x5A231897u
#define NTDLL_wcscspn                                                        0xCB23F129u
#define NTDLL_wcslen                                                         0xB63C9901u
#define NTDLL_wcsncat                                                        0x8B21D7B3u
#define NTDLL_wcsncat_s                                                      0xCE27672Du
#define NTDLL_wcsncmp                                                        0x8B2057B7u
#define NTDLL_wcsncpy                                                        0x8B23F7BEu
#define NTDLL_wcsncpy_s                                                      0xFA276FADu
#define NTDLL_wcsnlen                                                        0xB72157A9u
#define NTDLL_wcspbrk                                                        0x8F23B8ACu
#define NTDLL_wcsrchr                                                        0x8B20F9B5u
#define NTDLL_wcsspn                                                         0xCA3E3901u
#define NTDLL_wcsstr                                                         0xCA3EB91Du
#define NTDLL_wcstol                                                         0xD63DD903u
#define NTDLL_wcstombs                                                       0x0B54B717u
#define NTDLL_wcstoul                                                        0xBB235AABu
#define KERNEL32_AcquireSRWLockExclusive                                     0x80B3F221u
#define KERNEL32_AcquireSRWLockShared                                        0xF34B7B5Fu
#define KERNEL32_ActivateActCtx                                              0x94DD185Au
#define KERNEL32_AddAtomA                                                    0xB0049A8Au
#define KERNEL32_AddAtomW                                                    0xB0049A9Cu
#define KERNEL32_AddConsoleAliasA                                            0xC58030F5u
#define KERNEL32_AddConsoleAliasW                                            0xC58030E3u
#define KERNEL32_AddDllDirectory                                             0xAFC07707u
#define KERNEL32_AddIntegrityLabelToBoundaryDescriptor                       0x33752135u
#define KERNEL32_AddLocalAlternateComputerNameA                              0xA91A3A98u
#define KERNEL32_AddLocalAlternateComputerNameW                              0xA91A3A8Eu
#define KERNEL32_AddRefActCtx                                                0x2E87E968u
#define KERNEL32_AddSIDToBoundaryDescriptor                                  0x834327A2u
#define KERNEL32_AddSecureMemoryCacheCallback                                0x3BF113D4u
#define KERNEL32_AddVectoredContinueHandler                                  0xFD69A93Bu
#define KERNEL32_AddVectoredExceptionHandler                                 0x37C34B99u
#define KERNEL32_AdjustCalendarDate                                          0x83B2A37Eu
#define KERNEL32_AllocConsole                                                0xAF5D9789u
#define KERNEL32_AllocateUserPhysicalPages                                   0x4709E977u
#define KERNEL32_AllocateUserPhysicalPagesNuma                               0x4379F7FEu
#define KERNEL32_ApplicationRecoveryFinished                                 0x9A13A93Eu
#define KERNEL32_ApplicationRecoveryInProgress                               0x0F70E26Eu
#define KERNEL32_AreFileApisANSI                                             0x7AC5C0BAu
#define KERNEL32_AssignProcessToJobObject                                    0x3C3A6141u
#define KERNEL32_AttachConsole                                               0xE6E71BEDu
#define KERNEL32_BackupRead                                                  0x8356A88Cu
#define KERNEL32_BackupSeek                                                  0x83562803u
#define KERNEL32_BackupWrite                                                 0xF5439B8Fu
#define KERNEL32_BaseCheckAppcompatCache                                     0xAD1B96B1u
#define KERNEL32_BaseCheckAppcompatCacheEx                                   0xC6BCCE22u
#define KERNEL32_BaseCheckRunApp                                             0x36F6D1DDu
#define KERNEL32_BaseCleanupAppcompatCacheSupport                            0xDF7060B7u
#define KERNEL32_BaseDllReadWriteIniFile                                     0xECEBC1C8u
#define KERNEL32_BaseDumpAppcompatCache                                      0xA08D0FF4u
#define KERNEL32_BaseFlushAppcompatCache                                     0x2DCB8231u
#define KERNEL32_BaseFormatObjectAttributes                                  0x0E5B1B28u
#define KERNEL32_BaseFormatTimeOut                                           0xEBDEBBE0u
#define KERNEL32_BaseGenerateAppCompatData                                   0xFE30B10Du
#define KERNEL32_BaseGetNamedObjectDirectory                                 0x7AF55F67u
#define KERNEL32_BaseInitAppcompatCacheSupport                               0x131608E1u
#define KERNEL32_BaseIsAppcompatInfrastructureDisabled                       0x7D10171Bu
#define KERNEL32_BaseQueryModuleData                                         0xCFE86D7Du
#define KERNEL32_BaseSetLastNTError                                          0x69758E7Eu
#define KERNEL32_BaseThreadInitThunk                                         0xB897A726u
#define KERNEL32_BaseUpdateAppcompatCache                                    0xF6B94B60u
#define KERNEL32_BaseVerifyUnicodeString                                     0xD4B27906u
#define KERNEL32_Basep8BitStringToDynamicUnicodeString                       0x14B34EF6u
#define KERNEL32_BasepAllocateActivationContextActivationBlock               0x9F60CEA0u
#define KERNEL32_BasepAnsiStringToDynamicUnicodeString                       0x237A95F6u
#define KERNEL32_BasepCheckAppCompat                                         0xF7C05BDEu
#define KERNEL32_BasepCheckBadapp                                            0xDF7C72ECu
#define KERNEL32_BasepCheckWinSaferRestrictions                              0xF11BF431u
#define KERNEL32_BasepFreeActivationContextActivationBlock                   0xFE058FFBu
#define KERNEL32_BasepFreeAppCompatData                                      0xD30997EBu
#define KERNEL32_BasepMapModuleHandle                                        0xA88646C2u
#define KERNEL32_Beep                                                        0x940C8171u
#define KERNEL32_BeginUpdateResourceA                                        0x3BF8FD37u
#define KERNEL32_BeginUpdateResourceW                                        0x3BF8FD21u
#define KERNEL32_BindIoCompletionCallback                                    0xDF3E0F28u
#define KERNEL32_BuildCommDCBA                                               0x3F794738u
#define KERNEL32_BuildCommDCBAndTimeoutsA                                    0x31F9500Du
#define KERNEL32_BuildCommDCBAndTimeoutsW                                    0x31F9501Bu
#define KERNEL32_BuildCommDCBW                                               0x3F79472Eu
#define KERNEL32_CallNamedPipeA                                              0xB4E332BDu
#define KERNEL32_CallNamedPipeW                                              0xB4E332ABu
#define KERNEL32_CallbackMayRunLong                                          0x1009414Du
#define KERNEL32_CancelDeviceWakeupRequest                                   0x22E8F99Au
#define KERNEL32_CancelIo                                                    0xAE215230u
#define KERNEL32_CancelIoEx                                                  0xC2B02530u
#define KERNEL32_CancelSynchronousIo                                         0x5F91E498u
#define KERNEL32_CancelThreadpoolIo                                          0x082BBAD3u
#define KERNEL32_CancelTimerQueueTimer                                       0x06A74DA8u
#define KERNEL32_CancelWaitableTimer                                         0xE6C8A38Fu
#define KERNEL32_ChangeTimerQueueTimer                                       0xA22571E1u
#define KERNEL32_CheckElevation                                              0x4F56D80Au
#define KERNEL32_CheckElevationEnabled                                       0xE4776779u
#define KERNEL32_CheckForReadOnlyResource                                    0xDF392409u
#define KERNEL32_CheckNameLegalDOS8Dot3A                                     0xD9916311u
#define KERNEL32_CheckNameLegalDOS8Dot3W                                     0xD9916307u
#define KERNEL32_CheckRemoteDebuggerPresent                                  0x45B345F5u
#define KERNEL32_ClearCommBreak                                              0x26451D31u
#define KERNEL32_ClearCommError                                              0x7A34DD28u
#define KERNEL32_CloseConsoleHandle                                          0xB4FFD03Bu
#define KERNEL32_CloseHandle                                                 0x038499FBu
#define KERNEL32_ClosePrivateNamespace                                       0xAD53BFC4u
#define KERNEL32_CloseProfileUserMapping                                     0x1DE71F67u
#define KERNEL32_CloseThreadpool                                             0xC02DA93Eu
#define KERNEL32_CloseThreadpoolCleanupGroup                                 0x28E0E3B1u
#define KERNEL32_CloseThreadpoolCleanupGroupMembers                          0x1B8A36A5u
#define KERNEL32_CloseThreadpoolIo                                           0xFB0996CBu
#define KERNEL32_CloseThreadpoolTimer                                        0x3117C68Eu
#define KERNEL32_CloseThreadpoolWait                                         0x17E1092Fu
#define KERNEL32_CloseThreadpoolWork                                         0x2FE26930u
#define KERNEL32_CmdBatNotification                                          0xAC4D3339u
#define KERNEL32_CommConfigDialogA                                           0xA5F9E755u
#define KERNEL32_CommConfigDialogW                                           0xA5F9E743u
#define KERNEL32_CompareCalendarDates                                        0x55B54AA4u
#define KERNEL32_CompareFileTime                                             0x5CFF703Cu
#define KERNEL32_CompareStringA                                              0x6B2E61EDu
#define KERNEL32_CompareStringEx                                             0xCC3D2D1Du
#define KERNEL32_CompareStringOrdinal                                        0x2634CEC2u
#define KERNEL32_CompareStringW                                              0x6B2E61FBu
#define KERNEL32_ConnectNamedPipe                                            0x5F27793Fu
#define KERNEL32_ConsoleMenuControl                                          0xD6C028FAu
#define KERNEL32_ContinueDebugEvent                                          0x15958E52u
#define KERNEL32_ConvertCalDateTimeToSystemTime                              0xEDB1F4FEu
#define KERNEL32_ConvertDefaultLocale                                        0x538512C6u
#define KERNEL32_ConvertFiberToThread                                        0xA3747D66u
#define KERNEL32_ConvertNLSDayOfWeekToWin32DayOfWeek                         0x72380A07u
#define KERNEL32_ConvertSystemTimeToCalDateTime                              0x7A682171u
#define KERNEL32_ConvertThreadToFiber                                        0x1D9AA3C6u
#define KERNEL32_ConvertThreadToFiberEx                                      0x187ECAF7u
#define KERNEL32_CopyContext                                                 0x571F8BA4u
#define KERNEL32_CopyFileA                                                   0xCC70D731u
#define KERNEL32_CopyFileExA                                                 0xD73EC31Du
#define KERNEL32_CopyFileExW                                                 0xD73EC30Bu
#define KERNEL32_CopyFileTransactedA                                         0xDDA34712u
#define KERNEL32_CopyFileTransactedW                                         0xDDA34704u
#define KERNEL32_CopyFileW                                                   0xCC70D727u
#define KERNEL32_CopyLZFile                                                  0x29D38CFFu
#define KERNEL32_CreateActCtxA                                               0xC3461495u
#define KERNEL32_CreateActCtxW                                               0xC3461483u
#define KERNEL32_CreateBoundaryDescriptorA                                   0x47BB56A2u
#define KERNEL32_CreateBoundaryDescriptorW                                   0x47BB56B4u
#define KERNEL32_CreateConsoleScreenBuffer                                   0x23C0B7B2u
#define KERNEL32_CreateDirectoryA                                            0x5B6CF78Fu
#define KERNEL32_CreateDirectoryExA                                          0x2D62B39Fu
#define KERNEL32_CreateDirectoryExW                                          0x2D62B389u
#define KERNEL32_CreateDirectoryTransactedA                                  0x81D3C5E8u
#define KERNEL32_CreateDirectoryTransactedW                                  0x81D3C5FEu
#define KERNEL32_CreateDirectoryW                                            0x5B6CF799u
#define KERNEL32_CreateEventA                                                0x13F61281u
#define KERNEL32_CreateEventExA                                              0x1440D80Bu
#define KERNEL32_CreateEventExW                                              0x1440D81Du
#define KERNEL32_CreateEventW                                                0x13F61297u
#define KERNEL32_CreateFiber                                                 0x8A31F036u
#define KERNEL32_CreateFiberEx                                               0xDA2067B8u
#define KERNEL32_CreateFileA                                                 0xB231F005u
#define KERNEL32_CreateFileMappingA                                          0xF2851BA0u
#define KERNEL32_CreateFileMappingNumaA                                      0x0EF33291u
#define KERNEL32_CreateFileMappingNumaW                                      0x0EF33287u
#define KERNEL32_CreateFileMappingW                                          0xF2851BB6u
#define KERNEL32_CreateFileTransactedA                                       0x24A7DBC3u
#define KERNEL32_CreateFileTransactedW                                       0x24A7DBD5u
#define KERNEL32_CreateFileW                                                 0xB231F013u
#define KERNEL32_CreateHardLinkA                                             0xF881F9DDu
#define KERNEL32_CreateHardLinkTransactedA                                   0x0E67FCA2u
#define KERNEL32_CreateHardLinkTransactedW                                   0x0E67FCB4u
#define KERNEL32_CreateHardLinkW                                             0xF881F9CBu
#define KERNEL32_CreateIoCompletionPort                                      0x4EE0CB08u
#define KERNEL32_CreateJobObjectA                                            0x9F47D48Du
#define KERNEL32_CreateJobObjectW                                            0x9F47D49Bu
#define KERNEL32_CreateJobSet                                                0xE664312Au
#define KERNEL32_CreateMailslotA                                             0xFF74DE4Du
#define KERNEL32_CreateMailslotW                                             0xFF74DE5Bu
#define KERNEL32_CreateMemoryResourceNotification                            0xF523C927u
#define KERNEL32_CreateMutexA                                                0x3FC79A11u
#define KERNEL32_CreateMutexExA                                              0x54F01E29u
#define KERNEL32_CreateMutexExW                                              0x54F01E3Fu
#define KERNEL32_CreateMutexW                                                0x3FC79A07u
#define KERNEL32_CreateNamedPipeA                                            0xA86F7C81u
#define KERNEL32_CreateNamedPipeW                                            0xA86F7C97u
#define KERNEL32_CreatePipe                                                  0x82261A8Fu
#define KERNEL32_CreatePrivateNamespaceA                                     0xB09A896Bu
#define KERNEL32_CreatePrivateNamespaceW                                     0xB09A897Du
#define KERNEL32_CreateProcessA                                              0x6490B09Fu
#define KERNEL32_CreateProcessAsUserW                                        0xBD79A014u
#define KERNEL32_CreateProcessInternalA                                      0x638020EDu
#define KERNEL32_CreateProcessInternalW                                      0x638020FBu
#define KERNEL32_CreateProcessW                                              0x6490B089u
#define KERNEL32_CreateRemoteThread                                          0x172EDC7Cu
#define KERNEL32_CreateRemoteThreadEx                                        0xF0541B09u
#define KERNEL32_CreateSemaphoreA                                            0xA04E7BA9u
#define KERNEL32_CreateSemaphoreExA                                          0xB68E39AFu
#define KERNEL32_CreateSemaphoreExW                                          0xB68E39B9u
#define KERNEL32_CreateSemaphoreW                                            0xA04E7BBFu
#define KERNEL32_CreateSocketHandle                                          0x9A7BB66Du
#define KERNEL32_CreateSymbolicLinkA                                         0xBDCF3FB2u
#define KERNEL32_CreateSymbolicLinkTransactedA                               0x1B5CE51Fu
#define KERNEL32_CreateSymbolicLinkTransactedW                               0x1B5CE509u
#define KERNEL32_CreateSymbolicLinkW                                         0xBDCF3FA4u
#define KERNEL32_CreateTapePartition                                         0xBB754E47u
#define KERNEL32_CreateThread                                                0x3E14B906u
#define KERNEL32_CreateThreadpool                                            0x2C6E3926u
#define KERNEL32_CreateThreadpoolCleanupGroup                                0xA624DAB0u
#define KERNEL32_CreateThreadpoolIo                                          0x98B8988Bu
#define KERNEL32_CreateThreadpoolTimer                                       0xE990E6BFu
#define KERNEL32_CreateThreadpoolWait                                        0x166FCD16u
#define KERNEL32_CreateThreadpoolWork                                        0x2E6CAD09u
#define KERNEL32_CreateTimerQueue                                            0xFF3D7A89u
#define KERNEL32_CreateTimerQueueTimer                                       0x4F3661E0u
#define KERNEL32_CreateToolhelp32Snapshot                                    0x48E6338Du
#define KERNEL32_CreateWaitableTimerA                                        0x7633B011u
#define KERNEL32_CreateWaitableTimerExA                                      0x55D7CE81u
#define KERNEL32_CreateWaitableTimerExW                                      0x55D7CE97u
#define KERNEL32_CreateWaitableTimerW                                        0x7633B007u
#define KERNEL32_CtrlRoutine                                                 0xCDC909B5u
#define KERNEL32_DeactivateActCtx                                            0x8D9D5A7Au
#define KERNEL32_DebugActiveProcess                                          0x3ADE6BD9u
#define KERNEL32_DebugActiveProcessStop                                      0x6D9E6417u
#define KERNEL32_DebugBreak                                                  0x88B13CA7u
#define KERNEL32_DebugBreakProcess                                           0xAEAFD8F3u
#define KERNEL32_DebugSetProcessKillOnExit                                   0xA9579554u
#define KERNEL32_DecodePointer                                               0xB35A7226u
#define KERNEL32_DecodeSystemPointer                                         0x3956AA13u
#define KERNEL32_DefineDosDeviceA                                            0x928A34BBu
#define KERNEL32_DefineDosDeviceW                                            0x928A34ADu
#define KERNEL32_DelayLoadFailureHook                                        0x7732A556u
#define KERNEL32_DeleteAtom                                                  0xBEC4E507u
#define KERNEL32_DeleteBoundaryDescriptor                                    0x7708059Fu
#define KERNEL32_DeleteCriticalSection                                       0xDC462960u
#define KERNEL32_DeleteFiber                                                 0xA8D1F92Au
#define KERNEL32_DeleteFileA                                                 0x90D1F919u
#define KERNEL32_DeleteFileTransactedA                                       0xAF27FFB3u
#define KERNEL32_DeleteFileTransactedW                                       0xAF27FFA5u
#define KERNEL32_DeleteFileW                                                 0x90D1F90Fu
#define KERNEL32_DeleteProcThreadAttributeList                               0x70D99719u
#define KERNEL32_DeleteTimerQueue                                            0xBAFD68B1u
#define KERNEL32_DeleteTimerQueueEx                                          0xC6E355DAu
#define KERNEL32_DeleteTimerQueueTimer                                       0xC4B64590u
#define KERNEL32_DeleteVolumeMountPointA                                     0x9A2C7FF4u
#define KERNEL32_DeleteVolumeMountPointW                                     0x9A2C7FE2u
#define KERNEL32_DeviceIoControl                                             0xCB69183Bu
#define KERNEL32_DisableThreadLibraryCalls                                   0xDBAF5807u
#define KERNEL32_DisableThreadProfiling                                      0x7251B69Eu
#define KERNEL32_DisassociateCurrentThreadFromCallback                       0x36DB510Au
#define KERNEL32_DisconnectNamedPipe                                         0x7F556832u
#define KERNEL32_DnsHostnameToComputerNameA                                  0x4F73D611u
#define KERNEL32_DnsHostnameToComputerNameW                                  0x4F73D607u
#define KERNEL32_DosDateTimeToFileTime                                       0xA65147C4u
#define KERNEL32_DosPathToSessionPathA                                       0x4EBF6167u
#define KERNEL32_DosPathToSessionPathW                                       0x4EBF6171u
#define KERNEL32_DuplicateConsoleHandle                                      0xCDB9671Eu
#define KERNEL32_DuplicateHandle                                             0x2B527D54u
#define KERNEL32_EnableThreadProfiling                                       0x7C59B45Eu
#define KERNEL32_EncodePointer                                               0xA35FF226u
#define KERNEL32_EncodeSystemPointer                                         0x5956AE12u
#define KERNEL32_EndUpdateResourceA                                          0x5AFE6963u
#define KERNEL32_EndUpdateResourceW                                          0x5AFE6975u
#define KERNEL32_EnterCriticalSection                                        0xEC57259Au
#define KERNEL32_EnumCalendarInfoA                                           0x9D10A163u
#define KERNEL32_EnumCalendarInfoExA                                         0x9E7B42C4u
#define KERNEL32_EnumCalendarInfoExEx                                        0x685813B7u
#define KERNEL32_EnumCalendarInfoExW                                         0x9E7B42D2u
#define KERNEL32_EnumCalendarInfoW                                           0x9D10A175u
#define KERNEL32_EnumDateFormatsA                                            0x23E71C8Cu
#define KERNEL32_EnumDateFormatsExA                                          0x20809C33u
#define KERNEL32_EnumDateFormatsExEx                                         0x1386E468u
#define KERNEL32_EnumDateFormatsExW                                          0x20809C25u
#define KERNEL32_EnumDateFormatsW                                            0x23E71C9Au
#define KERNEL32_EnumLanguageGroupLocalesA                                   0x4071E2E5u
#define KERNEL32_EnumLanguageGroupLocalesW                                   0x4071E2F3u
#define KERNEL32_EnumResourceLanguagesA                                      0xAA1828C8u
#define KERNEL32_EnumResourceLanguagesExA                                    0x32A760E2u
#define KERNEL32_EnumResourceLanguagesExW                                    0x32A760F4u
#define KERNEL32_EnumResourceLanguagesW                                      0xAA1828DEu
#define KERNEL32_EnumResourceNamesA                                          0x6FB04245u
#define KERNEL32_EnumResourceNamesExA                                        0x05B1C148u
#define KERNEL32_EnumResourceNamesExW                                        0x05B1C15Eu
#define KERNEL32_EnumResourceNamesW                                          0x6FB04253u
#define KERNEL32_EnumResourceTypesA                                          0x6E304CF1u
#define KERNEL32_EnumResourceTypesExA                                        0xD5B7C172u
#define KERNEL32_EnumResourceTypesExW                                        0xD5B7C164u
#define KERNEL32_EnumResourceTypesW                                          0x6E304CE7u
#define KERNEL32_EnumSystemCodePagesA                                        0x66F9A146u
#define KERNEL32_EnumSystemCodePagesW                                        0x66F9A150u
#define KERNEL32_EnumSystemFirmwareTables                                    0x6A81F486u
#define KERNEL32_EnumSystemGeoID                                             0x56367C57u
#define KERNEL32_EnumSystemLanguageGroupsA                                   0xA8C104BEu
#define KERNEL32_EnumSystemLanguageGroupsW                                   0xA8C104A8u
#define KERNEL32_EnumSystemLocalesA                                          0xD5B2DFF3u
#define KERNEL32_EnumSystemLocalesEx                                         0x5BFEFACEu
#define KERNEL32_EnumSystemLocalesW                                          0xD5B2DFE5u
#define KERNEL32_EnumTimeFormatsA                                            0x20CF1CACu
#define KERNEL32_EnumTimeFormatsEx                                           0xE3950461u
#define KERNEL32_EnumTimeFormatsW                                            0x20CF1CBAu
#define KERNEL32_EnumUILanguagesA                                            0x202D9B23u
#define KERNEL32_EnumUILanguagesW                                            0x202D9B35u
#define KERNEL32_EnumerateLocalComputerNamesA                                0xE10FB742u
#define KERNEL32_EnumerateLocalComputerNamesW                                0xE10FB754u
#define KERNEL32_EraseTape                                                   0x12462F81u
#define KERNEL32_EscapeCommFunction                                          0x7792951Bu
#define KERNEL32_ExitProcess                                                 0x3DEA3901u
#define KERNEL32_ExitThread                                                  0xD23161CEu
#define KERNEL32_ExitVDM                                                     0x5E89FABCu
#define KERNEL32_ExpandEnvironmentStringsA                                   0x4443AD8Du
#define KERNEL32_ExpandEnvironmentStringsW                                   0x4443AD9Bu
#define KERNEL32_ExpungeConsoleCommandHistoryA                               0xBA4FC3F6u
#define KERNEL32_ExpungeConsoleCommandHistoryW                               0xBA4FC3E0u
#define KERNEL32_FatalAppExitA                                               0xC4525176u
#define KERNEL32_FatalAppExitW                                               0xC4525160u
#define KERNEL32_FatalExit                                                   0xEED04434u
#define KERNEL32_FileTimeToDosDateTime                                       0x400745BFu
#define KERNEL32_FileTimeToLocalFileTime                                     0xD96EACC2u
#define KERNEL32_FileTimeToSystemTime                                        0xD9AE8EBAu
#define KERNEL32_FillConsoleOutputAttribute                                  0x9113BA5Eu
#define KERNEL32_FillConsoleOutputCharacterA                                 0x9B192EF3u
#define KERNEL32_FillConsoleOutputCharacterW                                 0x9B192EE5u
#define KERNEL32_FindActCtxSectionGuid                                       0x97AB1807u
#define KERNEL32_FindActCtxSectionStringA                                    0x6C35E509u
#define KERNEL32_FindActCtxSectionStringW                                    0x6C35E51Fu
#define KERNEL32_FindAtomA                                                   0xF0065C8Bu
#define KERNEL32_FindAtomW                                                   0xF0065C9Du
#define KERNEL32_FindClose                                                   0xF02590AFu
#define KERNEL32_FindCloseChangeNotification                                 0x210A80D0u
#define KERNEL32_FindFirstChangeNotificationA                                0x18A02C61u
#define KERNEL32_FindFirstChangeNotificationW                                0x18A02C77u
#define KERNEL32_FindFirstFileA                                              0xBC87B0BDu
#define KERNEL32_FindFirstFileExA                                            0xE6FD1E83u
#define KERNEL32_FindFirstFileExW                                            0xE6FD1E95u
#define KERNEL32_FindFirstFileNameTransactedW                                0x10FD792Du
#define KERNEL32_FindFirstFileNameW                                          0xBF2758ADu
#define KERNEL32_FindFirstFileTransactedA                                    0x1E7ED923u
#define KERNEL32_FindFirstFileTransactedW                                    0x1E7ED935u
#define KERNEL32_FindFirstFileW                                              0xBC87B0ABu
#define KERNEL32_FindFirstStreamTransactedW                                  0x300BE126u
#define KERNEL32_FindFirstStreamW                                            0x771AFEAFu
#define KERNEL32_FindFirstVolumeA                                            0x46FAB68Fu
#define KERNEL32_FindFirstVolumeMountPointA                                  0xD8E91B6Eu
#define KERNEL32_FindFirstVolumeMountPointW                                  0xD8E91B78u
#define KERNEL32_FindFirstVolumeW                                            0x46FAB699u
#define KERNEL32_FindNLSString                                               0xAFEDF67Eu
#define KERNEL32_FindNLSStringEx                                             0xFAB717A1u
#define KERNEL32_FindNextChangeNotification                                  0xE2D69199u
#define KERNEL32_FindNextFileA                                               0xF0C65B97u
#define KERNEL32_FindNextFileNameW                                           0x0D839CB3u
#define KERNEL32_FindNextFileW                                               0xF0C65B81u
#define KERNEL32_FindNextStreamW                                             0xDE2BF903u
#define KERNEL32_FindNextVolumeA                                             0xEFCBB123u
#define KERNEL32_FindNextVolumeMountPointA                                   0x7C2D05DCu
#define KERNEL32_FindNextVolumeMountPointW                                   0x7C2D05CAu
#define KERNEL32_FindNextVolumeW                                             0xEFCBB135u
#define KERNEL32_FindResourceA                                               0xCFF48A21u
#define KERNEL32_FindResourceExA                                             0x9730D269u
#define KERNEL32_FindResourceExW                                             0x9730D27Fu
#define KERNEL32_FindResourceW                                               0xCFF48A37u
#define KERNEL32_FindStringOrdinal                                           0xA083708Fu
#define KERNEL32_FindVolumeClose                                             0xEC77A9F3u
#define KERNEL32_FindVolumeMountPointClose                                   0xE8759805u
#define KERNEL32_FlsAlloc                                                    0x8406D686u
#define KERNEL32_FlsFree                                                     0xCF2D03BCu
#define KERNEL32_FlsGetValue                                                 0x80F7A216u
#define KERNEL32_FlsSetValue                                                 0x20F7A216u
#define KERNEL32_FlushConsoleInputBuffer                                     0x3F4518EFu
#define KERNEL32_FlushFileBuffers                                            0x9C6A76B4u
#define KERNEL32_FlushInstructionCache                                       0xC196B1CEu
#define KERNEL32_FlushProcessWriteBuffers                                    0xEAB39469u
#define KERNEL32_FlushViewOfFile                                             0xC109535Eu
#define KERNEL32_FoldStringA                                                 0x92D87933u
#define KERNEL32_FoldStringW                                                 0x92D87925u
#define KERNEL32_FormatMessageA                                              0x0F3C2996u
#define KERNEL32_FormatMessageW                                              0x0F3C2980u
#define KERNEL32_FreeConsole                                                 0x9CBD1D21u
#define KERNEL32_FreeEnvironmentStringsA                                     0x81E66D30u
#define KERNEL32_FreeEnvironmentStringsW                                     0x81E66D26u
#define KERNEL32_FreeLibrary                                                 0xA47D1DB1u
#define KERNEL32_FreeLibraryAndExitThread                                    0x383D0312u
#define KERNEL32_FreeLibraryWhenCallbackReturns                              0x9339BB46u
#define KERNEL32_FreeResource                                                0x52667EC8u
#define KERNEL32_FreeUserPhysicalPages                                       0x0F54CF3Cu
#define KERNEL32_GenerateConsoleCtrlEvent                                    0xEEACDD46u
#define KERNEL32_GetACP                                                      0x02585ADFu
#define KERNEL32_GetActiveProcessorCount                                     0x1DD3ED76u
#define KERNEL32_GetActiveProcessorGroupCount                                0x3B1CF011u
#define KERNEL32_GetApplicationRecoveryCallback                              0x1847318Fu
#define KERNEL32_GetApplicationRestartSettings                               0xEC4406DFu
#define KERNEL32_GetAtomNameA                                                0x1E54908Du
#define KERNEL32_GetAtomNameW                                                0x1E54909Bu
#define KERNEL32_GetBinaryType                                               0xEBF48257u
#define KERNEL32_GetBinaryTypeA                                              0x904AFD3Fu
#define KERNEL32_GetBinaryTypeW                                              0x904AFD29u
#define KERNEL32_GetCPInfo                                                   0x9511A36Bu
#define KERNEL32_GetCPInfoExA                                                0x9CDEB58Au
#define KERNEL32_GetCPInfoExW                                                0x9CDEB59Cu
#define KERNEL32_GetCalendarDateFormat                                       0x11F5B22Cu
#define KERNEL32_GetCalendarDateFormatEx                                     0xB04F76B0u
#define KERNEL32_GetCalendarDaysInMonth                                      0x39B64E54u
#define KERNEL32_GetCalendarDifferenceInDays                                 0xCE91E1E9u
#define KERNEL32_GetCalendarInfoA                                            0x9955922Bu
#define KERNEL32_GetCalendarInfoEx                                           0xB245F352u
#define KERNEL32_GetCalendarInfoW                                            0x9955923Du
#define KERNEL32_GetCalendarMonthsInYear                                     0x87387BF5u
#define KERNEL32_GetCalendarSupportedDateRange                               0x75749E3Fu
#define KERNEL32_GetCalendarWeekNumber                                       0xA636B9BAu
#define KERNEL32_GetComPlusPackageInstallStatus                              0x9AAA676Au
#define KERNEL32_GetCommConfig                                               0x8EB4B937u
#define KERNEL32_GetCommMask                                                 0x9665F32Eu
#define KERNEL32_GetCommModemStatus                                          0xD226E8CDu
#define KERNEL32_GetCommProperties                                           0x3C41EC21u
#define KERNEL32_GetCommState                                                0xF7863829u
#define KERNEL32_GetCommTimeouts                                             0x2E05D191u
#define KERNEL32_GetCommandLineA                                             0xE89632B0u
#define KERNEL32_GetCommandLineW                                             0xE89632A6u
#define KERNEL32_GetCompressedFileSizeA                                      0x5FFC9047u
#define KERNEL32_GetCompressedFileSizeTransactedA                            0x93925AC8u
#define KERNEL32_GetCompressedFileSizeTransactedW                            0x93925ADEu
#define KERNEL32_GetCompressedFileSizeW                                      0x5FFC9051u
#define KERNEL32_GetComputerNameA                                            0x3782CEAFu
#define KERNEL32_GetComputerNameExA                                          0xACD10B7Bu
#define KERNEL32_GetComputerNameExW                                          0xACD10B6Du
#define KERNEL32_GetComputerNameW                                            0x3782CEB9u
#define KERNEL32_GetConsoleAliasA                                            0xC5C010C5u
#define KERNEL32_GetConsoleAliasExesA                                        0x98120041u
#define KERNEL32_GetConsoleAliasExesLengthA                                  0x56FE150Eu
#define KERNEL32_GetConsoleAliasExesLengthW                                  0x56FE1518u
#define KERNEL32_GetConsoleAliasExesW                                        0x98120057u
#define KERNEL32_GetConsoleAliasW                                            0xC5C010D3u
#define KERNEL32_GetConsoleAliasesA                                          0x87196002u
#define KERNEL32_GetConsoleAliasesLengthA                                    0x8EEED2CCu
#define KERNEL32_GetConsoleAliasesLengthW                                    0x8EEED2DAu
#define KERNEL32_GetConsoleAliasesW                                          0x87196014u
#define KERNEL32_GetConsoleCP                                                0xE4401420u
#define KERNEL32_GetConsoleCharType                                          0xE62813B6u
#define KERNEL32_GetConsoleCommandHistoryA                                   0xD28B8D6Eu
#define KERNEL32_GetConsoleCommandHistoryLengthA                             0x35B5C7A8u
#define KERNEL32_GetConsoleCommandHistoryLengthW                             0x35B5C7BEu
#define KERNEL32_GetConsoleCommandHistoryW                                   0xD28B8D78u
#define KERNEL32_GetConsoleCursorInfo                                        0x6F2421D7u
#define KERNEL32_GetConsoleCursorMode                                        0x6B2463DDu
#define KERNEL32_GetConsoleDisplayMode                                       0xB8BB5D3Bu
#define KERNEL32_GetConsoleFontInfo                                          0x924B1D22u
#define KERNEL32_GetConsoleFontSize                                          0x8E489028u
#define KERNEL32_GetConsoleHardwareState                                     0x3FAABE45u
#define KERNEL32_GetConsoleHistoryInfo                                       0x9CBBDF27u
#define KERNEL32_GetConsoleInputExeNameA                                     0x3C5D97E8u
#define KERNEL32_GetConsoleInputExeNameW                                     0x3C5D97FEu
#define KERNEL32_GetConsoleInputWaitHandle                                   0x56726AE8u
#define KERNEL32_GetConsoleKeyboardLayoutNameA                               0x43D24B8Eu
#define KERNEL32_GetConsoleKeyboardLayoutNameW                               0x43D24B98u
#define KERNEL32_GetConsoleMode                                              0x7F9D8735u
#define KERNEL32_GetConsoleNlsMode                                           0x73BFCEDDu
#define KERNEL32_GetConsoleOriginalTitleA                                    0x9DD76C37u
#define KERNEL32_GetConsoleOriginalTitleW                                    0x9DD76C21u
#define KERNEL32_GetConsoleOutputCP                                          0xB2092329u
#define KERNEL32_GetConsoleProcessList                                       0x3B7BE1DEu
#define KERNEL32_GetConsoleScreenBufferInfo                                  0xD3BE641Cu
#define KERNEL32_GetConsoleScreenBufferInfoEx                                0x734659E8u
#define KERNEL32_GetConsoleSelectionInfo                                     0x185C34A2u
#define KERNEL32_GetConsoleTitleA                                            0xF192DE6Fu
#define KERNEL32_GetConsoleTitleW                                            0xF192DE79u
#define KERNEL32_GetConsoleWindow                                            0xD193935Fu
#define KERNEL32_GetCurrencyFormatA                                          0x9663BD26u
#define KERNEL32_GetCurrencyFormatEx                                         0x77A452B4u
#define KERNEL32_GetCurrencyFormatW                                          0x9663BD30u
#define KERNEL32_GetCurrentActCtx                                            0x5D19B40Cu
#define KERNEL32_GetCurrentConsoleFont                                       0x81E8514Cu
#define KERNEL32_GetCurrentConsoleFontEx                                     0x320F013Du
#define KERNEL32_GetCurrentDirectoryA                                        0xB8A34C75u
#define KERNEL32_GetCurrentDirectoryW                                        0xB8A34C63u
#define KERNEL32_GetCurrentProcess                                           0x7334BBF2u
#define KERNEL32_GetCurrentProcessId                                         0xC9C5F28Bu
#define KERNEL32_GetCurrentProcessorNumber                                   0xC3FBE41Fu
#define KERNEL32_GetCurrentProcessorNumberEx                                 0x7F074FE8u
#define KERNEL32_GetCurrentThread                                            0xC5AB173Au
#define KERNEL32_GetCurrentThreadId                                          0xEB1F8C38u
#define KERNEL32_GetDateFormatA                                              0xF725CD0Bu
#define KERNEL32_GetDateFormatEx                                             0xB9A1FE9Cu
#define KERNEL32_GetDateFormatW                                              0xF725CD1Du
#define KERNEL32_GetDefaultCommConfigA                                       0xAD8242DFu
#define KERNEL32_GetDefaultCommConfigW                                       0xAD8242C9u
#define KERNEL32_GetDevicePowerState                                         0x1A23E63Du
#define KERNEL32_GetDiskFreeSpaceA                                           0x26ABA8E7u
#define KERNEL32_GetDiskFreeSpaceExA                                         0x8C95AEE2u
#define KERNEL32_GetDiskFreeSpaceExW                                         0x8C95AEF4u
#define KERNEL32_GetDiskFreeSpaceW                                           0x26ABA8F1u
#define KERNEL32_GetDllDirectoryA                                            0x0EA0D589u
#define KERNEL32_GetDllDirectoryW                                            0x0EA0D59Fu
#define KERNEL32_GetDriveTypeA                                               0xF5E3EFDDu
#define KERNEL32_GetDriveTypeW                                               0xF5E3EFCBu
#define KERNEL32_GetDurationFormat                                           0x89197A51u
#define KERNEL32_GetDurationFormatEx                                         0x462CC591u
#define KERNEL32_GetDynamicTimeZoneInformation                               0x88923E8Bu
#define KERNEL32_GetEnabledXStateFeatures                                    0xEF68B5DEu
#define KERNEL32_GetEnvironmentStrings                                       0x6B004863u
#define KERNEL32_GetEnvironmentStringsA                                      0x090C6D21u
#define KERNEL32_GetEnvironmentStringsW                                      0x090C6D37u
#define KERNEL32_GetEnvironmentVariableA                                     0x5950A6E0u
#define KERNEL32_GetEnvironmentVariableW                                     0x5950A6F6u
#define KERNEL32_GetEraNameCountedString                                     0x6FE60A46u
#define KERNEL32_GetErrorMode                                                0x2593E2ADu
#define KERNEL32_GetExitCodeProcess                                          0xD615C7B7u
#define KERNEL32_GetExitCodeThread                                           0x27863E31u
#define KERNEL32_GetExpandedNameA                                            0xD5A955F7u
#define KERNEL32_GetExpandedNameW                                            0xD5A955E1u
#define KERNEL32_GetFileAttributesA                                          0x3C133E2Du
#define KERNEL32_GetFileAttributesExA                                        0xA4FF4CB9u
#define KERNEL32_GetFileAttributesExW                                        0xA4FF4CAFu
#define KERNEL32_GetFileAttributesTransactedA                                0x1C2CE361u
#define KERNEL32_GetFileAttributesTransactedW                                0x1C2CE377u
#define KERNEL32_GetFileAttributesW                                          0x3C133E3Bu
#define KERNEL32_GetFileBandwidthReservation                                 0x08765D90u
#define KERNEL32_GetFileInformationByHandle                                  0x906FCB10u
#define KERNEL32_GetFileInformationByHandleEx                                0x42491F54u
#define KERNEL32_GetFileMUIInfo                                              0xC9954759u
#define KERNEL32_GetFileMUIPath                                              0xF5970BDEu
#define KERNEL32_GetFileSize                                                 0x9EE55C22u
#define KERNEL32_GetFileSizeEx                                               0x8A733508u
#define KERNEL32_GetFileTime                                                 0x9EE7BFA2u
#define KERNEL32_GetFileType                                                 0xDEE41FA2u
#define KERNEL32_GetFinalPathNameByHandleA                                   0x7FB028B9u
#define KERNEL32_GetFinalPathNameByHandleW                                   0x7FB028AFu
#define KERNEL32_GetFirmwareEnvironmentVariableA                             0x7FDE405Au
#define KERNEL32_GetFirmwareEnvironmentVariableW                             0x7FDE404Cu
#define KERNEL32_GetFullPathNameA                                            0xCC0BAB9Fu
#define KERNEL32_GetFullPathNameTransactedA                                  0xDC4EB5AAu
#define KERNEL32_GetFullPathNameTransactedW                                  0xDC4EB5BCu
#define KERNEL32_GetFullPathNameW                                            0xCC0BAB89u
#define KERNEL32_GetGeoInfoA                                                 0xA824E280u
#define KERNEL32_GetGeoInfoW                                                 0xA824E296u
#define KERNEL32_GetHandleContext                                            0x2F0FFD2Cu
#define KERNEL32_GetHandleInformation                                        0xAFBAE292u
#define KERNEL32_GetLargePageMinimum                                         0x5EDAC817u
#define KERNEL32_GetLargestConsoleWindowSize                                 0xB5084215u
#define KERNEL32_GetLastError                                                0xCAE2D40Cu
#define KERNEL32_GetLocalTime                                                0xD4768731u
#define KERNEL32_GetLocaleInfoA                                              0xC95C3BBFu
#define KERNEL32_GetLocaleInfoEx                                             0x87777953u
#define KERNEL32_GetLocaleInfoW                                              0xC95C3BA9u
#define KERNEL32_GetLogicalDriveStringsA                                     0x52985343u
#define KERNEL32_GetLogicalDriveStringsW                                     0x52985355u
#define KERNEL32_GetLogicalDrives                                            0x03609CD9u
#define KERNEL32_GetLogicalProcessorInformation                              0xDBAD03B3u
#define KERNEL32_GetLogicalProcessorInformationEx                            0xCF661476u
#define KERNEL32_GetLongPathNameA                                            0x6D66AB97u
#define KERNEL32_GetLongPathNameTransactedA                                  0x59FAB588u
#define KERNEL32_GetLongPathNameTransactedW                                  0x59FAB59Eu
#define KERNEL32_GetLongPathNameW                                            0x6D66AB81u
#define KERNEL32_GetMailslotInfo                                             0x7B91C3B0u
#define KERNEL32_GetMaximumProcessorCount                                    0x2FF7BAF5u
#define KERNEL32_GetMaximumProcessorGroupCount                               0x5F545F17u
#define KERNEL32_GetModuleFileNameA                                          0x47488A17u
#define KERNEL32_GetModuleFileNameW                                          0x47488A01u
#define KERNEL32_GetModuleHandleA                                            0x5929952Du
#define KERNEL32_GetModuleHandleExA                                          0xA56BA615u
#define KERNEL32_GetModuleHandleExW                                          0xA56BA603u
#define KERNEL32_GetModuleHandleW                                            0x5929953Bu
#define KERNEL32_GetNLSVersion                                               0x42CA94F3u
#define KERNEL32_GetNLSVersionEx                                             0xCD038A2Bu
#define KERNEL32_GetNamedPipeAttribute                                       0x95B76E57u
#define KERNEL32_GetNamedPipeClientComputerNameA                             0x29F8B8E1u
#define KERNEL32_GetNamedPipeClientComputerNameW                             0x29F8B8F7u
#define KERNEL32_GetNamedPipeClientProcessId                                 0xF385E953u
#define KERNEL32_GetNamedPipeClientSessionId                                 0x3F42E473u
#define KERNEL32_GetNamedPipeHandleStateA                                    0x20FEDF92u
#define KERNEL32_GetNamedPipeHandleStateW                                    0x20FEDF84u
#define KERNEL32_GetNamedPipeInfo                                            0xCB96AB84u
#define KERNEL32_GetNamedPipeServerProcessId                                 0x474C7B7Eu
#define KERNEL32_GetNamedPipeServerSessionId                                 0x8B8B765Eu
#define KERNEL32_GetNativeSystemInfo                                         0x04AF6AC9u
#define KERNEL32_GetNextVDMCommand                                           0xAD76ECC7u
#define KERNEL32_GetNumaAvailableMemoryNode                                  0xF4186874u
#define KERNEL32_GetNumaAvailableMemoryNodeEx                                0xD3D8C1D9u
#define KERNEL32_GetNumaHighestNodeNumber                                    0xB55F6307u
#define KERNEL32_GetNumaNodeNumberFromHandle                                 0x49141AE8u
#define KERNEL32_GetNumaNodeProcessorMask                                    0x544EA303u
#define KERNEL32_GetNumaNodeProcessorMaskEx                                  0x0D599AF4u
#define KERNEL32_GetNumaProcessorNode                                        0x97E656A6u
#define KERNEL32_GetNumaProcessorNodeEx                                      0x9A573922u
#define KERNEL32_GetNumaProximityNode                                        0x6430DA90u
#define KERNEL32_GetNumaProximityNodeEx                                      0x41986312u
#define KERNEL32_GetNumberFormatA                                            0xE6053895u
#define KERNEL32_GetNumberFormatEx                                           0xA7123CB8u
#define KERNEL32_GetNumberFormatW                                            0xE6053883u
#define KERNEL32_GetNumberOfConsoleFonts                                     0xF2BD0BF5u
#define KERNEL32_GetNumberOfConsoleInputEvents                               0xF5B210EBu
#define KERNEL32_GetNumberOfConsoleMouseButtons                              0xA7AD15C7u
#define KERNEL32_GetOEMCP                                                    0x08E1023Bu
#define KERNEL32_GetOverlappedResult                                         0x69871CA5u
#define KERNEL32_GetPhysicallyInstalledSystemMemory                          0x4396CA5Au
#define KERNEL32_GetPriorityClass                                            0xDCBACF1Au
#define KERNEL32_GetPrivateProfileIntA                                       0xEF451F6Eu
#define KERNEL32_GetPrivateProfileIntW                                       0xEF451F78u
#define KERNEL32_GetPrivateProfileSectionA                                   0x99B1C0BFu
#define KERNEL32_GetPrivateProfileSectionNamesA                              0xA17DD7A1u
#define KERNEL32_GetPrivateProfileSectionNamesW                              0xA17DD7B7u
#define KERNEL32_GetPrivateProfileSectionW                                   0x99B1C0A9u
#define KERNEL32_GetPrivateProfileStringA                                    0x1AE5C303u
#define KERNEL32_GetPrivateProfileStringW                                    0x1AE5C315u
#define KERNEL32_GetPrivateProfileStructA                                    0x2EE7AD03u
#define KERNEL32_GetPrivateProfileStructW                                    0x2EE7AD15u
#define KERNEL32_GetProcAddress                                              0xD424F9FFu
#define KERNEL32_GetProcessAffinityMask                                      0xACC44DD8u
#define KERNEL32_GetProcessDEPPolicy                                         0x084F539Cu
#define KERNEL32_GetProcessGroupAffinity                                     0xC0766C7Au
#define KERNEL32_GetProcessHandleCount                                       0xE60C0519u
#define KERNEL32_GetProcessHeap                                              0xD55FA4D2u
#define KERNEL32_GetProcessHeaps                                             0xF49A5AD8u
#define KERNEL32_GetProcessId                                                0x54E108B4u
#define KERNEL32_GetProcessIdOfThread                                        0x0B9D2D9Bu
#define KERNEL32_GetProcessIoCounters                                        0x6BFD05CEu
#define KERNEL32_GetProcessPreferredUILanguages                              0xFE11331Au
#define KERNEL32_GetProcessPriorityBoost                                     0xE9820ED1u
#define KERNEL32_GetProcessShutdownParameters                                0xADC5455Fu
#define KERNEL32_GetProcessTimes                                             0xC558FCD8u
#define KERNEL32_GetProcessUserModeExceptionPolicy                           0x3D3656ADu
#define KERNEL32_GetProcessVersion                                           0x0AE80885u
#define KERNEL32_GetProcessWorkingSetSize                                    0x630CEA0Au
#define KERNEL32_GetProcessWorkingSetSizeEx                                  0x298493D0u
#define KERNEL32_GetProcessorSystemCycleTime                                 0xE431BF3Eu
#define KERNEL32_GetProductInfo                                              0xC12B446Du
#define KERNEL32_GetProfileIntA                                              0xD03E045Du
#define KERNEL32_GetProfileIntW                                              0xD03E044Bu
#define KERNEL32_GetProfileSectionA                                          0x2A82370Eu
#define KERNEL32_GetProfileSectionW                                          0x2A823718u
#define KERNEL32_GetProfileStringA                                           0xA7685A9Cu
#define KERNEL32_GetProfileStringW                                           0xA7685A8Au
#define KERNEL32_GetQueuedCompletionStatus                                   0x6F675B9Du
#define KERNEL32_GetQueuedCompletionStatusEx                                 0x75B53D16u
#define KERNEL32_GetShortPathNameA                                           0x2B01E4F5u
#define KERNEL32_GetShortPathNameW                                           0x2B01E4E3u
#define KERNEL32_GetStartupInfoA                                             0x6149AE74u
#define KERNEL32_GetStartupInfoW                                             0x6149AE62u
#define KERNEL32_GetStdHandle                                                0x38A76563u
#define KERNEL32_GetStringScripts                                            0xDB60F1C2u
#define KERNEL32_GetStringTypeA                                              0xD3EDE147u
#define KERNEL32_GetStringTypeExA                                            0x0F40B7C4u
#define KERNEL32_GetStringTypeExW                                            0x0F40B7D2u
#define KERNEL32_GetStringTypeW                                              0xD3EDE151u
#define KERNEL32_GetSystemDEPPolicy                                          0x43D7E2E1u
#define KERNEL32_GetSystemDefaultLCID                                        0xE0D0DE4Eu
#define KERNEL32_GetSystemDefaultLangID                                      0xB5AA70BDu
#define KERNEL32_GetSystemDefaultLocaleName                                  0xE5C75389u
#define KERNEL32_GetSystemDefaultUILanguage                                  0x9EC6280Cu
#define KERNEL32_GetSystemDirectoryA                                         0xA9D14722u
#define KERNEL32_GetSystemDirectoryW                                         0xA9D14734u
#define KERNEL32_GetSystemFileCacheSize                                      0xC56FF87Cu
#define KERNEL32_GetSystemFirmwareTable                                      0xEB79551Eu
#define KERNEL32_GetSystemInfo                                               0x5C931CF3u
#define KERNEL32_GetSystemPowerStatus                                        0x1D9699D7u
#define KERNEL32_GetSystemPreferredUILanguages                               0xA6AF96D6u
#define KERNEL32_GetSystemRegistryQuota                                      0x37AC5B77u
#define KERNEL32_GetSystemTime                                               0x40927279u
#define KERNEL32_GetSystemTimeAdjustment                                     0xC9391BF5u
#define KERNEL32_GetSystemTimeAsFileTime                                     0x982E705Bu
#define KERNEL32_GetSystemTimes                                              0x4E4F2861u
#define KERNEL32_GetSystemWindowsDirectoryA                                  0x83CA4F4Eu
#define KERNEL32_GetSystemWindowsDirectoryW                                  0x83CA4F58u
#define KERNEL32_GetSystemWow64DirectoryA                                    0xCE03129Du
#define KERNEL32_GetSystemWow64DirectoryW                                    0xCE03128Bu
#define KERNEL32_GetTapeParameters                                           0x0539F111u
#define KERNEL32_GetTapePosition                                             0x7D6CB408u
#define KERNEL32_GetTapeStatus                                               0x2DE53083u
#define KERNEL32_GetTempFileNameA                                            0xAF85BD80u
#define KERNEL32_GetTempFileNameW                                            0xAF85BD96u
#define KERNEL32_GetTempPathA                                                0xF3B5A5B7u
#define KERNEL32_GetTempPathW                                                0xF3B5A5A1u
#define KERNEL32_GetThreadContext                                            0xE72B705Du
#define KERNEL32_GetThreadErrorMode                                          0xF2E73112u
#define KERNEL32_GetThreadGroupAffinity                                      0xF6A3DB7Bu
#define KERNEL32_GetThreadIOPendingFlag                                      0x285C3188u
#define KERNEL32_GetThreadId                                                 0x3AE3651Fu
#define KERNEL32_GetThreadIdealProcessorEx                                   0x8E99CB83u
#define KERNEL32_GetThreadLocale                                             0xD54E1FD8u
#define KERNEL32_GetThreadPreferredUILanguages                               0xF7A79EA2u
#define KERNEL32_GetThreadPriority                                           0xB3BCF712u
#define KERNEL32_GetThreadPriorityBoost                                      0xDF57B9D0u
#define KERNEL32_GetThreadSelectorEntry                                      0x6A6AC85Fu
#define KERNEL32_GetThreadTimes                                              0xC46E296Fu
#define KERNEL32_GetThreadUILanguage                                         0x0281A800u
#define KERNEL32_GetTickCount                                                0x9686E2B4u
#define KERNEL32_GetTickCount64                                              0xD25CDBBEu
#define KERNEL32_GetTimeFormatA                                              0xF625D44Bu
#define KERNEL32_GetTimeFormatEx                                             0xBA89FEBCu
#define KERNEL32_GetTimeFormatW                                              0xF625D45Du
#define KERNEL32_GetTimeZoneInformation                                      0x3B9136E1u
#define KERNEL32_GetTimeZoneInformationForYear                               0x9AE1059Au
#define KERNEL32_GetUILanguageInfo                                           0x96E56B8Bu
#define KERNEL32_GetUserDefaultLCID                                          0xAAE8C420u
#define KERNEL32_GetUserDefaultLangID                                        0x0C8290D4u
#define KERNEL32_GetUserDefaultLocaleName                                    0xE35CC107u
#define KERNEL32_GetUserDefaultUILanguage                                    0x985DBA82u
#define KERNEL32_GetUserGeoID                                                0x2EC386B6u
#define KERNEL32_GetUserPreferredUILanguages                                 0xEB66D1D5u
#define KERNEL32_GetVDMCurrentDirectories                                    0x79E0EA6Eu
#define KERNEL32_GetVersion                                                  0x0BD83C26u
#define KERNEL32_GetVersionExA                                               0xF8111345u
#define KERNEL32_GetVersionExW                                               0xF8111353u
#define KERNEL32_GetVolumeInformationA                                       0x981C57A5u
#define KERNEL32_GetVolumeInformationByHandleW                               0x62A9340Fu
#define KERNEL32_GetVolumeInformationW                                       0x981C57B3u
#define KERNEL32_GetVolumeNameForVolumeMountPointA                           0xE04483BEu
#define KERNEL32_GetVolumeNameForVolumeMountPointW                           0xE04483A8u
#define KERNEL32_GetVolumePathNameA                                          0x818E9C09u
#define KERNEL32_GetVolumePathNameW                                          0x818E9C1Fu
#define KERNEL32_GetVolumePathNamesForVolumeNameA                            0xEBCE52F0u
#define KERNEL32_GetVolumePathNamesForVolumeNameW                            0xEBCE52E6u
#define KERNEL32_GetWindowsDirectoryA                                        0x1FBBE089u
#define KERNEL32_GetWindowsDirectoryW                                        0x1FBBE09Fu
#define KERNEL32_GetWriteWatch                                               0xE7B3A3F4u
#define KERNEL32_GetXStateFeaturesMask                                       0x5DB38C6Au
#define KERNEL32_GlobalAddAtomA                                              0x7C13F904u
#define KERNEL32_GlobalAddAtomW                                              0x7C13F912u
#define KERNEL32_GlobalAlloc                                                 0xA985F8A5u
#define KERNEL32_GlobalCompact                                               0x9EBAF810u
#define KERNEL32_GlobalDeleteAtom                                            0x85F4B889u
#define KERNEL32_GlobalFindAtomA                                             0x1C778509u
#define KERNEL32_GlobalFindAtomW                                             0x1C77851Fu
#define KERNEL32_GlobalFix                                                   0x7E0691BEu
#define KERNEL32_GlobalFlags                                                 0x9DF4F8B5u
#define KERNEL32_GlobalFree                                                  0xBE346FA5u
#define KERNEL32_GlobalGetAtomNameA                                          0x26B851FBu
#define KERNEL32_GlobalGetAtomNameW                                          0x26B851EDu
#define KERNEL32_GlobalHandle                                                0x93C55447u
#define KERNEL32_GlobalLock                                                  0xCA34AAABu
#define KERNEL32_GlobalMemoryStatus                                          0x723AFFB5u
#define KERNEL32_GlobalMemoryStatusEx                                        0xD5C04B86u
#define KERNEL32_GlobalReAlloc                                               0xA87F3613u
#define KERNEL32_GlobalSize                                                  0xD2378525u
#define KERNEL32_GlobalUnWire                                                0xA73688FDu
#define KERNEL32_GlobalUnfix                                                 0x80C539BEu
#define KERNEL32_GlobalUnlock                                                0xBF34B573u
#define KERNEL32_GlobalWire                                                  0xD2368725u
#define KERNEL32_Heap32First                                                 0x40C2F4B2u
#define KERNEL32_Heap32ListFirst                                             0x800A12D4u
#define KERNEL32_Heap32ListNext                                              0xA5054457u
#define KERNEL32_Heap32Next                                                  0x96334210u
#define KERNEL32_HeapAlloc                                                   0x9C05DE81u
#define KERNEL32_HeapCompact                                                 0x0E6CF888u
#define KERNEL32_HeapCreate                                                  0x8232D761u
#define KERNEL32_HeapDestroy                                                 0x438CBA91u
#define KERNEL32_HeapFree                                                    0x8F15C3A4u
#define KERNEL32_HeapLock                                                    0xFB1506AAu
#define KERNEL32_HeapQueryInformation                                        0xEECCE111u
#define KERNEL32_HeapReAlloc                                                 0x38A9368Bu
#define KERNEL32_HeapSetInformation                                          0x9B9E9895u
#define KERNEL32_HeapSize                                                    0xE3162924u
#define KERNEL32_HeapSummary                                                 0x0E6AD631u
#define KERNEL32_HeapUnlock                                                  0xBBF033C3u
#define KERNEL32_HeapValidate                                                0x3E82832Au
#define KERNEL32_HeapWalk                                                    0xC314EB2Au
#define KERNEL32_IdnToAscii                                                  0xF1287D35u
#define KERNEL32_IdnToNameprepUnicode                                        0x13AE4488u
#define KERNEL32_IdnToUnicode                                                0xCF6D24ABu
#define KERNEL32_InitAtomTable                                               0xB3E1309Du
#define KERNEL32_InitOnceBeginInitialize                                     0x39286AACu
#define KERNEL32_InitOnceComplete                                            0xDCD2424Bu
#define KERNEL32_InitOnceExecuteOnce                                         0x4ADB18B0u
#define KERNEL32_InitOnceInitialize                                          0x3E7D0466u
#define KERNEL32_InitializeConditionVariable                                 0x04F817CEu
#define KERNEL32_InitializeContext                                           0x3DE6EA6Eu
#define KERNEL32_InitializeCriticalSection                                   0x57A35BABu
#define KERNEL32_InitializeCriticalSectionAndSpinCount                       0xE9FD5028u
#define KERNEL32_InitializeCriticalSectionEx                                 0xAD562D16u
#define KERNEL32_InitializeProcThreadAttributeList                           0x95AB5C92u
#define KERNEL32_InitializeSListHead                                         0xE5EA73C2u
#define KERNEL32_InitializeSRWLock                                           0x1671960Bu
#define KERNEL32_InterlockedCompareExchange                                  0x21294A76u
#define KERNEL32_InterlockedCompareExchange64                                0xD882651Du
#define KERNEL32_InterlockedDecrement                                        0x3914961Eu
#define KERNEL32_InterlockedExchange                                         0xB6F6CAAFu
#define KERNEL32_InterlockedExchangeAdd                                      0x7F69D7BEu
#define KERNEL32_InterlockedFlushSList                                       0x3D637ACCu
#define KERNEL32_InterlockedIncrement                                        0x61149B1Eu
#define KERNEL32_InterlockedPopEntrySList                                    0x497D1C5Fu
#define KERNEL32_InterlockedPushEntrySList                                   0x5F18413Au
#define KERNEL32_InterlockedPushListSList                                    0xA4D07E49u
#define KERNEL32_InvalidateConsoleDIBits                                     0xB3E97132u
#define KERNEL32_IsBadCodePtr                                                0x6E3A92E2u
#define KERNEL32_IsBadHugeReadPtr                                            0x6C58D2D4u
#define KERNEL32_IsBadHugeWritePtr                                           0xA35F9769u
#define KERNEL32_IsBadReadPtr                                                0x6E6ED276u
#define KERNEL32_IsBadStringPtrA                                             0x7E743B0Bu
#define KERNEL32_IsBadStringPtrW                                             0x7E743B1Du
#define KERNEL32_IsBadWritePtr                                               0x634BD72Fu
#define KERNEL32_IsCalendarLeapDay                                           0x5A343997u
#define KERNEL32_IsCalendarLeapMonth                                         0x01F6578Eu
#define KERNEL32_IsCalendarLeapYear                                          0x9731E5B4u
#define KERNEL32_IsDBCSLeadByte                                              0xBA1521ABu
#define KERNEL32_IsDBCSLeadByteEx                                            0xAEE0F4FEu
#define KERNEL32_IsDebuggerPresent                                           0x3FDAD410u
#define KERNEL32_IsNLSDefinedString                                          0xF535B226u
#define KERNEL32_IsNormalizedString                                          0x6DF7E40Cu
#define KERNEL32_IsProcessInJob                                              0x3949E749u
#define KERNEL32_IsProcessorFeaturePresent                                   0xE04C8F56u
#define KERNEL32_IsSystemResumeAutomatic                                     0xAAD8D0C8u
#define KERNEL32_IsThreadAFiber                                              0xBA1F62D5u
#define KERNEL32_IsThreadpoolTimerSet                                        0x1A37B98Du
#define KERNEL32_IsTimeZoneRedirectionEnabled                                0x5E43280Bu
#define KERNEL32_IsValidCalDateTime                                          0x26647D3Du
#define KERNEL32_IsValidCodePage                                             0xE5170B1Bu
#define KERNEL32_IsValidLanguageGroup                                        0x8217AA6Eu
#define KERNEL32_IsValidLocale                                               0x56FD5C23u
#define KERNEL32_IsValidLocaleName                                           0x4638E8B1u
#define KERNEL32_IsWow64Process                                              0x0C2174ACu
#define KERNEL32_K32EmptyWorkingSet                                          0xA15FE65Eu
#define KERNEL32_K32EnumDeviceDrivers                                        0x8F188C3Fu
#define KERNEL32_K32EnumPageFilesA                                           0x4C767DE5u
#define KERNEL32_K32EnumPageFilesW                                           0x4C767DF3u
#define KERNEL32_K32EnumProcessModules                                       0xA06647B4u
#define KERNEL32_K32EnumProcessModulesEx                                     0xD2893966u
#define KERNEL32_K32EnumProcesses                                            0x0B106EBFu
#define KERNEL32_K32GetDeviceDriverBaseNameA                                 0x56AF1687u
#define KERNEL32_K32GetDeviceDriverBaseNameW                                 0x56AF1691u
#define KERNEL32_K32GetDeviceDriverFileNameA                                 0x16A8D287u
#define KERNEL32_K32GetDeviceDriverFileNameW                                 0x16A8D291u
#define KERNEL32_K32GetMappedFileNameA                                       0x1EEADA82u
#define KERNEL32_K32GetMappedFileNameW                                       0x1EEADA94u
#define KERNEL32_K32GetModuleBaseNameA                                       0x1ECF82A7u
#define KERNEL32_K32GetModuleBaseNameW                                       0x1ECF82B1u
#define KERNEL32_K32GetModuleFileNameExA                                     0x8D74215Bu
#define KERNEL32_K32GetModuleFileNameExW                                     0x8D74214Du
#define KERNEL32_K32GetModuleInformation                                     0x6D59C3D0u
#define KERNEL32_K32GetPerformanceInfo                                       0x75D10D88u
#define KERNEL32_K32GetProcessImageFileNameA                                 0x1205417Eu
#define KERNEL32_K32GetProcessImageFileNameW                                 0x12054168u
#define KERNEL32_K32GetProcessMemoryInfo                                     0xF669926Fu
#define KERNEL32_K32GetWsChanges                                             0x3E6FE736u
#define KERNEL32_K32GetWsChangesEx                                           0xD8F11FE4u
#define KERNEL32_K32InitializeProcessForWsWatch                              0x2C67C859u
#define KERNEL32_K32QueryWorkingSet                                          0xF45CD65Fu
#define KERNEL32_K32QueryWorkingSetEx                                        0x7FD9D321u
#define KERNEL32_LCIDToLocaleName                                            0xC32F3967u
#define KERNEL32_LCMapStringA                                                0x36BE7427u
#define KERNEL32_LCMapStringEx                                               0xCE8466AFu
#define KERNEL32_LCMapStringW                                                0x36BE7431u
#define KERNEL32_LZClose                                                     0xB82D56D0u
#define KERNEL32_LZCloseFile                                                 0xC90621B1u
#define KERNEL32_LZCopy                                                      0xB9AE2160u
#define KERNEL32_LZCreateFileW                                               0x721CF017u
#define KERNEL32_LZDone                                                      0xB9ADE2FCu
#define KERNEL32_LZInit                                                      0xBDAD046Du
#define KERNEL32_LZOpenFileA                                                 0x3F359A2Fu
#define KERNEL32_LZOpenFileW                                                 0x3F359A39u
#define KERNEL32_LZRead                                                      0x91AC09FDu
#define KERNEL32_LZSeek                                                      0x91AC8972u
#define KERNEL32_LZStart                                                     0x812D7AC1u
#define KERNEL32_LeaveCriticalSection                                        0x48C40920u
#define KERNEL32_LeaveCriticalSectionWhenCallbackReturns                     0xDBCFE7CCu
#define KERNEL32_LoadAppInitDlls                                             0xF2648DA0u
#define KERNEL32_LoadLibraryA                                                0xA33335BAu
#define KERNEL32_LoadLibraryExA                                              0xFA83CC97u
#define KERNEL32_LoadLibraryExW                                              0xFA83CC81u
#define KERNEL32_LoadLibraryW                                                0xA33335ACu
#define KERNEL32_LoadModule                                                  0xD364DDFDu
#define KERNEL32_LoadResource                                                0x52E37FBCu
#define KERNEL32_LoadStringBaseExW                                           0x0E3916A2u
#define KERNEL32_LoadStringBaseW                                             0x8D85BD51u
#define KERNEL32_LocalAlloc                                                  0xA585F9B9u
#define KERNEL32_LocalCompact                                                0xEE8AF814u
#define KERNEL32_LocalFileTimeToFileTime                                     0xE1873967u
#define KERNEL32_LocalFlags                                                  0x91F4F9A9u
#define KERNEL32_LocalFree                                                   0xB6D40FA5u
#define KERNEL32_LocalHandle                                                 0x93E6D5C7u
#define KERNEL32_LocalLock                                                   0xC2D4CAABu
#define KERNEL32_LocalReAlloc                                                0xD84F3617u
#define KERNEL32_LocalShrink                                                 0xA7769BFFu
#define KERNEL32_LocalSize                                                   0xDAD7E525u
#define KERNEL32_LocalUnlock                                                 0xBF1734F3u
#define KERNEL32_LocaleNameToLCID                                            0x60D6E21Cu
#define KERNEL32_LocateXStateFeature                                         0x8B64F67Du
#define KERNEL32_LockFile                                                    0xC2A663A0u
#define KERNEL32_LockFileEx                                                  0x830239F6u
#define KERNEL32_LockResource                                                0x52A370BCu
#define KERNEL32_MapUserPhysicalPages                                        0xB0D4DB5Eu
#define KERNEL32_MapUserPhysicalPagesScatter                                 0x238EFC6Fu
#define KERNEL32_MapViewOfFile                                               0x50808B3Du
#define KERNEL32_MapViewOfFileEx                                             0xF54AA254u
#define KERNEL32_MapViewOfFileExNuma                                         0xF142D3CAu
#define KERNEL32_Module32First                                               0x3AF57906u
#define KERNEL32_Module32FirstW                                              0xAF20C709u
#define KERNEL32_Module32Next                                                0xFB9093ACu
#define KERNEL32_Module32NextW                                               0x12759F25u
#define KERNEL32_MoveFileA                                                   0xCC715909u
#define KERNEL32_MoveFileExA                                                 0x373EC525u
#define KERNEL32_MoveFileExW                                                 0x373EC533u
#define KERNEL32_MoveFileTransactedA                                         0xDDA57FF2u
#define KERNEL32_MoveFileTransactedW                                         0xDDA57FE4u
#define KERNEL32_MoveFileW                                                   0xCC71591Fu
#define KERNEL32_MoveFileWithProgressA                                       0xAAC6564Cu
#define KERNEL32_MoveFileWithProgressW                                       0xAAC6565Au
#define KERNEL32_MulDiv                                                      0x175D16EDu
#define KERNEL32_MultiByteToWideChar                                         0x3ED19C04u
#define KERNEL32_NeedCurrentDirectoryForExePathA                             0x567E604Au
#define KERNEL32_NeedCurrentDirectoryForExePathW                             0x567E605Cu
#define KERNEL32_NlsCheckPolicy                                              0x77DFEED1u
#define KERNEL32_NlsEventDataDescCreate                                      0xE7F48F5Du
#define KERNEL32_NlsGetCacheUpdateCount                                      0xD73BCCBAu
#define KERNEL32_NlsUpdateLocale                                             0x0DCEC9B8u
#define KERNEL32_NlsUpdateSystemLocale                                       0x7A9E2757u
#define KERNEL32_NlsWriteEtwEvent                                            0xDDF97B48u
#define KERNEL32_NormalizeString                                             0x4D628F40u
#define KERNEL32_NotifyMountMgr                                              0xA60DFE39u
#define KERNEL32_NotifyUILanguageChange                                      0x70A6C8AFu
#define KERNEL32_OpenConsoleW                                                0xA3A0B8C8u
#define KERNEL32_OpenEventA                                                  0x9E954249u
#define KERNEL32_OpenEventW                                                  0x9E95425Fu
#define KERNEL32_OpenFile                                                    0xDAF1A3ACu
#define KERNEL32_OpenFileById                                                0xDEC4AE7Fu
#define KERNEL32_OpenFileMappingA                                            0x26B738F8u
#define KERNEL32_OpenFileMappingW                                            0x26B738EEu
#define KERNEL32_OpenJobObjectA                                              0x93CF02B8u
#define KERNEL32_OpenJobObjectW                                              0x93CF02AEu
#define KERNEL32_OpenMutexA                                                  0xB2A4CAD9u
#define KERNEL32_OpenMutexW                                                  0xB2A4CACFu
#define KERNEL32_OpenPrivateNamespaceA                                       0x18FECFDAu
#define KERNEL32_OpenPrivateNamespaceW                                       0x18FECFCCu
#define KERNEL32_OpenProcess                                                 0xECEA3529u
#define KERNEL32_OpenProcessToken                                            0x7098FDBCu
#define KERNEL32_OpenProfileUserMapping                                      0xD6A13287u
#define KERNEL32_OpenSemaphoreA                                              0xACC6AD9Cu
#define KERNEL32_OpenSemaphoreW                                              0xACC6AD8Au
#define KERNEL32_OpenThread                                                  0xB377E9CEu
#define KERNEL32_OpenThreadToken                                             0xCFA34472u
#define KERNEL32_OpenWaitableTimerA                                          0x1563789Cu
#define KERNEL32_OpenWaitableTimerW                                          0x1563788Au
#define KERNEL32_OutputDebugStringA                                          0x372F8911u
#define KERNEL32_OutputDebugStringW                                          0x372F8907u
#define KERNEL32_PeekConsoleInputA                                           0x95B0C345u
#define KERNEL32_PeekConsoleInputW                                           0x95B0C353u
#define KERNEL32_PeekNamedPipe                                               0xA707A73Cu
#define KERNEL32_PostQueuedCompletionStatus                                  0x4767E19Du
#define KERNEL32_PowerClearRequest                                           0x321BF3F3u
#define KERNEL32_PowerCreateRequest                                          0x9E3C481Eu
#define KERNEL32_PowerSetRequest                                             0x5D58E0F3u
#define KERNEL32_PrepareTape                                                 0x0C060EC3u
#define KERNEL32_PrivCopyFileExW                                             0x5305270Du
#define KERNEL32_PrivMoveFileIdentityW                                       0x7F0EF4CBu
#define KERNEL32_Process32First                                              0x78F5C619u
#define KERNEL32_Process32FirstW                                             0xB8C32F49u
#define KERNEL32_Process32Next                                               0x036A83A9u
#define KERNEL32_Process32NextW                                              0x5075203Au
#define KERNEL32_ProcessIdToSessionId                                        0xDFF5A871u
#define KERNEL32_PulseEvent                                                  0xFA414EBCu
#define KERNEL32_PurgeComm                                                   0x12415121u
#define KERNEL32_QueryActCtxSettingsW                                        0x651194AEu
#define KERNEL32_QueryActCtxW                                                0x13D792C7u
#define KERNEL32_QueryDepthSList                                             0x6DDAC844u
#define KERNEL32_QueryDosDeviceA                                             0x5F8410EBu
#define KERNEL32_QueryDosDeviceW                                             0x5F8410FDu
#define KERNEL32_QueryFullProcessImageNameA                                  0xB50CEF02u
#define KERNEL32_QueryFullProcessImageNameW                                  0xB50CEF14u
#define KERNEL32_QueryIdleProcessorCycleTime                                 0x5E5A4D88u
#define KERNEL32_QueryIdleProcessorCycleTimeEx                               0x2171C94Eu
#define KERNEL32_QueryInformationJobObject                                   0x4989C846u
#define KERNEL32_QueryMemoryResourceNotification                             0xD74B81E4u
#define KERNEL32_QueryPerformanceCounter                                     0xB2B48AF3u
#define KERNEL32_QueryPerformanceFrequency                                   0x56D2B76Cu
#define KERNEL32_QueryProcessAffinityUpdateMode                              0xB0734D8Cu
#define KERNEL32_QueryProcessCycleTime                                       0x326FC5EBu
#define KERNEL32_QueryThreadCycleTime                                        0xDB048FF8u
#define KERNEL32_QueryThreadProfiling                                        0x83C7E0EEu
#define KERNEL32_QueryThreadpoolStackInformation                             0xE1BA19A1u
#define KERNEL32_QueryUnbiasedInterruptTime                                  0x5416DDAAu
#define KERNEL32_QueueUserAPC                                                0x26C78D73u
#define KERNEL32_QueueUserWorkItem                                           0x2B3C5E68u
#define KERNEL32_RaiseException                                              0x7F817A6Cu
#define KERNEL32_RaiseFailFastException                                      0x8386CF7Au
#define KERNEL32_ReOpenFile                                                  0xD0B1C6ACu
#define KERNEL32_ReadConsoleA                                                0xA32E328Au
#define KERNEL32_ReadConsoleInputA                                           0x94B2DD45u
#define KERNEL32_ReadConsoleInputExA                                         0x065DCB34u
#define KERNEL32_ReadConsoleInputExW                                         0x065DCB22u
#define KERNEL32_ReadConsoleInputW                                           0x94B2DD53u
#define KERNEL32_ReadConsoleOutputA                                          0x5FEF9061u
#define KERNEL32_ReadConsoleOutputAttribute                                  0x9D13D0DCu
#define KERNEL32_ReadConsoleOutputCharacterA                                 0x96496F73u
#define KERNEL32_ReadConsoleOutputCharacterW                                 0x96496F65u
#define KERNEL32_ReadConsoleOutputW                                          0x5FEF9077u
#define KERNEL32_ReadConsoleW                                                0xA32E329Cu
#define KERNEL32_ReadDirectoryChangesW                                       0x1ACB63C8u
#define KERNEL32_ReadFile                                                    0x3254E3A4u
#define KERNEL32_ReadFileEx                                                  0x90C1F3F6u
#define KERNEL32_ReadFileScatter                                             0xF79AFDA8u
#define KERNEL32_ReadProcessMemory                                           0x360919F0u
#define KERNEL32_ReadThreadProfilingData                                     0x44641727u
#define KERNEL32_RegCloseKey                                                 0x3F87F46Cu
#define KERNEL32_RegCreateKeyExA                                             0xDA47569Bu
#define KERNEL32_RegCreateKeyExW                                             0xDA47568Du
#define KERNEL32_RegDeleteKeyExA                                             0xDB64D2C7u
#define KERNEL32_RegDeleteKeyExW                                             0xDB64D2D1u
#define KERNEL32_RegDeleteTreeA                                              0xE5C2D09Fu
#define KERNEL32_RegDeleteTreeW                                              0xE5C2D089u
#define KERNEL32_RegDeleteValueA                                             0x1B27787Du
#define KERNEL32_RegDeleteValueW                                             0x1B27786Bu
#define KERNEL32_RegDisablePredefinedCacheEx                                 0x4166612Cu
#define KERNEL32_RegEnumKeyExA                                               0x92D693CCu
#define KERNEL32_RegEnumKeyExW                                               0x92D693DAu
#define KERNEL32_RegEnumValueA                                               0x52953976u
#define KERNEL32_RegEnumValueW                                               0x52953960u
#define KERNEL32_RegFlushKey                                                 0x1787F2D8u
#define KERNEL32_RegGetKeySecurity                                           0x7E4F0CBEu
#define KERNEL32_RegGetValueA                                                0xF6C8D07Bu
#define KERNEL32_RegGetValueW                                                0xF6C8D06Du
#define KERNEL32_RegKrnGetGlobalState                                        0x1E568D39u
#define KERNEL32_RegKrnInitialize                                            0x4A5BD599u
#define KERNEL32_RegLoadKeyA                                                 0xFEF4A348u
#define KERNEL32_RegLoadKeyW                                                 0xFEF4A35Eu
#define KERNEL32_RegLoadMUIStringA                                           0x173A5B94u
#define KERNEL32_RegLoadMUIStringW                                           0x173A5B82u
#define KERNEL32_RegNotifyChangeKeyValue                                     0x58450BF0u
#define KERNEL32_RegOpenCurrentUser                                          0x56675A14u
#define KERNEL32_RegOpenKeyExA                                               0x13964DCCu
#define KERNEL32_RegOpenKeyExW                                               0x13964DDAu
#define KERNEL32_RegOpenUserClassesRoot                                      0x5898B698u
#define KERNEL32_RegQueryInfoKeyA                                            0xDDDEB10Fu
#define KERNEL32_RegQueryInfoKeyW                                            0xDDDEB119u
#define KERNEL32_RegQueryValueExA                                            0xA47D461Bu
#define KERNEL32_RegQueryValueExW                                            0xA47D460Du
#define KERNEL32_RegRestoreKeyA                                              0x6ED79369u
#define KERNEL32_RegRestoreKeyW                                              0x6ED7937Fu
#define KERNEL32_RegSaveKeyExA                                               0x88149CCCu
#define KERNEL32_RegSaveKeyExW                                               0x88149CDAu
#define KERNEL32_RegSetKeySecurity                                           0x7E4F24BEu
#define KERNEL32_RegSetValueExA                                              0xFFD42350u
#define KERNEL32_RegSetValueExW                                              0xFFD42346u
#define KERNEL32_RegUnLoadKeyA                                               0xD8C62A99u
#define KERNEL32_RegUnLoadKeyW                                               0xD8C62A8Fu
#define KERNEL32_RegisterApplicationRecoveryCallback                         0x35038D2Au
#define KERNEL32_RegisterApplicationRestart                                  0xE22E38F8u
#define KERNEL32_RegisterConsoleIME                                          0x40A259E4u
#define KERNEL32_RegisterConsoleOS2                                          0x58A19993u
#define KERNEL32_RegisterConsoleVDM                                          0x3CA379ECu
#define KERNEL32_RegisterWaitForInputIdle                                    0x684D7A8Bu
#define KERNEL32_RegisterWaitForSingleObject                                 0x7197300Bu
#define KERNEL32_RegisterWaitForSingleObjectEx                               0x2DCEFCB8u
#define KERNEL32_RegisterWowBaseHandlers                                     0x8DF945D5u
#define KERNEL32_RegisterWowExec                                             0x1D5D6CF5u
#define KERNEL32_ReleaseActCtx                                               0xBEB51A4Du
#define KERNEL32_ReleaseMutex                                                0xD1693EA4u
#define KERNEL32_ReleaseMutexWhenCallbackReturns                             0x19833157u
#define KERNEL32_ReleaseSRWLockExclusive                                     0x68BFD3F5u
#define KERNEL32_ReleaseSRWLockShared                                        0x5A9B631Cu
#define KERNEL32_ReleaseSemaphore                                            0xD6C53CFFu
#define KERNEL32_ReleaseSemaphoreWhenCallbackReturns                         0x3400E756u
#define KERNEL32_RemoveDirectoryA                                            0xBEADE707u
#define KERNEL32_RemoveDirectoryTransactedA                                  0x16D787CBu
#define KERNEL32_RemoveDirectoryTransactedW                                  0x16D787DDu
#define KERNEL32_RemoveDirectoryW                                            0xBEADE711u
#define KERNEL32_RemoveDllDirectory                                          0xF4255065u
#define KERNEL32_RemoveLocalAlternateComputerNameA                           0x7633018Au
#define KERNEL32_RemoveLocalAlternateComputerNameW                           0x7633019Cu
#define KERNEL32_RemoveSecureMemoryCacheCallback                             0xF1BFD763u
#define KERNEL32_RemoveVectoredContinueHandler                               0x6ED884C9u
#define KERNEL32_RemoveVectoredExceptionHandler                              0x127D19EFu
#define KERNEL32_ReplaceFile                                                 0xCEE592E9u
#define KERNEL32_ReplaceFileA                                                0xB25D399Du
#define KERNEL32_ReplaceFileW                                                0xB25D398Bu
#define KERNEL32_ReplacePartitionUnit                                        0x21EAFFE3u
#define KERNEL32_RequestDeviceWakeup                                         0x7DD5106Bu
#define KERNEL32_RequestWakeupLatency                                        0x567BD9B6u
#define KERNEL32_ResetEvent                                                  0x0204DE9Eu
#define KERNEL32_ResetWriteWatch                                             0xB33369F7u
#define KERNEL32_ResolveLocaleName                                           0x4F6C7405u
#define KERNEL32_RestoreLastError                                            0x919630C7u
#define KERNEL32_ResumeThread                                                0xF4DC2D5Au
#define KERNEL32_RtlCaptureContext                                           0xBF350CDEu
#define KERNEL32_RtlCaptureStackBackTrace                                    0x6D6AAB89u
#define KERNEL32_RtlFillMemory                                               0xF2BF1ED4u
#define KERNEL32_RtlMoveMemory                                               0x23DD58D4u
#define KERNEL32_RtlUnwind                                                   0x02F6A94Cu
#define KERNEL32_RtlZeroMemory                                               0x013FD2D4u
#define KERNEL32_ScrollConsoleScreenBufferA                                  0x87C6FEAAu
#define KERNEL32_ScrollConsoleScreenBufferW                                  0x87C6FEBCu
#define KERNEL32_SearchPathA                                                 0x49B5905Fu
#define KERNEL32_SearchPathW                                                 0x49B59049u
#define KERNEL32_SetCalendarInfoA                                            0x9955928Bu
#define KERNEL32_SetCalendarInfoW                                            0x9955929Du
#define KERNEL32_SetClientTimeZoneInformation                                0xB94258E2u
#define KERNEL32_SetComPlusPackageInstallStatus                              0xB2AA676Au
#define KERNEL32_SetCommBreak                                                0xE69E9B27u
#define KERNEL32_SetCommConfig                                               0xCEB4B936u
#define KERNEL32_SetCommMask                                                 0x9665F37Eu
#define KERNEL32_SetCommState                                                0xF78C3829u
#define KERNEL32_SetCommTimeouts                                             0x2B05D191u
#define KERNEL32_SetComputerNameA                                            0x3782CE0Fu
#define KERNEL32_SetComputerNameExA                                          0x2CD10B79u
#define KERNEL32_SetComputerNameExW                                          0x2CD10B6Fu
#define KERNEL32_SetComputerNameW                                            0x3782CE19u
#define KERNEL32_SetConsoleActiveScreenBuffer                                0xA77DFC94u
#define KERNEL32_SetConsoleCP                                                0xE44A1420u
#define KERNEL32_SetConsoleCtrlHandler                                       0x566269F0u
#define KERNEL32_SetConsoleCursor                                            0x8C539DD2u
#define KERNEL32_SetConsoleCursorInfo                                        0x652421D7u
#define KERNEL32_SetConsoleCursorMode                                        0x612463DDu
#define KERNEL32_SetConsoleCursorPosition                                    0x711BC807u
#define KERNEL32_SetConsoleDisplayMode                                       0xB8BB5C7Bu
#define KERNEL32_SetConsoleFont                                              0x7F9CEAA4u
#define KERNEL32_SetConsoleHardwareState                                     0x3FAABE40u
#define KERNEL32_SetConsoleHistoryInfo                                       0x9CBBDE67u
#define KERNEL32_SetConsoleIcon                                              0x4F9CCD3Eu
#define KERNEL32_SetConsoleInputExeNameA                                     0x3C5D97EDu
#define KERNEL32_SetConsoleInputExeNameW                                     0x3C5D97FBu
#define KERNEL32_SetConsoleKeyShortcuts                                      0x0D597242u
#define KERNEL32_SetConsoleLocalEUDC                                         0xADF23DA0u
#define KERNEL32_SetConsoleMaximumWindowSize                                 0x35E2F304u
#define KERNEL32_SetConsoleMenuClose                                         0x1707882Eu
#define KERNEL32_SetConsoleMode                                              0x7F9DAF35u
#define KERNEL32_SetConsoleNlsMode                                           0x73ABCEDDu
#define KERNEL32_SetConsoleNumberOfCommandsA                                 0x8BE1318Cu
#define KERNEL32_SetConsoleNumberOfCommandsW                                 0x8BE1319Au
#define KERNEL32_SetConsoleOS2OemFormat                                      0x0D894675u
#define KERNEL32_SetConsoleOutputCP                                          0x3209232Bu
#define KERNEL32_SetConsolePalette                                           0x1E5E5AC7u
#define KERNEL32_SetConsoleScreenBufferInfoEx                                0x734659E2u
#define KERNEL32_SetConsoleScreenBufferSize                                  0xCFBDEB96u
#define KERNEL32_SetConsoleTextAttribute                                     0x06090347u
#define KERNEL32_SetConsoleTitleA                                            0xF192DECFu
#define KERNEL32_SetConsoleTitleW                                            0xF192DED9u
#define KERNEL32_SetConsoleWindowInfo                                        0x87F1FDD7u
#define KERNEL32_SetCriticalSectionSpinCount                                 0xE5E23EF9u
#define KERNEL32_SetCurrentConsoleFontEx                                     0x320F0138u
#define KERNEL32_SetCurrentDirectoryA                                        0xB2A34C75u
#define KERNEL32_SetCurrentDirectoryW                                        0xB2A34C63u
#define KERNEL32_SetDefaultCommConfigA                                       0xAD82439Fu
#define KERNEL32_SetDefaultCommConfigW                                       0xAD824389u
#define KERNEL32_SetDefaultDllDirectories                                    0x08ECA5BAu
#define KERNEL32_SetDllDirectoryA                                            0x0EA0D529u
#define KERNEL32_SetDllDirectoryW                                            0x0EA0D53Fu
#define KERNEL32_SetDynamicTimeZoneInformation                               0x88937E8Bu
#define KERNEL32_SetEndOfFile                                                0xDCDD676Du
#define KERNEL32_SetEnvironmentStringsA                                      0x09246D21u
#define KERNEL32_SetEnvironmentStringsW                                      0x09246D37u
#define KERNEL32_SetEnvironmentVariableA                                     0x5950A6E5u
#define KERNEL32_SetEnvironmentVariableW                                     0x5950A6F3u
#define KERNEL32_SetErrorMode                                                0x2599E2ADu
#define KERNEL32_SetEvent                                                    0x0844BB9Fu
#define KERNEL32_SetEventWhenCallbackReturns                                 0x846FA795u
#define KERNEL32_SetFileApisToANSI                                           0xF3A37ED9u
#define KERNEL32_SetFileApisToOEM                                            0xCC86FD05u
#define KERNEL32_SetFileAttributesA                                          0xBC133E2Fu
#define KERNEL32_SetFileAttributesTransactedA                                0x1C2CE36Bu
#define KERNEL32_SetFileAttributesTransactedW                                0x1C2CE37Du
#define KERNEL32_SetFileAttributesW                                          0xBC133E39u
#define KERNEL32_SetFileBandwidthReservation                                 0x08265D90u
#define KERNEL32_SetFileCompletionNotificationModes                          0x6475F4BEu
#define KERNEL32_SetFileInformationByHandle                                  0x906FC990u
#define KERNEL32_SetFileIoOverlappedRange                                    0xA6CE2294u
#define KERNEL32_SetFilePointer                                              0xA3925CB0u
#define KERNEL32_SetFilePointerEx                                            0xC286E90Au
#define KERNEL32_SetFileShortNameA                                           0x4FF5F691u
#define KERNEL32_SetFileShortNameW                                           0x4FF5F687u
#define KERNEL32_SetFileTime                                                 0x9EE7BFF2u
#define KERNEL32_SetFileValidData                                            0xFF819F9Du
#define KERNEL32_SetFirmwareEnvironmentVariableA                             0x7FDE455Au
#define KERNEL32_SetFirmwareEnvironmentVariableW                             0x7FDE454Cu
#define KERNEL32_SetHandleContext                                            0x2F0FFD8Cu
#define KERNEL32_SetHandleCount                                              0xAC3C3E1Au
#define KERNEL32_SetHandleInformation                                        0xA5BAE292u
#define KERNEL32_SetInformationJobObject                                     0x98A4609Bu
#define KERNEL32_SetLastConsoleEventActive                                   0x0A643D82u
#define KERNEL32_SetLastError                                                0xCAE8D40Cu
#define KERNEL32_SetLocalPrimaryComputerNameA                                0x377B6DE3u
#define KERNEL32_SetLocalPrimaryComputerNameW                                0x377B6DF5u
#define KERNEL32_SetLocalTime                                                0xD47C8731u
#define KERNEL32_SetLocaleInfoA                                              0xC95C13BFu
#define KERNEL32_SetLocaleInfoW                                              0xC95C13A9u
#define KERNEL32_SetMailslotInfo                                             0x7E91C3B0u
#define KERNEL32_SetMessageWaitingIndicator                                  0x0E9DE16Au
#define KERNEL32_SetNamedPipeAttribute                                       0x95B76F17u
#define KERNEL32_SetNamedPipeHandleState                                     0xFE9907F3u
#define KERNEL32_SetPriorityClass                                            0xDCBACFBAu
#define KERNEL32_SetProcessAffinityMask                                      0xACEC4DD8u
#define KERNEL32_SetProcessAffinityUpdateMode                                0x12281C37u
#define KERNEL32_SetProcessDEPPolicy                                         0x084F039Cu
#define KERNEL32_SetProcessPreferredUILanguages                              0xD611331Au
#define KERNEL32_SetProcessPriorityBoost                                     0xE9820ED4u
#define KERNEL32_SetProcessShutdownParameters                                0xADC54555u
#define KERNEL32_SetProcessUserModeExceptionPolicy                           0x3D3656B9u
#define KERNEL32_SetProcessWorkingSetSize                                    0x630C4A0Au
#define KERNEL32_SetProcessWorkingSetSizeEx                                  0x29849150u
#define KERNEL32_SetSearchPathMode                                           0x7B97AAE8u
#define KERNEL32_SetStdHandle                                                0x38AD6563u
#define KERNEL32_SetStdHandleEx                                              0x8CEA15EDu
#define KERNEL32_SetSystemFileCacheSize                                      0xC547F87Cu
#define KERNEL32_SetSystemPowerState                                         0xCD20BCA4u
#define KERNEL32_SetSystemTime                                               0x00927278u
#define KERNEL32_SetSystemTimeAdjustment                                     0xC9391BF0u
#define KERNEL32_SetTapeParameters                                           0x052DF111u
#define KERNEL32_SetTapePosition                                             0x786CB408u
#define KERNEL32_SetTermsrvAppInstallMode                                    0xD8B440D8u
#define KERNEL32_SetThreadAffinityMask                                       0x14CDFA35u
#define KERNEL32_SetThreadContext                                            0xE72B70FDu
#define KERNEL32_SetThreadErrorMode                                          0x72E73110u
#define KERNEL32_SetThreadExecutionState                                     0xF419A162u
#define KERNEL32_SetThreadGroupAffinity                                      0xF68BDB7Bu
#define KERNEL32_SetThreadIdealProcessor                                     0xA45AFEE6u
#define KERNEL32_SetThreadIdealProcessorEx                                   0x9A99CB83u
#define KERNEL32_SetThreadLocale                                             0xD04E1FD8u
#define KERNEL32_SetThreadPreferredUILanguages                               0xF7A6DEA2u
#define KERNEL32_SetThreadPriority                                           0xB3A8F712u
#define KERNEL32_SetThreadPriorityBoost                                      0xDF7FB9D0u
#define KERNEL32_SetThreadStackGuarantee                                     0x80FA135Au
#define KERNEL32_SetThreadToken                                              0xDC6E0272u
#define KERNEL32_SetThreadUILanguage                                         0x0281F800u
#define KERNEL32_SetThreadpoolStackInformation                               0x8B8D6DEAu
#define KERNEL32_SetThreadpoolThreadMaximum                                  0x13EB46C1u
#define KERNEL32_SetThreadpoolThreadMinimum                                  0x128B46D1u
#define KERNEL32_SetThreadpoolTimer                                          0x90807601u
#define KERNEL32_SetThreadpoolWait                                           0x939C0592u
#define KERNEL32_SetTimeZoneInformation                                      0x3BB936E1u
#define KERNEL32_SetTimerQueueTimer                                          0x3626F15Eu
#define KERNEL32_SetUnhandledExceptionFilter                                 0xC38F3FBCu
#define KERNEL32_SetUserGeoID                                                0x2EC986B6u
#define KERNEL32_SetVDMCurrentDirectories                                    0x79E04A6Eu
#define KERNEL32_SetVolumeLabelA                                             0xA36F4F60u
#define KERNEL32_SetVolumeLabelW                                             0xA36F4F76u
#define KERNEL32_SetVolumeMountPointA                                        0xA1E63D27u
#define KERNEL32_SetVolumeMountPointW                                        0xA1E63D31u
#define KERNEL32_SetWaitableTimer                                            0xC6A79E03u
#define KERNEL32_SetWaitableTimerEx                                          0x0F123E00u
#define KERNEL32_SetXStateFeaturesMask                                       0x5DB38D2Au
#define KERNEL32_SetupComm                                                   0x9310D205u
#define KERNEL32_ShowConsoleCursor                                           0x8E809A0Au
#define KERNEL32_SignalObjectAndWait                                         0xE6EABEFBu
#define KERNEL32_SizeofResource                                              0xC338DB92u
#define KERNEL32_Sleep                                                       0x913C9671u
#define KERNEL32_SleepConditionVariableCS                                    0x5A228F4Bu
#define KERNEL32_SleepConditionVariableSRW                                   0x11E94B13u
#define KERNEL32_SleepEx                                                     0xC64C5221u
#define KERNEL32_SortCloseHandle                                             0x377E47FCu
#define KERNEL32_SortGetHandle                                               0x80B7713Au
#define KERNEL32_StartThreadpoolIo                                           0xE899940Au
#define KERNEL32_SubmitThreadpoolWork                                        0xC220B1E1u
#define KERNEL32_SuspendThread                                               0xDCAFFD07u
#define KERNEL32_SwitchToFiber                                               0xF2C2768Fu
#define KERNEL32_SwitchToThread                                              0x4EC39618u
#define KERNEL32_SystemTimeToFileTime                                        0x5A446B0Au
#define KERNEL32_SystemTimeToTzSpecificLocalTime                             0xCF4EF689u
#define KERNEL32_TerminateJobObject                                          0x9D81CFA4u
#define KERNEL32_TerminateProcess                                            0x7FBE420Bu
#define KERNEL32_TerminateThread                                             0x0A63736Du
#define KERNEL32_TermsrvAppInstallMode                                       0x985ED8C1u
#define KERNEL32_Thread32First                                               0xA0F6F45Fu
#define KERNEL32_Thread32Next                                                0x915C43B0u
#define KERNEL32_TlsAlloc                                                    0x1406D686u
#define KERNEL32_TlsFree                                                     0xCF2983BCu
#define KERNEL32_TlsGetValue                                                 0x80F7A25Eu
#define KERNEL32_TlsSetValue                                                 0x20F7A25Eu
#define KERNEL32_Toolhelp32ReadProcessMemory                                 0x2090BECCu
#define KERNEL32_TransactNamedPipe                                           0x8CF178B6u
#define KERNEL32_TransmitCommChar                                            0x4F5EF439u
#define KERNEL32_TryAcquireSRWLockExclusive                                  0xF2B030A1u
#define KERNEL32_TryAcquireSRWLockShared                                     0xF3AF7CDAu
#define KERNEL32_TryEnterCriticalSection                                     0xECB3221Fu
#define KERNEL32_TrySubmitThreadpoolCallback                                 0x4233FD1Du
#define KERNEL32_TzSpecificLocalTimeToSystemTime                             0xB173BB39u
#define KERNEL32_UTRegister                                                  0x4C258D3Fu
#define KERNEL32_UTUnRegister                                                0x4C0F366Fu
#define KERNEL32_UnhandledExceptionFilter                                    0xB6C3331Cu
#define KERNEL32_UnlockFile                                                  0xC8060DA1u
#define KERNEL32_UnlockFileEx                                                0x8728B84Eu
#define KERNEL32_UnmapViewOfFile                                             0x45C0573Fu
#define KERNEL32_UnregisterApplicationRecoveryCallback                       0xB053BA2Au
#define KERNEL32_UnregisterApplicationRestart                                0x63963CD2u
#define KERNEL32_UnregisterConsoleIME                                        0x6A23E1E0u
#define KERNEL32_UnregisterWait                                              0xF7E9C9AEu
#define KERNEL32_UnregisterWaitEx                                            0xBBD7075Eu
#define KERNEL32_UpdateCalendarDayOfWeek                                     0xBF2291A4u
#define KERNEL32_UpdateProcThreadAttribute                                   0x6C1E654Fu
#define KERNEL32_UpdateResourceA                                             0xFA906A4Bu
#define KERNEL32_UpdateResourceW                                             0xFA906A5Du
#define KERNEL32_VDMConsoleOperation                                         0x851FD22Fu
#define KERNEL32_VDMOperationStarted                                         0x17542729u
#define KERNEL32_VerLanguageNameA                                            0x6D654205u
#define KERNEL32_VerLanguageNameW                                            0x6D654213u
#define KERNEL32_VerSetConditionMask                                         0xA7705C1Fu
#define KERNEL32_VerifyConsoleIoHandle                                       0x319883E9u
#define KERNEL32_VerifyScripts                                               0x622893FAu
#define KERNEL32_VerifyVersionInfoA                                          0x90C8AA96u
#define KERNEL32_VerifyVersionInfoW                                          0x90C8AA80u
#define KERNEL32_VirtualAlloc                                                0x126EE31Du
#define KERNEL32_VirtualAllocEx                                              0x74411BF4u
#define KERNEL32_VirtualAllocExNuma                                          0x6B4AC371u
#define KERNEL32_VirtualFree                                                 0x63F1B0FDu
#define KERNEL32_VirtualFreeEx                                               0xF58766BBu
#define KERNEL32_VirtualLock                                                 0x17F175F3u
#define KERNEL32_VirtualProtect                                              0x6C719644u
#define KERNEL32_VirtualProtectEx                                            0x11B96621u
#define KERNEL32_VirtualQuery                                                0x376D4F87u
#define KERNEL32_VirtualQueryEx                                              0x1CD51546u
#define KERNEL32_VirtualUnlock                                               0xDC43A20Eu
#define KERNEL32_WTSGetActiveConsoleSessionId                                0x8D675BC7u
#define KERNEL32_WaitCommEvent                                               0x96F6790Du
#define KERNEL32_WaitForDebugEvent                                           0xF2E0B47Cu
#define KERNEL32_WaitForMultipleObjects                                      0x8B87201Fu
#define KERNEL32_WaitForMultipleObjectsEx                                    0x7E26BCF8u
#define KERNEL32_WaitForSingleObject                                         0xEE3472E7u
#define KERNEL32_WaitForSingleObjectEx                                       0x9FB071B3u
#define KERNEL32_WaitForThreadpoolIoCallbacks                                0xC2E23F77u
#define KERNEL32_WaitForThreadpoolTimerCallbacks                             0x8656879Du
#define KERNEL32_WaitForThreadpoolWaitCallbacks                              0x15B2423Du
#define KERNEL32_WaitForThreadpoolWorkCallbacks                              0x16554251u
#define KERNEL32_WaitNamedPipeA                                              0xB4E19ADDu
#define KERNEL32_WaitNamedPipeW                                              0xB4E19ACBu
#define KERNEL32_WakeAllConditionVariable                                    0x58C95A9Du
#define KERNEL32_WakeConditionVariable                                       0x281DFDA4u
#define KERNEL32_WerGetFlags                                                 0xB4D5E5C4u
#define KERNEL32_WerRegisterFile                                             0x0239013Eu
#define KERNEL32_WerRegisterMemoryBlock                                      0x19A11FBDu
#define KERNEL32_WerRegisterRuntimeExceptionModule                           0x405594D6u
#define KERNEL32_WerSetFlags                                                 0x14D5E5C4u
#define KERNEL32_WerUnregisterFile                                           0xCB3E6217u
#define KERNEL32_WerUnregisterMemoryBlock                                    0x57E924A4u
#define KERNEL32_WerUnregisterRuntimeExceptionModule                         0x5DD933F2u
#define KERNEL32_WerpCleanupMessageMapping                                   0x0A8B7FE5u
#define KERNEL32_WerpInitiateRemoteRecovery                                  0x346034B7u
#define KERNEL32_WerpNotifyLoadStringResource                                0x880C4542u
#define KERNEL32_WerpNotifyLoadStringResourceEx                              0x0A28916Du
#define KERNEL32_WerpNotifyUseStringResource                                 0xED09CAC7u
#define KERNEL32_WerpStringLookup                                            0xCDCE5905u
#define KERNEL32_WideCharToMultiByte                                         0x67F962FCu
#define KERNEL32_WinExec                                                     0xE6F94230u
#define KERNEL32_Wow64DisableWow64FsRedirection                              0xF749F8DFu
#define KERNEL32_Wow64EnableWow64FsRedirection                               0x684F1894u
#define KERNEL32_Wow64GetThreadContext                                       0x109EA92Bu
#define KERNEL32_Wow64GetThreadSelectorEntry                                 0x1C3775B2u
#define KERNEL32_Wow64RevertWow64FsRedirection                               0xA761E4E6u
#define KERNEL32_Wow64SetThreadContext                                       0x109EA98Bu
#define KERNEL32_Wow64SuspendThread                                          0x314096B5u
#define KERNEL32_WriteConsoleA                                               0xD19E33BFu
#define KERNEL32_WriteConsoleInputA                                          0x71D2DF2Fu
#define KERNEL32_WriteConsoleInputVDMA                                       0xF9663C78u
#define KERNEL32_WriteConsoleInputVDMW                                       0xF9663C6Eu
#define KERNEL32_WriteConsoleInputW                                          0x71D2DF39u
#define KERNEL32_WriteConsoleOutputA                                         0x5FA2CCCDu
#define KERNEL32_WriteConsoleOutputAttribute                                 0xD04F7CDCu
#define KERNEL32_WriteConsoleOutputCharacterA                                0x03C966D8u
#define KERNEL32_WriteConsoleOutputCharacterW                                0x03C966CEu
#define KERNEL32_WriteConsoleOutputW                                         0x5FA2CCDBu
#define KERNEL32_WriteConsoleW                                               0xD19E33A9u
#define KERNEL32_WriteFile                                                   0x3247B48Fu
#define KERNEL32_WriteFileEx                                                 0x3CC1BEAAu
#define KERNEL32_WriteFileGather                                             0x4B3F566Cu
#define KERNEL32_WritePrivateProfileSectionA                                 0xF6ED46FBu
#define KERNEL32_WritePrivateProfileSectionW                                 0xF6ED46EDu
#define KERNEL32_WritePrivateProfileStringA                                  0x28C6B9E7u
#define KERNEL32_WritePrivateProfileStringW                                  0x28C6B9F1u
#define KERNEL32_WritePrivateProfileStructA                                  0x1CC4D7E7u
#define KERNEL32_WritePrivateProfileStructW                                  0x1CC4D7F1u
#define KERNEL32_WriteProcessMemory                                          0xD3691B9Au
#define KERNEL32_WriteProfileSectionA                                        0xC112FF83u
#define KERNEL32_WriteProfileSectionW                                        0xC112FF95u
#define KERNEL32_WriteProfileStringA                                         0xE307061Au
#define KERNEL32_WriteProfileStringW                                         0xE307060Cu
#define KERNEL32_WriteTapemark                                               0x5CFF52A9u
#define KERNEL32_ZombifyActCtx                                               0x96571249u
#define KERNEL32__hread                                                      0x928C19DBu
#define KERNEL32__hwrite                                                     0xA36979B4u
#define KERNEL32__lclose                                                     0xBA2996BCu
#define KERNEL32__lcreat                                                     0x922BD9ADu
#define KERNEL32__llseek                                                     0x92DB5932u
#define KERNEL32__lopen                                                      0xC6CC9751u
#define KERNEL32__lread                                                      0x92CC19DBu
#define KERNEL32__lwrite                                                     0xA36979BCu
#define KERNEL32_lstrcat                                                     0x8B571993u
#define KERNEL32_lstrcatA                                                    0xE332712Bu
#define KERNEL32_lstrcatW                                                    0xE332713Du
#define KERNEL32_lstrcmp                                                     0x8B569997u
#define KERNEL32_lstrcmpA                                                    0xD332F12Bu
#define KERNEL32_lstrcmpW                                                    0xD332F13Du
#define KERNEL32_lstrcmpi                                                    0xD332F103u
#define KERNEL32_lstrcmpiA                                                   0x5E207A27u
#define KERNEL32_lstrcmpiW                                                   0x5E207A31u
#define KERNEL32_lstrcpy                                                     0x8B55399Eu
#define KERNEL32_lstrcpyA                                                    0xA733D12Bu
#define KERNEL32_lstrcpyW                                                    0xA733D13Du
#define KERNEL32_lstrcpyn                                                    0xA733D104u
#define KERNEL32_lstrcpynA                                                   0x7A2094A7u
#define KERNEL32_lstrcpynW                                                   0x7A2094B1u
#define KERNEL32_lstrlen                                                     0xB7579989u
#define KERNEL32_lstrlenA                                                    0xF33136ABu
#define KERNEL32_lstrlenW                                                    0xF33136BDu
#define USER32_ActivateKeyboardLayout                                        0x94794B7Eu
#define USER32_AddClipboardFormatListener                                    0x46F48E98u
#define USER32_AdjustWindowRect                                              0xA0BC7777u
#define USER32_AdjustWindowRectEx                                            0xDE8A51A5u
#define USER32_AlignRects                                                    0xC9171E2Du
#define USER32_AllowForegroundActivation                                     0x6429FE4Au
#define USER32_AllowSetForegroundWindow                                      0x3BB887C2u
#define USER32_AnimateWindow                                                 0x2B13F77Bu
#define USER32_AnyPopup                                                      0xCD151701u
#define USER32_AppendMenuA                                                   0x9AC5630Fu
#define USER32_AppendMenuW                                                   0x9AC56319u
#define USER32_ArrangeIconicWindows                                          0x462AFB65u
#define USER32_AttachThreadInput                                             0xCCF36548u
#define USER32_BeginDeferWindowPos                                           0xEB738EEFu
#define USER32_BeginPaint                                                    0x9157D52Au
#define USER32_BlockInput                                                    0xB4C63BA0u
#define USER32_BringWindowToTop                                              0x84C52856u
#define USER32_BroadcastSystemMessage                                        0x7E3515C0u
#define USER32_BroadcastSystemMessageA                                       0xA2B80F87u
#define USER32_BroadcastSystemMessageExA                                     0x0E85E07Fu
#define USER32_BroadcastSystemMessageExW                                     0x0E85E069u
#define USER32_BroadcastSystemMessageW                                       0xA2B80F91u
#define USER32_BuildReasonArray                                              0x85D569F9u
#define USER32_CalcMenuBar                                                   0x1ADF3736u
#define USER32_CalculatePopupWindowPosition                                  0x93E52342u
#define USER32_CallMsgFilter                                                 0x73359A48u
#define USER32_CallMsgFilterA                                                0xB3490E27u
#define USER32_CallMsgFilterW                                                0xB3490E31u
#define USER32_CallNextHookEx                                                0x731375DCu
#define USER32_CallWindowProcA                                               0x44C134F7u
#define USER32_CallWindowProcW                                               0x44C134E1u
#define USER32_CancelShutdown                                                0x3FC3390Du
#define USER32_CascadeChildWindows                                           0xFFC83811u
#define USER32_CascadeWindows                                                0x8EE27129u
#define USER32_ChangeClipboardChain                                          0x5CFA5F56u
#define USER32_ChangeDisplaySettingsA                                        0x77B75F84u
#define USER32_ChangeDisplaySettingsExA                                      0x01D1DD3Fu
#define USER32_ChangeDisplaySettingsExW                                      0x01D1DD29u
#define USER32_ChangeDisplaySettingsW                                        0x77B75F92u
#define USER32_ChangeMenuA                                                   0xC1C73205u
#define USER32_ChangeMenuW                                                   0xC1C73213u
#define USER32_ChangeWindowMessageFilter                                     0x3A27C171u
#define USER32_ChangeWindowMessageFilterEx                                   0xC4E03F7Du
#define USER32_CharLowerA                                                    0x9282935Bu
#define USER32_CharLowerBuffA                                                0xAD85D2E9u
#define USER32_CharLowerBuffW                                                0xAD85D2FFu
#define USER32_CharLowerW                                                    0x9282934Du
#define USER32_CharNextA                                                     0xA4F6B127u
#define USER32_CharNextExA                                                   0x8E9CDA85u
#define USER32_CharNextW                                                     0xA4F6B131u
#define USER32_CharPrevA                                                     0xD116FAA7u
#define USER32_CharPrevExA                                                   0x8F4B5BABu
#define USER32_CharPrevW                                                     0xD116FAB1u
#define USER32_CharToOemA                                                    0x92816F6Bu
#define USER32_CharToOemBuffA                                                0x6E85D2D6u
#define USER32_CharToOemBuffW                                                0x6E85D2C0u
#define USER32_CharToOemW                                                    0x92816F7Du
#define USER32_CharUpperA                                                    0x937290E9u
#define USER32_CharUpperBuffA                                                0x96A5CDE9u
#define USER32_CharUpperBuffW                                                0x96A5CDFFu
#define USER32_CharUpperW                                                    0x937290FFu
#define USER32_CheckDesktopByThreadId                                        0x30B7B761u
#define USER32_CheckDlgButton                                                0x3A165962u
#define USER32_CheckMenuItem                                                 0x8311AEA2u
#define USER32_CheckMenuRadioItem                                            0x78DF82A1u
#define USER32_CheckRadioButton                                              0xB95337BEu
#define USER32_CheckWindowThreadDesktop                                      0xB55F1AF2u
#define USER32_ChildWindowFromPoint                                          0xCBE901BBu
#define USER32_ChildWindowFromPointEx                                        0xEF27047Eu
#define USER32_CliImmSetHotKey                                               0x8FA59059u
#define USER32_ClientThreadSetup                                             0x0A1F680Cu
#define USER32_ClientToScreen                                                0xFFD32A59u
#define USER32_ClipCursor                                                    0x8B21B5F6u
#define USER32_CloseClipboard                                                0x2EA373CCu
#define USER32_CloseDesktop                                                  0xF2ED2788u
#define USER32_CloseGestureInfoHandle                                        0x749F3980u
#define USER32_CloseTouchInputHandle                                         0x4E50964Bu
#define USER32_CloseWindow                                                   0x0304F9D7u
#define USER32_CloseWindowStation                                            0x1A113D49u
#define USER32_ConsoleControl                                                0x1B2AF17Au
#define USER32_ControlMagnification                                          0xB5C215AFu
#define USER32_CopyAcceleratorTableA                                         0x0D12E902u
#define USER32_CopyAcceleratorTableW                                         0x0D12E914u
#define USER32_CopyIcon                                                      0x9386040Du
#define USER32_CopyImage                                                     0xF8809515u
#define USER32_CopyRect                                                      0x8B878997u
#define USER32_CountClipboardFormats                                         0x43DB45B1u
#define USER32_CreateAcceleratorTableA                                       0x4AF6FB71u
#define USER32_CreateAcceleratorTableW                                       0x4AF6FB67u
#define USER32_CreateCaret                                                   0xCA61F430u
#define USER32_CreateCursor                                                  0x67C5793Eu
#define USER32_CreateDesktopA                                                0xB4151827u
#define USER32_CreateDesktopExA                                              0x8EDF5421u
#define USER32_CreateDesktopExW                                              0x8EDF5437u
#define USER32_CreateDesktopW                                                0xB4151831u
#define USER32_CreateDialogIndirectParamA                                    0x5D34EE1Du
#define USER32_CreateDialogIndirectParamAorW                                 0x26794EF8u
#define USER32_CreateDialogIndirectParamW                                    0x5D34EE0Bu
#define USER32_CreateDialogParamA                                            0xDE34DF61u
#define USER32_CreateDialogParamW                                            0xDE34DF77u
#define USER32_CreateIcon                                                    0xAA25F604u
#define USER32_CreateIconFromResource                                        0x198429A8u
#define USER32_CreateIconFromResourceEx                                      0xA06EB0DEu
#define USER32_CreateIconIndirect                                            0xFF71DD15u
#define USER32_CreateMDIWindowA                                              0xF7E19F1Au
#define USER32_CreateMDIWindowW                                              0xF7E19F0Cu
#define USER32_CreateMenu                                                    0xB225D41Fu
#define USER32_CreatePopupMenu                                               0xA741D3CBu
#define USER32_CreateSystemThreads                                           0x88E193EEu
#define USER32_CreateWindowExA                                               0x16B489DDu
#define USER32_CreateWindowExW                                               0x16B489CBu
#define USER32_CreateWindowStationA                                          0x2627E73Au
#define USER32_CreateWindowStationW                                          0x2627E72Cu
#define USER32_CsrBroadcastSystemMessageExW                                  0x8F49EE08u
#define USER32_CtxInitUser32                                                 0xBE313DFEu
#define USER32_DdeAbandonTransaction                                         0x25B521B8u
#define USER32_DdeAccessData                                                 0xD3358015u
#define USER32_DdeAddData                                                    0xA2DE86ABu
#define USER32_DdeClientTransaction                                          0xA4592394u
#define USER32_DdeCmpStringHandles                                           0x28C00F6Au
#define USER32_DdeConnect                                                    0xB27CF3A8u
#define USER32_DdeConnectList                                                0x9E8561BAu
#define USER32_DdeCreateDataHandle                                           0xB25B4F71u
#define USER32_DdeCreateStringHandleA                                        0xDC883E0Au
#define USER32_DdeCreateStringHandleW                                        0xDC883E1Cu
#define USER32_DdeDisconnect                                                 0x4246FF38u
#define USER32_DdeDisconnectList                                             0x578A621Au
#define USER32_DdeEnableCallback                                             0x6E607C1Eu
#define USER32_DdeFreeDataHandle                                             0x07B39844u
#define USER32_DdeFreeStringHandle                                           0x2489471Du
#define USER32_DdeGetData                                                    0xA3DF06A9u
#define USER32_DdeGetLastError                                               0x8BE21C0Au
#define USER32_DdeGetQualityOfService                                        0xD3118FBFu
#define USER32_DdeImpersonateClient                                          0x81650DAFu
#define USER32_DdeInitializeA                                                0x0324B423u
#define USER32_DdeInitializeW                                                0x0324B435u
#define USER32_DdeKeepStringHandle                                           0x71494774u
#define USER32_DdeNameService                                                0xC72AFF93u
#define USER32_DdePostAdvise                                                 0x70613575u
#define USER32_DdeQueryConvInfo                                              0xA00D1481u
#define USER32_DdeQueryNextServer                                            0xD39C1414u
#define USER32_DdeQueryStringA                                               0x3AB02FF9u
#define USER32_DdeQueryStringW                                               0x3AB02FEFu
#define USER32_DdeReconnect                                                  0xB676C438u
#define USER32_DdeSetQualityOfService                                        0xD311DFBFu
#define USER32_DdeSetUserHandle                                              0x9D930D02u
#define USER32_DdeUnaccessData                                               0xD62DC83Bu
#define USER32_DdeUninitialize                                               0xA608510Bu
#define USER32_DefDlgProcA                                                   0x95B73E9Cu
#define USER32_DefDlgProcW                                                   0x95B73E8Au
#define USER32_DefFrameProcA                                                 0xF9E5EA15u
#define USER32_DefFrameProcW                                                 0xF9E5EA03u
#define USER32_DefMDIChildProcA                                              0x3015FE8Bu
#define USER32_DefMDIChildProcW                                              0x3015FE9Du
#define USER32_DefRawInputProc                                               0xC0984A09u
#define USER32_DefWindowProcA                                                0xC4047EF7u
#define USER32_DefWindowProcW                                                0xC4047EE1u
#define USER32_DeferWindowPos                                                0x509585ABu
#define USER32_DeleteMenu                                                    0xFAC4C31Fu
#define USER32_DeregisterShellHookWindow                                     0xD35C489Fu
#define USER32_DestroyAcceleratorTable                                       0xB1521BB5u
#define USER32_DestroyCaret                                                  0x52652590u
#define USER32_DestroyCursor                                                 0xFDF16A3Eu
#define USER32_DestroyIcon                                                   0x27213622u
#define USER32_DestroyMenu                                                   0x3F211439u
#define USER32_DestroyReasons                                                0x2C701FEDu
#define USER32_DestroyWindow                                                 0xA0316413u
#define USER32_DeviceEventWorker                                             0xF9D7ACE4u
#define USER32_DialogBoxIndirectParamA                                       0xBCE3D634u
#define USER32_DialogBoxIndirectParamAorW                                    0xCDE55A08u
#define USER32_DialogBoxIndirectParamW                                       0xBCE3D622u
#define USER32_DialogBoxParamA                                               0xF7D50859u
#define USER32_DialogBoxParamW                                               0xF7D5084Fu
#define USER32_DisableProcessWindowsGhosting                                 0x54ACFEB9u
#define USER32_DispatchMessageA                                              0xE535DDD3u
#define USER32_DispatchMessageW                                              0xE535DDC5u
#define USER32_DisplayConfigGetDeviceInfo                                    0xD980174Eu
#define USER32_DisplayConfigSetDeviceInfo                                    0x9980174Fu
#define USER32_DisplayExitWindowsWarnings                                    0xA8D5B58Du
#define USER32_DlgDirListA                                                   0xE5549236u
#define USER32_DlgDirListComboBoxA                                           0x96765562u
#define USER32_DlgDirListComboBoxW                                           0x96765574u
#define USER32_DlgDirListW                                                   0xE5549220u
#define USER32_DlgDirSelectComboBoxExA                                       0x46B4FB8Au
#define USER32_DlgDirSelectComboBoxExW                                       0x46B4FB9Cu
#define USER32_DlgDirSelectExA                                               0x5546B02Bu
#define USER32_DlgDirSelectExW                                               0x5546B03Du
#define USER32_DoSoundConnect                                                0x4C75F012u
#define USER32_DoSoundDisconnect                                             0x46C72247u
#define USER32_DragDetect                                                    0x92C5E8FEu
#define USER32_DragObject                                                    0x92B5E7E8u
#define USER32_DrawAnimatedRects                                             0x2CA47F09u
#define USER32_DrawCaption                                                   0x155D7ABEu
#define USER32_DrawCaptionTempA                                              0x9BF4C7BCu
#define USER32_DrawCaptionTempW                                              0x9BF4C7AAu
#define USER32_DrawEdge                                                      0xB7604224u
#define USER32_DrawFocusRect                                                 0xA5FDCE1Cu
#define USER32_DrawFrame                                                     0x10759D89u
#define USER32_DrawFrameControl                                              0x867EB65Fu
#define USER32_DrawIcon                                                      0xAB61442Fu
#define USER32_DrawIconEx                                                    0xBEA52568u
#define USER32_DrawMenuBar                                                   0xB8BF3A2Au
#define USER32_DrawMenuBarTemp                                               0x36A60182u
#define USER32_DrawStateA                                                    0xD7D12265u
#define USER32_DrawStateW                                                    0xD7D12273u
#define USER32_DrawTextA                                                     0x7556B62Du
#define USER32_DrawTextExA                                                   0xA5DA5A99u
#define USER32_DrawTextExW                                                   0xA5DA5A8Fu
#define USER32_DrawTextW                                                     0x7556B63Bu
#define USER32_DwmGetDxSharedSurface                                         0x57A8B4E4u
#define USER32_DwmStartRedirection                                           0x3BD7EF7Fu
#define USER32_DwmStopRedirection                                            0x820ED488u
#define USER32_EditWndProc                                                   0x62D860A9u
#define USER32_EmptyClipboard                                                0x3D2CFFD0u
#define USER32_EnableMenuItem                                                0x52F5AABCu
#define USER32_EnableScrollBar                                               0x1B011818u
#define USER32_EnableWindow                                                  0xFA867463u
#define USER32_EndDeferWindowPos                                             0x49D086DBu
#define USER32_EndDialog                                                     0xC684956Du
#define USER32_EndMenu                                                       0x925CA628u
#define USER32_EndPaint                                                      0x8916703Fu
#define USER32_EndTask                                                       0x825F0AB6u
#define USER32_EnterReaderModeHelper                                         0x21E42CE2u
#define USER32_EnumChildWindows                                              0x5C7A172Du
#define USER32_EnumClipboardFormats                                          0x36C22D82u
#define USER32_EnumDesktopWindows                                            0xDF6C77A9u
#define USER32_EnumDesktopsA                                                 0xB2C5D2C5u
#define USER32_EnumDesktopsW                                                 0xB2C5D2D3u
#define USER32_EnumDisplayDevicesA                                           0x5FEBACFCu
#define USER32_EnumDisplayDevicesW                                           0x5FEBACEAu
#define USER32_EnumDisplayMonitors                                           0x3FE9077Eu
#define USER32_EnumDisplaySettingsA                                          0x25395906u
#define USER32_EnumDisplaySettingsExA                                        0x089BE525u
#define USER32_EnumDisplaySettingsExW                                        0x089BE533u
#define USER32_EnumDisplaySettingsW                                          0x25395910u
#define USER32_EnumPropsA                                                    0x67957963u
#define USER32_EnumPropsExA                                                  0x9D9155A4u
#define USER32_EnumPropsExW                                                  0x9D9155B2u
#define USER32_EnumPropsW                                                    0x67957975u
#define USER32_EnumThreadWindows                                             0xCB6AAB1Eu
#define USER32_EnumWindowStationsA                                           0x25E080F4u
#define USER32_EnumWindowStationsW                                           0x25E080E2u
#define USER32_EnumWindows                                                   0xDF3B66B7u
#define USER32_EqualRect                                                     0x1AD14CB4u
#define USER32_ExcludeUpdateRgn                                              0x1DCFC290u
#define USER32_ExitWindowsEx                                                 0xDC5F4D92u
#define USER32_FillRect                                                      0xA2D609AFu
#define USER32_FindWindowA                                                   0x97DB7D89u
#define USER32_FindWindowExA                                                 0x36506DB7u
#define USER32_FindWindowExW                                                 0x36506DA1u
#define USER32_FindWindowW                                                   0x97DB7D9Fu
#define USER32_FlashWindow                                                   0x0307B7C3u
#define USER32_FlashWindowEx                                                 0x0C04BEA7u
#define USER32_FrameRect                                                     0x02444FACu
#define USER32_FreeDDElParam                                                 0x818415A6u
#define USER32_FrostCrashedWindow                                            0x5C6F552Bu
#define USER32_GetActiveWindow                                               0x79E4B550u
#define USER32_GetAltTabInfo                                                 0x662B09FBu
#define USER32_GetAltTabInfoA                                                0x613F6C84u
#define USER32_GetAltTabInfoW                                                0x613F6C92u
#define USER32_GetAncestor                                                   0xD2E62C2Bu
#define USER32_GetAppCompatFlags                                             0x10EB7BBAu
#define USER32_GetAppCompatFlags2                                            0x6F77422Fu
#define USER32_GetAsyncKeyState                                              0xDD9EF24Cu
#define USER32_GetCapture                                                    0x7BFEDFA5u
#define USER32_GetCaretBlinkTime                                             0xC1590C01u
#define USER32_GetCaretPos                                                   0x52E5EF88u
#define USER32_GetClassInfoA                                                 0xECD3FA71u
#define USER32_GetClassInfoExA                                               0xD7BC4FA8u
#define USER32_GetClassInfoExW                                               0xD7BC4FBEu
#define USER32_GetClassInfoW                                                 0xECD3FA67u
#define USER32_GetClassLongA                                                 0xCC82FAF1u
#define USER32_GetClassLongW                                                 0xCC82FAE7u
#define USER32_GetClassNameA                                                 0xC0A2BDF1u
#define USER32_GetClassNameW                                                 0xC0A2BDE7u
#define USER32_GetClassWord                                                  0xD585E994u
#define USER32_GetClientRect                                                 0xA307E47Eu
#define USER32_GetClipCursor                                                 0xFB133422u
#define USER32_GetClipboardData                                              0xDD206B1Fu
#define USER32_GetClipboardFormatNameA                                       0x2FDDD578u
#define USER32_GetClipboardFormatNameW                                       0x2FDDD56Eu
#define USER32_GetClipboardOwner                                             0x65D370D6u
#define USER32_GetClipboardSequenceNumber                                    0xAF66BA43u
#define USER32_GetClipboardViewer                                            0x27F8297Au
#define USER32_GetComboBoxInfo                                               0x9BDD4D88u
#define USER32_GetCursor                                                     0xE3409EF6u
#define USER32_GetCursorFrameInfo                                            0xF0988A24u
#define USER32_GetCursorInfo                                                 0x5762D0E7u
#define USER32_GetCursorPos                                                  0xE0429B03u
#define USER32_GetDC                                                         0xD478B2C2u
#define USER32_GetDCEx                                                       0x0B5942B3u
#define USER32_GetDesktopWindow                                              0xBA93C82Bu
#define USER32_GetDialogBaseUnits                                            0x44F1E5A9u
#define USER32_GetDisplayConfigBufferSizes                                   0x7B8C53D6u
#define USER32_GetDlgCtrlID                                                  0xD9F31C54u
#define USER32_GetDlgItem                                                    0x7E8DE137u
#define USER32_GetDlgItemInt                                                 0x62FD5BCAu
#define USER32_GetDlgItemTextA                                               0x185570AEu
#define USER32_GetDlgItemTextW                                               0x185570B8u
#define USER32_GetDoubleClickTime                                            0x6F5355BEu
#define USER32_GetFocus                                                      0xB077D718u
#define USER32_GetForegroundWindow                                           0x00E2D929u
#define USER32_GetGUIThreadInfo                                              0x4DBFA737u
#define USER32_GetGestureConfig                                              0x69164913u
#define USER32_GetGestureExtraArgs                                           0xFBAEFCEEu
#define USER32_GetGestureInfo                                                0x42DB5813u
#define USER32_GetGuiResources                                               0xFF83407Cu
#define USER32_GetIconInfo                                                   0xFA54512Eu
#define USER32_GetIconInfoExA                                                0x3E27973Du
#define USER32_GetIconInfoExW                                                0x3E27972Bu
#define USER32_GetInputDesktop                                               0x28C8EB87u
#define USER32_GetInputLocaleInfo                                            0x5DDB954Au
#define USER32_GetInputState                                                 0x7831155Bu
#define USER32_GetInternalWindowPos                                          0x9D9950C4u
#define USER32_GetKBCodePage                                                 0xE315CB7Au
#define USER32_GetKeyNameTextA                                               0xB390F79Au
#define USER32_GetKeyNameTextW                                               0xB390F78Cu
#define USER32_GetKeyState                                                   0xD5878F88u
#define USER32_GetKeyboardLayout                                             0x6A9CE9C8u
#define USER32_GetKeyboardLayoutList                                         0x3888EFBBu
#define USER32_GetKeyboardLayoutNameA                                        0x65D54350u
#define USER32_GetKeyboardLayoutNameW                                        0x65D54346u
#define USER32_GetKeyboardState                                              0x2C103E77u
#define USER32_GetKeyboardType                                               0xC4934310u
#define USER32_GetLastActivePopup                                            0x422CA393u
#define USER32_GetLastInputInfo                                              0x18A0C6F7u
#define USER32_GetLayeredWindowAttributes                                    0xD343562Eu
#define USER32_GetListBoxInfo                                                0x42869805u
#define USER32_GetMagnificationDesktopColorEffect                            0x536D7C3Cu
#define USER32_GetMagnificationDesktopMagnification                          0x7D248539u
#define USER32_GetMagnificationLensCtxInformation                            0xD53891B6u
#define USER32_GetMenu                                                       0x935C263Eu
#define USER32_GetMenuBarInfo                                                0x4BA6851Du
#define USER32_GetMenuCheckMarkDimensions                                    0xCE70E781u
#define USER32_GetMenuContextHelpId                                          0x80BF8F6Cu
#define USER32_GetMenuDefaultItem                                            0xC0EEEA89u
#define USER32_GetMenuInfo                                                   0xDBE5D12Cu
#define USER32_GetMenuItemCount                                              0xB7F695A8u
#define USER32_GetMenuItemID                                                 0xBAC6B680u
#define USER32_GetMenuItemInfoA                                              0xFB56B51Du
#define USER32_GetMenuItemInfoW                                              0xFB56B50Bu
#define USER32_GetMenuItemRect                                               0x86E7772Eu
#define USER32_GetMenuState                                                  0xA786F619u
#define USER32_GetMenuStringA                                                0x4BA2F519u
#define USER32_GetMenuStringW                                                0x4BA2F50Fu
#define USER32_GetMessageA                                                   0xFF85A538u
#define USER32_GetMessageExtraInfo                                           0xFBA4D8F6u
#define USER32_GetMessagePos                                                 0xA7F3F6E7u
#define USER32_GetMessageTime                                                0x66DF369Bu
#define USER32_GetMessageW                                                   0xFF85A52Eu
#define USER32_GetMonitorInfoA                                               0x60A0351Cu
#define USER32_GetMonitorInfoW                                               0x60A0350Au
#define USER32_GetMouseMovePointsEx                                          0xAA99CF65u
#define USER32_GetNextDlgGroupItem                                           0xB2E0ECCEu
#define USER32_GetNextDlgTabItem                                             0xABC276D3u
#define USER32_GetOpenClipboardWindow                                        0xB176567Bu
#define USER32_GetParent                                                     0xBA00BED6u
#define USER32_GetPhysicalCursorPos                                          0xCEC1EA5Bu
#define USER32_GetPriorityClipboardFormat                                    0xDDEFC4D5u
#define USER32_GetProcessDefaultLayout                                       0x82794286u
#define USER32_GetProcessWindowStation                                       0x72D5DE4Du
#define USER32_GetProgmanWindow                                              0x8B1FD15Au
#define USER32_GetPropA                                                      0x811779AAu
#define USER32_GetPropW                                                      0x811779BCu
#define USER32_GetQueueStatus                                                0x21CD3A15u
#define USER32_GetRawInputBuffer                                             0x37FDC5FEu
#define USER32_GetRawInputData                                               0xAC5B200Au
#define USER32_GetRawInputDeviceInfoA                                        0x8967CC8Au
#define USER32_GetRawInputDeviceInfoW                                        0x8967CC9Cu
#define USER32_GetRawInputDeviceList                                         0x7A5EE9A5u
#define USER32_GetReasonTitleFromReasonCode                                  0x05C37AACu
#define USER32_GetRegisteredRawInputDevices                                  0x28F81420u
#define USER32_GetScrollBarInfo                                              0xFBAD63DAu
#define USER32_GetScrollInfo                                                 0x5485C6E1u
#define USER32_GetScrollPos                                                  0x5072843Bu
#define USER32_GetScrollRange                                                0x996D2D75u
#define USER32_GetSendMessageReceiver                                        0xFB3DB3C8u
#define USER32_GetShellWindow                                                0xABBC3D91u
#define USER32_GetSubMenu                                                    0x3AD9431Du
#define USER32_GetSysColor                                                   0x2083E20Bu
#define USER32_GetSysColorBrush                                              0x91299D7Fu
#define USER32_GetSystemMenu                                                 0x70921EE9u
#define USER32_GetSystemMetrics                                              0xECA3174Au
#define USER32_GetTabbedTextExtentA                                          0xF898D863u
#define USER32_GetTabbedTextExtentW                                          0xF898D875u
#define USER32_GetTaskmanWindow                                              0xCA96512Au
#define USER32_GetThreadDesktop                                              0xA2F85FCDu
#define USER32_GetTitleBarInfo                                               0xC856C38Cu
#define USER32_GetTopLevelWindow                                             0x5F590BC5u
#define USER32_GetTopWindow                                                  0xE022024Fu
#define USER32_GetTouchInputInfo                                             0x2F2D87A5u
#define USER32_GetUpdateRect                                                 0xC8D6F84Au
#define USER32_GetUpdateRgn                                                  0xC1F606BAu
#define USER32_GetUpdatedClipboardFormats                                    0x0128EB35u
#define USER32_GetUserObjectInformationA                                     0xEBB878CAu
#define USER32_GetUserObjectInformationW                                     0xEBB878DCu
#define USER32_GetUserObjectSecurity                                         0x9960C57Cu
#define USER32_GetWinStationInfo                                             0x9D066951u
#define USER32_GetWindow                                                     0xBE8090DBu
#define USER32_GetWindowCompositionAttribute                                 0x4A4F11F6u
#define USER32_GetWindowCompositionInfo                                      0x246A9454u
#define USER32_GetWindowContextHelpId                                        0x39D24537u
#define USER32_GetWindowDC                                                   0x6EF28200u
#define USER32_GetWindowDisplayAffinity                                      0x739B1BDCu
#define USER32_GetWindowInfo                                                 0xB5B70CE7u
#define USER32_GetWindowLongA                                                0xC1CDF677u
#define USER32_GetWindowLongW                                                0xC1CDF661u
#define USER32_GetWindowMinimizeRect                                         0x4C48E82Bu
#define USER32_GetWindowModuleFileName                                       0x791A9948u
#define USER32_GetWindowModuleFileNameA                                      0x53290F62u
#define USER32_GetWindowModuleFileNameW                                      0x53290F74u
#define USER32_GetWindowPlacement                                            0xE9323622u
#define USER32_GetWindowRect                                                 0x99B7A17Cu
#define USER32_GetWindowRgn                                                  0x08448DB0u
#define USER32_GetWindowRgnBox                                               0x2A4B387Du
#define USER32_GetWindowRgnEx                                                0xC029B24Eu
#define USER32_GetWindowTextA                                                0x984F9377u
#define USER32_GetWindowTextLengthA                                          0x32339519u
#define USER32_GetWindowTextLengthW                                          0x3233950Fu
#define USER32_GetWindowTextW                                                0x984F9361u
#define USER32_GetWindowThreadProcessId                                      0x97F45E7Eu
#define USER32_GetWindowWord                                                 0xB1B583ECu
#define USER32_GhostWindowFromHungWindow                                     0xBE738F46u
#define USER32_GrayStringA                                                   0x79787437u
#define USER32_GrayStringW                                                   0x79787421u
#define USER32_HideCaret                                                     0x8425D83Cu
#define USER32_HiliteMenuItem                                                0x21F33090u
#define USER32_HungWindowFromGhostWindow                                     0x9E15CB1Eu
#define USER32_IMPGetIMEA                                                    0xBA790908u
#define USER32_IMPGetIMEW                                                    0xBA79091Eu
#define USER32_IMPQueryIMEA                                                  0x91A51413u
#define USER32_IMPQueryIMEW                                                  0x91A51405u
#define USER32_IMPSetIMEA                                                    0xBA7C0908u
#define USER32_IMPSetIMEW                                                    0xBA7C091Eu
#define USER32_ImpersonateDdeClientWindow                                    0x9093CE40u
#define USER32_InSendMessage                                                 0x3FB8F665u
#define USER32_InSendMessageEx                                               0x94F643A1u
#define USER32_InflateRect                                                   0xFF846EBAu
#define USER32_InitializeLpkHooks                                            0xFA89E2C5u
#define USER32_InsertMenuA                                                   0x9902600Fu
#define USER32_InsertMenuItemA                                               0x94740A66u
#define USER32_InsertMenuItemW                                               0x94740A70u
#define USER32_InsertMenuW                                                   0x99026019u
#define USER32_InternalGetWindowIcon                                         0x0E85230Au
#define USER32_InternalGetWindowText                                         0x1687CD90u
#define USER32_IntersectRect                                                 0x97C27A64u
#define USER32_InvalidateRect                                                0x5FFFF31Cu
#define USER32_InvalidateRgn                                                 0x9B42BFF2u
#define USER32_InvertRect                                                    0x2A756792u
#define USER32_IsCharAlphaA                                                  0xA694710Du
#define USER32_IsCharAlphaNumericA                                           0xB775BA12u
#define USER32_IsCharAlphaNumericW                                           0xB775BA04u
#define USER32_IsCharAlphaW                                                  0xA694711Bu
#define USER32_IsCharLowerA                                                  0x92A61297u
#define USER32_IsCharLowerW                                                  0x92A61281u
#define USER32_IsCharUpperA                                                  0x93561125u
#define USER32_IsCharUpperW                                                  0x93561133u
#define USER32_IsChild                                                       0xA02FF483u
#define USER32_IsClipboardFormatAvailable                                    0x634047A1u
#define USER32_IsDialogMessage                                               0xE4DB91ADu
#define USER32_IsDialogMessageA                                              0x7235BCDAu
#define USER32_IsDialogMessageW                                              0x7235BCCCu
#define USER32_IsDlgButtonChecked                                            0xCF8573CBu
#define USER32_IsGUIThread                                                   0x34FE1FEBu
#define USER32_IsHungAppWindow                                               0x881BF167u
#define USER32_IsIconic                                                      0xF621D772u
#define USER32_IsMenu                                                        0x933DE666u
#define USER32_IsProcessDPIAware                                             0x4A126E7Eu
#define USER32_IsRectEmpty                                                   0xE2262537u
#define USER32_IsSETEnabled                                                  0x1C491577u
#define USER32_IsServerSideWindow                                            0xE5E59985u
#define USER32_IsThreadDesktopComposited                                     0x10A1B4EEu
#define USER32_IsTopLevelWindow                                              0x5EDE0AA5u
#define USER32_IsTouchWindow                                                 0x135E238Fu
#define USER32_IsWinEventHookInstalled                                       0x84C6C874u
#define USER32_IsWindow                                                      0xDE8117DAu
#define USER32_IsWindowEnabled                                               0x60F9D907u
#define USER32_IsWindowInDestroy                                             0x44774393u
#define USER32_IsWindowRedirectedForPrint                                    0x93FD5015u
#define USER32_IsWindowUnicode                                               0x6C7DF986u
#define USER32_IsWindowVisible                                               0x59DC3C88u
#define USER32_IsWow64Message                                                0x1DE4BC94u
#define USER32_IsZoomed                                                      0xFAE05753u
#define USER32_KillTimer                                                     0xF957DF28u
#define USER32_LoadAcceleratorsA                                             0xE3CFF1F1u
#define USER32_LoadAcceleratorsW                                             0xE3CFF1E7u
#define USER32_LoadBitmapA                                                   0xAEBED621u
#define USER32_LoadBitmapW                                                   0xAEBED637u
#define USER32_LoadCursorA                                                   0x96DED919u
#define USER32_LoadCursorFromFileA                                           0xFAAE4A8Fu
#define USER32_LoadCursorFromFileW                                           0xFAAE4A99u
#define USER32_LoadCursorW                                                   0x96DED90Fu
#define USER32_LoadIconA                                                     0xC085FD0Bu
#define USER32_LoadIconW                                                     0xC085FD1Du
#define USER32_LoadImageA                                                    0x9B45FF51u
#define USER32_LoadImageW                                                    0x9B45FF47u
#define USER32_LoadKeyboardLayoutA                                           0x9D3C3D97u
#define USER32_LoadKeyboardLayoutEx                                          0x87B273DFu
#define USER32_LoadKeyboardLayoutW                                           0x9D3C3D81u
#define USER32_LoadLocalFonts                                                0x5DC681BFu
#define USER32_LoadMenuA                                                     0xC4C69E0Bu
#define USER32_LoadMenuIndirectA                                             0x3DA9B1D5u
#define USER32_LoadMenuIndirectW                                             0x3DA9B1C3u
#define USER32_LoadMenuW                                                     0xC4C69E1Du
#define USER32_LoadRemoteFonts                                               0xCBE10575u
#define USER32_LoadStringA                                                   0x92D8741Bu
#define USER32_LoadStringW                                                   0x92D8740Du
#define USER32_LockSetForegroundWindow                                       0x35BC8F0Au
#define USER32_LockWindowStation                                             0x7E312141u
#define USER32_LockWindowUpdate                                              0x5D38530Fu
#define USER32_LockWorkStation                                               0xD4DC37DEu
#define USER32_LogicalToPhysicalPoint                                        0xF139A053u
#define USER32_LookupIconIdFromDirectory                                     0x59402F3Eu
#define USER32_LookupIconIdFromDirectoryEx                                   0xF96DA0C4u
#define USER32_MBToWCSEx                                                     0x596DCC25u
#define USER32_MB_GetString                                                  0x80963FCBu
#define USER32_MapDialogRect                                                 0x42D7A16Cu
#define USER32_MapVirtualKeyA                                                0x2FCAAC5Fu
#define USER32_MapVirtualKeyExA                                              0x6CB02AF0u
#define USER32_MapVirtualKeyExW                                              0x6CB02AE6u
#define USER32_MapVirtualKeyW                                                0x2FCAAC49u
#define USER32_MapWindowPoints                                               0xD84853F2u
#define USER32_MenuItemFromPoint                                             0xB7419994u
#define USER32_MenuWindowProcA                                               0x674DBCF7u
#define USER32_MenuWindowProcW                                               0x674DBCE1u
#define USER32_MessageBeep                                                   0x06E4B388u
#define USER32_MessageBoxA                                                   0x2EE713B9u
#define USER32_MessageBoxExA                                                 0xF4B49C0Fu
#define USER32_MessageBoxExW                                                 0xF4B49C19u
#define USER32_MessageBoxIndirectA                                           0x1C24033Fu
#define USER32_MessageBoxIndirectW                                           0x1C240329u
#define USER32_MessageBoxTimeoutA                                            0xB333CF87u
#define USER32_MessageBoxTimeoutW                                            0xB333CF91u
#define USER32_MessageBoxW                                                   0x2EE713AFu
#define USER32_ModifyMenuA                                                   0xF9277705u
#define USER32_ModifyMenuW                                                   0xF9277713u
#define USER32_MonitorFromPoint                                              0xB4ACAEFEu
#define USER32_MonitorFromRect                                               0x5C54E47Fu
#define USER32_MonitorFromWindow                                             0xBDBCB56Cu
#define USER32_MoveWindow                                                    0x2F24F8DBu
#define USER32_MsgWaitForMultipleObjects                                     0x0684B806u
#define USER32_MsgWaitForMultipleObjectsEx                                   0x1812B298u
#define USER32_NotifyOverlayWindow                                           0x990D330Eu
#define USER32_NotifyWinEvent                                                0xD4BD5F09u
#define USER32_OemKeyScan                                                    0xEA6EAC26u
#define USER32_OemToCharA                                                    0xE1CB119Du
#define USER32_OemToCharBuffA                                                0x81E2E671u
#define USER32_OemToCharBuffW                                                0x81E2E667u
#define USER32_OemToCharW                                                    0xE1CB118Bu
#define USER32_OffsetRect                                                    0xAAB0EFBCu
#define USER32_OpenClipboard                                                 0x1FCC7596u
#define USER32_OpenDesktopA                                                  0x96209564u
#define USER32_OpenDesktopW                                                  0x96209572u
#define USER32_OpenIcon                                                      0xF2F1C427u
#define USER32_OpenInputDesktop                                              0x8508E9FEu
#define USER32_OpenThreadDesktop                                             0xA2B76A75u
#define USER32_OpenWindowStationA                                            0x45772FB7u
#define USER32_OpenWindowStationW                                            0x45772FA1u
#define USER32_PackDDElParam                                                 0xE04D95BFu
#define USER32_PaintDesktop                                                  0x7A24BABCu
#define USER32_PaintMenuBar                                                  0xA3F735BEu
#define USER32_PaintMonitor                                                  0x7BF6FBAAu
#define USER32_PeekMessageA                                                  0xFFADBAB0u
#define USER32_PeekMessageW                                                  0xFFADBAA6u
#define USER32_PhysicalToLogicalPoint                                        0x4291BE11u
#define USER32_PostMessageA                                                  0xFD6DA598u
#define USER32_PostMessageW                                                  0xFD6DA58Eu
#define USER32_PostQuitMessage                                               0x09B52F6Eu
#define USER32_PostThreadMessageA                                            0x62531E24u
#define USER32_PostThreadMessageW                                            0x62531E32u
#define USER32_PrintWindow                                                   0xE8C0BF9Bu
#define USER32_PrivateExtractIconExA                                         0xDED73DE4u
#define USER32_PrivateExtractIconExW                                         0xDED73DF2u
#define USER32_PrivateExtractIconsA                                          0xED283680u
#define USER32_PrivateExtractIconsW                                          0xED283696u
#define USER32_PrivateRegisterICSProc                                        0x234E7A29u
#define USER32_PtInRect                                                      0x12F149E5u
#define USER32_QueryDisplayConfig                                            0xE4224B09u
#define USER32_QuerySendMessage                                              0x92F3BEEEu
#define USER32_RealChildWindowFromPoint                                      0x8B299762u
#define USER32_RealGetWindowClass                                            0xA65A74C7u
#define USER32_RealGetWindowClassA                                           0x4E98F48Au
#define USER32_RealGetWindowClassW                                           0x4E98F49Cu
#define USER32_ReasonCodeNeedsBugID                                          0x5B306FC6u
#define USER32_ReasonCodeNeedsComment                                        0x9DC153FFu
#define USER32_RecordShutdownReason                                          0xAE928F02u
#define USER32_RedrawWindow                                                  0x9229644Fu
#define USER32_RegisterClassA                                                0xBC8181E7u
#define USER32_RegisterClassExA                                              0x8EFD0646u
#define USER32_RegisterClassExW                                              0x8EFD0650u
#define USER32_RegisterClassW                                                0xBC8181F1u
#define USER32_RegisterClipboardFormatA                                      0x6D11D33Bu
#define USER32_RegisterClipboardFormatW                                      0x6D11D32Du
#define USER32_RegisterDeviceNotificationA                                   0x3956487Du
#define USER32_RegisterDeviceNotificationW                                   0x3956486Bu
#define USER32_RegisterErrorReportingDialog                                  0xD6006AC8u
#define USER32_RegisterFrostWindow                                           0xEC5F1A81u
#define USER32_RegisterGhostWindow                                           0xEF1F1A85u
#define USER32_RegisterHotKey                                                0x5CB34B49u
#define USER32_RegisterLogonProcess                                          0x1A44623Au
#define USER32_RegisterMessagePumpHook                                       0x20A763CBu
#define USER32_RegisterPowerSettingNotification                              0x903F622Eu
#define USER32_RegisterRawInputDevices                                       0x75F76B7Eu
#define USER32_RegisterServicesProcess                                       0x065F364Cu
#define USER32_RegisterSessionPort                                           0xC2CBF9A6u
#define USER32_RegisterShellHookWindow                                       0x975F6097u
#define USER32_RegisterSystemThread                                          0x40B6F1B9u
#define USER32_RegisterTasklist                                              0x877F29D7u
#define USER32_RegisterTouchWindow                                           0x6FF800C9u
#define USER32_RegisterUserApiHook                                           0xC872439Fu
#define USER32_RegisterWindowMessageA                                        0x2123A9C4u
#define USER32_RegisterWindowMessageW                                        0x2123A9D2u
#define USER32_ReleaseCapture                                                0xA7086C37u
#define USER32_ReleaseDC                                                     0xBA03EB0Bu
#define USER32_RemoveClipboardFormatListener                                 0xD545A36Au
#define USER32_RemoveMenu                                                    0xF006431Bu
#define USER32_RemovePropA                                                   0xCDB3D5C1u
#define USER32_RemovePropW                                                   0xCDB3D5D7u
#define USER32_ReplyMessage                                                  0x4506F4B9u
#define USER32_ResolveDesktopForWOW                                          0x3B59717Fu
#define USER32_ReuseDDElParam                                                0xB18731FCu
#define USER32_ScreenToClient                                                0x0E4FFDE3u
#define USER32_ScrollChildren                                                0xEB6F5905u
#define USER32_ScrollDC                                                      0x2EE076A4u
#define USER32_ScrollWindow                                                  0xF8EF3957u
#define USER32_ScrollWindowEx                                                0x5FEB1C9Du
#define USER32_SendDlgItemMessageA                                           0x3ECEABDEu
#define USER32_SendDlgItemMessageW                                           0x3ECEABC8u
#define USER32_SendIMEMessageExA                                             0x0836DD39u
#define USER32_SendIMEMessageExW                                             0x0836DD2Fu
#define USER32_SendInput                                                     0xEC8544BEu
#define USER32_SendMessageA                                                  0xFECC35B0u
#define USER32_SendMessageCallbackA                                          0x4E03E2E5u
#define USER32_SendMessageCallbackW                                          0x4E03E2F3u
#define USER32_SendMessageTimeoutA                                           0xFDB296B7u
#define USER32_SendMessageTimeoutW                                           0xFDB296A1u
#define USER32_SendMessageW                                                  0xFECC35A6u
#define USER32_SendNotifyMessageA                                            0x76BA37FCu
#define USER32_SendNotifyMessageW                                            0x76BA37EAu
#define USER32_SetActiveWindow                                               0x7CE4B550u
#define USER32_SetCapture                                                    0x797EDFA5u
#define USER32_SetCaretBlinkTime                                             0xC14D0C01u
#define USER32_SetCaretPos                                                   0x52E5EFD8u
#define USER32_SetClassLongA                                                 0x8C82FAF0u
#define USER32_SetClassLongW                                                 0x8C82FAE6u
#define USER32_SetClassWord                                                  0xD58FE994u
#define USER32_SetClipboardData                                              0xDD206BBFu
#define USER32_SetClipboardViewer                                            0xA7F82978u
#define USER32_SetCursor                                                     0xE3408AF6u
#define USER32_SetCursorContents                                             0xE7DF84CFu
#define USER32_SetCursorPos                                                  0xE0489B03u
#define USER32_SetDebugErrorLevel                                            0x1528683Au
#define USER32_SetDeskWallpaper                                              0x9B05AC78u
#define USER32_SetDisplayConfig                                              0xC19750B3u
#define USER32_SetDlgItemInt                                                 0x22FD5BCBu
#define USER32_SetDlgItemTextA                                               0x1D5570AEu
#define USER32_SetDlgItemTextW                                               0x1D5570B8u
#define USER32_SetDoubleClickTime                                            0xEF5355BCu
#define USER32_SetFocus                                                      0x1077D718u
#define USER32_SetForegroundWindow                                           0x00E28929u
#define USER32_SetGestureConfig                                              0x691649B3u
#define USER32_SetInternalWindowPos                                          0x979950C4u
#define USER32_SetKeyboardState                                              0x2C103ED7u
#define USER32_SetLastErrorEx                                                0x33230328u
#define USER32_SetLayeredWindowAttributes                                    0xD34354AEu
#define USER32_SetMagnificationDesktopColorEffect                            0x536FFC3Cu
#define USER32_SetMagnificationDesktopMagnification                          0x7D248F39u
#define USER32_SetMagnificationLensCtxInformation                            0xD53A11B6u
#define USER32_SetMenu                                                       0x9359263Eu
#define USER32_SetMenuContextHelpId                                          0x8ABF8F6Cu
#define USER32_SetMenuDefaultItem                                            0x40EEEA8Bu
#define USER32_SetMenuInfo                                                   0xDBE5D17Cu
#define USER32_SetMenuItemBitmaps                                            0x76C19BABu
#define USER32_SetMenuItemInfoA                                              0xFB56B5BDu
#define USER32_SetMenuItemInfoW                                              0xFB56B5ABu
#define USER32_SetMessageExtraInfo                                           0xFBA488F6u
#define USER32_SetMessageQueue                                               0xC38162BEu
#define USER32_SetMirrorRendering                                            0xD71AFBBCu
#define USER32_SetParent                                                     0xBA00AAD6u
#define USER32_SetPhysicalCursorPos                                          0xC4C1EA5Bu
#define USER32_SetProcessDPIAware                                            0x2A3E6E4Cu
#define USER32_SetProcessDefaultLayout                                       0x82794283u
#define USER32_SetProcessWindowStation                                       0x72D5DE48u
#define USER32_SetProgmanWindow                                              0x8B1FD1FAu
#define USER32_SetPropA                                                      0x211779AAu
#define USER32_SetPropW                                                      0x211779BCu
#define USER32_SetRect                                                       0x935889BFu
#define USER32_SetRectEmpty                                                  0xE2EFA587u
#define USER32_SetScrollInfo                                                 0x1485C6E0u
#define USER32_SetScrollPos                                                  0x5078843Bu
#define USER32_SetScrollRange                                                0x996D0575u
#define USER32_SetShellWindow                                                0xABBC1591u
#define USER32_SetShellWindowEx                                              0x46A6502Eu
#define USER32_SetSysColors                                                  0x7C4B6463u
#define USER32_SetSysColorsTemp                                              0xD23A4EC7u
#define USER32_SetSystemCursor                                               0xB9CFA615u
#define USER32_SetSystemMenu                                                 0x30921EE8u
#define USER32_SetTaskmanWindow                                              0xCA96518Au
#define USER32_SetThreadDesktop                                              0xA2F85F6Du
#define USER32_SetTimer                                                      0x2955D419u
#define USER32_SetUserObjectInformationA                                     0xFFB878CAu
#define USER32_SetUserObjectInformationW                                     0xFFB878DCu
#define USER32_SetUserObjectSecurity                                         0x9960C43Cu
#define USER32_SetWinEventHook                                               0x527F8A16u
#define USER32_SetWindowCompositionAttribute                                 0x4A4E51F6u
#define USER32_SetWindowContextHelpId                                        0x39FA4537u
#define USER32_SetWindowDisplayAffinity                                      0x739BBBDCu
#define USER32_SetWindowLongA                                                0xC1CDDE77u
#define USER32_SetWindowLongW                                                0xC1CDDE61u
#define USER32_SetWindowPlacement                                            0x69323620u
#define USER32_SetWindowPos                                                  0x004F8DADu
#define USER32_SetWindowRgn                                                  0x084E8DB0u
#define USER32_SetWindowRgnEx                                                0xC0299A4Eu
#define USER32_SetWindowStationUser                                          0x261B7522u
#define USER32_SetWindowTextA                                                0x984FBB77u
#define USER32_SetWindowTextW                                                0x984FBB61u
#define USER32_SetWindowWord                                                 0xF1B583EDu
#define USER32_SetWindowsHookA                                               0x99BBB886u
#define USER32_SetWindowsHookExA                                             0x0A69EEA3u
#define USER32_SetWindowsHookExW                                             0x0A69EEB5u
#define USER32_SetWindowsHookW                                               0x99BBB890u
#define USER32_SfmDxBindSwapChain                                            0x65F77552u
#define USER32_SfmDxGetSwapChainStats                                        0xDA14A02Du
#define USER32_SfmDxOpenSwapChain                                            0xB4BBF57Eu
#define USER32_SfmDxQuerySwapChainBindingStatus                              0x3D376799u
#define USER32_SfmDxReleaseSwapChain                                         0xCE8CEDEEu
#define USER32_SfmDxReportPendingBindingsToDwm                               0xD207EF09u
#define USER32_SfmDxSetSwapChainBindingStatus                                0xB5F9E7B0u
#define USER32_SfmDxSetSwapChainStats                                        0xDA00A02Du
#define USER32_ShowCaret                                                     0x8C270318u
#define USER32_ShowCursor                                                    0xB92071F6u
#define USER32_ShowOwnedPopups                                               0x10FC07EBu
#define USER32_ShowScrollBar                                                 0x2804C417u
#define USER32_ShowStartGlass                                                0x02358543u
#define USER32_ShowSystemCursor                                              0x870FB08Du
#define USER32_ShowWindow                                                    0xE4E07FDBu
#define USER32_ShowWindowAsync                                               0x29DD0655u
#define USER32_ShutdownBlockReasonCreate                                     0xB8D41FC3u
#define USER32_ShutdownBlockReasonDestroy                                    0x9A98FDCDu
#define USER32_ShutdownBlockReasonQuery                                      0xFC17A52Du
#define USER32_SoftModalMessageBox                                           0x2CD66723u
#define USER32_SoundSentry                                                   0xABA70391u
#define USER32_SubtractRect                                                  0x0F3DFC64u
#define USER32_SwapMouseButton                                               0x465C00DAu
#define USER32_SwitchDesktop                                                 0xA9973799u
#define USER32_SwitchDesktopWithFade                                         0xADA17A27u
#define USER32_SwitchToThisWindow                                            0x295CBB23u
#define USER32_SystemParametersInfoA                                         0x30F5AA40u
#define USER32_SystemParametersInfoW                                         0x30F5AA56u
#define USER32_TabbedTextOutA                                                0x6FC62ABCu
#define USER32_TabbedTextOutW                                                0x6FC62AAAu
#define USER32_TileChildWindows                                              0xDDBA25A5u
#define USER32_TileWindows                                                   0x9FDB7FF3u
#define USER32_ToAscii                                                       0x88081936u
#define USER32_ToAsciiEx                                                     0xDA28801Cu
#define USER32_ToUnicode                                                     0xC289A53Bu
#define USER32_ToUnicodeEx                                                   0xEF0286ECu
#define USER32_TrackMouseEvent                                               0x34D03116u
#define USER32_TrackPopupMenu                                                0xC6419F96u
#define USER32_TrackPopupMenuEx                                              0x5B11A606u
#define USER32_TranslateAccelerator                                          0xA20B3BADu
#define USER32_TranslateAcceleratorA                                         0x6775B400u
#define USER32_TranslateAcceleratorW                                         0x6775B416u
#define USER32_TranslateMDISysAccel                                          0x49DF10AEu
#define USER32_TranslateMessage                                              0x5BB6AC3Bu
#define USER32_TranslateMessageEx                                            0xED667AC8u
#define USER32_UnhookWinEvent                                                0xC5937B11u
#define USER32_UnhookWindowsHook                                             0x7C6636ADu
#define USER32_UnhookWindowsHookEx                                           0xB5F938A2u
#define USER32_UnionRect                                                     0xE2F65CA8u
#define USER32_UnloadKeyboardLayout                                          0xC43551E5u
#define USER32_UnlockWindowStation                                           0xBE10754Cu
#define USER32_UnpackDDElParam                                               0xF50D49BDu
#define USER32_UnregisterClassA                                              0xA701C34Fu
#define USER32_UnregisterClassW                                              0xA701C359u
#define USER32_UnregisterDeviceNotification                                  0xC059CE98u
#define USER32_UnregisterHotKey                                              0x473309E1u
#define USER32_UnregisterMessagePumpHook                                     0x75A413C3u
#define USER32_UnregisterPowerSettingNotification                            0x9135C240u
#define USER32_UnregisterSessionPort                                         0xF5CB7CF6u
#define USER32_UnregisterTouchWindow                                         0x58F88599u
#define USER32_UnregisterUserApiHook                                         0xFF72C6CFu
#define USER32_UpdateLayeredWindow                                           0x6F71B93Du
#define USER32_UpdateLayeredWindowIndirect                                   0xAB3EE4D0u
#define USER32_UpdatePerUserSystemParameters                                 0xA99B81A0u
#define USER32_UpdateWindow                                                  0x3A2E771Bu
#define USER32_UpdateWindowTransform                                         0xC841227Du
#define USER32_User32InitializeImmEntryTable                                 0x43667A1Au
#define USER32_UserClientDllInitialize                                       0x411AF861u
#define USER32_UserHandleGrantAccess                                         0x4E18EB3Fu
#define USER32_UserLpkPSMTextOut                                             0x80B62F8Du
#define USER32_UserLpkTabbedTextOut                                          0xC118665Du
#define USER32_UserRealizePalette                                            0x1F39EEB1u
#define USER32_UserRegisterWowHandlers                                       0x4ACFE5F7u
#define USER32_VRipOutput                                                    0x8582C8E8u
#define USER32_VTagOutput                                                    0xC5870EE8u
#define USER32_ValidateRect                                                  0xBFEF611Au
#define USER32_ValidateRgn                                                   0x0B75BF76u
#define USER32_VkKeyScanA                                                    0xD3E4DA30u
#define USER32_VkKeyScanExA                                                  0xD3409329u
#define USER32_VkKeyScanExW                                                  0xD340933Fu
#define USER32_VkKeyScanW                                                    0xD3E4DA26u
#define USER32_WCSToMBEx                                                     0x16EC1153u
#define USER32_WINNLSEnableIME                                               0xAD560437u
#define USER32_WINNLSGetEnableStatus                                         0x0E58C609u
#define USER32_WINNLSGetIMEHotkey                                            0x0F878801u
#define USER32_WaitForInputIdle                                              0xB1723C0Eu
#define USER32_WaitMessage                                                   0x2F0FF171u
#define USER32_WinHelpA                                                      0x0C94721Eu
#define USER32_WinHelpW                                                      0x0C947208u
#define USER32_WindowFromDC                                                  0xC6DE92E9u
#define USER32_WindowFromPhysicalPoint                                       0xBE14BCA4u
#define USER32_WindowFromPoint                                               0xCA04A296u
#define USER32__UserTestTokenForInteractive                                  0x52AC49C8u
#define USER32_gSharedInfo                                                   0xBC300DBBu
#define USER32_gapfnScSendMessage                                            0x665FA9E8u
#define USER32_keybd_event                                                   0x8EE48364u
#define USER32_mouse_event                                                   0x07A4CF7Cu
#define USER32_wsprintfA                                                     0x4E8080A7u
#define USER32_wsprintfW                                                     0x4E8080B1u
#define USER32_wvsprintfA                                                    0x406081A7u
#define USER32_wvsprintfW                                                    0x406081B1u
#define GDI32_AbortDoc                                                       0x1F355ABEu
#define GDI32_AbortPath                                                      0x9355298Eu
#define GDI32_AddFontMemResourceEx                                           0x6A06CED4u
#define GDI32_AddFontResourceA                                               0xD4F74029u
#define GDI32_AddFontResourceExA                                             0xB75CDD41u
#define GDI32_AddFontResourceExW                                             0xB75CDD57u
#define GDI32_AddFontResourceTracking                                        0x4486CF25u
#define GDI32_AddFontResourceW                                               0xD4F7403Fu
#define GDI32_AngleArc                                                       0x0AD5F22Eu
#define GDI32_AnimatePalette                                                 0x12CEC597u
#define GDI32_AnyLinkedFonts                                                 0x096B9A0Fu
#define GDI32_Arc                                                            0x040E4062u
#define GDI32_ArcTo                                                          0x881AB96Eu
#define GDI32_BRUSHOBJ_hGetColorTransform                                    0xB982095Eu
#define GDI32_BRUSHOBJ_pvAllocRbrush                                         0x9F4701F4u
#define GDI32_BRUSHOBJ_pvGetRbrush                                           0xC64E5140u
#define GDI32_BRUSHOBJ_ulGetBrushColor                                       0x9DF01720u
#define GDI32_BeginGdiRendering                                              0x7EC77B13u
#define GDI32_BeginPath                                                      0xAAF72AB8u
#define GDI32_BitBlt                                                         0x0E9DBAF1u
#define GDI32_CLIPOBJ_bEnum                                                  0x941A4C70u
#define GDI32_CLIPOBJ_cEnumStart                                             0xA92AE294u
#define GDI32_CLIPOBJ_ppoGetPath                                             0xA1368598u
#define GDI32_CancelDC                                                       0xAE20F21Cu
#define GDI32_CheckColorsInGamut                                             0x6D13F6BEu
#define GDI32_ChoosePixelFormat                                              0xBC763DFDu
#define GDI32_Chord                                                          0xB83E7465u
#define GDI32_ClearBitmapAttributes                                          0xA21395C9u
#define GDI32_ClearBrushAttributes                                           0xBF49B818u
#define GDI32_CloseEnhMetaFile                                               0xECF6D685u
#define GDI32_CloseFigure                                                    0x47075D67u
#define GDI32_CloseMetaFile                                                  0xF4528736u
#define GDI32_ColorCorrectPalette                                            0x76AE599Eu
#define GDI32_ColorMatchToTarget                                             0x9DF85763u
#define GDI32_CombineRgn                                                     0x2E943D3Eu
#define GDI32_CombineTransform                                               0x1C723E15u
#define GDI32_ConfigureOPMProtectedOutput                                    0xF18DA7B1u
#define GDI32_CopyEnhMetaFileA                                               0x1A93BAA6u
#define GDI32_CopyEnhMetaFileW                                               0x1A93BAB0u
#define GDI32_CopyMetaFileA                                                  0xA36658C5u
#define GDI32_CopyMetaFileW                                                  0xA36658D3u
#define GDI32_CreateBitmap                                                   0x1E04BA3Eu
#define GDI32_CreateBitmapFromDxSurface                                      0x27D5AA09u
#define GDI32_CreateBitmapIndirect                                           0xDE3DE7A1u
#define GDI32_CreateBrushIndirect                                            0xA9BA7569u
#define GDI32_CreateColorSpaceA                                              0xA7C13CFEu
#define GDI32_CreateColorSpaceW                                              0xA7C13CE8u
#define GDI32_CreateCompatibleBitmap                                         0x7637E217u
#define GDI32_CreateCompatibleDC                                             0xBF86AC09u
#define GDI32_CreateDCA                                                      0x87515101u
#define GDI32_CreateDCW                                                      0x87515117u
#define GDI32_CreateDIBPatternBrush                                          0xDEEFAD22u
#define GDI32_CreateDIBPatternBrushPt                                        0x8B71BEC0u
#define GDI32_CreateDIBSection                                               0xB6139A2Du
#define GDI32_CreateDIBitmap                                                 0xBC3C3874u
#define GDI32_CreateDiscardableBitmap                                        0x827D2A64u
#define GDI32_CreateEllipticRgn                                              0x5231FD87u
#define GDI32_CreateEllipticRgnIndirect                                      0xEB7A5EEDu
#define GDI32_CreateEnhMetaFileA                                             0xB961B39Fu
#define GDI32_CreateEnhMetaFileW                                             0xB961B389u
#define GDI32_CreateFontA                                                    0xBA33D305u
#define GDI32_CreateFontIndirectA                                            0xC8E4BFABu
#define GDI32_CreateFontIndirectExA                                          0xBF2C92BFu
#define GDI32_CreateFontIndirectExW                                          0xBF2C92A9u
#define GDI32_CreateFontIndirectW                                            0xC8E4BFBDu
#define GDI32_CreateFontW                                                    0xBA33D313u
#define GDI32_CreateHalftonePalette                                          0x387C8CE7u
#define GDI32_CreateHatchBrush                                               0x758C3130u
#define GDI32_CreateICA                                                      0xB3515101u
#define GDI32_CreateICW                                                      0xB3515117u
#define GDI32_CreateMetaFileA                                                0xD021BCD7u
#define GDI32_CreateMetaFileW                                                0xD021BCC1u
#define GDI32_CreateOPMProtectedOutputs                                      0x9062EBC3u
#define GDI32_CreatePalette                                                  0xC2C3C7B5u
#define GDI32_CreatePatternBrush                                             0xDEA84714u
#define GDI32_CreatePen                                                      0xD755912Eu
#define GDI32_CreatePenIndirect                                              0x8F16F768u
#define GDI32_CreatePolyPolygonRgn                                           0x4C7492ECu
#define GDI32_CreatePolygonRgn                                               0x28583128u
#define GDI32_CreateRectRgn                                                  0x5A312F36u
#define GDI32_CreateRectRgnIndirect                                          0xEBA8EFE5u
#define GDI32_CreateRoundRectRgn                                             0x4893DE3Cu
#define GDI32_CreateScalableFontResourceA                                    0x03D2C451u
#define GDI32_CreateScalableFontResourceW                                    0x03D2C447u
#define GDI32_CreateSolidBrush                                               0xB6EEBF28u
#define GDI32_D3DKMTAcquireKeyedMutex                                        0x3C7A67E3u
#define GDI32_D3DKMTCheckExclusiveOwnership                                  0xA59DFDCEu
#define GDI32_D3DKMTCheckMonitorPowerState                                   0x71142F0Eu
#define GDI32_D3DKMTCheckOcclusion                                           0x815C9FDEu
#define GDI32_D3DKMTCheckSharedResourceAccess                                0x20B8F8E1u
#define GDI32_D3DKMTCheckVidPnExclusiveOwnership                             0x4A8786D0u
#define GDI32_D3DKMTCloseAdapter                                             0x213EB225u
#define GDI32_D3DKMTConfigureSharedResource                                  0x148911DBu
#define GDI32_D3DKMTCreateAllocation                                         0x44419019u
#define GDI32_D3DKMTCreateAllocation2                                        0x320328BAu
#define GDI32_D3DKMTCreateContext                                            0xF5E33566u
#define GDI32_D3DKMTCreateDCFromMemory                                       0x049EDAF7u
#define GDI32_D3DKMTCreateDevice                                             0xDC37630Au
#define GDI32_D3DKMTCreateKeyedMutex                                         0x9BC25981u
#define GDI32_D3DKMTCreateOverlay                                            0xD1531659u
#define GDI32_D3DKMTCreateSynchronizationObject                              0xC0FA18F5u
#define GDI32_D3DKMTCreateSynchronizationObject2                             0x431EB82Du
#define GDI32_D3DKMTDestroyAllocation                                        0x53722C3Au
#define GDI32_D3DKMTDestroyContext                                           0xB3CD521Eu
#define GDI32_D3DKMTDestroyDCFromMemory                                      0x88C21407u
#define GDI32_D3DKMTDestroyDevice                                            0xE7F55279u
#define GDI32_D3DKMTDestroyKeyedMutex                                        0x8CF1E5A2u
#define GDI32_D3DKMTDestroyOverlay                                           0x977D7121u
#define GDI32_D3DKMTDestroySynchronizationObject                             0x1EEB936Cu
#define GDI32_D3DKMTEscape                                                   0xE3897AA0u
#define GDI32_D3DKMTFlipOverlay                                              0xFAA12613u
#define GDI32_D3DKMTGetContextSchedulingPriority                             0xE064E65Au
#define GDI32_D3DKMTGetDeviceState                                           0x22F74DDBu
#define GDI32_D3DKMTGetDisplayModeList                                       0xE1335B1Cu
#define GDI32_D3DKMTGetMultisampleMethodList                                 0x34AF4EE6u
#define GDI32_D3DKMTGetOverlayState                                          0xC5ADD5A3u
#define GDI32_D3DKMTGetPresentHistory                                        0x8F1E0611u
#define GDI32_D3DKMTGetPresentQueueEvent                                     0xAB5E9326u
#define GDI32_D3DKMTGetProcessSchedulingPriorityClass                        0xEDAA72C7u
#define GDI32_D3DKMTGetRuntimeData                                           0xCB95CD97u
#define GDI32_D3DKMTGetScanLine                                              0xF73BC424u
#define GDI32_D3DKMTGetSharedPrimaryHandle                                   0x63FA762Cu
#define GDI32_D3DKMTInvalidateActiveVidPn                                    0x9AF20282u
#define GDI32_D3DKMTLock                                                     0x91DEB5F2u
#define GDI32_D3DKMTOpenAdapterFromDeviceName                                0xDCEAF798u
#define GDI32_D3DKMTOpenAdapterFromGdiDisplayName                            0x1D0C9966u
#define GDI32_D3DKMTOpenAdapterFromHdc                                       0xE5A6275Eu
#define GDI32_D3DKMTOpenKeyedMutex                                           0xA2DC6EEDu
#define GDI32_D3DKMTOpenResource                                             0x80916DEDu
#define GDI32_D3DKMTOpenResource2                                            0x2DBDB020u
#define GDI32_D3DKMTOpenSynchronizationObject                                0xDB4C047Au
#define GDI32_D3DKMTPollDisplayChildren                                      0x7534E7A4u
#define GDI32_D3DKMTPresent                                                  0x7B303507u
#define GDI32_D3DKMTQueryAdapterInfo                                         0x8C10E395u
#define GDI32_D3DKMTQueryAllocationResidency                                 0xE26E3258u
#define GDI32_D3DKMTQueryResourceInfo                                        0x34FFDD4Bu
#define GDI32_D3DKMTQueryStatistics                                          0x9CF4D3A8u
#define GDI32_D3DKMTReleaseKeyedMutex                                        0xBB29C7D3u
#define GDI32_D3DKMTReleaseProcessVidPnSourceOwners                          0x968E8E21u
#define GDI32_D3DKMTRender                                                   0xF6EBDC19u
#define GDI32_D3DKMTSetAllocationPriority                                    0x33AF1821u
#define GDI32_D3DKMTSetContextSchedulingPriority                             0xE064E650u
#define GDI32_D3DKMTSetDisplayMode                                           0xD1D6BC53u
#define GDI32_D3DKMTSetDisplayPrivateDriverFormat                            0xF11A9031u
#define GDI32_D3DKMTSetGammaRamp                                             0x565C9711u
#define GDI32_D3DKMTSetProcessSchedulingPriorityClass                        0xEDAA72D3u
#define GDI32_D3DKMTSetQueuedLimit                                           0xF105581Cu
#define GDI32_D3DKMTSetVidPnSourceOwner                                      0xF591350Eu
#define GDI32_D3DKMTSharedPrimaryLockNotification                            0x9FA0D98Bu
#define GDI32_D3DKMTSharedPrimaryUnLockNotification                          0x79AD35C5u
#define GDI32_D3DKMTSignalSynchronizationObject                              0x82A86390u
#define GDI32_D3DKMTSignalSynchronizationObject2                             0x0C721067u
#define GDI32_D3DKMTUnlock                                                   0xDA5B1D0Eu
#define GDI32_D3DKMTUpdateOverlay                                            0xB152165Cu
#define GDI32_D3DKMTWaitForIdle                                              0xFA72DBF9u
#define GDI32_D3DKMTWaitForSynchronizationObject                             0x9EEC3025u
#define GDI32_D3DKMTWaitForSynchronizationObject2                            0x8604B3EFu
#define GDI32_D3DKMTWaitForVerticalBlankEvent                                0xBA09D853u
#define GDI32_DDCCIGetCapabilitiesString                                     0xDBD75209u
#define GDI32_DDCCIGetCapabilitiesStringLength                               0x4EDCC104u
#define GDI32_DDCCIGetTimingReport                                           0xD44F0831u
#define GDI32_DDCCIGetVCPFeature                                             0xB879A868u
#define GDI32_DDCCISaveCurrentSettings                                       0x1E1F608Eu
#define GDI32_DDCCISetVCPFeature                                             0xF879A869u
#define GDI32_DPtoLP                                                         0xB909BAD9u
#define GDI32_DdCreateFullscreenSprite                                       0xEA4CA44Cu
#define GDI32_DdDestroyFullscreenSprite                                      0xC69DE857u
#define GDI32_DdEntry0                                                       0xEEF61AB9u
#define GDI32_DdEntry1                                                       0xEEF61AB8u
#define GDI32_DdEntry10                                                      0xC3571DEEu
#define GDI32_DdEntry11                                                      0xC3571DEFu
#define GDI32_DdEntry12                                                      0xC3571DECu
#define GDI32_DdEntry13                                                      0xC3571DEDu
#define GDI32_DdEntry14                                                      0xC3571DEAu
#define GDI32_DdEntry15                                                      0xC3571DEBu
#define GDI32_DdEntry16                                                      0xC3571DE8u
#define GDI32_DdEntry17                                                      0xC3571DE9u
#define GDI32_DdEntry18                                                      0xC3571DE6u
#define GDI32_DdEntry19                                                      0xC3571DE7u
#define GDI32_DdEntry2                                                       0xEEF61ABBu
#define GDI32_DdEntry20                                                      0xC3577DEEu
#define GDI32_DdEntry21                                                      0xC3577DEFu
#define GDI32_DdEntry22                                                      0xC3577DECu
#define GDI32_DdEntry23                                                      0xC3577DEDu
#define GDI32_DdEntry24                                                      0xC3577DEAu
#define GDI32_DdEntry25                                                      0xC3577DEBu
#define GDI32_DdEntry26                                                      0xC3577DE8u
#define GDI32_DdEntry27                                                      0xC3577DE9u
#define GDI32_DdEntry28                                                      0xC3577DE6u
#define GDI32_DdEntry29                                                      0xC3577DE7u
#define GDI32_DdEntry3                                                       0xEEF61ABAu
#define GDI32_DdEntry30                                                      0xC3575DEEu
#define GDI32_DdEntry31                                                      0xC3575DEFu
#define GDI32_DdEntry32                                                      0xC3575DECu
#define GDI32_DdEntry33                                                      0xC3575DEDu
#define GDI32_DdEntry34                                                      0xC3575DEAu
#define GDI32_DdEntry35                                                      0xC3575DEBu
#define GDI32_DdEntry36                                                      0xC3575DE8u
#define GDI32_DdEntry37                                                      0xC3575DE9u
#define GDI32_DdEntry38                                                      0xC3575DE6u
#define GDI32_DdEntry39                                                      0xC3575DE7u
#define GDI32_DdEntry4                                                       0xEEF61ABDu
#define GDI32_DdEntry40                                                      0xC357BDEEu
#define GDI32_DdEntry41                                                      0xC357BDEFu
#define GDI32_DdEntry42                                                      0xC357BDECu
#define GDI32_DdEntry43                                                      0xC357BDEDu
#define GDI32_DdEntry44                                                      0xC357BDEAu
#define GDI32_DdEntry45                                                      0xC357BDEBu
#define GDI32_DdEntry46                                                      0xC357BDE8u
#define GDI32_DdEntry47                                                      0xC357BDE9u
#define GDI32_DdEntry48                                                      0xC357BDE6u
#define GDI32_DdEntry49                                                      0xC357BDE7u
#define GDI32_DdEntry5                                                       0xEEF61ABCu
#define GDI32_DdEntry50                                                      0xC3579DEEu
#define GDI32_DdEntry51                                                      0xC3579DEFu
#define GDI32_DdEntry52                                                      0xC3579DECu
#define GDI32_DdEntry53                                                      0xC3579DEDu
#define GDI32_DdEntry54                                                      0xC3579DEAu
#define GDI32_DdEntry55                                                      0xC3579DEBu
#define GDI32_DdEntry56                                                      0xC3579DE8u
#define GDI32_DdEntry6                                                       0xEEF61ABFu
#define GDI32_DdEntry7                                                       0xEEF61ABEu
#define GDI32_DdEntry8                                                       0xEEF61AB1u
#define GDI32_DdEntry9                                                       0xEEF61AB0u
#define GDI32_DdNotifyFullscreenSpriteUpdate                                 0x22691A7Cu
#define GDI32_DdQueryVisRgnUniqueness                                        0x90A18D99u
#define GDI32_DeleteColorSpace                                               0xA03D2C31u
#define GDI32_DeleteDC                                                       0xB241FA98u
#define GDI32_DeleteEnhMetaFile                                              0x9CB2C3B5u
#define GDI32_DeleteMetaFile                                                 0x94B20F1Cu
#define GDI32_DeleteObject                                                   0x3F97717Cu
#define GDI32_DescribePixelFormat                                            0x0B0721A8u
#define GDI32_DestroyOPMProtectedOutput                                      0x5427C227u
#define GDI32_DestroyPhysicalMonitorInternal                                 0x373682C0u
#define GDI32_DeviceCapabilitiesExA                                          0x5570C9FBu
#define GDI32_DeviceCapabilitiesExW                                          0x5570C9EDu
#define GDI32_DrawEscape                                                     0x83A3836Du
#define GDI32_Ellipse                                                        0xC6DF143Cu
#define GDI32_EnableEUDC                                                     0x52E04C19u
#define GDI32_EndDoc                                                         0x16EDD2E8u
#define GDI32_EndFormPage                                                    0xBF076D96u
#define GDI32_EndGdiRendering                                                0xD605763Bu
#define GDI32_EndPage                                                        0x825D88B8u
#define GDI32_EndPath                                                        0x825FE8B5u
#define GDI32_EngAcquireSemaphore                                            0x1727126Fu
#define GDI32_EngAlphaBlend                                                  0x48209B3Cu
#define GDI32_EngAssociateSurface                                            0x8B8F962Au
#define GDI32_EngBitBlt                                                      0x7E843FF2u
#define GDI32_EngCheckAbort                                                  0xC851D838u
#define GDI32_EngComputeGlyphSet                                             0x1D012D67u
#define GDI32_EngCopyBits                                                    0xB6450784u
#define GDI32_EngCreateBitmap                                                0x7F446638u
#define GDI32_EngCreateClip                                                  0xC6123282u
#define GDI32_EngCreateDeviceBitmap                                          0xBB544114u
#define GDI32_EngCreateDeviceSurface                                         0x8844B2B7u
#define GDI32_EngCreatePalette                                               0xD9430B9Du
#define GDI32_EngCreateSemaphore                                             0x7F2B0143u
#define GDI32_EngDeleteClip                                                  0x8EF32582u
#define GDI32_EngDeletePalette                                               0xA9C88BB9u
#define GDI32_EngDeletePath                                                  0xBAF08C1Au
#define GDI32_EngDeleteSemaphore                                             0xEEE92F43u
#define GDI32_EngDeleteSurface                                               0xFC2AAA11u
#define GDI32_EngEraseSurface                                                0xC67ABD43u
#define GDI32_EngFillPath                                                    0xBF148EA7u
#define GDI32_EngFindResource                                                0x3246A3A2u
#define GDI32_EngFreeModule                                                  0xA2138165u
#define GDI32_EngGetCurrentCodePage                                          0x701A0CC5u
#define GDI32_EngGetDriverName                                               0xA8023851u
#define GDI32_EngGetPrinterDataFileName                                      0x7E00580Au
#define GDI32_EngGradientFill                                                0x8617DA7Cu
#define GDI32_EngLineTo                                                      0xE28332F5u
#define GDI32_EngLoadModule                                                  0x8353DC65u
#define GDI32_EngLockSurface                                                 0x36EBFBBBu
#define GDI32_EngMarkBandingSurface                                          0x2B8FE3D2u
#define GDI32_EngMultiByteToUnicodeN                                         0x2DBACCC2u
#define GDI32_EngMultiByteToWideChar                                         0x0DDB9AE4u
#define GDI32_EngPaint                                                       0x89167039u
#define GDI32_EngPlgBlt                                                      0x7ED43656u
#define GDI32_EngQueryEMFInfo                                                0x19B58BA5u
#define GDI32_EngQueryLocalTime                                              0x9C42261Au
#define GDI32_EngReleaseSemaphore                                            0x16A328F2u
#define GDI32_EngStretchBlt                                                  0xC4738106u
#define GDI32_EngStretchBltROP                                               0x71C96333u
#define GDI32_EngStrokeAndFillPath                                           0xD174681Du
#define GDI32_EngStrokePath                                                  0x48121D24u
#define GDI32_EngTextOut                                                     0x0B3BF4BCu
#define GDI32_EngTransparentBlt                                              0x31246073u
#define GDI32_EngUnicodeToMultiByteN                                         0x05197151u
#define GDI32_EngUnlockSurface                                               0x9D6F3D10u
#define GDI32_EngWideCharToMultiByte                                         0x54F3641Cu
#define GDI32_EnumEnhMetaFile                                                0x86B2D69Du
#define GDI32_EnumFontFamiliesA                                              0xE9670ADDu
#define GDI32_EnumFontFamiliesExA                                            0x67AA9C6Au
#define GDI32_EnumFontFamiliesExW                                            0x67AA9C7Cu
#define GDI32_EnumFontFamiliesW                                              0xE9670ACBu
#define GDI32_EnumFontsA                                                     0x764579CFu
#define GDI32_EnumFontsW                                                     0x764579D9u
#define GDI32_EnumICMProfilesA                                               0xC081AFADu
#define GDI32_EnumICMProfilesW                                               0xC081AFBBu
#define GDI32_EnumMetaFile                                                   0xC4860F36u
#define GDI32_EnumObjects                                                    0xEF7D0621u
#define GDI32_EqualRgn                                                       0x66009687u
#define GDI32_Escape                                                         0x833E316Eu
#define GDI32_EudcLoadLinkW                                                  0x988FD989u
#define GDI32_EudcUnloadLinkW                                                0x9864134Fu
#define GDI32_ExcludeClipRect                                                0xA6E1DD77u
#define GDI32_ExtCreatePen                                                   0xD9F710CEu
#define GDI32_ExtCreateRegion                                                0x5F858387u
#define GDI32_ExtEscape                                                      0x4323746Du
#define GDI32_ExtFloodFill                                                   0xCCF4A450u
#define GDI32_ExtSelectClipRgn                                               0xCC1E1029u
#define GDI32_ExtTextOutA                                                    0x7C579226u
#define GDI32_ExtTextOutW                                                    0x7C579230u
#define GDI32_FONTOBJ_cGetAllGlyphHandles                                    0x69C799FEu
#define GDI32_FONTOBJ_cGetGlyphs                                             0x17DAE67Fu
#define GDI32_FONTOBJ_pQueryGlyphAttrs                                       0xF7DBC399u
#define GDI32_FONTOBJ_pfdg                                                   0xEC0F6DCCu
#define GDI32_FONTOBJ_pifi                                                   0xD00F2DC2u
#define GDI32_FONTOBJ_pvTrueTypeFontFile                                     0xBB17EF03u
#define GDI32_FONTOBJ_pxoGetXform                                            0xDD3743EBu
#define GDI32_FONTOBJ_vGetInfo                                               0x55FA641Au
#define GDI32_FillPath                                                       0xB2D4E8B3u
#define GDI32_FillRgn                                                        0x4EDD56BDu
#define GDI32_FixBrushOrgEx                                                  0x5890AA4Eu
#define GDI32_FlattenPath                                                    0x2F73C8B8u
#define GDI32_FloodFill                                                      0xC25625B0u
#define GDI32_FontIsLinked                                                   0xEF632243u
#define GDI32_FrameRgn                                                       0x7EC0522Fu
#define GDI32_GdiAddFontResourceW                                            0x549F5C33u
#define GDI32_GdiAddGlsBounds                                                0x538074E3u
#define GDI32_GdiAddGlsRecord                                                0x5722BFD4u
#define GDI32_GdiAlphaBlend                                                  0x68259B04u
#define GDI32_GdiArtificialDecrementDriver                                   0x57092EF9u
#define GDI32_GdiCleanCacheDC                                                0x6F695C35u
#define GDI32_GdiComment                                                     0xD22D5228u
#define GDI32_GdiConsoleTextOut                                              0xF44B7256u
#define GDI32_GdiConvertAndCheckDC                                           0xCA1361B2u
#define GDI32_GdiConvertBitmap                                               0x05762E72u
#define GDI32_GdiConvertBitmapV5                                             0xC81F188Cu
#define GDI32_GdiConvertBrush                                                0x7413E638u
#define GDI32_GdiConvertDC                                                   0xA340FB3Du
#define GDI32_GdiConvertEnhMetaFile                                          0xA810E395u
#define GDI32_GdiConvertFont                                                 0x4680C298u
#define GDI32_GdiConvertMetaFilePict                                         0x11C105C1u
#define GDI32_GdiConvertPalette                                              0x904A44DBu
#define GDI32_GdiConvertRegion                                               0x15B7E7CCu
#define GDI32_GdiConvertToDevmodeW                                           0xF43EC69Bu
#define GDI32_GdiCreateLocalEnhMetaFile                                      0x7953EDC8u
#define GDI32_GdiCreateLocalMetaFilePict                                     0x700ABFE9u
#define GDI32_GdiDeleteLocalDC                                               0xCBB99593u
#define GDI32_GdiDeleteSpoolFileHandle                                       0x8816703Cu
#define GDI32_GdiDescribePixelFormat                                         0x3F0927E8u
#define GDI32_GdiDllInitialize                                               0xBA14C939u
#define GDI32_GdiDrawStream                                                  0xE3E3AA69u
#define GDI32_GdiEndDocEMF                                                   0x6FE355DCu
#define GDI32_GdiEndPageEMF                                                  0x4AFFFDA6u
#define GDI32_GdiEntry1                                                      0xEEF51DB9u
#define GDI32_GdiEntry10                                                     0xA3B73DEEu
#define GDI32_GdiEntry11                                                     0xA3B73DEFu
#define GDI32_GdiEntry12                                                     0xA3B73DECu
#define GDI32_GdiEntry13                                                     0xA3B73DEDu
#define GDI32_GdiEntry14                                                     0xA3B73DEAu
#define GDI32_GdiEntry15                                                     0xA3B73DEBu
#define GDI32_GdiEntry16                                                     0xA3B73DE8u
#define GDI32_GdiEntry2                                                      0xEEF51DBAu
#define GDI32_GdiEntry3                                                      0xEEF51DBBu
#define GDI32_GdiEntry4                                                      0xEEF51DBCu
#define GDI32_GdiEntry5                                                      0xEEF51DBDu
#define GDI32_GdiEntry6                                                      0xEEF51DBEu
#define GDI32_GdiEntry7                                                      0xEEF51DBFu
#define GDI32_GdiEntry8                                                      0xEEF51DB0u
#define GDI32_GdiEntry9                                                      0xEEF51DB1u
#define GDI32_GdiFixUpHandle                                                 0x7315C0E8u
#define GDI32_GdiFlush                                                       0xE87756B9u
#define GDI32_GdiFullscreenControl                                           0x9AABB5DAu
#define GDI32_GdiGetBatchLimit                                               0x71A7E4CAu
#define GDI32_GdiGetBitmapBitsSize                                           0x31F94F99u
#define GDI32_GdiGetCharDimensions                                           0x455249C6u
#define GDI32_GdiGetCodePage                                                 0xD6D373B4u
#define GDI32_GdiGetDC                                                       0xEC61B212u
#define GDI32_GdiGetDevmodeForPage                                           0xE820362Eu
#define GDI32_GdiGetLocalBrush                                               0xA884275Eu
#define GDI32_GdiGetLocalDC                                                  0x6EF9D4BFu
#define GDI32_GdiGetLocalFont                                                0x4DB62626u
#define GDI32_GdiGetPageCount                                                0x57472EAEu
#define GDI32_GdiGetPageHandle                                               0xCD36C71Bu
#define GDI32_GdiGetSpoolFileHandle                                          0xC8575C99u
#define GDI32_GdiGetSpoolMessage                                             0x5F42BEAAu
#define GDI32_GdiGradientFill                                                0x6697CE7Cu
#define GDI32_GdiInitSpool                                                   0xC4245016u
#define GDI32_GdiInitializeLanguagePack                                      0x7E936FB2u
#define GDI32_GdiIsMetaFileDC                                                0xBAC4DA07u
#define GDI32_GdiIsMetaPrintDC                                               0x5B1592ADu
#define GDI32_GdiIsPlayMetafileDC                                            0x67B8AC2Bu
#define GDI32_GdiIsScreenDC                                                  0x5F520084u
#define GDI32_GdiLoadType1Fonts                                              0xDCC09425u
#define GDI32_GdiPlayDCScript                                                0x0FE64967u
#define GDI32_GdiPlayEMF                                                     0x52EDF81Cu
#define GDI32_GdiPlayJournal                                                 0x3AFAF7F6u
#define GDI32_GdiPlayPageEMF                                                 0x97D9FC40u
#define GDI32_GdiPlayPrivatePageEMF                                          0x3A5464ABu
#define GDI32_GdiPlayScript                                                  0xD0121470u
#define GDI32_GdiPrinterThunk                                                0xFD9C1343u
#define GDI32_GdiProcessSetup                                                0x712AF8DAu
#define GDI32_GdiQueryFonts                                                  0xEE6043A3u
#define GDI32_GdiQueryTable                                                  0xDF4344B5u
#define GDI32_GdiRealizationInfo                                             0xF5640DD1u
#define GDI32_GdiReleaseDC                                                   0xB7006A9Bu
#define GDI32_GdiReleaseLocalDC                                              0xD83A65ADu
#define GDI32_GdiResetDCEMF                                                  0xF222A58Cu
#define GDI32_GdiSetAttrs                                                    0x40875284u
#define GDI32_GdiSetBatchLimit                                               0x31A7E4CBu
#define GDI32_GdiSetLastError                                                0x4B281C0Au
#define GDI32_GdiSetPixelFormat                                              0xDDFAC59Cu
#define GDI32_GdiSetServerAttr                                               0x646114D7u
#define GDI32_GdiStartDocEMF                                                 0xCC50FF06u
#define GDI32_GdiStartPageEMF                                                0x3FA4A9D0u
#define GDI32_GdiSwapBuffers                                                 0x5CAA9DD1u
#define GDI32_GdiTransparentBlt                                              0x32A66023u
#define GDI32_GdiValidateHandle                                              0x30B53875u
#define GDI32_GetArcDirection                                                0xB7A15569u
#define GDI32_GetAspectRatioFilterEx                                         0x907DD580u
#define GDI32_GetBitmapAttributes                                            0x141519F9u
#define GDI32_GetBitmapBits                                                  0x7B670967u
#define GDI32_GetBitmapDimensionEx                                           0x3558364Cu
#define GDI32_GetBkColor                                                     0x1CCD3226u
#define GDI32_GetBkMode                                                      0x92A1E163u
#define GDI32_GetBoundsRect                                                  0x4355276Au
#define GDI32_GetBrushAttributes                                             0xDECC082Cu
#define GDI32_GetBrushOrgEx                                                  0x4896AA7Eu
#define GDI32_GetCOPPCompatibleOPMInformation                                0x05A7B400u
#define GDI32_GetCertificate                                                 0x7E1E0C21u
#define GDI32_GetCertificateSize                                             0x66188804u
#define GDI32_GetCharABCWidthsA                                              0x2B0CDC76u
#define GDI32_GetCharABCWidthsFloatA                                         0xD4D70F22u
#define GDI32_GetCharABCWidthsFloatW                                         0xD4D70F34u
#define GDI32_GetCharABCWidthsI                                              0x2B0CDC7Eu
#define GDI32_GetCharABCWidthsW                                              0x2B0CDC60u
#define GDI32_GetCharWidth32A                                                0x2E9D0D2Cu
#define GDI32_GetCharWidth32W                                                0x2E9D0D3Au
#define GDI32_GetCharWidthA                                                  0xA6D35B39u
#define GDI32_GetCharWidthFloatA                                             0xCF6801BDu
#define GDI32_GetCharWidthFloatW                                             0xCF6801ABu
#define GDI32_GetCharWidthI                                                  0xA6D35B31u
#define GDI32_GetCharWidthInfo                                               0xD1A158BDu
#define GDI32_GetCharWidthW                                                  0xA6D35B2Fu
#define GDI32_GetCharacterPlacementA                                         0xDE5A500Bu
#define GDI32_GetCharacterPlacementW                                         0xDE5A501Du
#define GDI32_GetClipBox                                                     0xA66D7DA2u
#define GDI32_GetClipRgn                                                     0xE66C7DB4u
#define GDI32_GetColorAdjustment                                             0xFBE28E76u
#define GDI32_GetColorSpace                                                  0x99757657u
#define GDI32_GetCurrentObject                                               0xC50B5B1Cu
#define GDI32_GetCurrentPositionEx                                           0xC3F7CA62u
#define GDI32_GetDCBrushColor                                                0x4583AE2Bu
#define GDI32_GetDCOrgEx                                                     0x3009FCFCu
#define GDI32_GetDCPenColor                                                  0x4C9655F9u
#define GDI32_GetDIBColorTable                                               0xBC527437u
#define GDI32_GetDIBits                                                      0x8883E6F9u
#define GDI32_GetDeviceCaps                                                  0x4AF685E3u
#define GDI32_GetDeviceGammaRamp                                             0x17F7C68Bu
#define GDI32_GetETM                                                         0x125ABAC2u
#define GDI32_GetEUDCTimeStamp                                               0x882CE594u
#define GDI32_GetEUDCTimeStampExW                                            0x027DCA12u
#define GDI32_GetEnhMetaFileA                                                0xC09392BEu
#define GDI32_GetEnhMetaFileBits                                             0xEDC7DE92u
#define GDI32_GetEnhMetaFileDescriptionA                                     0xEC6A36FEu
#define GDI32_GetEnhMetaFileDescriptionW                                     0xEC6A36E8u
#define GDI32_GetEnhMetaFileHeader                                           0x177BB59Cu
#define GDI32_GetEnhMetaFilePaletteEntries                                   0xB2CEF3BEu
#define GDI32_GetEnhMetaFilePixelFormat                                      0x95892B45u
#define GDI32_GetEnhMetaFileW                                                0xC09392A8u
#define GDI32_GetFontAssocStatus                                             0xB0E9FFFDu
#define GDI32_GetFontData                                                    0xBFF517A2u
#define GDI32_GetFontFileData                                                0xEE675D01u
#define GDI32_GetFontFileInfo                                                0xD2651B8Fu
#define GDI32_GetFontLanguageInfo                                            0xE017009Cu
#define GDI32_GetFontRealizationInfo                                         0xCFE1136Cu
#define GDI32_GetFontResourceInfoW                                           0x99109C20u
#define GDI32_GetFontUnicodeRanges                                           0x5E15C602u
#define GDI32_GetGlyphIndicesA                                               0xBDF352D2u
#define GDI32_GetGlyphIndicesW                                               0xBDF352C4u
#define GDI32_GetGlyphOutline                                                0xBD9D0D3Au
#define GDI32_GetGlyphOutlineA                                               0xA1A757F2u
#define GDI32_GetGlyphOutlineW                                               0xA1A757E4u
#define GDI32_GetGlyphOutlineWow                                             0x928B7D28u
#define GDI32_GetGraphicsMode                                                0xA6E5DDEEu
#define GDI32_GetHFONT                                                       0x0090A3BFu
#define GDI32_GetICMProfileA                                                 0x6E2AD63Eu
#define GDI32_GetICMProfileW                                                 0x6E2AD628u
#define GDI32_GetKerningPairs                                                0xB6B0D5ACu
#define GDI32_GetKerningPairsA                                               0x1AB59697u
#define GDI32_GetKerningPairsW                                               0x1AB59681u
#define GDI32_GetLayout                                                      0x9203DB6Eu
#define GDI32_GetLogColorSpaceA                                              0x13846647u
#define GDI32_GetLogColorSpaceW                                              0x13846651u
#define GDI32_GetMapMode                                                     0x13FF8325u
#define GDI32_GetMetaFileA                                                   0x92D25895u
#define GDI32_GetMetaFileBitsEx                                              0xEF3C2B54u
#define GDI32_GetMetaFileW                                                   0x92D25883u
#define GDI32_GetMetaRgn                                                     0xE7BFF526u
#define GDI32_GetMiterLimit                                                  0x6946BCC6u
#define GDI32_GetNearestColor                                                0xC1E6AE8Bu
#define GDI32_GetNearestPaletteIndex                                         0xFA8728FFu
#define GDI32_GetNumberOfPhysicalMonitors                                    0x13B21533u
#define GDI32_GetOPMInformation                                              0xCAA020BFu
#define GDI32_GetOPMRandomNumber                                             0xD90B1044u
#define GDI32_GetObjectA                                                     0x225D1707u
#define GDI32_GetObjectType                                                  0xCA858975u
#define GDI32_GetObjectW                                                     0x225D1711u
#define GDI32_GetOutlineTextMetricsA                                         0x3CA68486u
#define GDI32_GetOutlineTextMetricsW                                         0x3CA68490u
#define GDI32_GetPaletteEntries                                              0x88AC0F17u
#define GDI32_GetPath                                                        0x835F68A3u
#define GDI32_GetPhysicalMonitorDescription                                  0xE423C7CFu
#define GDI32_GetPhysicalMonitors                                            0x54E4BBABu
#define GDI32_GetPixel                                                       0xDD15D407u
#define GDI32_GetPixelFormat                                                 0xC7FDEEBCu
#define GDI32_GetPolyFillMode                                                0xD6BE5485u
#define GDI32_GetROP2                                                        0x3B5BE9F9u
#define GDI32_GetRandomRgn                                                   0x484485B0u
#define GDI32_GetRasterizerCaps                                              0xCAEEF5C5u
#define GDI32_GetRegionData                                                  0xC0860669u
#define GDI32_GetRelAbs                                                      0x2A4131D5u
#define GDI32_GetRgnBox                                                      0x266090DEu
#define GDI32_GetStockObject                                                 0xD48C75A2u
#define GDI32_GetStretchBltMode                                              0xA8A2E184u
#define GDI32_GetStringBitmapA                                               0x9F0433E4u
#define GDI32_GetStringBitmapW                                               0x9F0433F2u
#define GDI32_GetSuggestedOPMProtectedOutputArraySize                        0x288C045Au
#define GDI32_GetSystemPaletteEntries                                        0x0794EC48u
#define GDI32_GetSystemPaletteUse                                            0xC7500A28u
#define GDI32_GetTextAlign                                                   0x86A10310u
#define GDI32_GetTextCharacterExtra                                          0x57B38FF3u
#define GDI32_GetTextCharset                                                 0x3696AEF0u
#define GDI32_GetTextCharsetInfo                                             0x570F8D84u
#define GDI32_GetTextColor                                                   0x9280028Cu
#define GDI32_GetTextExtentExPointA                                          0xB4FE9C4Bu
#define GDI32_GetTextExtentExPointI                                          0xB4FE9C43u
#define GDI32_GetTextExtentExPointW                                          0xB4FE9C5Du
#define GDI32_GetTextExtentExPointWPri                                       0x3F406EB2u
#define GDI32_GetTextExtentPoint32A                                          0x68E392B8u
#define GDI32_GetTextExtentPoint32W                                          0x68E392AEu
#define GDI32_GetTextExtentPointA                                            0x3974BE28u
#define GDI32_GetTextExtentPointI                                            0x3974BE20u
#define GDI32_GetTextExtentPointW                                            0x3974BE3Eu
#define GDI32_GetTextFaceA                                                   0xAED145BFu
#define GDI32_GetTextFaceAliasW                                              0xDF6CDFA9u
#define GDI32_GetTextFaceW                                                   0xAED145A9u
#define GDI32_GetTextMetricsA                                                0xBDDDABB9u
#define GDI32_GetTextMetricsW                                                0xBDDDABAFu
#define GDI32_GetTransform                                                   0x2585E627u
#define GDI32_GetViewportExtEx                                               0xDBD0073Bu
#define GDI32_GetViewportOrgEx                                               0x9770023Bu
#define GDI32_GetWinMetaFileBits                                             0x8947D092u
#define GDI32_GetWindowExtEx                                                 0xA959BDCEu
#define GDI32_GetWindowOrgEx                                                 0xE5F9B8CEu
#define GDI32_GetWorldTransform                                              0xCAD8CB2Du
#define GDI32_HT_Get8BPPFormatPalette                                        0xAC5C6115u
#define GDI32_HT_Get8BPPMaskPalette                                          0x46B63F3Cu
#define GDI32_IntersectClipRect                                              0xBA077546u
#define GDI32_InvertRgn                                                      0x3F3113A6u
#define GDI32_IsValidEnhMetaRecord                                           0xBD71528Cu
#define GDI32_IsValidEnhMetaRecordOffExt                                     0x46CC1CB7u
#define GDI32_LPtoDP                                                         0xB908BAC9u
#define GDI32_LineDDA                                                        0x16FBB212u
#define GDI32_LineTo                                                         0x929AB7F6u
#define GDI32_MaskBlt                                                        0x0F2EF537u
#define GDI32_MirrorRgn                                                      0x06E01488u
#define GDI32_ModifyWorldTransform                                           0x6F377739u
#define GDI32_MoveToEx                                                       0xD2434A97u
#define GDI32_NamedEscape                                                    0xA7075D55u
#define GDI32_OffsetClipRgn                                                  0x10DF7C28u
#define GDI32_OffsetRgn                                                      0x7E45158Au
#define GDI32_OffsetViewportOrgEx                                            0x57173F97u
#define GDI32_OffsetWindowOrgEx                                              0xFC36D3FEu
#define GDI32_PATHOBJ_bEnum                                                  0xA71CCC05u
#define GDI32_PATHOBJ_bEnumClipLines                                         0x5C627488u
#define GDI32_PATHOBJ_vEnumStart                                             0xCD87E27Eu
#define GDI32_PATHOBJ_vEnumStartClipLines                                    0x930F27EDu
#define GDI32_PATHOBJ_vGetBounds                                             0xAA4560A7u
#define GDI32_PaintRgn                                                       0xCEF49ABFu
#define GDI32_PatBlt                                                         0x0E1DBAD5u
#define GDI32_PathToRegion                                                   0x0CEE7ACDu
#define GDI32_Pie                                                            0x400D2064u
#define GDI32_PlayEnhMetaFile                                                0xC3F8D29Cu
#define GDI32_PlayEnhMetaFileRecord                                          0x8EF941BFu
#define GDI32_PlayMetaFile                                                   0xC60C9B3Eu
#define GDI32_PlayMetaFileRecord                                             0x9C91C0C2u
#define GDI32_PlgBlt                                                         0x0ECDB355u
#define GDI32_PolyBezier                                                     0xC842B2F4u
#define GDI32_PolyBezierTo                                                   0xD32B8AA4u
#define GDI32_PolyDraw                                                       0x4F87C2ACu
#define GDI32_PolyPatBlt                                                     0x640395D6u
#define GDI32_PolyPolygon                                                    0x5F39B172u
#define GDI32_PolyPolyline                                                   0x2E2E4E02u
#define GDI32_PolyTextOutA                                                   0x7EFF9F8Eu
#define GDI32_PolyTextOutW                                                   0x7EFF9F98u
#define GDI32_Polygon                                                        0x9AD9DC31u
#define GDI32_Polyline                                                       0x238636BEu
#define GDI32_PolylineTo                                                     0xF88498B5u
#define GDI32_PtInRegion                                                     0xE0462749u
#define GDI32_PtVisible                                                      0x2F286435u
#define GDI32_QueryFontAssocStatus                                           0xD87F2B91u
#define GDI32_RealizePalette                                                 0xA3CAED93u
#define GDI32_RectInRegion                                                   0xE60F26DDu
#define GDI32_RectVisible                                                    0x2388567Du
#define GDI32_Rectangle                                                      0xB205258Fu
#define GDI32_RemoveFontMemResourceEx                                        0xDDCC8010u
#define GDI32_RemoveFontResourceA                                            0x701B0B55u
#define GDI32_RemoveFontResourceExA                                          0x45CF6C6Cu
#define GDI32_RemoveFontResourceExW                                          0x45CF6C7Au
#define GDI32_RemoveFontResourceTracking                                     0xA1A1AD7Eu
#define GDI32_RemoveFontResourceW                                            0x701B0B43u
#define GDI32_ResetDCA                                                       0x86411AA4u
#define GDI32_ResetDCW                                                       0x86411AB2u
#define GDI32_ResizePalette                                                  0xD3C849ECu
#define GDI32_RestoreDC                                                      0xBAE42BA9u
#define GDI32_RoundRect                                                      0xEA515BAAu
#define GDI32_STROBJ_bEnum                                                   0xA455CC00u
#define GDI32_STROBJ_bEnumPositionsOnly                                      0x51A993A6u
#define GDI32_STROBJ_bGetAdvanceWidths                                       0x0A1343D5u
#define GDI32_STROBJ_dwGetCodePage                                           0xAD9211AEu
#define GDI32_STROBJ_vEnumStart                                              0xCB15E274u
#define GDI32_SaveDC                                                         0x9218BBE4u
#define GDI32_ScaleViewportExtEx                                             0xB9F32401u
#define GDI32_ScaleWindowExtEx                                               0x21917356u
#define GDI32_SelectBrushLocal                                               0x61E1FE70u
#define GDI32_SelectClipPath                                                 0xC7437B2Bu
#define GDI32_SelectClipRgn                                                  0xD21EFA01u
#define GDI32_SelectFontLocal                                                0x2AA59A8Cu
#define GDI32_SelectObject                                                   0x8798B17Cu
#define GDI32_SelectPalette                                                  0x4A485090u
#define GDI32_SetAbortProc                                                   0xD1FFC811u
#define GDI32_SetArcDirection                                                0xB2A15569u
#define GDI32_SetBitmapAttributes                                            0x141549F9u
#define GDI32_SetBitmapBits                                                  0x3B670966u
#define GDI32_SetBitmapDimensionEx                                           0x3F58364Cu
#define GDI32_SetBkColor                                                     0x1E4D3226u
#define GDI32_SetBkMode                                                      0x92A1F563u
#define GDI32_SetBoundsRect                                                  0x0355276Bu
#define GDI32_SetBrushAttributes                                             0x5ECC082Eu
#define GDI32_SetBrushOrgEx                                                  0x0896AA7Fu
#define GDI32_SetColorAdjustment                                             0x7BE28E74u
#define GDI32_SetColorSpace                                                  0xD9757656u
#define GDI32_SetDCBrushColor                                                0x4083AE2Bu
#define GDI32_SetDCPenColor                                                  0x0C9655F8u
#define GDI32_SetDIBColorTable                                               0xBC527497u
#define GDI32_SetDIBits                                                      0x8883F2F9u
#define GDI32_SetDIBitsToDevice                                              0x81B56266u
#define GDI32_SetDeviceGammaRamp                                             0x97F7C689u
#define GDI32_SetEnhMetaFileBits                                             0x6DC7DE90u
#define GDI32_SetFontEnumeration                                             0x561B3330u
#define GDI32_SetGraphicsMode                                                0xA3E5DDEEu
#define GDI32_SetICMMode                                                     0x12AE8361u
#define GDI32_SetICMProfileA                                                 0x6E2AFE3Eu
#define GDI32_SetICMProfileW                                                 0x6E2AFE28u
#define GDI32_SetLayout                                                      0x9203CF6Eu
#define GDI32_SetLayoutWidth                                                 0xB1792A34u
#define GDI32_SetMagicColors                                                 0xAEFC76C5u
#define GDI32_SetMapMode                                                     0x117F8325u
#define GDI32_SetMapperFlags                                                 0x5C6F41A7u
#define GDI32_SetMetaFileBitsEx                                              0xEF282B54u
#define GDI32_SetMetaRgn                                                     0xE53FF526u
#define GDI32_SetMiterLimit                                                  0x2946BCC7u
#define GDI32_SetOPMSigningKeyAndSequenceNumbers                             0x6DDFDDE7u
#define GDI32_SetPaletteEntries                                              0x88B80F17u
#define GDI32_SetPixel                                                       0x7D15D407u
#define GDI32_SetPixelFormat                                                 0xC7FDC6BCu
#define GDI32_SetPixelV                                                      0xBA80EFF4u
#define GDI32_SetPolyFillMode                                                0xD3BE5485u
#define GDI32_SetROP2                                                        0x3B5EE9F9u
#define GDI32_SetRectRgn                                                     0xE4483FA6u
#define GDI32_SetRelAbs                                                      0x2A4125D5u
#define GDI32_SetStretchBltMode                                              0xA8B6E184u
#define GDI32_SetSystemPaletteUse                                            0xC7505A28u
#define GDI32_SetTextAlign                                                   0x86AB0310u
#define GDI32_SetTextCharacterExtra                                          0x57B38EB3u
#define GDI32_SetTextColor                                                   0x928A028Cu
#define GDI32_SetTextJustification                                           0x8B680D44u
#define GDI32_SetViewportExtEx                                               0xDBD0079Bu
#define GDI32_SetViewportOrgEx                                               0x9770029Bu
#define GDI32_SetVirtualResolution                                           0xD4618145u
#define GDI32_SetWinMetaFileBits                                             0x0947D090u
#define GDI32_SetWindowExtEx                                                 0xA95995CEu
#define GDI32_SetWindowOrgEx                                                 0xE5F990CEu
#define GDI32_SetWorldTransform                                              0xCACCCB2Du
#define GDI32_StartDocA                                                      0x1B5451A7u
#define GDI32_StartDocW                                                      0x1B5451B1u
#define GDI32_StartFormPage                                                  0x8CBD7D03u
#define GDI32_StartPage                                                      0x2354DB83u
#define GDI32_StretchBlt                                                     0x9444809Eu
#define GDI32_StretchDIBits                                                  0x841ED434u
#define GDI32_StrokeAndFillPath                                              0x13F5D011u
#define GDI32_StrokePath                                                     0x18251CBCu
#define GDI32_SwapBuffers                                                    0x1C9E93D7u
#define GDI32_TextOutA                                                       0x7357E732u
#define GDI32_TextOutW                                                       0x7357E724u
#define GDI32_TranslateCharsetInfo                                           0x730DCDB8u
#define GDI32_UnloadNetworkFonts                                             0x317B80DFu
#define GDI32_UnrealizeObject                                                0x7AC7216Bu
#define GDI32_UpdateColors                                                   0x164DD637u
#define GDI32_UpdateICMRegKeyA                                               0xFF710D32u
#define GDI32_UpdateICMRegKeyW                                               0xFF710D24u
#define GDI32_WidenPath                                                      0xCAF7FFA0u
#define GDI32_XFORMOBJ_bApplyXform                                           0x4E091C70u
#define GDI32_XFORMOBJ_iGetXform                                             0x6E90C3D9u
#define GDI32_XLATEOBJ_cGetPalette                                           0xC180E08Du
#define GDI32_XLATEOBJ_hGetColorTransform                                    0xEDEA329Du
#define GDI32_XLATEOBJ_iXlate                                                0xDE53ADA4u
#define GDI32_XLATEOBJ_piVector                                              0x1F38E530u
#define GDI32_bInitSystemAndFontsDirectoriesW                                0x64090FC5u
#define GDI32_bMakePathNameW                                                 0x646185ADu
#define GDI32_cGetTTFFromFOT                                                 0x545A45E7u
#define GDI32_gdiPlaySpoolStream                                             0x010F2CC7u
#define PSAPI_EmptyWorkingSet                                                0xC16CE7C7u
#define PSAPI_EnumDeviceDrivers                                              0xEA984039u
#define PSAPI_EnumPageFilesA                                                 0x40BD7C7Du
#define PSAPI_EnumPageFilesW                                                 0x40BD7C6Bu
#define PSAPI_EnumProcessModules                                             0xB9E68B04u
#define PSAPI_EnumProcessModulesEx                                           0x12EF3A54u
#define PSAPI_EnumProcesses                                                  0x07D008E7u
#define PSAPI_GetDeviceDriverBaseNameA                                       0x658310E7u
#define PSAPI_GetDeviceDriverBaseNameW                                       0x658310F1u
#define PSAPI_GetDeviceDriverFileNameA                                       0x2584D4E7u
#define PSAPI_GetDeviceDriverFileNameW                                       0x2584D4F1u
#define PSAPI_GetMappedFileNameA                                             0x076A1632u
#define PSAPI_GetMappedFileNameW                                             0x076A1624u
#define PSAPI_GetModuleBaseNameA                                             0x074F4E17u
#define PSAPI_GetModuleBaseNameW                                             0x074F4E01u
#define PSAPI_GetModuleFileNameExA                                           0x4D122269u
#define PSAPI_GetModuleFileNameExW                                           0x4D12227Fu
#define PSAPI_GetModuleInformation                                           0xAD3FC0E2u
#define PSAPI_GetPerformanceInfo                                             0x6C51C138u
#define PSAPI_GetProcessImageFileNameA                                       0x2129471Eu
#define PSAPI_GetProcessImageFileNameW                                       0x21294708u
#define PSAPI_GetProcessMemoryInfo                                           0x360F915Du
#define PSAPI_GetWsChanges                                                   0x0CAF8135u
#define PSAPI_GetWsChangesEx                                                 0xD43A1E7Cu
#define PSAPI_InitializeProcessForWsWatch                                    0xBA64F840u
#define PSAPI_QueryWorkingSet                                                0x946FD7C6u
#define PSAPI_QueryWorkingSetEx                                              0x1A591F27u
#define DBGHELP_DbgHelpCreateUserDump                                        0x78E7BB13u
#define DBGHELP_DbgHelpCreateUserDumpW                                       0xF7626F4Bu
#define DBGHELP_EnumDirTree                                                  0xAAFDFEA1u
#define DBGHELP_EnumDirTreeW                                                 0xBFD43508u
#define DBGHELP_EnumerateLoadedModules                                       0xDD91454Bu
#define DBGHELP_EnumerateLoadedModules64                                     0x2F708521u
#define DBGHELP_EnumerateLoadedModulesEx                                     0x2F7EE56Du
#define DBGHELP_EnumerateLoadedModulesExW                                    0xDCADA5B8u
#define DBGHELP_EnumerateLoadedModulesW64                                    0x94A465DBu
#define DBGHELP_ExtensionApiVersion                                          0x68DA59BFu
#define DBGHELP_FindDebugInfoFile                                            0xBFB20E6Eu
#define DBGHELP_FindDebugInfoFileEx                                          0xBAF66841u
#define DBGHELP_FindDebugInfoFileExW                                         0xCD083709u
#define DBGHELP_FindExecutableImage                                          0xFF19DDD2u
#define DBGHELP_FindExecutableImageEx                                        0x4BF4C70Fu
#define DBGHELP_FindExecutableImageExW                                       0x98E1E929u
#define DBGHELP_FindFileInPath                                               0x7A000C6Eu
#define DBGHELP_FindFileInSearchPath                                         0x29F3B22Fu
#define DBGHELP_GetTimestampForLoadedLibrary                                 0x7A66BE9Cu
#define DBGHELP_ImageDirectoryEntryToData                                    0x49B50086u
#define DBGHELP_ImageDirectoryEntryToDataEx                                  0x192E747Au
#define DBGHELP_ImageNtHeader                                                0x7A9774E1u
#define DBGHELP_ImageRvaToSection                                            0x9E298210u
#define DBGHELP_ImageRvaToVa                                                 0x9E0A8C3Bu
#define DBGHELP_ImagehlpApiVersion                                           0x5A83E1E1u
#define DBGHELP_ImagehlpApiVersionEx                                         0x8562AFFFu
#define DBGHELP_MakeSureDirectoryPathExists                                  0x31430CA8u
#define DBGHELP_MapDebugInformation                                          0xBEC34FB9u
#define DBGHELP_MiniDumpReadDumpStream                                       0x080EE8AFu
#define DBGHELP_MiniDumpWriteDump                                            0x17B0C562u
#define DBGHELP_SearchTreeForFile                                            0xAD5BA0C7u
#define DBGHELP_SearchTreeForFileW                                           0x7418F5FCu
#define DBGHELP_StackWalk                                                    0x22A5B82Fu
#define DBGHELP_StackWalk64                                                  0xBC8C56D4u
#define DBGHELP_SymAddSourceStream                                           0xB5E56111u
#define DBGHELP_SymAddSourceStreamA                                          0xAC2236FDu
#define DBGHELP_SymAddSourceStreamW                                          0xAC2236EBu
#define DBGHELP_SymAddSymbol                                                 0xA20D16ACu
#define DBGHELP_SymAddSymbolW                                                0xA2D59416u
#define DBGHELP_SymCleanup                                                   0xDC2E292Au
#define DBGHELP_SymDeleteSymbol                                              0xE6E600DAu
#define DBGHELP_SymDeleteSymbolW                                             0xC01B5C8Bu
#define DBGHELP_SymEnumLines                                                 0xC15810CFu
#define DBGHELP_SymEnumLinesW                                                0x0219F87Cu
#define DBGHELP_SymEnumProcesses                                             0x1990D07Fu
#define DBGHELP_SymEnumSourceFileTokens                                      0x83CB0B98u
#define DBGHELP_SymEnumSourceFiles                                           0x089B7F12u
#define DBGHELP_SymEnumSourceFilesW                                          0x6FE24144u
#define DBGHELP_SymEnumSourceLines                                           0x003B7F12u
#define DBGHELP_SymEnumSourceLinesW                                          0x6FE24050u
#define DBGHELP_SymEnumSym                                                   0x292E2F33u
#define DBGHELP_SymEnumSymbols                                               0x4F3F2390u
#define DBGHELP_SymEnumSymbolsForAddr                                        0x1544D931u
#define DBGHELP_SymEnumSymbolsForAddrW                                       0x9B2622FFu
#define DBGHELP_SymEnumSymbolsW                                              0xE47209B0u
#define DBGHELP_SymEnumTypes                                                 0xB8D818CFu
#define DBGHELP_SymEnumTypesByName                                           0x85AE69D6u
#define DBGHELP_SymEnumTypesByNameW                                          0xCD3AD0E2u
#define DBGHELP_SymEnumTypesW                                                0x0319F74Cu
#define DBGHELP_SymEnumerateModules                                          0x79A18BC6u
#define DBGHELP_SymEnumerateModules64                                        0x19E0461Bu
#define DBGHELP_SymEnumerateModulesW64                                       0x8CC32309u
#define DBGHELP_SymEnumerateSymbols                                          0x7537206Au
#define DBGHELP_SymEnumerateSymbols64                                        0xA9D21CB5u
#define DBGHELP_SymEnumerateSymbolsW                                         0xE40D4EF1u
#define DBGHELP_SymEnumerateSymbolsW64                                       0xC796F50Fu
#define DBGHELP_SymFindDebugInfoFile                                         0x3633EA63u
#define DBGHELP_SymFindDebugInfoFileW                                        0x7D4C6691u
#define DBGHELP_SymFindExecutableImage                                       0xC93FDA42u
#define DBGHELP_SymFindExecutableImageW                                      0xFB485970u
#define DBGHELP_SymFindFileInPath                                            0x61130FA6u
#define DBGHELP_SymFindFileInPathW                                           0x61F4CC75u
#define DBGHELP_SymFromAddr                                                  0xA9E04C63u
#define DBGHELP_SymFromAddrW                                                 0x098C756Bu
#define DBGHELP_SymFromIndex                                                 0x090E9044u
#define DBGHELP_SymFromIndexW                                                0xD2088176u
#define DBGHELP_SymFromName                                                  0xBDE16BF4u
#define DBGHELP_SymFromNameW                                                 0x2D7E97EBu
#define DBGHELP_SymFromToken                                                 0x34DE90D2u
#define DBGHELP_SymFromTokenW                                                0xD21A46CCu
#define DBGHELP_SymFunctionTableAccess                                       0x8579BCA3u
#define DBGHELP_SymFunctionTableAccess64                                     0x8E1326C6u
#define DBGHELP_SymGetFileLineOffsets64                                      0x4EEEEFEEu
#define DBGHELP_SymGetHomeDirectory                                          0x47999936u
#define DBGHELP_SymGetHomeDirectoryW                                         0x3326C8A4u
#define DBGHELP_SymGetLineFromAddr                                           0x9A9F8DEEu
#define DBGHELP_SymGetLineFromAddr64                                         0xBA6CBE03u
#define DBGHELP_SymGetLineFromAddrW64                                        0x13C03778u
#define DBGHELP_SymGetLineFromName                                           0x8E9EAA79u
#define DBGHELP_SymGetLineFromName64                                         0xE63CBA9Du
#define DBGHELP_SymGetLineFromNameW64                                        0x1353FCF2u
#define DBGHELP_SymGetLineNext                                               0x6ED334B0u
#define DBGHELP_SymGetLineNext64                                             0xC1BD8CE6u
#define DBGHELP_SymGetLineNextW64                                            0x359C9802u
#define DBGHELP_SymGetLinePrev                                               0x32D09BB2u
#define DBGHELP_SymGetLinePrev64                                             0xC8CD825Au
#define DBGHELP_SymGetLinePrevW64                                            0x344B192Cu
#define DBGHELP_SymGetModuleBase                                             0xC59137F3u
#define DBGHELP_SymGetModuleBase64                                           0xCF1084EBu
#define DBGHELP_SymGetModuleInfo                                             0xF9939279u
#define DBGHELP_SymGetModuleInfo64                                           0xE7E08E7Du
#define DBGHELP_SymGetModuleInfoW                                            0x724F3F65u
#define DBGHELP_SymGetModuleInfoW64                                          0x95CFFCC9u
#define DBGHELP_SymGetOmapBlockBase                                          0x25BFE416u
#define DBGHELP_SymGetOmaps                                                  0xB7C71A54u
#define DBGHELP_SymGetOptions                                                0x2382D0A0u
#define DBGHELP_SymGetScope                                                  0x8E071D42u
#define DBGHELP_SymGetScopeW                                                 0xE3A85197u
#define DBGHELP_SymGetSearchPath                                             0xEE8014E0u
#define DBGHELP_SymGetSearchPathW                                            0x029C1D87u
#define DBGHELP_SymGetSourceFile                                             0x6E5315EDu
#define DBGHELP_SymGetSourceFileFromToken                                    0x84FADB54u
#define DBGHELP_SymGetSourceFileFromTokenW                                   0x5B6A90C8u
#define DBGHELP_SymGetSourceFileToken                                        0x75EABC35u
#define DBGHELP_SymGetSourceFileTokenW                                       0x5786AEEAu
#define DBGHELP_SymGetSourceFileW                                            0x62BDAD9Du
#define DBGHELP_SymGetSourceVarFromToken                                     0x698A9978u
#define DBGHELP_SymGetSourceVarFromTokenW                                    0x532F0D66u
#define DBGHELP_SymGetSymFromAddr                                            0xE2C9C1ADu
#define DBGHELP_SymGetSymFromAddr64                                          0xB78DE732u
#define DBGHELP_SymGetSymFromName                                            0xF6C8E63Au
#define DBGHELP_SymGetSymFromName64                                          0xEBDDE3ACu
#define DBGHELP_SymGetSymNext                                                0x0A170335u
#define DBGHELP_SymGetSymNext64                                              0xD42E9C38u
#define DBGHELP_SymGetSymPrev                                                0x5614AC37u
#define DBGHELP_SymGetSymPrev64                                              0xDD5E9284u
#define DBGHELP_SymGetSymbolFile                                             0xAEC703F5u
#define DBGHELP_SymGetSymbolFileW                                            0xE07EB58Fu
#define DBGHELP_SymGetTypeFromName                                           0x8D52AA39u
#define DBGHELP_SymGetTypeFromNameW                                          0x554731FDu
#define DBGHELP_SymGetTypeInfo                                               0x82D4F717u
#define DBGHELP_SymGetTypeInfoEx                                             0x5E03F3A4u
#define DBGHELP_SymGetUnwindInfo                                             0x6284937Du
#define DBGHELP_SymInitialize                                                0xD31E9904u
#define DBGHELP_SymInitializeW                                               0xD3209A34u
#define DBGHELP_SymLoadModule                                                0xE3585C4Cu
#define DBGHELP_SymLoadModule64                                              0x338BA145u
#define DBGHELP_SymLoadModuleEx                                              0x3385C109u
#define DBGHELP_SymLoadModuleExW                                             0xB8212627u
#define DBGHELP_SymMatchFileName                                             0x7057F6F2u
#define DBGHELP_SymMatchFileNameW                                            0xFEDE4E5Du
#define DBGHELP_SymMatchString                                               0x2741AAF0u
#define DBGHELP_SymMatchStringA                                              0x355E04A9u
#define DBGHELP_SymMatchStringW                                              0x355E04BFu
#define DBGHELP_SymNext                                                      0x92CBE787u
#define DBGHELP_SymNextW                                                     0x7CF0F20Eu
#define DBGHELP_SymPrev                                                      0xCEC84885u
#define DBGHELP_SymPrevW                                                     0x0910B98Eu
#define DBGHELP_SymRefreshModuleList                                         0x4B89EB2Du
#define DBGHELP_SymRegisterCallback                                          0x3F6162F9u
#define DBGHELP_SymRegisterCallback64                                        0xE4FB45BFu
#define DBGHELP_SymRegisterCallbackW64                                       0xECB7BCAAu
#define DBGHELP_SymRegisterFunctionEntryCallback                             0xEF70990Bu
#define DBGHELP_SymRegisterFunctionEntryCallback64                           0x2FBB0250u
#define DBGHELP_SymSearch                                                    0x0647434Cu
#define DBGHELP_SymSearchW                                                   0xE869809Fu
#define DBGHELP_SymSetContext                                                0x08A31E19u
#define DBGHELP_SymSetHomeDirectory                                          0x47999996u
#define DBGHELP_SymSetHomeDirectoryW                                         0x3332C8A4u
#define DBGHELP_SymSetOptions                                                0x2102D0A0u
#define DBGHELP_SymSetParentWindow                                           0xDC517A3Au
#define DBGHELP_SymSetScopeFromAddr                                          0xA1DD6201u
#define DBGHELP_SymSetScopeFromIndex                                         0xACC2D143u
#define DBGHELP_SymSetSearchPath                                             0xAE8014E1u
#define DBGHELP_SymSetSearchPathW                                            0x029C3587u
#define DBGHELP_SymSrvDeltaName                                              0x602FB041u
#define DBGHELP_SymSrvDeltaNameW                                             0xF6082C52u
#define DBGHELP_SymSrvGetFileIndexInfo                                       0xCC108D35u
#define DBGHELP_SymSrvGetFileIndexInfoW                                      0x11A6B9D5u
#define DBGHELP_SymSrvGetFileIndexString                                     0xCE9D8867u
#define DBGHELP_SymSrvGetFileIndexStringW                                    0xB10CF984u
#define DBGHELP_SymSrvGetFileIndexes                                         0x0716D6AEu
#define DBGHELP_SymSrvGetFileIndexesW                                        0xDAD5C0B5u
#define DBGHELP_SymSrvGetSupplement                                          0x54FFA06Du
#define DBGHELP_SymSrvGetSupplementW                                         0xF40DAAC8u
#define DBGHELP_SymSrvIsStore                                                0x3370C930u
#define DBGHELP_SymSrvIsStoreW                                               0x19260639u
#define DBGHELP_SymSrvStoreFile                                              0xC86F434Du
#define DBGHELP_SymSrvStoreFileW                                             0xE869B95Au
#define DBGHELP_SymSrvStoreSupplement                                        0xA02BD836u
#define DBGHELP_SymSrvStoreSupplementW                                       0x7B06D452u
#define DBGHELP_SymUnDName                                                   0xE238BEBBu
#define DBGHELP_SymUnDName64                                                 0xEF8E22CEu
#define DBGHELP_SymUnloadModule                                              0x138EAE43u
#define DBGHELP_SymUnloadModule64                                            0x0C48FA8Du
#define DBGHELP_UnDecorateSymbolName                                         0x41AB203Bu
#define DBGHELP_UnDecorateSymbolNameW                                        0x64076862u
#define DBGHELP_UnmapDebugInformation                                        0x89C3CAE9u
#define DBGHELP_WinDbgExtensionDllInit                                       0xFA039650u
#define DBGHELP_block                                                        0xBA2C566Au
#define DBGHELP_chksym                                                       0xCA8F152Au
#define DBGHELP_dbghelp                                                      0x9264B4B5u
#define DBGHELP_dh                                                           0x000C8068u
#define DBGHELP_fptr                                                         0xC00EB373u
#define DBGHELP_homedir                                                      0x96C7122Du
#define DBGHELP_itoldyouso                                                   0xA6A52325u
#define DBGHELP_lmi                                                          0xB00DA068u
#define DBGHELP_lminfo                                                       0xBEDCF436u
#define DBGHELP_omap                                                         0xB40C17F1u
#define DBGHELP_srcfiles                                                     0x2E701437u
#define DBGHELP_stack_force_ebp                                              0xED51E09Eu
#define DBGHELP_stackdbg                                                     0x0E217527u
#define DBGHELP_sym                                                          0xCC0F206Cu
#define DBGHELP_symsrv                                                       0xCB9E7611u
#define DBGHELP_vc7fpo                                                       0x9E3E1B02u
#define OLE32_BindMoniker                                                    0x87DFBB26u
#define OLE32_CLIPFORMAT_UserFree                                            0xDC5E0D24u
#define OLE32_CLIPFORMAT_UserFreeExt                                         0x3B09921Bu
#define OLE32_CLIPFORMAT_UserMarshal                                         0x8E787925u
#define OLE32_CLIPFORMAT_UserMarshalExt                                      0x283392B2u
#define OLE32_CLIPFORMAT_UserSize                                            0xB05DE7A4u
#define OLE32_CLIPFORMAT_UserSizeExt                                         0x3AFCD22Du
#define OLE32_CLIPFORMAT_UserUnmarshal                                       0xFF9210ACu
#define OLE32_CLIPFORMAT_UserUnmarshalExt                                    0xDD07560Au
#define OLE32_CLSIDFromOle1Class                                             0xFFB2D23Bu
#define OLE32_CLSIDFromProgID                                                0xCB163C73u
#define OLE32_CLSIDFromProgIDEx                                              0xCF24F889u
#define OLE32_CLSIDFromString                                                0xF372D2D6u
#define OLE32_CheckInitDde                                                   0x420F181Bu
#define OLE32_CleanROTForApartment                                           0xC856DBD7u
#define OLE32_ClipboardProcessUninitialize                                   0x8D572626u
#define OLE32_CoAddRefServerProcess                                          0x92BD7B74u
#define OLE32_CoAicGetTokenForCOM                                            0x87B8B2D0u
#define OLE32_CoAllowSetForegroundWindow                                     0x54B88FA2u
#define OLE32_CoBuildVersion                                                 0x7E39B2F4u
#define OLE32_CoCancelCall                                                   0xFA948198u
#define OLE32_CoCheckElevationEnabled                                        0x24A96769u
#define OLE32_CoCopyProxy                                                    0xCCF37B85u
#define OLE32_CoCreateFreeThreadedMarshaler                                  0xC33633C2u
#define OLE32_CoCreateGuid                                                   0xF204B0B2u
#define OLE32_CoCreateInstance                                               0xC225B09Bu
#define OLE32_CoCreateInstanceEx                                             0x6F0036BAu
#define OLE32_CoCreateInstanceFromApp                                        0xDCFE9B91u
#define OLE32_CoCreateObjectInContext                                        0x86266526u
#define OLE32_CoDeactivateObject                                             0x75E0B562u
#define OLE32_CoDecodeProxy                                                  0xFD81DBA5u
#define OLE32_CoDecrementMTAUsage                                            0x4C3AC7D3u
#define OLE32_CoDisableCallCancellation                                      0xAC921502u
#define OLE32_CoDisconnectContext                                            0x32ED5153u
#define OLE32_CoDisconnectObject                                             0xCDE9557Eu
#define OLE32_CoDosDateTimeToFileTime                                        0x668F47D4u
#define OLE32_CoEnableCallCancellation                                       0x2FCB74D8u
#define OLE32_CoFileTimeNow                                                  0x2BDF3F3Bu
#define OLE32_CoFileTimeToDosDateTime                                        0x80D945AFu
#define OLE32_CoFreeAllLibraries                                             0xCB4B1C1Bu
#define OLE32_CoFreeLibrary                                                  0x944A9DB5u
#define OLE32_CoFreeUnusedLibraries                                          0xD4191710u
#define OLE32_CoFreeUnusedLibrariesEx                                        0x4358C424u
#define OLE32_CoGetActivationState                                           0x5495F6CCu
#define OLE32_CoGetApartmentID                                               0x03BEFB86u
#define OLE32_CoGetApartmentType                                             0xEC00F50Bu
#define OLE32_CoGetCallContext                                               0xB5251BBAu
#define OLE32_CoGetCallState                                                 0x7786FE2Du
#define OLE32_CoGetCallerTID                                                 0xA0E15D0Cu
#define OLE32_CoGetCancelObject                                              0xE6557E13u
#define OLE32_CoGetClassObject                                               0x4C4A79FAu
#define OLE32_CoGetClassVersion                                              0x66BA62E9u
#define OLE32_CoGetComCatalog                                                0xB7CF20F3u
#define OLE32_CoGetContextToken                                              0xDD30ABC7u
#define OLE32_CoGetCurrentLogicalThreadId                                    0x86B1CA88u
#define OLE32_CoGetCurrentProcess                                            0x9335B7FFu
#define OLE32_CoGetDefaultContext                                            0x912A100Fu
#define OLE32_CoGetInstanceFromFile                                          0x52E43B73u
#define OLE32_CoGetInstanceFromIStorage                                      0x4B977717u
#define OLE32_CoGetInterceptor                                               0xB87BA18Cu
#define OLE32_CoGetInterceptorForOle32                                       0xDB4C1A6Du
#define OLE32_CoGetInterceptorFromTypeInfo                                   0xD80672DCu
#define OLE32_CoGetInterfaceAndReleaseStream                                 0x21787EE6u
#define OLE32_CoGetMalloc                                                    0x93E090F7u
#define OLE32_CoGetMarshalSizeMax                                            0xB3C727C7u
#define OLE32_CoGetModuleType                                                0xAB115A6Bu
#define OLE32_CoGetObject                                                    0xB7D113E4u
#define OLE32_CoGetObjectContext                                             0xB7417234u
#define OLE32_CoGetPSClsid                                                   0x60E8F27Cu
#define OLE32_CoGetProcessIdentifier                                         0x6B09A13Cu
#define OLE32_CoGetStandardMarshal                                           0x4E0C7D12u
#define OLE32_CoGetStdMarshalEx                                              0xE3BE15B3u
#define OLE32_CoGetSystemSecurityPermissions                                 0x81A0EA1Bu
#define OLE32_CoGetSystemWow64DirectoryW                                     0xA1031AEBu
#define OLE32_CoGetTreatAsClass                                              0x7D27BF20u
#define OLE32_CoHandlePriorityEventsFromMessagePump                          0xC26A0460u
#define OLE32_CoImpersonateClient                                            0xE36591AEu
#define OLE32_CoIncrementMTAUsage                                            0x4C37C78Bu
#define OLE32_CoInitialize                                                   0xE3039909u
#define OLE32_CoInitializeEx                                                 0x2784AE1Cu
#define OLE32_CoInitializeSecurity                                           0x38DEF05Fu
#define OLE32_CoInitializeWOW                                                0xDDC564A7u
#define OLE32_CoInstall                                                      0xFB2FB9B2u
#define OLE32_CoInvalidateRemoteMachineBindings                              0x6811F785u
#define OLE32_CoIsHandlerConnected                                           0xF98331E1u
#define OLE32_CoIsOle1Class                                                  0xDE70D833u
#define OLE32_CoLoadLibrary                                                  0x9FEA999Du
#define OLE32_CoLockObjectExternal                                           0x01394D04u
#define OLE32_CoMarshalHresult                                               0xB4B641C0u
#define OLE32_CoMarshalInterThreadInterfaceInStream                          0x4D05E455u
#define OLE32_CoMarshalInterface                                             0xB6AAFD4Eu
#define OLE32_CoPopServiceDomain                                             0xDFB95C21u
#define OLE32_CoPushServiceDomain                                            0x5887610Cu
#define OLE32_CoQueryAuthenticationServices                                  0x2A4177C3u
#define OLE32_CoQueryClientBlanket                                           0x2BEE352Cu
#define OLE32_CoQueryProxyBlanket                                            0x06D485C4u
#define OLE32_CoQueryReleaseObject                                           0x3BD3B87Fu
#define OLE32_CoReactivateObject                                             0x75E0B5D2u
#define OLE32_CoRegisterChannelHook                                          0x1CC983DDu
#define OLE32_CoRegisterClassObject                                          0xDCAF5296u
#define OLE32_CoRegisterInitializeSpy                                        0x166E2414u
#define OLE32_CoRegisterMallocSpy                                            0x850CA095u
#define OLE32_CoRegisterMessageFilter                                        0xFBBB48A9u
#define OLE32_CoRegisterPSClsid                                              0x325E3B72u
#define OLE32_CoRegisterSurrogate                                            0xED0BBCB5u
#define OLE32_CoRegisterSurrogateEx                                          0xD7BC8E8Au
#define OLE32_CoReleaseMarshalData                                           0x5E622CF8u
#define OLE32_CoReleaseServerProcess                                         0x893AEE2Du
#define OLE32_CoResumeClassObjects                                           0x3218E511u
#define OLE32_CoRetireServer                                                 0xB0EC3744u
#define OLE32_CoRevertToSelf                                                 0xFC094BDEu
#define OLE32_CoRevokeClassObject                                            0x4A51A4C7u
#define OLE32_CoRevokeInitializeSpy                                          0x5035DFCDu
#define OLE32_CoRevokeMallocSpy                                              0x3AB134F0u
#define OLE32_CoSetCancelObject                                              0xE3557E13u
#define OLE32_CoSetMessageDispatcher                                         0x92690E76u
#define OLE32_CoSetProxyBlanket                                              0x3B47A719u
#define OLE32_CoSetState                                                     0x1147958Eu
#define OLE32_CoSuspendClassObjects                                          0xD00E173Du
#define OLE32_CoSwitchCallContext                                            0x34F97017u
#define OLE32_CoTaskMemAlloc                                                 0x224E7A38u
#define OLE32_CoTaskMemFree                                                  0xAAD831F9u
#define OLE32_CoTaskMemRealloc                                               0xDC501819u
#define OLE32_CoTestCancel                                                   0x18A07354u
#define OLE32_CoTreatAsClass                                                 0xDCA4F059u
#define OLE32_CoUninitialize                                                 0x17081F0Bu
#define OLE32_CoUnloadingWOW                                                 0xAF5ABBB9u
#define OLE32_CoUnmarshalHresult                                             0xD4990178u
#define OLE32_CoUnmarshalInterface                                           0x572A404Cu
#define OLE32_CoVrfCheckThreadState                                          0xF9F49DDFu
#define OLE32_CoVrfGetThreadState                                            0x0DCB0864u
#define OLE32_CoVrfReleaseThreadState                                        0x34EE55E2u
#define OLE32_CoWaitForMultipleHandles                                       0x77C6D882u
#define OLE32_CoWaitForMultipleObjects                                       0x4B853804u
#define OLE32_ComPs_NdrDllCanUnloadNow                                       0xABDABCABu
#define OLE32_ComPs_NdrDllGetClassObject                                     0x442A8D08u
#define OLE32_ComPs_NdrDllRegisterProxy                                      0x83541601u
#define OLE32_ComPs_NdrDllUnregisterProxy                                    0x3F991570u
#define OLE32_CreateAntiMoniker                                              0xB60EE0BDu
#define OLE32_CreateBindCtx                                                  0x1EE74738u
#define OLE32_CreateClassMoniker                                             0x16CCCDB8u
#define OLE32_CreateDataAdviseHolder                                         0xBA275778u
#define OLE32_CreateDataCache                                                0xCC7011F3u
#define OLE32_CreateErrorInfo                                                0x636044E5u
#define OLE32_CreateFileMoniker                                              0xD6EEF8A1u
#define OLE32_CreateGenericComposite                                         0x2D9EE6B3u
#define OLE32_CreateILockBytesOnHGlobal                                      0xCB6B6DBBu
#define OLE32_CreateItemMoniker                                              0x954EF19Du
#define OLE32_CreateObjrefMoniker                                            0x39EA7584u
#define OLE32_CreateOleAdviseHolder                                          0x5AB07562u
#define OLE32_CreatePointerMoniker                                           0x5CEB5B3Cu
#define OLE32_CreateStdProgressIndicator                                     0x088C235Du
#define OLE32_CreateStreamOnHGlobal                                          0xDEF9A2F7u
#define OLE32_DcomChannelSetHResult                                          0x119F3AE9u
#define OLE32_DdeBindToObject                                                0x7ED6384Bu
#define OLE32_DeletePatternAndExtensionTables                                0x93476191u
#define OLE32_DestroyRunningObjectTable                                      0xA1B98173u
#define OLE32_DllDebugObjectRPCHook                                          0x4F9C5F3Du
#define OLE32_DllGetClassObject                                              0x4CCE7882u
#define OLE32_DllGetClassObjectWOW                                           0x3B35A170u
#define OLE32_DllRegisterServer                                              0xB3574B14u
#define OLE32_DoDragDrop                                                     0xE6E12DB1u
#define OLE32_DragDropSetFDT                                                 0x4EF4C16Bu
#define OLE32_EnableHookObject                                               0xD8803B52u
#define OLE32_FindExt                                                        0x12FEB2A7u
#define OLE32_FmtIdToPropStgName                                             0x9E336262u
#define OLE32_FreePropVariantArray                                           0x5588E59Cu
#define OLE32_GetActiveObjectExt                                             0xBE94B1CBu
#define OLE32_GetClassFile                                                   0xCD862115u
#define OLE32_GetConvertStg                                                  0x4361D47Bu
#define OLE32_GetDocumentBitStg                                              0xDA55D51Bu
#define OLE32_GetErrorInfo                                                   0x2193A0A7u
#define OLE32_GetHGlobalFromILockBytes                                       0x1D2A9208u
#define OLE32_GetHGlobalFromStream                                           0x7B6EE249u
#define OLE32_GetHookInterface                                               0x6726712Du
#define OLE32_GetObjectFromRotByPath                                         0xF43F2A22u
#define OLE32_GetRunningObjectTable                                          0x20529E3Fu
#define OLE32_HACCEL_UserFree                                                0x4C911FBCu
#define OLE32_HACCEL_UserMarshal                                             0xE9F1356Du
#define OLE32_HACCEL_UserSize                                                0x2092F53Cu
#define OLE32_HACCEL_UserUnmarshal                                           0xDE0C359Du
#define OLE32_HBITMAP_UserFree                                               0x3D960DEDu
#define OLE32_HBITMAP_UserMarshal                                            0x6A781DD5u
#define OLE32_HBITMAP_UserSize                                               0x5195E76Du
#define OLE32_HBITMAP_UserUnmarshal                                          0x3C02113Fu
#define OLE32_HBRUSH_UserFree                                                0x5C1A19E5u
#define OLE32_HBRUSH_UserMarshal                                             0xAC7219E5u
#define OLE32_HBRUSH_UserSize                                                0x3019F365u
#define OLE32_HBRUSH_UserUnmarshal                                           0xFF1A392Fu
#define OLE32_HDC_UserFree                                                   0x6F741DBCu
#define OLE32_HDC_UserMarshal                                                0x1B70357Cu
#define OLE32_HDC_UserSize                                                   0x0377F73Cu
#define OLE32_HDC_UserUnmarshal                                              0x99C6319Du
#define OLE32_HENHMETAFILE_UserFree                                          0x38782139u
#define OLE32_HENHMETAFILE_UserMarshal                                       0x9D6E77D7u
#define OLE32_HENHMETAFILE_UserSize                                          0x547BCBB9u
#define OLE32_HENHMETAFILE_UserUnmarshal                                     0x37DE4897u
#define OLE32_HGLOBAL_UserFree                                               0x8F5187ECu
#define OLE32_HGLOBAL_UserMarshal                                            0x09BD1D0Cu
#define OLE32_HGLOBAL_UserSize                                               0xE3526D6Cu
#define OLE32_HGLOBAL_UserUnmarshal                                          0x598D053Cu
#define OLE32_HICON_UserFree                                                 0xFED10D94u
#define OLE32_HICON_UserMarshal                                              0xC9F82134u
#define OLE32_HICON_UserSize                                                 0x92D2E714u
#define OLE32_HICON_UserUnmarshal                                            0xBA8C11CCu
#define OLE32_HMENU_UserFree                                                 0xBDB20D90u
#define OLE32_HMENU_UserMarshal                                              0x78782315u
#define OLE32_HMENU_UserSize                                                 0xD1B1E710u
#define OLE32_HMENU_UserUnmarshal                                            0x3C4A11C4u
#define OLE32_HMETAFILEPICT_UserFree                                         0x7CC34135u
#define OLE32_HMETAFILEPICT_UserMarshal                                      0xC0DE71F5u
#define OLE32_HMETAFILEPICT_UserSize                                         0x10C0ABB5u
#define OLE32_HMETAFILEPICT_UserUnmarshal                                    0xBEA8888Fu
#define OLE32_HMETAFILE_UserFree                                             0x1AF91DB9u
#define OLE32_HMETAFILE_UserMarshal                                          0xDDF037C6u
#define OLE32_HMETAFILE_UserSize                                             0x76FAF739u
#define OLE32_HMETAFILE_UserUnmarshal                                        0x72DC3197u
#define OLE32_HMONITOR_UserFree                                              0xEED283FCu
#define OLE32_HMONITOR_UserMarshal                                           0xC83F153Cu
#define OLE32_HMONITOR_UserSize                                              0x82D1697Cu
#define OLE32_HMONITOR_UserUnmarshal                                         0x9A8B0D1Cu
#define OLE32_HPALETTE_UserFree                                              0x2FB28778u
#define OLE32_HPALETTE_UserFreeExt                                           0xCD4CBC62u
#define OLE32_HPALETTE_UserMarshal                                           0x783D575Cu
#define OLE32_HPALETTE_UserMarshalExt                                        0x0AA4AE49u
#define OLE32_HPALETTE_UserSize                                              0x43B16DF8u
#define OLE32_HPALETTE_UserSizeExt                                           0xCCB9FC54u
#define OLE32_HPALETTE_UserUnmarshal                                         0x184B0415u
#define OLE32_HPALETTE_UserUnmarshalExt                                      0x318D0AF9u
#define OLE32_HRGN_UserFree                                                  0xEED91DB4u
#define OLE32_HRGN_UserMarshal                                               0xCDF0313Cu
#define OLE32_HRGN_UserSize                                                  0x82DAF734u
#define OLE32_HRGN_UserUnmarshal                                             0x9A9C318Cu
#define OLE32_HWND_UserFree                                                  0xEF9B9D90u
#define OLE32_HWND_UserFreeExt                                               0xD9C1C802u
#define OLE32_HWND_UserMarshal                                               0x6CB0233Cu
#define OLE32_HWND_UserMarshalExt                                            0x4C1E9E43u
#define OLE32_HWND_UserSize                                                  0x83987710u
#define OLE32_HWND_UserSizeExt                                               0xD8348834u
#define OLE32_HWND_UserUnmarshal                                             0x981931C4u
#define OLE32_HWND_UserUnmarshalExt                                          0x1897E239u
#define OLE32_HkOleRegisterObject                                            0x9D6DA727u
#define OLE32_IIDFromString                                                  0x43B24AD7u
#define OLE32_IsAccelerator                                                  0x636F323Au
#define OLE32_IsEqualGUID                                                    0xD4B40720u
#define OLE32_IsValidIid                                                     0x9BA521BFu
#define OLE32_IsValidInterface                                               0xF347B547u
#define OLE32_IsValidPtrIn                                                   0xA7F7BA68u
#define OLE32_IsValidPtrOut                                                  0xEF4E748Au
#define OLE32_MkParseDisplayName                                             0x86BF933Bu
#define OLE32_MonikerCommonPrefixWith                                        0x9E4DAA61u
#define OLE32_MonikerLoadTypeLib                                             0xF0EEA75Du
#define OLE32_MonikerRelativePathTo                                          0x43DF89BAu
#define OLE32_NdrOleInitializeExtension                                      0x8851DEB9u
#define OLE32_NdrProxyForwardingFunction10                                   0xB8EC4D2Au
#define OLE32_NdrProxyForwardingFunction11                                   0xB8EC4D2Bu
#define OLE32_NdrProxyForwardingFunction12                                   0xB8EC4D28u
#define OLE32_NdrProxyForwardingFunction13                                   0xB8EC4D29u
#define OLE32_NdrProxyForwardingFunction14                                   0xB8EC4D2Eu
#define OLE32_NdrProxyForwardingFunction15                                   0xB8EC4D2Fu
#define OLE32_NdrProxyForwardingFunction16                                   0xB8EC4D2Cu
#define OLE32_NdrProxyForwardingFunction17                                   0xB8EC4D2Du
#define OLE32_NdrProxyForwardingFunction18                                   0xB8EC4D22u
#define OLE32_NdrProxyForwardingFunction19                                   0xB8EC4D23u
#define OLE32_NdrProxyForwardingFunction20                                   0xB8EC2D2Au
#define OLE32_NdrProxyForwardingFunction21                                   0xB8EC2D2Bu
#define OLE32_NdrProxyForwardingFunction22                                   0xB8EC2D28u
#define OLE32_NdrProxyForwardingFunction23                                   0xB8EC2D29u
#define OLE32_NdrProxyForwardingFunction24                                   0xB8EC2D2Eu
#define OLE32_NdrProxyForwardingFunction25                                   0xB8EC2D2Fu
#define OLE32_NdrProxyForwardingFunction26                                   0xB8EC2D2Cu
#define OLE32_NdrProxyForwardingFunction27                                   0xB8EC2D2Du
#define OLE32_NdrProxyForwardingFunction28                                   0xB8EC2D22u
#define OLE32_NdrProxyForwardingFunction29                                   0xB8EC2D23u
#define OLE32_NdrProxyForwardingFunction3                                    0x68D5C760u
#define OLE32_NdrProxyForwardingFunction30                                   0xB8EC0D2Au
#define OLE32_NdrProxyForwardingFunction31                                   0xB8EC0D2Bu
#define OLE32_NdrProxyForwardingFunction32                                   0xB8EC0D28u
#define OLE32_NdrProxyForwardingFunction4                                    0x68D5C767u
#define OLE32_NdrProxyForwardingFunction5                                    0x68D5C766u
#define OLE32_NdrProxyForwardingFunction6                                    0x68D5C765u
#define OLE32_NdrProxyForwardingFunction7                                    0x68D5C764u
#define OLE32_NdrProxyForwardingFunction8                                    0x68D5C76Bu
#define OLE32_NdrProxyForwardingFunction9                                    0x68D5C76Au
#define OLE32_ObjectStublessClient10                                         0xA8F01FC7u
#define OLE32_ObjectStublessClient11                                         0xA8F01FC6u
#define OLE32_ObjectStublessClient12                                         0xA8F01FC5u
#define OLE32_ObjectStublessClient13                                         0xA8F01FC4u
#define OLE32_ObjectStublessClient14                                         0xA8F01FC3u
#define OLE32_ObjectStublessClient15                                         0xA8F01FC2u
#define OLE32_ObjectStublessClient16                                         0xA8F01FC1u
#define OLE32_ObjectStublessClient17                                         0xA8F01FC0u
#define OLE32_ObjectStublessClient18                                         0xA8F01FCFu
#define OLE32_ObjectStublessClient19                                         0xA8F01FCEu
#define OLE32_ObjectStublessClient20                                         0xA8F07FC7u
#define OLE32_ObjectStublessClient21                                         0xA8F07FC6u
#define OLE32_ObjectStublessClient22                                         0xA8F07FC5u
#define OLE32_ObjectStublessClient23                                         0xA8F07FC4u
#define OLE32_ObjectStublessClient24                                         0xA8F07FC3u
#define OLE32_ObjectStublessClient25                                         0xA8F07FC2u
#define OLE32_ObjectStublessClient26                                         0xA8F07FC1u
#define OLE32_ObjectStublessClient27                                         0xA8F07FC0u
#define OLE32_ObjectStublessClient28                                         0xA8F07FCFu
#define OLE32_ObjectStublessClient29                                         0xA8F07FCEu
#define OLE32_ObjectStublessClient3                                          0xFFBD4782u
#define OLE32_ObjectStublessClient30                                         0xA8F05FC7u
#define OLE32_ObjectStublessClient31                                         0xA8F05FC6u
#define OLE32_ObjectStublessClient32                                         0xA8F05FC5u
#define OLE32_ObjectStublessClient4                                          0xFFBD4785u
#define OLE32_ObjectStublessClient5                                          0xFFBD4784u
#define OLE32_ObjectStublessClient6                                          0xFFBD4787u
#define OLE32_ObjectStublessClient7                                          0xFFBD4786u
#define OLE32_ObjectStublessClient8                                          0xFFBD4789u
#define OLE32_ObjectStublessClient9                                          0xFFBD4788u
#define OLE32_Ole32DllGetClassObject                                         0x3ED0B244u
#define OLE32_OleBuildVersion                                                0xCDF9ECF4u
#define OLE32_OleConvertIStorageToOLESTREAM                                  0xA427EDA7u
#define OLE32_OleConvertIStorageToOLESTREAMEx                                0x9E983FCEu
#define OLE32_OleConvertOLESTREAMToIStorage                                  0xD155E244u
#define OLE32_OleConvertOLESTREAMToIStorageEx                                0x134DF7F1u
#define OLE32_OleCreate                                                      0xE337BD61u
#define OLE32_OleCreateDefaultHandler                                        0x1015BADFu
#define OLE32_OleCreateEmbeddingHelper                                       0x920A8F79u
#define OLE32_OleCreateEx                                                    0x87847E8Du
#define OLE32_OleCreateFontIndirectExt                                       0xBFE4EA91u
#define OLE32_OleCreateFromData                                              0x857F435Fu
#define OLE32_OleCreateFromDataEx                                            0x7E1D5D75u
#define OLE32_OleCreateFromFile                                              0xA57C425Bu
#define OLE32_OleCreateFromFileEx                                            0x6E9D5171u
#define OLE32_OleCreateLink                                                  0x7213D511u
#define OLE32_OleCreateLinkEx                                                0x45C0EF2Cu
#define OLE32_OleCreateLinkFromData                                          0xA11733CEu
#define OLE32_OleCreateLinkFromDataEx                                        0x3A8CFCB7u
#define OLE32_OleCreateLinkToFile                                            0x57B9FF48u
#define OLE32_OleCreateLinkToFileEx                                          0x21564785u
#define OLE32_OleCreateMenuDescriptor                                        0x4E4A2BA9u
#define OLE32_OleCreatePictureIndirectExt                                    0xB44D3101u
#define OLE32_OleCreatePropertyFrameIndirectExt                              0xC896E701u
#define OLE32_OleCreateStaticFromData                                        0xA7AAAB84u
#define OLE32_OleDestroyMenuDescriptor                                       0xBA49556Bu
#define OLE32_OleDoAutoConvert                                               0xBF6986D0u
#define OLE32_OleDraw                                                        0xCE4FC2AEu
#define OLE32_OleDuplicateData                                               0xCCFCC237u
#define OLE32_OleFlushClipboard                                              0x36017AACu
#define OLE32_OleGetAutoConvert                                              0xAD6B43CAu
#define OLE32_OleGetClipboard                                                0xAF572D94u
#define OLE32_OleGetIconOfClass                                              0xB57875FFu
#define OLE32_OleGetIconOfFile                                               0xB8640955u
#define OLE32_OleIconToCursorExt                                             0xB5183EE7u
#define OLE32_OleInitialize                                                  0x13141925u
#define OLE32_OleInitializeWOW                                               0xD60572DFu
#define OLE32_OleIsCurrentClipboard                                          0xC7B48358u
#define OLE32_OleIsRunning                                                   0x367EBF3Fu
#define OLE32_OleLoad                                                        0xBA4FC6BDu
#define OLE32_OleLoadFromStream                                              0x0AA8313Fu
#define OLE32_OleLoadPictureExt                                              0xE80D41EAu
#define OLE32_OleLoadPictureFileExt                                          0x0B217203u
#define OLE32_OleLoadPicturePathExt                                          0x0AA4F493u
#define OLE32_OleLockRunning                                                 0x372B0BB9u
#define OLE32_OleMetafilePictFromIconAndLabel                                0x75AFFCBDu
#define OLE32_OleNoteObjectVisible                                           0x49762FEDu
#define OLE32_OleQueryCreateFromData                                         0x104A0161u
#define OLE32_OleQueryLinkFromData                                           0xB1B41FBBu
#define OLE32_OleRegEnumFormatEtc                                            0xAEB18DF6u
#define OLE32_OleRegEnumVerbs                                                0xF278AEB9u
#define OLE32_OleRegGetMiscStatus                                            0xAFE0481Eu
#define OLE32_OleRegGetUserType                                              0x0EAEB8D6u
#define OLE32_OleReleaseEnumVerbCache                                        0x88CABCB5u
#define OLE32_OleRun                                                         0x4ECE9271u
#define OLE32_OleSave                                                        0x824D293Cu
#define OLE32_OleSavePictureFileExt                                          0xEB6F72B8u
#define OLE32_OleSaveToStream                                                0x7E7EE54Au
#define OLE32_OleSetAutoConvert                                              0xAD6B6BCAu
#define OLE32_OleSetClipboard                                                0xAF5D2D94u
#define OLE32_OleSetContainedObject                                          0x118B7730u
#define OLE32_OleSetMenuDescriptor                                           0x8CE05562u
#define OLE32_OleTranslateAccelerator                                        0x62D33DEEu
#define OLE32_OleTranslateColorExt                                           0xABC7F2B0u
#define OLE32_OleUninitialize                                                0xA4C8410Bu
#define OLE32_OpenOrCreateStream                                             0xE4242427u
#define OLE32_ProgIDFromCLSID                                                0x3491E5BEu
#define OLE32_PropStgNameToFmtId                                             0xAC1D5F75u
#define OLE32_PropSysAllocString                                             0x5A9E71B2u
#define OLE32_PropSysFreeString                                              0xA838A99Au
#define OLE32_PropVariantChangeType                                          0xD7C5AB79u
#define OLE32_PropVariantClear                                               0x8ACC229Bu
#define OLE32_PropVariantCopy                                                0x1B4EF679u
#define OLE32_ReadClassStg                                                   0x5F2CDCB2u
#define OLE32_ReadClassStm                                                   0x5F2CDCB8u
#define OLE32_ReadFmtUserTypeStg                                             0x5C245947u
#define OLE32_ReadOleStg                                                     0x4897D77Bu
#define OLE32_ReadStorageProperties                                          0x68110FA5u
#define OLE32_ReadStringStream                                               0xB47CF18Fu
#define OLE32_RegisterActiveObjectExt                                        0x6ADF7B99u
#define OLE32_RegisterDragDrop                                               0x6BB87DF7u
#define OLE32_ReleaseStgMedium                                               0x47975AAFu
#define OLE32_RevokeActiveObjectExt                                          0x8C1B6C66u
#define OLE32_RevokeDragDrop                                                 0xB33A820Bu
#define OLE32_SNB_UserFree                                                   0x6F599D94u
#define OLE32_SNB_UserMarshal                                                0x0DB0217Cu
#define OLE32_SNB_UserSize                                                   0x035A7714u
#define OLE32_SNB_UserUnmarshal                                              0x999D31CDu
#define OLE32_STGMEDIUM_UserFree                                             0x5DA015CEu
#define OLE32_STGMEDIUM_UserFreeExt                                          0xC405E75Bu
#define OLE32_STGMEDIUM_UserMarshal                                          0x71740C65u
#define OLE32_STGMEDIUM_UserMarshalExt                                       0xAE0932CDu
#define OLE32_STGMEDIUM_UserSize                                             0x31A3FF4Eu
#define OLE32_STGMEDIUM_UserSizeExt                                          0xC5F0A76Du
#define OLE32_STGMEDIUM_UserUnmarshal                                        0xFC6E2179u
#define OLE32_STGMEDIUM_UserUnmarshalExt                                     0x231FBC8Bu
#define OLE32_SetConvertStg                                                  0x0361D47Au
#define OLE32_SetDocumentBitStg                                              0xDA41D51Bu
#define OLE32_SetErrorInfo                                                   0x2199A0A7u
#define OLE32_SetOleautModule                                                0x22A7984Au
#define OLE32_SetWOWThunkGlobalPtr                                           0x17498E7Cu
#define OLE32_StdTypesGetClassObject                                         0x599D2F85u
#define OLE32_StdTypesRegisterServer                                         0xA6041C13u
#define OLE32_StgConvertPropertyToVariant                                    0xABA21B87u
#define OLE32_StgConvertVariantToProperty                                    0x5D60540Fu
#define OLE32_StgCreateDocfile                                               0xAB350AB1u
#define OLE32_StgCreateDocfileOnILockBytes                                   0xBF80C134u
#define OLE32_StgCreatePropSetStg                                            0xB49E4D47u
#define OLE32_StgCreatePropStg                                               0x43F30189u
#define OLE32_StgCreateStorageEx                                             0x1E2766FAu
#define OLE32_StgGetIFillLockBytesOnFile                                     0x16C066ABu
#define OLE32_StgGetIFillLockBytesOnILockBytes                               0xD467FC94u
#define OLE32_StgIsStorageFile                                               0xB1FCC179u
#define OLE32_StgIsStorageILockBytes                                         0xFD93555Bu
#define OLE32_StgOpenAsyncDocfileOnIFillLockBytes                            0x0205C8A1u
#define OLE32_StgOpenPropStg                                                 0x74D9FABAu
#define OLE32_StgOpenStorage                                                 0xBCDB5BB4u
#define OLE32_StgOpenStorageEx                                               0xD2FBCD16u
#define OLE32_StgOpenStorageOnHandle                                         0x355D834Au
#define OLE32_StgOpenStorageOnILockBytes                                     0xEEFE2424u
#define OLE32_StgPropertyLengthAsVariant                                     0xE999DDA0u
#define OLE32_StgSetTimes                                                    0x27D5B254u
#define OLE32_StringFromCLSID                                                0xE036E923u
#define OLE32_StringFromGUID2                                                0x887745D5u
#define OLE32_StringFromIID                                                  0x27F2F9EFu
#define OLE32_UpdateDCOMSettings                                             0xC6A73338u
#define OLE32_UpdateProcessTracing                                           0xA53F6026u
#define OLE32_UtConvertDvtd16toDvtd32                                        0xFB6B9A94u
#define OLE32_UtConvertDvtd32toDvtd16                                        0xFB2BDE90u
#define OLE32_UtGetDvtd16Info                                                0x7687FB5Bu
#define OLE32_UtGetDvtd32Info                                                0x76C7FB5Fu
#define OLE32_WdtpInterfacePointer_UserFree                                  0x89F240BDu
#define OLE32_WdtpInterfacePointer_UserMarshal                               0x585EB58Fu
#define OLE32_WdtpInterfacePointer_UserSize                                  0xE5F1AA3Du
#define OLE32_WdtpInterfacePointer_UserUnmarshal                             0x54CA8B9Eu
#define OLE32_WriteClassStg                                                  0x2D9CDD87u
#define OLE32_WriteClassStm                                                  0x2D9CDD8Du
#define OLE32_WriteFmtUserTypeStg                                            0x5C6905EBu
#define OLE32_WriteOleStg                                                    0xE4979A27u
#define OLE32_WriteStorageProperties                                         0x4EBF59A5u
#define OLE32_WriteStringStream                                              0xA72BDA8Fu
#define COMDLG32_ChooseColorA                                                0x2F26D865u
#define COMDLG32_ChooseColorW                                                0x2F26D873u
#define COMDLG32_ChooseFontA                                                 0xC9721905u
#define COMDLG32_ChooseFontW                                                 0xC9721913u
#define COMDLG32_CommDlgExtendedError                                        0x2A348641u
#define COMDLG32_DllCanUnloadNow                                             0x92E7DE29u
#define COMDLG32_DllGetClassObject                                           0x4CCE7882u
#define COMDLG32_FindTextA                                                   0xAD55740Bu
#define COMDLG32_FindTextW                                                   0xAD55741Du
#define COMDLG32_GetFileTitleA                                               0xAE77323Fu
#define COMDLG32_GetFileTitleW                                               0xAE773229u
#define COMDLG32_GetOpenFileNameA                                            0x1C4F3DA1u
#define COMDLG32_GetOpenFileNameW                                            0x1C4F3DB7u
#define COMDLG32_GetSaveFileNameA                                            0xDD27BDECu
#define COMDLG32_GetSaveFileNameW                                            0xDD27BDFAu
#define COMDLG32_LoadAlterBitmap                                             0x943231F4u
#define COMDLG32_PageSetupDlgA                                               0x93811030u
#define COMDLG32_PageSetupDlgW                                               0x93811026u
#define COMDLG32_PrintDlgA                                                   0x2756D29Fu
#define COMDLG32_PrintDlgExA                                                 0x6C925B0Bu
#define COMDLG32_PrintDlgExW                                                 0x6C925B1Du
#define COMDLG32_PrintDlgW                                                   0x2756D289u
#define COMDLG32_ReplaceTextA                                                0xE37F1F9Du
#define COMDLG32_ReplaceTextW                                                0xE37F1F8Bu
#define COMDLG32_Ssync_ANSI_UNICODE_Struct_For_WOW                           0xF156F9F3u
#define COMDLG32_WantArrows                                                  0xC1D3B8F3u
#define COMDLG32_dwLBSubclass                                                0x13915568u
#define COMDLG32_dwOKSubclass                                                0x13F15C68u

#endif // _DLLFUNCTIONNAMEHASH_H_652abbe6_b2d4_402e_9446_94a6b6a57f1a_
#pragma comment(lib, "Shlwapi.lib")

#include <stdio.h>
#include <io.h>
#include <fcntl.h>
#include <direct.h>

#include <conio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include <signal.h>
#include <locale.h>
#include <process.h>

#include <tchar.h>
#include <string.h>

#include <math.h>
#include <float.h>

#include <tchar.h>

#include <Shlwapi.h>

#ifndef _MEMORY_H_38900f05_7a34_48ee_8cd6_84300c9b8f1f
#define _MEMORY_H_38900f05_7a34_48ee_8cd6_84300c9b8f1f

#pragma warning(disable:4127)
#pragma warning(disable:4047)
#pragma warning(disable:4706)

#ifndef _INTRINSIC_H_725e6954_2a61_467e_9a57_c634deb44f80
#define _INTRINSIC_H_725e6954_2a61_467e_9a57_c634deb44f80


_ML_C_HEAD_

// #include <emmintrin.h>
#include <xmmintrin.h>
#include <crtversion.h>

#if _VC_CRT_BUILD_VERSION >= 23026
#include <intrin.h>
#endif

void __cdecl _disable(void);
void __cdecl _enable(void);

void*   __cdecl _alloca(size_t _Size);
int     __cdecl memcmp(const void *buf1, const void *buf2, size_t count);
void*   __cdecl memcpy(void *dest, const void *src, size_t count);
void*   __cdecl memset(void *dest, int c, size_t count);

unsigned char   __cdecl _rotr8(unsigned char value, unsigned char shift);
unsigned short  __cdecl _rotr16(unsigned short value, unsigned char shift);
unsigned char   __cdecl _rotl8(unsigned char value, unsigned char shift);
unsigned short  __cdecl _rotl16(unsigned short value, unsigned char shift);

void            __cdecl __debugbreak();

void*           _AddressOfReturnAddress();
void*           _ReturnAddress();

#if CPP_DEFINED

IF_NOT_EXIST(__stosb)
{
	void            __cdecl __stosb(void* Dest, unsigned char Data, size_t Count);
	void            __cdecl __stosw(void* Dest, unsigned short Data, size_t Count);
	void            __cdecl __stosd(void* Dest, unsigned long Data, size_t Count);
}

IF_NOT_EXIST(__movsb)
{
	void            __cdecl __movsb(void *Destination, const void *Source, size_t Count);
	void            __cdecl __movsw(void *Dest, const void *Source, size_t Count);
	void            __cdecl __movsd(void *Dest, const void *Source, size_t Count);
}

#endif


/************************************************************************
interlocked
************************************************************************/

long            __cdecl _InterlockedIncrement(long volatile * lpAddend);
long            __cdecl _InterlockedDecrement(long volatile * lpAddend);
long            __cdecl _InterlockedCompareExchange(long volatile * Destination, long Exchange, long Comperand);
long            __cdecl _InterlockedExchangeAdd(long volatile * Addend, long Value);
long            __cdecl _InterlockedExchange(volatile long * Target, long Value);
char            __cdecl _InterlockedExchange8(char volatile *Destination, char ExChange);

long            _InterlockedAnd(long volatile *Destination, long Value);
long            _InterlockedOr(long volatile *Destination, long Value);
long            _InterlockedXor(long volatile *Destination, long Value);

long            __cdecl _InterlockedIncrement_acq(long * lpAddend);
long            __cdecl _InterlockedIncrement_rel(long * lpAddend);
short           _InterlockedIncrement16(short volatile * lpAddend);
short           __cdecl _InterlockedIncrement16_acq(short * lpAddend);
short           __cdecl _InterlockedIncrement16_rel(short * lpAddend);
__int64         _InterlockedIncrement64(volatile __int64 * lpAddend);
__int64         __cdecl _InterlockedIncrement64_acq(volatile __int64 * lpAddend);
__int64         __cdecl _InterlockedIncrement64_rel(volatile __int64 * lpAddend);

long            __cdecl _InterlockedDecrement_acq(long * lpAddend);
long            __cdecl _InterlockedDecrement_acq(long * lpAddend);
short           _InterlockedDecrement16(short volatile * lpAddend);
short           __cdecl _InterlockedDecrement16_acq(short * lpAddend);
short           __cdecl _InterlockedDecrement16_rel(short * lpAddend);
__int64         _InterlockedDecrement64(volatile __int64 * lpAddend);
__int64         __cdecl _InterlockedDecrement64_acq(__int64 * lpAddend);
__int64         __cdecl _InterlockedDecrement64_rel(__int64 * lpAddend);

long            __cdecl _InterlockedExchange_acq(long * Target, long Value);
__int64         _InterlockedExchange64(volatile __int64 * Target, __int64 Value);
__int64         __cdecl _InterlockedExchange64_acq(__int64 * Target, __int64 Value);

long            __cdecl _InterlockedCompareExchange_acq(long volatile * Destination, long Exchange, long Comperand);
long            __cdecl _InterlockedCompareExchange_rel(long volatile * Destination, long Exchange, long Comperand);
short                   _InterlockedCompareExchange16(short volatile * Destination, short Exchange, short Comperand);
short           __cdecl _InterlockedCompareExchange16_acq(short volatile * Destination, short Exchange, short Comperand);
short           __cdecl _InterlockedCompareExchange16_rel(short volatile * Destination, short Exchange, short Comperand);
__int64         __cdecl _InterlockedCompareExchange64(__int64 volatile * Destination, __int64 Exchange, __int64 Comperand);
__int64         __cdecl _InterlockedCompareExchange64_acq(__int64 volatile * Destination, __int64 Exchange, __int64 Comperand);
__int64         __cdecl _InterlockedCompareExchange64_rel(__int64 volatile * Destination, __int64 Exchange, __int64 Comperand);
unsigned char   __cdecl _InterlockedCompareExchange128(__int64 volatile * Destination, __int64 ExchangeHigh, __int64 ExchangeLow, __int64 * Comparand);
unsigned char           _BitScanForward(unsigned long *Index, unsigned long Mask);


void _ReadBarrier(void);
void _WriteBarrier(void);
void _ReadWriteBarrier(void);


/************************************************************************
cpuid
************************************************************************/
void __cpuid(int CPUInfo[4], int InfoType);
void __cpuidex(int CPUInfo[4], int InfoType, int ECXValue);


/************************************************************************
dr
************************************************************************/
UInt_Ptr __readdr(unsigned int DebugRegister);

#if ML_AMD64
void __writedr(unsigned DebugRegister, unsigned __int64 DebugValue);
#elif ML_X86
void __writedr(unsigned int DebugRegister, unsigned int DebugValue);
#endif

/************************************************************************
crx
************************************************************************/

#if ML_AMD64

void __writecr0(unsigned __int64 Data);
void writecr3(unsigned __int64 Data);
void writecr4(unsigned __int64 Data);
void writecr8(unsigned __int64 Data);

#elif ML_X86
void __writecr0(unsigned Data);
void writecr3(unsigned Data);
void writecr4(unsigned Data);
void writecr8(unsigned Data);
#endif

ULongPtr __readcr0(void);


/************************************************************************
msr
************************************************************************/

unsigned __int64 __readmsr(unsigned long register);
void __writemsr(unsigned long Register, unsigned __int64 Value);


/************************************************************************
vmx
************************************************************************/

void __vmx_off();


/************************************************************************
idt
************************************************************************/

void __lidt(void *);


#if ML_AMD64

unsigned char __vmx_on(unsigned __int64 *VmsSupportPhysicalAddress);
unsigned char __vmx_vmread(size_t Field, size_t *FieldValue);
unsigned char __vmx_vmwrite(size_t Field, size_t FieldValue);
unsigned char __vmx_vmclear(unsigned __int64 *VmcsPhysicalAddress);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *VmcsPhysicalAddress);
void          __vmx_vmptrst(unsigned __int64 *VmcsPhysicalAddress);

#endif

#if !ML_AMD64

#define _InterlockedCompareExchangePointer(Target, Exchange, Comperand) (PVOID)_InterlockedCompareExchange((long *)Target, (long)Exchange, (long)Comperand)

#ifndef _InterlockedExchangePointer
#define _InterlockedExchangePointer(Target, Value) (PVOID)_InterlockedExchange((long *)Target, (long)Value)
#endif

#if ML_USER_MODE

#ifndef _WIN32_WINNT_WIN8
#if   (_WIN32_WINNT <= _WIN32_WINNT_WINXP)

inline long long _InterlockedExchange64(long long volatile *Target, long long Value)
{
	long long Old;

	do
	{
		Old = *Target;
	} while (_InterlockedCompareExchange64(Target, Value, Old) != Old);

	return Old;
}

#endif
#endif

#endif // r3

#else

#define _InterlockedCompareExchangePointer(Target, Exchange, Comperand) (PVOID)_InterlockedCompareExchange64((__int64 *)Target, (__int64)Exchange, (__int64)Comperand)
void * _InterlockedExchangePointer(void * volatile * Target, void * Value);
void * _InterlockedExchangePointer_acq(void * volatile * Target, void * Value);

#endif

#if MY_OS_WIN32
#define Interlocked_Increment _InterlockedIncrement
#define Interlocked_Decrement _InterlockedDecrement
#else
#define Interlocked_Increment InterlockedIncrement
#define Interlocked_Decrement InterlockedDecrement
#endif // MY_OS_WIN32

ForceInline LongPtr _InterlockedIncrementPtr(PVoid Addend)
{
#if ML_AMD64
	return _InterlockedIncrement64((PLongPtr)Addend);
#else
	return _InterlockedIncrement((PLongPtr)Addend);
#endif
}

ForceInline LongPtr _InterlockedDecrementPtr(PVoid Addend)
{
#if ML_AMD64
	return _InterlockedDecrement64((PLongPtr)Addend);
#else
	return _InterlockedDecrement((PLongPtr)Addend);
#endif
}

ForceInline BOOLEAN MlBitScanForwardPtr(PULONG Index, ULONG_PTR Mask)
{
#if ML_AMD64

	return _BitScanForward64(Index, Mask);

#else

	return _BitScanForward(Index, Mask);

#endif
}

#pragma intrinsic(_BitScanForward)

_ML_C_TAIL_

#endif // _INTRINSIC_H_725e6954_2a61_467e_9a57_c634deb44f80

_ML_C_HEAD_

#define CopyStruct(dest, src, size) \
    { \
        typedef DECL_ALIGN(1) struct { ::Byte b[size]; } _SDummy; \
        *(_SDummy *)(dest) = *(_SDummy *)(src); \
    }
#if 0
else \
{ \
memcpy(dest, src, size); \
}
#endif

	ForceInline void* AllocStack(size_t Size)
	{
#if _DEBUG
		return malloc(ROUND_UP(Size, 16));
#else
		return _alloca(ROUND_UP(Size, 16));
#endif
	}

	inline PVoid XorMemory(PVoid Destination, Byte Value, size_t Size)
	{
		UInt32 c1;
		PByte Buffer = (PByte)Destination;

		c1 = Value | (UInt32)(Value << 8) | (UInt32)(Value << 16) | (UInt32)(Value << 24);

		for (; Size != 0 && (Int_Ptr)Buffer & 3; --Size)
			*Buffer++ ^= c1;

		for (; Size >= 4; Buffer += 4, Size -= 4)
			*(PUInt32)Buffer ^= c1;

		for (; Size; --Size)
			*Buffer++ ^= c1;

		return Destination;
	}

	inline PVoid XorMemory4(PVoid Destination, UInt32 Value, size_t Size)
	{
		PByte Buffer = (PByte)Destination;

		while (Size)
			*(PUInt32)&Buffer[Size -= 4] ^= Value;

		return Destination;
	}

	inline PVoid AndMemory(PVoid Destination, Byte Value, size_t Size)
	{
		UInt32 c1;
		PByte  Buffer = (PByte)Destination;

		c1 = Value | (UInt32)(Value << 8) | (UInt32)(Value << 16) | (UInt32)(Value << 24);

		for (; Size != 0 && (Int_Ptr)Buffer & 3; --Size)
			*Buffer++ &= c1;

		for (; Size >= 4; Buffer += 4, Size -= 4)
			*(PUInt32)Buffer &= c1;

		for (; Size; --Size)
			*Buffer++ &= c1;

		return Destination;
	}

	inline PVoid OrMemory(PVoid Destination, Byte Value, size_t Size)
	{
		UInt32 c1;
		PByte  Buffer = (PByte)Destination;

		c1 = Value | (UInt32)(Value << 8) | (UInt32)(Value << 16) | (UInt32)(Value << 24);

		for (; Size != 0 && (Int_Ptr)Buffer & 3; --Size)
			*Buffer++ |= c1;

		for (; Size >= 4; Buffer += 4, Size -= 4)
			*(PUInt32)Buffer |= c1;

		for (; Size; --Size)
			*Buffer++ |= c1;

		return Destination;
	}

#if MY_OS_WIN32

#if !defined(MY_X64)

	ForceInline LPVoid CDECL my_memcpy_inline(void *dst, const void *src, size_t count)
	{
#if !MY_MSC_1500 || defined(MY_COMPILER_INTEL)
		__asm
		{
			mov  edi, dst;
			mov  esi, src;
			mov  ecx, count;
			mov  edx, ecx;
			shr  ecx, 2;
			rep  movsd;
			mov  ecx, edx;
			and  ecx, 3;
			rep  movsb;
		}
#else
		size_t n = count & ~3;
		__movsd((PULONG_PTR)dst, (const ULONG_PTR *)src, count >> 2);
		__movsb((PByte)dst + n, (PByte)src + n, count & 3);
#endif

		return dst;
	}

	ForceInline LPVoid CDECL my_memset_inline(void* dest, Byte c, size_t count)
	{
		UInt32 c1;

		c1 = c | (UInt32)(c << 8);
		c1 |= (c1 << 16);
#if defined(MY_COMPILER_INTEL) || !MY_MSC_1500
		__asm
		{
			mov  edi, dest;
			mov  eax, c1;
			mov  ecx, count;
			mov  edx, ecx;
			shr  ecx, 2;
			rep  stosd;
			mov  ecx, edx;
			and  ecx, 3;
			rep  stosb;
		}
#else
		size_t n = count & ~3;
		__stosd((PULONG_PTR)dest, c1, count >> 2);
		__stosb((PByte)dest + n, (Byte)c1, count & 3);
#endif

		return dest;
	}

	ForceInline LPVoid CDECL memset4(void* dest, ULong_Ptr c, size_t count)
	{
#if defined(MY_COMPILER_INTEL) || !defined(MY_COMPILER_MSC)
		__asm
		{
			mov  edi, dest;
			mov  eax, c;
			mov  ecx, count;
			mov  edx, ecx;
			shr  ecx, 2;
			rep  stosd;
			mov  ecx, edx;
			and  ecx, 3;
			rep  stosb;
		}
		return dest;
#else
		__stosd((PULONG_PTR)dest, (ULong)c, count / sizeof(c));
		return dest;
#endif
	}

	ForceInline LPVoid CDECL memset2(void* dest, UInt16 c, size_t count)
	{
		UInt32 c1 = c | (c << 16);
		__asm
		{
			mov  edi, dest;
			mov  eax, c1;
			mov  ecx, count;
			mov  edx, ecx;
			shr  ecx, 2;
			rep  stosd;
			mov  ecx, edx;
			and  ecx, 3;
			rep  stosb;
		}

		return dest;
	}

#endif // MY_X64

#endif // MY_OS_WIN32

	// EXTC_IMPORT void* __cdecl memset(void * _Dst, int _Val, size_t _Size);
	// EXTC_IMPORT void* __cdecl memcpy(void *dest, const void *src, size_t count);

#pragma intrinsic(memcmp, memcpy, memset)

#if !defined(NOT_USE_CUSTOM_MEMFUNC) && MY_OS_WIN32

#undef RtlMoveMemory

#if ML_AMD64

#define CompareMemory(Buffer1, Buffer2, SizeInBytes) memcmp((void *)(Buffer1), (void *)(Buffer2), (size_t)(SizeInBytes))

#if ML_KERNEL_MODE

#define CopyMemory(Destination, Source, Length) RtlCopyMemory((void*)(Destination), (void*)(Source), (size_t)(Length))
#define FillMemory(Destination, Length, Fill) memset(Destination, Fill, Length)
#define FillMemory4(Destination, Length, Fill) memset4(Destination, Fill, Length)
#define ZeroMemory(Destination, Length) FillMemory(Destination, Length, 0)

#endif

#else //x86

#ifdef memcpy
#undef memcpy
#endif /* memcpy */

#ifdef memset
#undef memset
#endif /* memset */

#ifdef ZeroMemory
#undef ZeroMemory
#endif /* ZeroMemory */

#ifdef CopyMemory
#undef CopyMemory
#endif /* CopyMemory */

#ifdef RtlCopyMemory
#undef RtlCopyMemory
#endif /* RtlCopyMemory */

#ifdef FillMemory
#undef FillMemory
#endif // FillMemory

#define memcpy my_memcpy_inline
#define memset my_memset_inline
#define CompareMemory(Buffer1, Buffer2, SizeInBytes) memcmp((void *)(Buffer1), (void *)(Buffer2), (size_t)(SizeInBytes))
#define FillMemory(Destination, Length, Fill) memset(Destination, (Byte)Fill, Length)
#define FillMemory4(Destination, Length, Fill) memset4(Destination, Fill, Length)
#define ZeroMemory(Destination, Length) FillMemory(Destination, Length, 0)
#define CopyMemory(Destination, Source, Length) memcpy((void *)(Destination), (void *)(Source), (size_t)(Length))
#define RtlCopyMemory CopyMemory

#endif // arch

	//    #define memcpy my_memcpy_detect
#endif // NOT_USE_CUSTOM_MEMFUNC

	EXTC_IMPORT Void STDCALL RtlMoveMemory(PVoid Destination, PVoid Source, SizeT Length);

	_ML_C_TAIL_



#pragma warning(default:4047)
#pragma warning(default:4127)
#pragma warning(default:4706)

#endif // _MEMORY_H_38900f05_7a34_48ee_8cd6_84300c9b8f1f
#ifndef _MISC_H_093f7fa1_751a_4627_83f8_df8509b9926e
#define _MISC_H_093f7fa1_751a_4627_83f8_df8509b9926e


		_ML_C_HEAD_

#pragma pack(1)

#define SHA224_DIGEST_SIZE ( 224 / 8)
#define SHA256_DIGEST_SIZE ( 256 / 8)
#define SHA384_DIGEST_SIZE ( 384 / 8)
#define SHA512_DIGEST_SIZE ( 512 / 8)

#define SHA256_BLOCK_SIZE  ( 512 / 8)
#define SHA512_BLOCK_SIZE  (1024 / 8)
#define SHA384_BLOCK_SIZE  SHA512_BLOCK_SIZE
#define SHA224_BLOCK_SIZE  SHA256_BLOCK_SIZE

		typedef struct
	{
		ULONG   tot_len;
		ULONG   len;
		BYTE    block[2 * SHA256_BLOCK_SIZE];
		ULONG   h[8];
	} sha256_ctx;

#pragma pack()

	VOID STDCALL sha256_init(sha256_ctx *ctx);
	VOID STDCALL sha256_update(sha256_ctx *ctx, PVOID message, ULONG len);
	VOID STDCALL sha256_final(sha256_ctx *ctx, PVOID digest);
	VOID STDCALL sha256(PVOID message, ULONG len, PVOID digest);

	inline VOID sha256to128(PVOID message, ULONG len, PVOID digest)
	{
		ULONG Hash[8];

		sha256(message, len, Hash);
		((PULONG)digest)[0] = Hash[0] ^ Hash[4];
		((PULONG)digest)[1] = Hash[1] ^ Hash[5];
		((PULONG)digest)[2] = Hash[2] ^ Hash[6];
		((PULONG)digest)[3] = Hash[3] ^ Hash[7];
	}

#if !defined(ReadTimeStampCounter)

	ForceInline UInt64 ReadTimeStampCounter()
	{
		__asm rdtsc;
	}

#endif // ReadTimeStampCounter

	ForceInline UInt64 GetRandom64()
	{
		return ReadTimeStampCounter();
	}

	ForceInline UInt32 GetRandom32()
	{
		return (UInt32)GetRandom64();
	}

#if CPP_DEFINED

	namespace PointerOperationType
	{
		enum PointerOperationClass
		{
			POINTER_OP_ADD,
			POINTER_OP_SUB,
			POINTER_OP_AND,
			POINTER_OP_OR,
			POINTER_OP_XOR,
			POINTER_OP_MOD,
		};
	}

	EXTCPP
		template<PointerOperationType::PointerOperationClass OP, class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrOperator(PtrType1 Ptr1, PtrType2 Ptr2)
	{
#pragma warning(push, 0)
		struct
		{
			union
			{
				PtrType1        _Ptr1;
				LARGE_INTEGER   Value1;
			};

			union
			{
				PtrType2        _Ptr2;
				LARGE_INTEGER   Value2;
			};
		} u;

#pragma warning(push)
#pragma warning(disable:4702)

		if (MY_MAX(sizeof(Ptr1), sizeof(Ptr2)) == sizeof(u.Value1.QuadPart))
		{
			u.Value1.QuadPart = 0;
			u.Value2.QuadPart = 0;
		}
		else
		{
			u.Value1.LowPart = NULL;
			u.Value2.LowPart = NULL;
		}

#pragma warning(pop)

		u._Ptr1 = Ptr1;
		u._Ptr2 = Ptr2;

		if (MY_MAX(sizeof(Ptr1), sizeof(Ptr2)) == sizeof(u.Value1.QuadPart))
		{
			switch (OP)
			{
			case PointerOperationType::POINTER_OP_ADD:
				u.Value1.QuadPart += u.Value2.QuadPart;
				break;

			case PointerOperationType::POINTER_OP_SUB:
				u.Value1.QuadPart -= u.Value2.QuadPart;
				break;

			case PointerOperationType::POINTER_OP_AND:
				u.Value1.QuadPart &= u.Value2.QuadPart;
				break;

			case PointerOperationType::POINTER_OP_OR:
				u.Value1.QuadPart |= u.Value2.QuadPart;
				break;

			case PointerOperationType::POINTER_OP_XOR:
				u.Value1.QuadPart ^= u.Value2.QuadPart;
				break;

			case PointerOperationType::POINTER_OP_MOD:
				u.Value1.QuadPart %= u.Value2.QuadPart;
				break;
			}
		}
		else
		{
			switch (OP)
			{
			case PointerOperationType::POINTER_OP_ADD:
				u.Value1.LowPart += u.Value2.LowPart;
				break;

			case PointerOperationType::POINTER_OP_SUB:
				u.Value1.LowPart -= u.Value2.LowPart;
				break;

			case PointerOperationType::POINTER_OP_AND:
				u.Value1.LowPart &= u.Value2.LowPart;
				break;

			case PointerOperationType::POINTER_OP_OR:
				u.Value1.LowPart |= u.Value2.LowPart;
				break;

			case PointerOperationType::POINTER_OP_XOR:
				u.Value1.LowPart ^= u.Value2.LowPart;
				break;

			case PointerOperationType::POINTER_OP_MOD:
				u.Value1.LowPart %= u.Value2.LowPart;
				break;
			}
		}

#pragma warning(pop)

		return u._Ptr1;
	}

	EXTCPP
		template<PointerOperationType::PointerOperationClass OP, class PtrType1>
	ForceInline
		PtrType1 PtrOperator(PtrType1 Ptr1, unsigned short Ptr2)
	{
		return PtrOperator<OP>(Ptr1, (ULONG_PTR)Ptr2);
	}

	EXTCPP
		template<PointerOperationType::PointerOperationClass OP, class PtrType1>
	ForceInline
		PtrType1 PtrOperator(PtrType1 Ptr1, short Ptr2)
	{
		return PtrOperator<OP>(Ptr1, (ULONG_PTR)Ptr2);
	}

	EXTCPP
		template<PointerOperationType::PointerOperationClass OP, class PtrType1>
	ForceInline
		PtrType1 PtrOperator(PtrType1 Ptr1, unsigned char Ptr2)
	{
		return PtrOperator<OP>(Ptr1, (ULONG_PTR)Ptr2);
	}

	EXTCPP
		template<PointerOperationType::PointerOperationClass OP, class PtrType1>
	ForceInline
		PtrType1 PtrOperator(PtrType1 Ptr1, char Ptr2)
	{
		return PtrOperator<OP>(Ptr1, (ULONG_PTR)Ptr2);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		ULONG_PTR PtrOffset(PtrType1 Ptr, PtrType2 Offset)
	{
#pragma warning(push, 0)
		union
		{
			PtrType1    _Ptr1;
			ULONG_PTR   Value;
		};
#pragma warning(pop)

		_Ptr1 = Ptr;

		return PtrOperator<PointerOperationType::POINTER_OP_SUB>(Value, Offset);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrAdd(PtrType1 Ptr, PtrType2 Offset)
	{
		return PtrOperator<PointerOperationType::POINTER_OP_ADD>(Ptr, Offset);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrSub(PtrType1 Ptr, PtrType2 Offset)
	{
		return PtrOperator<PointerOperationType::POINTER_OP_SUB>(Ptr, Offset);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrAnd(PtrType1 Ptr, PtrType2 Offset)
	{
		return PtrOperator<PointerOperationType::POINTER_OP_AND>(Ptr, Offset);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrOr(PtrType1 Ptr, PtrType2 Offset)
	{
		return PtrOperator<PointerOperationType::POINTER_OP_OR>(Ptr, Offset);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrXor(PtrType1 Ptr, PtrType2 Offset)
	{
		return PtrOperator<PointerOperationType::POINTER_OP_XOR>(Ptr, Offset);
	}

	EXTCPP
		template<class PtrType1, class PtrType2>
	ForceInline
		PtrType1 PtrMod(PtrType1 Ptr, PtrType2 Offset)
	{
		return PtrOperator<PointerOperationType::POINTER_OP_MOD>(Ptr, Offset);
	}

	EXTCPP template<class T> ForceInline Void FASTCALL Swap(T &t1, T &t2)
	{
		T t;
		t = t1;
		t1 = t2;
		t2 = t;
	}

	ForceInline UInt32 GetRandom32Range(UInt32 Min, UInt32 Max)
	{
		UInt32 Result = GetRandom32();

		if (Max < Min)
			Swap(Min, Max);

		return (Result % (Max + 1 - Min) + Min);
	}

	_ML_CPP_HEAD_

		template<typename T> T Bswap(T);

#define DECL_BSWAP_2(type) template<> inline type Bswap(type v) { return _byteswap_ushort(v); }
#define DECL_BSWAP_4(type) template<> inline type Bswap(type v) { return _byteswap_ulong(v); }
#define DECL_BSWAP_8(type) template<> inline type Bswap(type v) { return _byteswap_uint64(v); }

	DECL_BSWAP_2(Int16);
	DECL_BSWAP_2(UInt16);
	DECL_BSWAP_2(WChar);

	DECL_BSWAP_4(Int32);
	DECL_BSWAP_4(UInt32);

	DECL_BSWAP_8(Int64);
	DECL_BSWAP_8(UInt64);

	DECL_BSWAP_4(Long);
	DECL_BSWAP_4(ULong);

	//DECL_BSWAP_8(Long64);
	//DECL_BSWAP_8(ULong64);

	_ML_CPP_TAIL_

#endif // CPP_DEFINED

#if ML_X86

		ForceInline UInt32 FASTCALL GetEfFlags()
	{
		INLINE_ASM
		{
			pushfd;
			pop eax;
		}
	}

	ForceInline UInt32 FASTCALL SetEfFlags(UInt32 EfFlags)
	{
		INLINE_ASM
		{
			push EfFlags;
			popfd;
		}
	}

	ForceInline Void SetDirectionFlag()
	{
		INLINE_ASM std;
	}

	ForceInline Void ClearDirectionFlag()
	{
		INLINE_ASM cld;
	}

	inline Bool IsCPUIDValid()
	{
		__asm
		{
			pushfd;
			pop eax;
			or eax, 1 << 21;
			push eax;
			popfd;
			pushfd;
			pop eax;
			shr eax, 21;
			and eax, 1;
		}
	}

#endif // x86

	_ML_C_TAIL_

#endif // _MISC_H_093f7fa1_751a_4627_83f8_df8509b9926e

#ifndef _APIHELPER_H_ff88b0e9_19eb_4ea3_8c2c_99541c492e06
#define _APIHELPER_H_ff88b0e9_19eb_4ea3_8c2c_99541c492e06

#ifndef _NATIVEAPIHELPER_H_146120be_f089_49ef_bfd3_82c455e90ba3
#define _NATIVEAPIHELPER_H_146120be_f089_49ef_bfd3_82c455e90ba3

#ifndef _NATIVEAPI_H_536f1070_45de_44d7_9e53_6c5db2ff00d3
#define _NATIVEAPI_H_536f1070_45de_44d7_9e53_6c5db2ff00d3

#pragma warning(disable:4103)

#if ML_AMD64
#pragma pack(push, 8)
#else
#pragma pack(push, 4)
#endif

#ifndef _NTBASE_H_bc4f0ce4_29e3_43c6_a3a3_98415b2adbab_
#define _NTBASE_H_bc4f0ce4_29e3_43c6_a3a3_98415b2adbab_

#ifndef _NATIVETYPES_H_96405a6d_a23f_4fd6_b20a_e5821226bfc6
#define _NATIVETYPES_H_96405a6d_a23f_4fd6_b20a_e5821226bfc6


#if ML_KERNEL_MODE
#ifndef _NATIVETYPES_KERNEL_H_c07a308c_9b77_41fa_b475_9c2d5c0ae3e6
#define _NATIVETYPES_KERNEL_H_c07a308c_9b77_41fa_b475_9c2d5c0ae3e6


#define INFINITE ULONG_PTR_MAX

		typedef USHORT ATOM;
	typedef PVOID PRTL_CRITICAL_SECTION;

	// typedef PROCESSINFOCLASS    PROCESS_INFORMATION_CLASS;
	// typedef THREADINFOCLASS     THREAD_INFORMATION_CLASS;

	typedef struct _KSERVICE_TABLE_DESCRIPTOR
	{
		PULONG_PTR  Base;       // ssdt
		PULONG_PTR  Count;      // callout count of each system service
		ULONG_PTR   Limit;      // count of system call
		PUCHAR      Number;     // Size of arguments

	} KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;

	///////////////////////////// apc /////////////////////////////////////

	typedef enum _KAPC_ENVIRONMENT
	{
		OriginalApcEnvironment,
		AttachedApcEnvironment,
		CurrentApcEnvironment,
		InsertApcEnvironment

	} KAPC_ENVIRONMENT;

#endif // _NATIVETYPES_KERNEL_H_c07a308c_9b77_41fa_b475_9c2d5c0ae3e6
#else // r3
#ifndef _NATIVETYPES_USER_H_30d04cf8_0b66_4f36_a472_f9c1734240b8
#define _NATIVETYPES_USER_H_30d04cf8_0b66_4f36_a472_f9c1734240b8

#pragma INCLUDE_LIB(ntdll.lib)


		_ML_C_HEAD_

#if CPP_DEFINED

		IF_NOT_EXIST(NTSTATUS)
	{
		typedef LONG NTSTATUS;
	}

#endif

	/************************************************************************
	base
	************************************************************************/

	typedef struct _CLIENT_ID
	{
		HANDLE  UniqueProcess;
		HANDLE  UniqueThread;
	} CLIENT_ID, *PCLIENT_ID;

	typedef struct _CLIENT_ID32
	{
		ULONG32  UniqueProcess;
		ULONG32  UniqueThread;

	} CLIENT_ID32, *PCLIENT_ID32;

	/************************************************************************/
	/* strings                                                              */
	/************************************************************************/

	typedef struct _STRING
	{
		USHORT  Length;
		USHORT  MaximumLength;
		PCHAR   Buffer;
	} STRING;

	typedef STRING *PSTRING;
	typedef STRING ANSI_STRING;
	typedef PSTRING PANSI_STRING;

	typedef struct _UNICODE_STRING {
		USHORT  Length;
		USHORT  MaximumLength;
		PWSTR   Buffer;
	} UNICODE_STRING;

	typedef struct _LARGE_UNICODE_STRING
	{
		ULONG Length;
		ULONG MaximumLength : 31;
		ULONG Ansi : 1;

		union
		{
			PWSTR   UnicodeBuffer;
			PSTR    AnsiBuffer;
			ULONG64 Buffer;
		};

	} LARGE_UNICODE_STRING, *PLARGE_UNICODE_STRING;

#pragma pack(push, 8)

	typedef struct
	{
		USHORT Length;
		USHORT MaximumLength;
		union
		{
			PWSTR  Buffer;
			ULONG64 Dummy;
		};

	} ANSI_STRING3264, *PANSI_STRING3264;

	typedef struct
	{
		USHORT Length;
		USHORT MaximumLength;
		union
		{
			PWSTR  Buffer;
			ULONG64 Dummy;
		};

	} UNICODE_STRING3264, *PUNICODE_STRING3264;

	typedef UNICODE_STRING3264 UNICODE_STRING64;
	typedef PUNICODE_STRING3264 PUNICODE_STRING64;

#pragma pack(pop)

	typedef UNICODE_STRING *PUNICODE_STRING;
	typedef const UNICODE_STRING *PCUNICODE_STRING;

#if CPP_DEFINDED

	EXTCPP
	{
		char _RTL_CONSTANT_STRING_type_check(const char *s);
		char _RTL_CONSTANT_STRING_type_check(const WCHAR *s);
		// __typeof would be desirable here instead of sizeof.
		template <size_t N> class _RTL_CONSTANT_STRING_remove_const_template_class;
		template <> class _RTL_CONSTANT_STRING_remove_const_template_class<sizeof(char)>  { public: typedef  char T; };
		template <> class _RTL_CONSTANT_STRING_remove_const_template_class<sizeof(WCHAR)> { public: typedef WCHAR T; };
#define _RTL_CONSTANT_STRING_remove_const_macro(s) \
        (const_cast<_RTL_CONSTANT_STRING_remove_const_template_class<sizeof((s)[0])>::T*>(s))
	}

#else
	char _RTL_CONSTANT_STRING_type_check(const void *s);
#define _RTL_CONSTANT_STRING_remove_const_macro(s) (s)
#endif  // CPP_DEFINDED

#define RTL_CONSTANT_STRING(s) \
						{ \
    sizeof( s ) - sizeof( (s)[0] ), \
    sizeof( s ) / sizeof(_RTL_CONSTANT_STRING_type_check(s)), \
    _RTL_CONSTANT_STRING_remove_const_macro(s) \
						}

#if 0

#pragma pack(4)

#define MAXIMUM_LEADBYTES   12

	typedef struct _CPTABLEINFO {
		USHORT  CodePage;                       // code page number
		USHORT  MaximumCharacterSize;           // max length (bytes) of a char
		USHORT  DefaultChar;                    // default character (MB)
		USHORT  UniDefaultChar;                 // default character (Unicode)
		USHORT  TransDefaultChar;               // translation of default char (Unicode)
		USHORT  TransUniDefaultChar;            // translation of Unic default char (MB)
		USHORT  DBCSCodePage;                   // Non 0 for DBCS code pages
		UCHAR   LeadByte[MAXIMUM_LEADBYTES];    // lead byte ranges
		PUSHORT MultiByteTable;                 // pointer to MB translation table
		PVOID   WideCharTable;                  // pointer to WC translation table
		PUSHORT DBCSRanges;                     // pointer to DBCS ranges
		PUSHORT DBCSOffsets;                    // pointer to DBCS offsets
	} CPTABLEINFO, *PCPTABLEINFO;

	typedef struct _NLSTABLEINFO {
		CPTABLEINFO OemTableInfo;
		CPTABLEINFO AnsiTableInfo;
		PUSHORT     UpperCaseTable;             // 844 format upcase table
		PUSHORT     LowerCaseTable;             // 844 format lower case table
	} NLSTABLEINFO, *PNLSTABLEINFO;

#pragma pack()

#endif

	/************************************************************************/
	/* others                                                               */
	/************************************************************************/

#if !defined(NtCurrentProcess)
#define NtCurrentProcess() (HANDLE)-1
#define NtCurrentProcess64() (HANDLE64)-1
#endif /* NtCurrentProcess */

#if !defined(NtCurrentThread)
#define NtCurrentThread() (HANDLE)-2
#define NtCurrentThread64() (HANDLE64)-2
#endif /* NtCurrentThread */

#ifndef NT_SUCCESS

	ForceInline Bool IsStatusSuccess(NTSTATUS Status) { return (Status & Status) >= 0; }
	//    #define NT_SUCCESS(Status)  (((NTSTATUS)(Status)) >= 0)
#define NT_SUCCESS(Status)  IsStatusSuccess(Status)
#endif /* NT_SUCCESS */

#if !defined(RT_MESSAGETABLE)
#define RT_MESSAGETABLE 0x0B
#endif




	/************************************************************************
	object types
	************************************************************************/

	typedef enum
	{
		ObjectBasicInformation = 0,
		ObjectNameInformation = 1,
		ObjectTypeInformation = 2,
		ObjectTypesInformation = 3,
		ObjectHandleFlagInformation = 4,
		ObjectSessionInformation = 5,
		MaxObjectInfoClass,

	} OBJECT_INFORMATION_CLASS;

	typedef struct _OBJECT_ATTRIBUTES {
		ULONG Length;
		HANDLE RootDirectory;
		PUNICODE_STRING ObjectName;
		ULONG Attributes;
		PVOID SecurityDescriptor;        // Points to type SECURITY_DESCRIPTOR
		PVOID SecurityQualityOfService;  // Points to type SECURITY_QUALITY_OF_SERVICE
	} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

	typedef struct _OBJECT_ATTRIBUTES64 {
		ULONG64 Length;
		ULONG64 RootDirectory;
		ULONG64 ObjectName;
		ULONG64 Attributes;
		ULONG64 SecurityDescriptor;
		ULONG64 SecurityQualityOfService;
	} OBJECT_ATTRIBUTES64;

	typedef OBJECT_ATTRIBUTES64 *POBJECT_ATTRIBUTES64;

	typedef CONST OBJECT_ATTRIBUTES *PCOBJECT_ATTRIBUTES;

#ifndef OBJ_INHERIT
#define OBJ_INHERIT             0x00000002L
#define OBJ_PERMANENT           0x00000010L
#define OBJ_EXCLUSIVE           0x00000020L
#define OBJ_CASE_INSENSITIVE    0x00000040L
#define OBJ_OPENIF              0x00000080L
#define OBJ_OPENLINK            0x00000100L
#define OBJ_KERNEL_HANDLE       0x00000200L
#define OBJ_FORCE_ACCESS_CHECK  0x00000400L
#define OBJ_VALID_ATTRIBUTES    0x000007F2L
#endif // OBJ_INHERIT

#undef InitializeObjectAttributes
	inline VOID InitializeObjectAttributes(POBJECT_ATTRIBUTES p, PUNICODE_STRING n, ULONG a, HANDLE r, PVOID s)
	{
		p->Length = sizeof(*p);
		p->RootDirectory = r;
		p->Attributes = a;
		p->ObjectName = n;
		p->SecurityDescriptor = s;
		p->SecurityQualityOfService = NULL;

		*(volatile PUNICODE_STRING *)&n = n;
	}

#ifndef InitializeObjectAttributes
#define __InitializeObjectAttributes_unused( p, n, a, r, s ) { \
        (p)->Length = sizeof( OBJECT_ATTRIBUTES );          \
        (p)->RootDirectory = r;                             \
        (p)->Attributes = a;                                \
        (p)->ObjectName = n;                                \
        (p)->SecurityDescriptor = s;                        \
        (p)->SecurityQualityOfService = NULL;               \
						    }
#endif


	/************************************************************************
	object information
	************************************************************************/

	//
	// Object Manager Object Type Specific Access Rights.
	//

#define OBJECT_TYPE_CREATE (0x0001)

#define OBJECT_TYPE_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 0x1)

	typedef struct
	{
		UNICODE_STRING  Name;

	} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;

	/************************************************************************/
	/* file                                                                 */
	/************************************************************************/

#define FSRTL_FAT_LEGAL         0x01
#define FSRTL_HPFS_LEGAL        0x02
#define FSRTL_NTFS_LEGAL        0x04
#define FSRTL_WILD_CHARACTER    0x08
#define FSRTL_OLE_LEGAL         0x10
#define FSRTL_NTFS_STREAM_LEGAL (FSRTL_NTFS_LEGAL | FSRTL_OLE_LEGAL)

#define FsRtlIsUnicodeCharacterWild(C) (                                \
      (((C) >= 0x40) ? FALSE : FLAG_ON( LEGAL_ANSI_CHARACTER_ARRAY[(C)], \
                                       FSRTL_WILD_CHARACTER ) )         \
)

#define ANSI_DOS_STAR   ('<')
#define ANSI_DOS_QM     ('>')
#define ANSI_DOS_DOT    ('"')

#define DOS_STAR        (L'<')
#define DOS_QM          (L'>')
#define DOS_DOT         (L'"')

	//
	// Object Manager Directory Specific Access Rights.
	//

#define DIRECTORY_QUERY                 (0x0001)
#define DIRECTORY_TRAVERSE              (0x0002)
#define DIRECTORY_CREATE_OBJECT         (0x0004)
#define DIRECTORY_CREATE_SUBDIRECTORY   (0x0008)

#define DIRECTORY_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 0xF)

	//begin_winnt

	//
	// Object Manager Symbolic Link Specific Access Rights.
	//

	//end_winnt

#define SYMBOLIC_LINK_QUERY (0x0001)

#define SYMBOLIC_LINK_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | 0x1)


	typedef enum _FSINFOCLASS {

		FileFsVolumeInformation = 1,
		FileFsLabelInformation,      // 2
		FileFsSizeInformation,       // 3
		FileFsDeviceInformation,     // 4
		FileFsAttributeInformation,  // 5
		FileFsControlInformation,    // 6
		FileFsFullSizeInformation,   // 7
		FileFsObjectIdInformation,   // 8
		FileFsDriverPathInformation, // 9
		FileFsVolumeFlagsInformation,// 10
		FileFsMaximumInformation

	} FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;

	typedef struct _FILE_FS_LABEL_INFORMATION {
		ULONG VolumeLabelLength;
		WCHAR VolumeLabel[1];
	} FILE_FS_LABEL_INFORMATION, *PFILE_FS_LABEL_INFORMATION;

	typedef struct _FILE_FS_VOLUME_INFORMATION {
		LARGE_INTEGER VolumeCreationTime;
		ULONG VolumeSerialNumber;
		ULONG VolumeLabelLength;
		BOOLEAN SupportsObjects;
		WCHAR VolumeLabel[1];
	} FILE_FS_VOLUME_INFORMATION, *PFILE_FS_VOLUME_INFORMATION;

	typedef struct _FILE_FS_VOLUME_INFORMATION2 {
		LARGE_INTEGER VolumeCreationTime;
		ULONG VolumeSerialNumber;
		ULONG VolumeLabelLength;
		BOOLEAN SupportsObjects;
		WCHAR VolumeLabel[MAX_NTPATH];
	} FILE_FS_VOLUME_INFORMATION2, *PFILE_FS_VOLUME_INFORMATION2;

	typedef struct _FILE_FS_SIZE_INFORMATION {
		LARGE_INTEGER TotalAllocationUnits;
		LARGE_INTEGER AvailableAllocationUnits;
		ULONG SectorsPerAllocationUnit;
		ULONG BytesPerSector;
	} FILE_FS_SIZE_INFORMATION, *PFILE_FS_SIZE_INFORMATION;

	typedef struct _FILE_FS_FULL_SIZE_INFORMATION {
		LARGE_INTEGER TotalAllocationUnits;
		LARGE_INTEGER CallerAvailableAllocationUnits;
		LARGE_INTEGER ActualAvailableAllocationUnits;
		ULONG SectorsPerAllocationUnit;
		ULONG BytesPerSector;
	} FILE_FS_FULL_SIZE_INFORMATION, *PFILE_FS_FULL_SIZE_INFORMATION;

	typedef struct _FILE_FS_OBJECTID_INFORMATION {
		UCHAR ObjectId[16];
		UCHAR ExtendedInfo[48];
	} FILE_FS_OBJECTID_INFORMATION, *PFILE_FS_OBJECTID_INFORMATION;

	typedef struct _FILE_FS_DEVICE_INFORMATION {
		DEVICE_TYPE DeviceType;
		ULONG Characteristics;
	} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION;

	typedef struct _FILE_FS_ATTRIBUTE_INFORMATION {
		ULONG FileSystemAttributes;
		LONG MaximumComponentNameLength;
		ULONG FileSystemNameLength;
		WCHAR FileSystemName[1];
	} FILE_FS_ATTRIBUTE_INFORMATION, *PFILE_FS_ATTRIBUTE_INFORMATION;

	typedef struct _FILE_FS_ATTRIBUTE_INFORMATION2 {
		ULONG FileSystemAttributes;
		LONG MaximumComponentNameLength;
		ULONG FileSystemNameLength;
		WCHAR FileSystemName[MAX_NTPATH];
	} FILE_FS_ATTRIBUTE_INFORMATION2, *PFILE_FS_ATTRIBUTE_INFORMATION2;

	typedef struct _FILE_FS_DRIVER_PATH_INFORMATION {
		BOOLEAN DriverInPath;
		ULONG   DriverNameLength;
		WCHAR   DriverName[1];
	} FILE_FS_DRIVER_PATH_INFORMATION, *PFILE_FS_DRIVER_PATH_INFORMATION;

	typedef struct _FILE_FS_VOLUME_FLAGS_INFORMATION {
		ULONG Flags;
	} FILE_FS_VOLUME_FLAGS_INFORMATION, *PFILE_FS_VOLUME_FLAGS_INFORMATION;

	typedef enum
	{
		FileDirectoryInformation = 1,
		FileFullDirectoryInformation = 2,
		FileBothDirectoryInformation = 3,
		FileBasicInformation = 4,
		FileStandardInformation = 5,
		FileInternalInformation = 6,
		FileEaInformation = 7,
		FileAccessInformation = 8,
		FileNameInformation = 9,
		FileRenameInformation = 10,
		FileLinkInformation = 11,
		FileNamesInformation = 12,
		FileDispositionInformation = 13,
		FilePositionInformation = 14,
		FileFullEaInformation = 15,
		FileModeInformation = 16,
		FileAlignmentInformation = 17,
		FileAllInformation = 18,
		FileAllocationInformation = 19,
		FileEndOfFileInformation = 20,
		FileAlternateNameInformation = 21,
		FileStreamInformation = 22,
		FilePipeInformation = 23,
		FilePipeLocalInformation = 24,
		FilePipeRemoteInformation = 25,
		FileMailslotQueryInformation = 26,
		FileMailslotSetInformation = 27,
		FileCompressionInformation = 28,
		FileObjectIdInformation = 29,
		FileCompletionInformation = 30,
		FileMoveClusterInformation = 31,
		FileQuotaInformation = 32,
		FileReparsePointInformation = 33,
		FileNetworkOpenInformation = 34,
		FileAttributeTagInformation = 35,
		FileTrackingInformation = 36,
		FileIdBothDirectoryInformation = 37,
		FileIdFullDirectoryInformation = 38,
		FileValidDataLengthInformation = 39,
		FileShortNameInformation = 40,
		FileIoCompletionNotificationInformation = 41,
		FileIoStatusBlockRangeInformation = 42,
		FileIoPriorityHintInformation = 43,
		FileSfioReserveInformation = 44,
		FileSfioVolumeInformation = 45,
		FileHardLinkInformation = 46,
		FileProcessIdsUsingFileInformation = 47,
		FileNormalizedNameInformation = 48,
		FileNetworkPhysicalNameInformation = 49,
		FileIdGlobalTxDirectoryInformation = 50,
		FileIsRemoteDeviceInformation = 51,
		FileAttributeCacheInformation = 52,
		FileNumaNodeInformation = 53,
		FileStandardLinkInformation = 54,
		FileRemoteProtocolInformation = 55,
		FileMaximumInformation = 56,

	} FILE_INFORMATION_CLASS;

	/************************************************************************/
	/* FILE FLAGS                                                           */
	/************************************************************************/

	//
	// Define the access check value for any access
	//
	//
	// The FILE_READ_ACCESS and FILE_WRITE_ACCESS constants are also defined in
	// ntioapi.h as FILE_READ_DATA and FILE_WRITE_DATA. The values for these
	// constants *MUST* always be in sync.
	//
	//
	// FILE_SPECIAL_ACCESS is checked by the NT I/O system the same as FILE_ANY_ACCESS.
	// The file systems, however, may add additional access checks for I/O and FS controls
	// that use this value.
	//

#define FILE_ANY_ACCESS                 0
#define FILE_SPECIAL_ACCESS    (FILE_ANY_ACCESS)
#define FILE_READ_ACCESS          ( 0x0001 )    // file & pipe
#define FILE_WRITE_ACCESS         ( 0x0002 )    // file & pipe



	//
	// Define access rights to files and directories
	//

	//
	// The FILE_READ_DATA and FILE_WRITE_DATA constants are also defined in
	// devioctl.h as FILE_READ_ACCESS and FILE_WRITE_ACCESS. The values for these
	// constants *MUST* always be in sync.
	// The values are redefined in devioctl.h because they must be available to
	// both DOS and NT.
	//

#define FILE_READ_DATA            ( 0x0001 )    // file & pipe
#define FILE_LIST_DIRECTORY       ( 0x0001 )    // directory

#define FILE_WRITE_DATA           ( 0x0002 )    // file & pipe
#define FILE_ADD_FILE             ( 0x0002 )    // directory

#define FILE_APPEND_DATA          ( 0x0004 )    // file
#define FILE_ADD_SUBDIRECTORY     ( 0x0004 )    // directory
#define FILE_CREATE_PIPE_INSTANCE ( 0x0004 )    // named pipe


#define FILE_READ_EA              ( 0x0008 )    // file & directory

#define FILE_WRITE_EA             ( 0x0010 )    // file & directory

#define FILE_EXECUTE              ( 0x0020 )    // file
#define FILE_TRAVERSE             ( 0x0020 )    // directory

#define FILE_DELETE_CHILD         ( 0x0040 )    // directory

#define FILE_READ_ATTRIBUTES      ( 0x0080 )    // all

#define FILE_WRITE_ATTRIBUTES     ( 0x0100 )    // all

#define FILE_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x1FF)

#define FILE_GENERIC_READ         (STANDARD_RIGHTS_READ     |\
                                   FILE_READ_DATA           |\
                                   FILE_READ_ATTRIBUTES     |\
                                   FILE_READ_EA             |\
                                   SYNCHRONIZE)


#define FILE_GENERIC_WRITE        (STANDARD_RIGHTS_WRITE    |\
                                   FILE_WRITE_DATA          |\
                                   FILE_WRITE_ATTRIBUTES    |\
                                   FILE_WRITE_EA            |\
                                   FILE_APPEND_DATA         |\
                                   SYNCHRONIZE)


#define FILE_GENERIC_EXECUTE      (STANDARD_RIGHTS_EXECUTE  |\
                                   FILE_READ_ATTRIBUTES     |\
                                   FILE_EXECUTE             |\
                                   SYNCHRONIZE)




	//
	// Define share access rights to files and directories
	//

#define FILE_SHARE_READ                 0x00000001
#define FILE_SHARE_WRITE                0x00000002
#define FILE_SHARE_DELETE               0x00000004
#define FILE_SHARE_VALID_FLAGS          0x00000007

	//
	// Define the file attributes values
	//
	// Note:  0x00000008 is reserved for use for the old DOS VOLID (volume ID)
	//        and is therefore not considered valid in NT.
	//
	// Note:  Note also that the order of these flags is set to allow both the
	//        FAT and the Pinball File Systems to directly set the attributes
	//        flags in attributes words without having to pick each flag out
	//        individually.  The order of these flags should not be changed!
	//

#define FILE_ATTRIBUTE_READONLY             0x00000001
#define FILE_ATTRIBUTE_HIDDEN               0x00000002
#define FILE_ATTRIBUTE_SYSTEM               0x00000004
	//OLD DOS VOLID                             0x00000008

#define FILE_ATTRIBUTE_DIRECTORY            0x00000010
#define FILE_ATTRIBUTE_ARCHIVE              0x00000020
#define FILE_ATTRIBUTE_DEVICE               0x00000040
#define FILE_ATTRIBUTE_NORMAL               0x00000080

#define FILE_ATTRIBUTE_TEMPORARY            0x00000100
#define FILE_ATTRIBUTE_SPARSE_FILE          0x00000200
#define FILE_ATTRIBUTE_REPARSE_POINT        0x00000400
#define FILE_ATTRIBUTE_COMPRESSED           0x00000800

#define FILE_ATTRIBUTE_OFFLINE              0x00001000
#define FILE_ATTRIBUTE_NOT_CONTENT_INDEXED  0x00002000
#define FILE_ATTRIBUTE_ENCRYPTED            0x00004000

#define FILE_ATTRIBUTE_VIRTUAL              0x00010000

#define FILE_ATTRIBUTE_VALID_FLAGS          0x00007fb7
#define FILE_ATTRIBUTE_VALID_SET_FLAGS      0x000031a7

#define FILE_SUPERSEDE                  0x00000000
#define FILE_OPEN                       0x00000001
#define FILE_CREATE                     0x00000002
#define FILE_OPEN_IF                    0x00000003
#define FILE_OVERWRITE                  0x00000004
#define FILE_OVERWRITE_IF               0x00000005
#define FILE_MAXIMUM_DISPOSITION        0x00000005

	//
	// Define the create/open option flags
	//

#define FILE_DIRECTORY_FILE                     0x00000001
#define FILE_WRITE_THROUGH                      0x00000002
#define FILE_SEQUENTIAL_ONLY                    0x00000004
#define FILE_NO_INTERMEDIATE_BUFFERING          0x00000008

#define FILE_SYNCHRONOUS_IO_ALERT               0x00000010
#define FILE_SYNCHRONOUS_IO_NONALERT            0x00000020
#define FILE_NON_DIRECTORY_FILE                 0x00000040
#define FILE_CREATE_TREE_CONNECTION             0x00000080

#define FILE_COMPLETE_IF_OPLOCKED               0x00000100
#define FILE_NO_EA_KNOWLEDGE                    0x00000200
#define FILE_OPEN_REMOTE_INSTANCE               0x00000400
#define FILE_RANDOM_ACCESS                      0x00000800

#define FILE_DELETE_ON_CLOSE                    0x00001000
#define FILE_OPEN_BY_FILE_ID                    0x00002000
#define FILE_OPEN_FOR_BACKUP_INTENT             0x00004000
#define FILE_NO_COMPRESSION                     0x00008000

#if (NTDDI_VERSION >= NTDDI_WIN7)
#define FILE_OPEN_REQUIRING_OPLOCK              0x00010000
#define FILE_DISALLOW_EXCLUSIVE                 0x00020000
#endif /* NTDDI_VERSION >= NTDDI_WIN7 */

#define FILE_RESERVE_OPFILTER                   0x00100000
#define FILE_OPEN_REPARSE_POINT                 0x00200000
#define FILE_OPEN_NO_RECALL                     0x00400000
#define FILE_OPEN_FOR_FREE_SPACE_QUERY          0x00800000


#define FILE_VALID_OPTION_FLAGS                 0x00ffffff
#define FILE_VALID_PIPE_OPTION_FLAGS            0x00000032
#define FILE_VALID_MAILSLOT_OPTION_FLAGS        0x00000032
#define FILE_VALID_SET_FLAGS                    0x00000036

	//
	// Define the I/O status information return values for NtCreateFile/NtOpenFile
	//

#define FILE_SUPERSEDED                 0x00000000
#define FILE_OPENED                     0x00000001
#define FILE_CREATED                    0x00000002
#define FILE_OVERWRITTEN                0x00000003
#define FILE_EXISTS                     0x00000004
#define FILE_DOES_NOT_EXIST             0x00000005

	//
	// Define special ByteOffset parameters for read and write operations
	//

#define FILE_WRITE_TO_END_OF_FILE       0xffffffff
#define FILE_USE_FILE_POINTER_POSITION  0xfffffffe

	//
	// Define alignment requirement values
	//

#define FILE_BYTE_ALIGNMENT             0x00000000
#define FILE_WORD_ALIGNMENT             0x00000001
#define FILE_LONG_ALIGNMENT             0x00000003
#define FILE_QUAD_ALIGNMENT             0x00000007
#define FILE_OCTA_ALIGNMENT             0x0000000f
#define FILE_32_BYTE_ALIGNMENT          0x0000001f
#define FILE_64_BYTE_ALIGNMENT          0x0000003f
#define FILE_128_BYTE_ALIGNMENT         0x0000007f
#define FILE_256_BYTE_ALIGNMENT         0x000000ff
#define FILE_512_BYTE_ALIGNMENT         0x000001ff

	//
	// Define the maximum length of a filename string
	//

#define MAXIMUM_FILENAME_LENGTH         256

	//
	// Define the various device characteristics flags
	//

#define FILE_REMOVABLE_MEDIA                    0x00000001
#define FILE_READ_ONLY_DEVICE                   0x00000002
#define FILE_FLOPPY_DISKETTE                    0x00000004
#define FILE_WRITE_ONCE_MEDIA                   0x00000008
#define FILE_REMOTE_DEVICE                      0x00000010
#define FILE_DEVICE_IS_MOUNTED                  0x00000020
#define FILE_VIRTUAL_VOLUME                     0x00000040
#define FILE_AUTOGENERATED_DEVICE_NAME          0x00000080
#define FILE_DEVICE_SECURE_OPEN                 0x00000100
#define FILE_CHARACTERISTIC_PNP_DEVICE          0x00000800
#define FILE_CHARACTERISTIC_TS_DEVICE           0x00001000
#define FILE_CHARACTERISTIC_WEBDAV_DEVICE       0x00002000

	typedef struct _FILE_BASIC_INFORMATION
	{
		LARGE_INTEGER   CreationTime;
		LARGE_INTEGER   LastAccessTime;
		LARGE_INTEGER   LastWriteTime;
		LARGE_INTEGER   ChangeTime;
		ULONG           FileAttributes;
		ULONG           Dummy;

	} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;

	typedef struct _FILE_NAME_INFORMATION
	{
		ULONG FileNameLength;
		WCHAR FileName[1];
	} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;

	typedef struct _FILE_POSITION_INFORMATION
	{
		LARGE_INTEGER CurrentByteOffset;

	} FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION;

	typedef struct _FILE_END_OF_FILE_INFORMATION
	{
		LARGE_INTEGER EndOfFile;

	} FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION;

	typedef struct _FILE_DISPOSITION_INFORMATION
	{
		BOOLEAN  DeleteFile;

	} FILE_DISPOSITION_INFORMATION;

	typedef struct _FILE_STANDARD_INFORMATION
	{
		LARGE_INTEGER   AllocationSize;
		LARGE_INTEGER   EndOfFile;
		ULONG           NumberOfLinks;
		BOOLEAN         DeletePending;
		BOOLEAN         Directory;

	} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;

	typedef struct
	{
		union
		{
			NTSTATUS    Status;
			PVOID       Pointer;
		};
		ULONG_PTR Information;

	} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;

	typedef
		VOID
		(NTAPI
		*PIO_APC_ROUTINE)(
		IN PVOID            ApcContext,
		IN PIO_STATUS_BLOCK IoStatusBlock,
		IN ULONG            Reserved
		);

	/************************************************************************/
	/* memory                                                               */
	/************************************************************************/

	typedef enum _POOL_TYPE
	{
		NonPagedPool,
		PagedPool,
		NonPagedPoolMustSucceed,
		DontUseThisType,
		NonPagedPoolCacheAligned,
		PagedPoolCacheAligned,
		NonPagedPoolCacheAlignedMustS,
		MaxPoolType,

		//
		// Note these per session types are carefully chosen so that the appropriate
		// masking still applies as well as MaxPoolType above.
		//

		NonPagedPoolSession = 32,
		PagedPoolSession = NonPagedPoolSession + 1,
		NonPagedPoolMustSucceedSession = PagedPoolSession + 1,
		DontUseThisTypeSession = NonPagedPoolMustSucceedSession + 1,
		NonPagedPoolCacheAlignedSession = DontUseThisTypeSession + 1,
		PagedPoolCacheAlignedSession = NonPagedPoolCacheAlignedSession + 1,
		NonPagedPoolCacheAlignedMustSSession = PagedPoolCacheAlignedSession + 1,
	} POOL_TYPE;

	typedef
		NTSTATUS
		(NTAPI
		*PRTL_HEAP_COMMIT_ROUTINE)(
		IN     PVOID    Base,
		IN OUT PVOID   *CommitAddress,
		IN OUT PSIZE_T  CommitSize
		);

	typedef struct _RTL_HEAP_PARAMETERS
	{
		ULONG                       Length;
		SIZE_T                      SegmentReserve;
		SIZE_T                      SegmentCommit;
		SIZE_T                      DeCommitFreeBlockThreshold;
		SIZE_T                      DeCommitTotalFreeThreshold;
		SIZE_T                      MaximumAllocationSize;
		SIZE_T                      VirtualMemoryThreshold;
		SIZE_T                      InitialCommit;
		SIZE_T                      InitialReserve;
		PRTL_HEAP_COMMIT_ROUTINE    CommitRoutine;
		SIZE_T                      Reserved[2];

	} RTL_HEAP_PARAMETERS, *PRTL_HEAP_PARAMETERS;

	/************************************************************************/
	/* handles                                                              */
	/************************************************************************/

	enum { RTL_HANDLE_VALID = 0x000000001 };

	typedef struct _RTL_HANDLE_TABLE_ENTRY
	{
		union
		{
			ULONG                           Flags;
			struct _RTL_HANDLE_TABLE_ENTRY *NextFree;
		};
	} RTL_HANDLE_TABLE_ENTRY, *PRTL_HANDLE_TABLE_ENTRY;

	typedef struct _RTL_HANDLE_TABLE
	{
		ULONG                   MaximumNumberOfHandles;
		ULONG                   SizeOfHandleTableEntry;
		ULONG                   Reserved[2];
		PRTL_HANDLE_TABLE_ENTRY FreeHandles;
		PRTL_HANDLE_TABLE_ENTRY CommittedHandles;
		PRTL_HANDLE_TABLE_ENTRY UnCommittedHandles;
		PRTL_HANDLE_TABLE_ENTRY MaxReservedHandles;
	} RTL_HANDLE_TABLE, *PRTL_HANDLE_TABLE;


	//
	// Event type
	//

	typedef enum _EVENT_TYPE
	{
		NotificationEvent,
		SynchronizationEvent

	} EVENT_TYPE;

	_ML_C_TAIL_

#pragma pack(pop)

#endif // _NATIVETYPES_USER_H_30d04cf8_0b66_4f36_a472_f9c1734240b8
#endif // ML_KERNEL_MODE

#ifndef _NATIVETYPES_COMMON_H_e6f6abc9_91e7_452a_b418_671874fe30b3
#define _NATIVETYPES_COMMON_H_e6f6abc9_91e7_452a_b418_671874fe30b3

#pragma warning(disable:4103)



		//#pragma warning(disable:4201)

		_ML_C_HEAD_

#if !defined(FAIL_RETURN)
#define FAIL_RETURN(Status) { NTSTATUS __Status__;  __Status__ = (Status); if (!NT_SUCCESS(__Status__)) return __Status__; }
#define FAIL_CONTINUE(Status) if (!NT_SUCCESS(Status)) continue
#define FAIL_BREAK(Status) if (!NT_SUCCESS(Status)) break
#define SUCCESS_RETURN(Status) { NTSTATUS __Status__;  __Status__ = (Status); if (NT_SUCCESS(__Status__)) return __Status__; }
#endif  // FAIL_RETURN

#ifndef NT_FAILED
#define NT_FAILED !NT_SUCCESS
#endif // NT_FAILED


#ifndef FACILITY_NTWIN32
#define FACILITY_NTWIN32                 0x7
#endif // FACILITY_NTWIN32

#define DEFINE_NTSTATUS(Severity, Code) \
            (((ULONG)(Severity) << 30) | (1 << 29) | (FACILITY_NTWIN32 << 16) | (USHORT)(Code))




		/************************************************************************
		base
		************************************************************************/

		typedef struct _CLIENT_ID64
	{
		ULONG64  UniqueProcess;
		ULONG64  UniqueThread;

	} CLIENT_ID64, *PCLIENT_ID64;

	/************************************************************************
	strings
	************************************************************************/

	typedef struct _RTL_BUFFER
	{
		/* 0x000 */ PUCHAR                         Buffer;
		/* 0x004 */ PUCHAR                         StaticBuffer;
		/* 0x008 */ ULONG                          Size;
		/* 0x00C */ ULONG                          StaticSize;
		/* 0x010 */ ULONG                          ReservedForAllocatedSize;
		/* 0x014 */ PVOID                          ReservedForIMalloc;

	} RTL_BUFFER, *PRTL_BUFFER;

	typedef struct _RTL_UNICODE_STRING_BUFFER
	{
		/* 0x000 */ UNICODE_STRING                 String;
		/* 0x008 */ RTL_BUFFER                     ByteBuffer;
		/* 0x020 */ UCHAR                          MinimumStaticBufferForTerminalNul[2];

	} RTL_UNICODE_STRING_BUFFER, *PRTL_UNICODE_STRING_BUFFER;

	//
	// These must be converted to LUIDs before use.
	//

#if ML_USER_MODE

	enum
	{
		SE_MIN_WELL_KNOWN_PRIVILEGE = 2L,

		SE_CREATE_TOKEN_PRIVILEGE = 2L,
		SE_ASSIGNPRIMARYTOKEN_PRIVILEGE = 3L,
		SE_LOCK_MEMORY_PRIVILEGE = 4L,
		SE_INCREASE_QUOTA_PRIVILEGE = 5L,

		SE_MACHINE_ACCOUNT_PRIVILEGE = 6L,
		SE_TCB_PRIVILEGE = 7L,
		SE_SECURITY_PRIVILEGE = 8L,
		SE_TAKE_OWNERSHIP_PRIVILEGE = 9L,
		SE_LOAD_DRIVER_PRIVILEGE = 10L,
		SE_SYSTEM_PROFILE_PRIVILEGE = 11L,
		SE_SYSTEMTIME_PRIVILEGE = 12L,
		SE_PROF_SINGLE_PROCESS_PRIVILEGE = 13L,
		SE_INC_BASE_PRIORITY_PRIVILEGE = 14L,
		SE_CREATE_PAGEFILE_PRIVILEGE = 15L,
		SE_CREATE_PERMANENT_PRIVILEGE = 16L,
		SE_BACKUP_PRIVILEGE = 17L,
		SE_RESTORE_PRIVILEGE = 18L,
		SE_SHUTDOWN_PRIVILEGE = 19L,
		SE_DEBUG_PRIVILEGE = 20L,
		SE_AUDIT_PRIVILEGE = 21L,
		SE_SYSTEM_ENVIRONMENT_PRIVILEGE = 22L,
		SE_CHANGE_NOTIFY_PRIVILEGE = 23L,
		SE_REMOTE_SHUTDOWN_PRIVILEGE = 24L,
		SE_UNDOCK_PRIVILEGE = 25L,
		SE_SYNC_AGENT_PRIVILEGE = 26L,
		SE_ENABLE_DELEGATION_PRIVILEGE = 27L,
		SE_MANAGE_VOLUME_PRIVILEGE = 28L,
		SE_IMPERSONATE_PRIVILEGE = 29L,
		SE_CREATE_GLOBAL_PRIVILEGE = 30L,
		SE_TRUSTED_CREDMAN_ACCESS_PRIVILEGE = 31L,
		SE_RELABEL_PRIVILEGE = 32L,
		SE_INC_WORKING_SET_PRIVILEGE = 33L,
		SE_TIME_ZONE_PRIVILEGE = 34L,
		SE_CREATE_SYMBOLIC_LINK_PRIVILEGE = 35L,

		SE_MAX_WELL_KNOWN_PRIVILEGE
	};

#endif


	/************************************************************************
	afd
	************************************************************************/

#if ML_USER_MODE

	typedef struct _MDL
	{
		struct _MDL *Next;
		SHORT Size;
		SHORT MdlFlags;

		struct _EPROCESS *Process;
		PVOID MappedSystemVa;   /* see creators for field size annotations. */
		PVOID StartVa;   /* see creators for validity; could be address 0.  */
		ULONG ByteCount;
		ULONG ByteOffset;

	} MDL, *PMDL;

#endif // r3

	typedef struct _AFD_MAPBUF
	{
		PVOID BufferAddress;
		PMDL  Mdl;

	} AFD_MAPBUF, *PAFD_MAPBUF;

	typedef struct _AFD_WSABUF
	{
		ULONG  Length;
		PCHAR  Buffer;

	} AFD_WSABUF, *PAFD_WSABUF;

	typedef struct  _AFD_RECV_INFO
	{
		PAFD_WSABUF    BufferArray;
		ULONG          BufferCount;
		ULONG          AfdFlags;
		ULONG          TdiFlags;

	} AFD_RECV_INFO, *PAFD_RECV_INFO;

	typedef struct _AFD_RECV_INFO_UDP
	{
		PAFD_WSABUF     BufferArray;
		ULONG           BufferCount;
		ULONG           AfdFlags;
		ULONG           TdiFlags;
		PVOID           Address;
		PLONG           AddressLength;

	} AFD_RECV_INFO_UDP, *PAFD_RECV_INFO_UDP;

	typedef struct  _AFD_SEND_INFO
	{
		PAFD_WSABUF BufferArray;
		ULONG       BufferCount;
		ULONG       AfdFlags;
		ULONG       TdiFlags;

	} AFD_SEND_INFO, *PAFD_SEND_INFO;

	typedef struct _AFD_SEND_INFO_UDP
	{
		PAFD_WSABUF BufferArray;
		ULONG       BufferCount;
		ULONG       AfdFlags;
		ULONG       Padding[9];
		ULONG       SizeOfRemoteAddress;
		PVOID       RemoteAddress;

	} AFD_SEND_INFO_UDP, *PAFD_SEND_INFO_UDP;

	/* IOCTL Generation */
#define FSCTL_AFD_BASE                      FILE_DEVICE_NETWORK
#define _AFD_CONTROL_CODE(Operation, Method) ((FSCTL_AFD_BASE)<<12 | (Operation<<2) | Method)

	/* AFD Commands */
#define AFD_BIND                        0
#define AFD_CONNECT                     1
#define AFD_START_LISTEN                2
#define AFD_WAIT_FOR_LISTEN             3
#define AFD_ACCEPT                      4
#define AFD_RECV                        5
#define AFD_RECV_DATAGRAM               6
#define AFD_SEND                        7
#define AFD_SEND_DATAGRAM               8
#define AFD_SELECT                      9
#define AFD_DISCONNECT                  10
#define AFD_GET_SOCK_NAME               11
#define AFD_GET_PEER_NAME               12
#define AFD_GET_TDI_HANDLES             13
#define AFD_SET_INFO                    14
#define AFD_GET_CONTEXT_SIZE            15
#define AFD_GET_CONTEXT                 16
#define AFD_SET_CONTEXT                 17
#define AFD_SET_CONNECT_DATA            18
#define AFD_SET_CONNECT_OPTIONS         19
#define AFD_SET_DISCONNECT_DATA         20
#define AFD_SET_DISCONNECT_OPTIONS      21
#define AFD_GET_CONNECT_DATA            22
#define AFD_GET_CONNECT_OPTIONS         23
#define AFD_GET_DISCONNECT_DATA         24
#define AFD_GET_DISCONNECT_OPTIONS      25
#define AFD_SET_CONNECT_DATA_SIZE       26
#define AFD_SET_CONNECT_OPTIONS_SIZE    27
#define AFD_SET_DISCONNECT_DATA_SIZE    28
#define AFD_SET_DISCONNECT_OPTIONS_SIZE 29
#define AFD_GET_INFO                    30
#define AFD_EVENT_SELECT                33
#define AFD_ENUM_NETWORK_EVENTS         34
#define AFD_DEFER_ACCEPT                35
#define AFD_GET_PENDING_CONNECT_DATA    41
#define AFD_VALIDATE_GROUP              42

	/* AFD IOCTLs */

#define IOCTL_AFD_BIND                          _AFD_CONTROL_CODE(AFD_BIND,                         METHOD_NEITHER)     //  0x12003
#define IOCTL_AFD_CONNECT                       _AFD_CONTROL_CODE(AFD_CONNECT,                      METHOD_NEITHER)     //  0x12007
#define IOCTL_AFD_START_LISTEN                  _AFD_CONTROL_CODE(AFD_START_LISTEN,                 METHOD_NEITHER)     //  0x1200B
#define IOCTL_AFD_WAIT_FOR_LISTEN               _AFD_CONTROL_CODE(AFD_WAIT_FOR_LISTEN,              METHOD_BUFFERED)    //  0x1200C
#define IOCTL_AFD_ACCEPT                        _AFD_CONTROL_CODE(AFD_ACCEPT,                       METHOD_BUFFERED)    //  0x12010
#define IOCTL_AFD_RECV                          _AFD_CONTROL_CODE(AFD_RECV,                         METHOD_NEITHER)     //  0x12017
#define IOCTL_AFD_RECV_DATAGRAM                 _AFD_CONTROL_CODE(AFD_RECV_DATAGRAM,                METHOD_NEITHER)     //  0x1201B
#define IOCTL_AFD_SEND                          _AFD_CONTROL_CODE(AFD_SEND,                         METHOD_NEITHER)     //  0x1201F
#define IOCTL_AFD_SEND_DATAGRAM                 _AFD_CONTROL_CODE(AFD_SEND_DATAGRAM,                METHOD_NEITHER)     //  0x12023
#define IOCTL_AFD_SELECT                        _AFD_CONTROL_CODE(AFD_SELECT,                       METHOD_BUFFERED)    //  0x12024
#define IOCTL_AFD_DISCONNECT                    _AFD_CONTROL_CODE(AFD_DISCONNECT,                   METHOD_NEITHER)     //  0x1202B
#define IOCTL_AFD_GET_SOCK_NAME                 _AFD_CONTROL_CODE(AFD_GET_SOCK_NAME,                METHOD_NEITHER)     //  0x1202F
#define IOCTL_AFD_GET_PEER_NAME                 _AFD_CONTROL_CODE(AFD_GET_PEER_NAME,                METHOD_NEITHER)     //  0x12033
#define IOCTL_AFD_GET_TDI_HANDLES               _AFD_CONTROL_CODE(AFD_GET_TDI_HANDLES,              METHOD_NEITHER)     //  0x12037
#define IOCTL_AFD_SET_INFO                      _AFD_CONTROL_CODE(AFD_SET_INFO,                     METHOD_NEITHER)     //  0x1203B
#define IOCTL_AFD_GET_CONTEXT_SIZE              _AFD_CONTROL_CODE(AFD_GET_CONTEXT_SIZE,             METHOD_NEITHER)     //  0x1203F
#define IOCTL_AFD_GET_CONTEXT                   _AFD_CONTROL_CODE(AFD_GET_CONTEXT,                  METHOD_NEITHER)     //  0x12043
#define IOCTL_AFD_SET_CONTEXT                   _AFD_CONTROL_CODE(AFD_SET_CONTEXT,                  METHOD_NEITHER)     //  0x12047
#define IOCTL_AFD_SET_CONNECT_DATA              _AFD_CONTROL_CODE(AFD_SET_CONNECT_DATA,             METHOD_NEITHER)     //  0x1204B
#define IOCTL_AFD_SET_CONNECT_OPTIONS           _AFD_CONTROL_CODE(AFD_SET_CONNECT_OPTIONS,          METHOD_NEITHER)     //  0x1204F
#define IOCTL_AFD_SET_DISCONNECT_DATA           _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_DATA,          METHOD_NEITHER)     //  0x12053
#define IOCTL_AFD_SET_DISCONNECT_OPTIONS        _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_OPTIONS,       METHOD_NEITHER)     //  0x12057
#define IOCTL_AFD_GET_CONNECT_DATA              _AFD_CONTROL_CODE(AFD_GET_CONNECT_DATA,             METHOD_NEITHER)     //  0x1205B
#define IOCTL_AFD_GET_CONNECT_OPTIONS           _AFD_CONTROL_CODE(AFD_GET_CONNECT_OPTIONS,          METHOD_NEITHER)     //  0x1205F
#define IOCTL_AFD_GET_DISCONNECT_DATA           _AFD_CONTROL_CODE(AFD_GET_DISCONNECT_DATA,          METHOD_NEITHER)     //  0x12063
#define IOCTL_AFD_GET_DISCONNECT_OPTIONS        _AFD_CONTROL_CODE(AFD_GET_DISCONNECT_OPTIONS,       METHOD_NEITHER)     //  0x12067
#define IOCTL_AFD_SET_CONNECT_DATA_SIZE         _AFD_CONTROL_CODE(AFD_SET_CONNECT_DATA_SIZE,        METHOD_NEITHER)     //  0x1206B
#define IOCTL_AFD_SET_CONNECT_OPTIONS_SIZE      _AFD_CONTROL_CODE(AFD_SET_CONNECT_OPTIONS_SIZE,     METHOD_NEITHER)     //  0x1206F
#define IOCTL_AFD_SET_DISCONNECT_DATA_SIZE      _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_DATA_SIZE,     METHOD_NEITHER)     //  0x12073
#define IOCTL_AFD_SET_DISCONNECT_OPTIONS_SIZE   _AFD_CONTROL_CODE(AFD_SET_DISCONNECT_OPTIONS_SIZE,  METHOD_NEITHER)     //  0x12077
#define IOCTL_AFD_GET_INFO                      _AFD_CONTROL_CODE(AFD_GET_INFO,                     METHOD_NEITHER)     //  0x1207B
#define IOCTL_AFD_EVENT_SELECT                  _AFD_CONTROL_CODE(AFD_EVENT_SELECT,                 METHOD_NEITHER)     //  0x12087
#define IOCTL_AFD_DEFER_ACCEPT                  _AFD_CONTROL_CODE(AFD_DEFER_ACCEPT,                 METHOD_NEITHER)     //  0x1208F
#define IOCTL_AFD_GET_PENDING_CONNECT_DATA      _AFD_CONTROL_CODE(AFD_GET_PENDING_CONNECT_DATA,     METHOD_NEITHER)     //  0x120A7
#define IOCTL_AFD_ENUM_NETWORK_EVENTS           _AFD_CONTROL_CODE(AFD_ENUM_NETWORK_EVENTS,          METHOD_NEITHER)     //  0x1208B
#define IOCTL_AFD_VALIDATE_GROUP                _AFD_CONTROL_CODE(AFD_VALIDATE_GROUP,               METHOD_NEITHER)     //  0x120AB

	/************************************************************************
	iocp api
	************************************************************************/

	typedef enum _IO_COMPLETION_INFORMATION_CLASS
	{
		IoCompletionBasicInformation,

	} IO_COMPLETION_INFORMATION_CLASS;

	/************************************************************************
	shim engine
	************************************************************************/
	typedef enum
	{
		SE_PROCESS_ATTACH = 1,
		SE_PROCESS_DETACH = 2,
		SE_DLL_LOAD = 3,
	} SHIM_NOTIFY_REASON;

	typedef struct
	{
		PCSTR   ModuleName;
		PCSTR   FunctionName;
		PVOID   NewRoutine;
		PVOID   Unknown[3];
	} SHIM_HOOK_API_INFO, *PSHIM_HOOK_API_INFO;

	/************************************************************************
	timer api
	************************************************************************/

	typedef enum
	{
		TimerBasicInformation = 0,

	} TIMER_INFORMATION_CLASS;

	typedef struct _TIMER_BASIC_INFORMATION
	{
		LARGE_INTEGER   RemainingTime;
		BOOLEAN         TimerState;

	} TIMER_BASIC_INFORMATION, *PTIMER_BASIC_INFORMATION;

	/************************************************************************
	misc
	************************************************************************/

#define DELAY_ONE_MICROSECOND   (-10)
#define DELAY_ONE_MILLISECOND   (DELAY_ONE_MICROSECOND * 1000)
#define DELAY_ONE_SECOND        (DELAY_ONE_MILLISECOND * 1000)
#define DELAY_QUAD_INFINITE     0x8000000000000000ll

#if !ML_KERNEL_MODE

	typedef enum
	{
		NotificationTimer = 0,
		SynchronizationTimer = 1,
	} TIMER_TYPE;

#endif // ML_KERNEL_MODE


	_ML_C_TAIL_


#pragma warning(default:4103)

		//#pragma warning(default:4201)

#endif // _NATIVETYPES_COMMON_H_e6f6abc9_91e7_452a_b418_671874fe30b3

#endif // _NATIVETYPES_H_96405a6d_a23f_4fd6_b20a_e5821226bfc6

#define NATIVE_API  EXTC_IMPORT
#define NTKRNLAPI   EXTC_IMPORT

		ForceInline NTSTATUS ML_NTSTATUS_FROM_WIN32(long x) { return x <= 0 ? (NTSTATUS)x : (NTSTATUS)(((x)& 0x0000FFFF) | (FACILITY_NTWIN32 << 16) | ERROR_SEVERITY_ERROR); }

#endif // _NTBASE_H_bc4f0ce4_29e3_43c6_a3a3_98415b2adbab_

	_ML_C_HEAD_

#ifndef _NTDEBUG_H_c22191c1_3c8c_4044_84cc_7520d0bd5829_
#define _NTDEBUG_H_c22191c1_3c8c_4044_84cc_7520d0bd5829_


		/************************************************************************
		debug
		************************************************************************/
		//
		// Debug States
		//
		typedef enum _DBG_STATE
	{
		DbgIdle = 0,
		DbgReplyPending = 1,
		DbgCreateThreadStateChange = 2,
		DbgCreateProcessStateChange = 3,
		DbgExitThreadStateChange = 4,
		DbgExitProcessStateChange = 5,
		DbgExceptionStateChange = 6,
		DbgBreakpointStateChange = 7,
		DbgSingleStepStateChange = 8,
		DbgLoadDllStateChange = 9,
		DbgUnloadDllStateChange = 10,

	} DBG_STATE, *PDBG_STATE;

	//
	// Debug Object Access Masks
	//
#define DEBUG_OBJECT_WAIT_STATE_CHANGE      0x0001
#define DEBUG_OBJECT_ADD_REMOVE_PROCESS     0x0002
#define DEBUG_OBJECT_SET_INFORMATION        0x0004
#define DEBUG_OBJECT_ALL_ACCESS             (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x0F)

#define DBGK_KILL_PROCESS_ON_EXIT           1

	//
	// Debug Message Structures
	//
	typedef struct _DBGKM_EXCEPTION
	{
		EXCEPTION_RECORD ExceptionRecord;
		ULONG FirstChance;
	} DBGKM_EXCEPTION, *PDBGKM_EXCEPTION;

	typedef struct _DBGKM_CREATE_THREAD
	{
		ULONG SubSystemKey;
		PVOID StartAddress;
	} DBGKM_CREATE_THREAD, *PDBGKM_CREATE_THREAD;

	typedef struct _DBGKM_CREATE_PROCESS
	{
		ULONG       SubSystemKey;
		HANDLE      FileHandle;
		PVOID       BaseOfImage;
		ULONG_PTR   DebugInfoFileOffset;
		ULONG_PTR   DebugInfoSize;
		DBGKM_CREATE_THREAD InitialThread;
	} DBGKM_CREATE_PROCESS, *PDBGKM_CREATE_PROCESS;

	typedef struct _DBGKM_EXIT_THREAD
	{
		NTSTATUS ExitStatus;
	} DBGKM_EXIT_THREAD, *PDBGKM_EXIT_THREAD;

	typedef struct _DBGKM_EXIT_PROCESS
	{
		NTSTATUS ExitStatus;
	} DBGKM_EXIT_PROCESS, *PDBGKM_EXIT_PROCESS;

	typedef struct _DBGKM_LOAD_DLL
	{
		HANDLE  FileHandle;
		PVOID   BaseOfDll;
		ULONG   DebugInfoFileOffset;
		ULONG   DebugInfoSize;
		PVOID   NamePointer;
	} DBGKM_LOAD_DLL, *PDBGKM_LOAD_DLL;

	typedef struct _DBGKM_UNLOAD_DLL
	{
		PVOID BaseAddress;
	} DBGKM_UNLOAD_DLL, *PDBGKM_UNLOAD_DLL;

	typedef struct _DBGUI_CREATE_THREAD {
		HANDLE HandleToThread;
		DBGKM_CREATE_THREAD NewThread;
	} DBGUI_CREATE_THREAD, *PDBGUI_CREATE_THREAD;

	typedef struct _DBGUI_CREATE_PROCESS {
		HANDLE HandleToProcess;
		HANDLE HandleToThread;
		DBGKM_CREATE_PROCESS NewProcess;
	} DBGUI_CREATE_PROCESS, *PDBGUI_CREATE_PROCESS;

	//
	// User-Mode Debug State Change Structure
	//
	typedef struct _DBGUI_WAIT_STATE_CHANGE
	{
		DBG_STATE NewState;
		CLIENT_ID AppClientId;
		union
		{
			DBGKM_EXCEPTION         Exception;
			DBGUI_CREATE_THREAD     CreateThread;
			DBGUI_CREATE_PROCESS    CreateProcessInfo;
			DBGKM_EXIT_THREAD       ExitThread;
			DBGKM_EXIT_PROCESS      ExitProcess;
			DBGKM_LOAD_DLL          LoadDll;
			DBGKM_UNLOAD_DLL        UnloadDll;
		} StateInfo;

	} DBGUI_WAIT_STATE_CHANGE, *PDBGUI_WAIT_STATE_CHANGE;


#if ML_USER_MODE

	NATIVE_API
		VOID
		NTAPI
		DbgBreakPoint(
		VOID
		);

	NATIVE_API
		ULONG
		CDECL
		DbgPrint(
		PCSTR Format,
		...
		);

#endif // ML_USER_MODE

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiConnectToDbg(
		VOID
		);

	NATIVE_API
		HANDLE
		NTAPI
		DbgUiGetThreadDebugObject(
		VOID
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiIssueRemoteBreakin(
		HANDLE Process
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiContinue(
		IN PCLIENT_ID   ClientId,
		IN NTSTATUS     ContinueStatus
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiDebugActiveProcess(
		IN HANDLE Process
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiStopDebugging(
		IN HANDLE Process
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiWaitStateChange(
		IN PDBGUI_WAIT_STATE_CHANGE StateChange,
		IN PLARGE_INTEGER           TimeOut
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		DbgUiConvertStateChangeStructure(
		IN PDBGUI_WAIT_STATE_CHANGE WaitStateChange,
		IN DEBUG_EVENT             *DebugEvent
		);

	NATIVE_API
		BOOL
		NTAPI
		DbgUiRemoteBreakin(
		PVOID Parameter
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateDebugObject(
		OUT PHANDLE             DebugObject,
		IN  ACCESS_MASK         DebugObjectAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               Flags
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDebugActiveProcess(
		IN HANDLE DebuggeeProcess,
		IN HANDLE DebugObject
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtRemoveProcessDebug(
		IN HANDLE DebuggeeProcess,
		IN HANDLE DebugObject
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDebugContinue(
		IN HANDLE       DebugObjectHandle,
		IN PCLIENT_ID   ClientId,
		IN NTSTATUS     ContinueStatus
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetInformationDebugObject(
		IN  HANDLE  DebugObject,
		IN  ULONG   InformationClass,
		IN  PVOID   Information,
		IN  ULONG   InformationLength,
		OUT PULONG  ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitForDebugEvent(
		IN  HANDLE                      DebugObject,
		IN  BOOLEAN                     Alertable,
		IN  PLARGE_INTEGER              Timeout OPTIONAL,
		OUT PDBGUI_WAIT_STATE_CHANGE    StateChange
		);

#endif // _NTDEBUG_H_c22191c1_3c8c_4044_84cc_7520d0bd5829_
#ifndef _NTEXCEPTION_H_a57b7443_d72e_4c1e_a4b5_15c7e4c037dd_
#define _NTEXCEPTION_H_a57b7443_d72e_4c1e_a4b5_15c7e4c037dd_


	BOOLEAN
		NTAPI
		RtlDispatchException(
		PEXCEPTION_RECORD   ExceptionRecord,
		PCONTEXT            Context
		);

#if ML_KERNEL_MODE

	typedef struct _KTRAP_FRAME32
	{
		/* 0x000 */ ULONG                          DbgEbp;
		/* 0x004 */ ULONG                          DbgEip;
		/* 0x008 */ ULONG                          DbgArgMark;
		/* 0x00C */ ULONG                          DbgArgPointer;
		/* 0x010 */ USHORT                         TempSegCs;
		/* 0x012 */ UCHAR                          Logging;
		/* 0x013 */ UCHAR                          Reserved;
		/* 0x014 */ ULONG                          TempEsp;
		/* 0x018 */ ULONG                          Dr0;
		/* 0x01C */ ULONG                          Dr1;
		/* 0x020 */ ULONG                          Dr2;
		/* 0x024 */ ULONG                          Dr3;
		/* 0x028 */ ULONG                          Dr6;
		/* 0x02C */ ULONG                          Dr7;
		/* 0x030 */ ULONG                          SegGs;
		/* 0x034 */ ULONG                          SegEs;
		/* 0x038 */ ULONG                          SegDs;
		/* 0x03C */ ULONG                          Edx;
		/* 0x040 */ ULONG                          Ecx;
		/* 0x044 */ ULONG                          Eax;
		/* 0x048 */ ULONG                          PreviousPreviousMode;
		/* 0x04C */ PEXCEPTION_REGISTRATION_RECORD ExceptionList;
		/* 0x050 */ ULONG                          SegFs;
		/* 0x054 */ ULONG                          Edi;
		/* 0x058 */ ULONG                          Esi;
		/* 0x05C */ ULONG                          Ebx;
		/* 0x060 */ ULONG                          Ebp;
		/* 0x064 */ ULONG                          ErrCode;
		/* 0x068 */ ULONG                          Eip;
		/* 0x06C */ ULONG                          SegCs;
		/* 0x070 */ ULONG                          EFlags;
		/* 0x074 */ ULONG                          HardwareEsp;
		/* 0x078 */ ULONG                          HardwareSegSs;
		/* 0x07C */ ULONG                          V86Es;
		/* 0x080 */ ULONG                          V86Ds;
		/* 0x084 */ ULONG                          V86Fs;
		/* 0x088 */ ULONG                          V86Gs;

	} KTRAP_FRAME32, *PKTRAP_FRAME32;

#if ML_AMD64
#else // 32

	typedef PKTRAP_FRAME32 PKTRAP_FRAME;

	struct KEXCEPTION_FRAME;

	typedef KEXCEPTION_FRAME *PKEXCEPTION_FRAME;

#endif // x86

	VOID
		NTAPI
		KiDispatchException(
		IN      PEXCEPTION_RECORD    ExceptionRecord,
		IN      PKEXCEPTION_FRAME    ExceptionFrame,
		IN OUT  PKTRAP_FRAME         TrapFrame,
		IN      KPROCESSOR_MODE      PreviousMode,
		IN      BOOLEAN              FirstChance
		);

#else // r3

	NATIVE_API
		VOID
		NTAPI
		KiUserExceptionDispatcher(
		PEXCEPTION_RECORD   ExceptionRecord,
		PCONTEXT            Context
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlRaiseException(
		PEXCEPTION_RECORD ExceptionRecord
		);

	NATIVE_API
		VOID
		NTAPI
		RtlSetUnhandledExceptionFilter(
		LPTOP_LEVEL_EXCEPTION_FILTER TopLevelExceptionFilter
		);

	NATIVE_API
		LONG
		NTAPI
		RtlKnownExceptionFilter(
		PEXCEPTION_POINTERS ExceptionPointers
		);

	NATIVE_API
		PVOID
		NTAPI
		RtlAddVectoredExceptionHandler(
		IN LONG                         FirstHandler,
		IN PVECTORED_EXCEPTION_HANDLER  Handler
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlRemoveVectoredExceptionHandler(
		IN PVOID Handler
		);

	NATIVE_API
		PVOID
		NTAPI
		RtlAddVectoredContinueHandler(
		IN LONG                         FirstHandler,
		IN PVECTORED_EXCEPTION_HANDLER  Handler
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlRemoveVectoredContinueHandler(
		IN PVOID Handler
		);

#endif // !ML_KERNEL_MODE

	typedef enum _HARDERROR_RESPONSE_OPTION {
		OptionAbortRetryIgnore = 0,
		OptionOk = 1,
		OptionOkCancel = 2,
		OptionRetryCancel = 3,
		OptionYesNo = 4,
		OptionYesNoCancel = 5,
		OptionShutdownSystem = 6,
		OptionOkNoWait = 7,
		OptionCancelTryContinue = 8,

	} HARDERROR_RESPONSE_OPTION;

	typedef enum _HARDERROR_RESPONSE
	{
		ResponseReturnToCaller = 0,
		ResponseNotHandled = 1,
		ResponseAbort = 2,
		ResponseCancel = 3,
		ResponseIgnore = 4,
		ResponseNo = 5,
		ResponseOk = 6,
		ResponseRetry = 7,
		ResponseYes = 8,
		ResponseTryAgain = 9,
		ResponseContinue = 10,

	} HARDERROR_RESPONSE;

#define HARDERROR_PARAMETERS_FLAGSPOS   4
#define HARDERROR_FLAGS_DEFDESKTOPONLY  0x00020000

#define MAXIMUM_HARDERROR_PARAMETERS    5
#define HARDERROR_OVERRIDE_ERRORMODE    0x10000000

	NATIVE_API
		NTSTATUS
		NTAPI
		NtRaiseHardError(
		IN  NTSTATUS    ErrorStatus,
		IN  ULONG       NumberOfParameters,
		IN  ULONG       UnicodeStringParameterMask,
		IN  PULONG_PTR  Parameters,
		IN  ULONG       ValidResponseOptions,
		OUT PULONG      Response
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwRaiseHardError(
		IN  NTSTATUS    ErrorStatus,
		IN  ULONG       NumberOfParameters,
		IN  ULONG       UnicodeStringParameterMask,
		IN  PULONG_PTR  Parameters,
		IN  ULONG       ValidResponseOptions,
		OUT PULONG      Response
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtRaiseException(
		IN  PEXCEPTION_RECORD   ExceptionRecord,
		IN  PCONTEXT            ContextRecord,
		IN  BOOLEAN             FirstChance
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwRaiseException(
		IN  PEXCEPTION_RECORD   ExceptionRecord,
		IN  PCONTEXT            ContextRecord,
		IN  BOOLEAN             FirstChance
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ExRaiseHardError(
		IN  NTSTATUS    ErrorStatus,
		IN  ULONG       NumberOfParameters,
		IN  ULONG       UnicodeStringParameterMask,
		IN  PULONG_PTR  Parameters,
		IN  ULONG       ValidResponseOptions,
		OUT PULONG      Response
		);

#endif // _NTEXCEPTION_H_a57b7443_d72e_4c1e_a4b5_15c7e4c037dd_
#ifndef _NTFILEIO_H_a683f7a2_b20c_4e58_b9c8_e58a305b1315_
#define _NTFILEIO_H_a683f7a2_b20c_4e58_b9c8_e58a305b1315_


#ifndef FILE_BEGIN
#define FILE_BEGIN      0
#define FILE_CURRENT    1
#define FILE_END        2
#endif /* FILE_BEGIN */

#if !defined(INVALID_FILE_ATTRIBUTES)
#define INVALID_FILE_ATTRIBUTES ((ULONG)-1)
#endif // INVALID_FILE_ATTRIBUTES

#if !defined(FSCTL_GET_REPARSE_POINT)

#include <WinIoctl.h>

#endif // FSCTL_GET_REPARSE_POINT

	typedef struct _FILE_NAME_INFORMATION2
	{
		ULONG FileNameLength;
		WCHAR FileName[MAX_NTPATH];

	} FILE_NAME_INFORMATION2, *PFILE_NAME_INFORMATION2;

#if !defined(_NTIFS_)

#define SYMLINK_FLAG_RELATIVE   1

	typedef struct _REPARSE_DATA_BUFFER
	{
		ULONG  ReparseTag;
		USHORT ReparseDataLength;
		USHORT Reserved;
		union
		{
			struct
			{
				USHORT  SubstituteNameOffset;
				USHORT  SubstituteNameLength;
				USHORT  PrintNameOffset;
				USHORT  PrintNameLength;
				ULONG   Flags;
				WCHAR   PathBuffer[1];
			} SymbolicLinkReparseBuffer;
			struct
			{
				USHORT  SubstituteNameOffset;
				USHORT  SubstituteNameLength;
				USHORT  PrintNameOffset;
				USHORT  PrintNameLength;
				WCHAR   PathBuffer[1];
			} MountPointReparseBuffer;
			struct
			{
				UCHAR   DataBuffer[1];
			} GenericReparseBuffer;
		} DUMMYUNIONNAME;

	} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;

	typedef struct _FILE_ALLOCATION_INFORMATION
	{
		LARGE_INTEGER AllocationSize;

	} FILE_ALLOCATION_INFORMATION, *PFILE_ALLOCATION_INFORMATION;

#endif // _NTIFS_

#if !defined(_WDMDDK_)

	typedef struct _FILE_EA_INFORMATION
	{
		ULONG EaSize;

	} FILE_EA_INFORMATION, *PFILE_EA_INFORMATION;

	typedef struct
	{
		/* 0x000 */ ULONG   NextEntryOffset;
		/* 0x004 */ UCHAR   Flags;
		/* 0x005 */ UCHAR   EaNameLength;
		/* 0x006 */ USHORT  EaValueLength;
		/* 0x008 */ CHAR    EaName[1];

	} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;

	typedef struct _FILE_RENAME_INFORMATION
	{
		BOOL    ReplaceIfExists;
		HANDLE  RootDirectory;
		ULONG   FileNameLength;
		WCHAR   FileName[1];

	} FILE_RENAME_INFORMATION, *PFILE_RENAME_INFORMATION;

	typedef struct _FILE_BOTH_DIR_INFORMATION
	{
		ULONG           NextEntryOffset;
		ULONG           FileIndex;
		LARGE_INTEGER   CreationTime;
		LARGE_INTEGER   LastAccessTime;
		LARGE_INTEGER   LastWriteTime;
		LARGE_INTEGER   ChangeTime;
		LARGE_INTEGER   EndOfFile;
		LARGE_INTEGER   AllocationSize;
		ULONG           FileAttributes;
		ULONG           FileNameLength;
		ULONG           EaSize;
		SHORT           ShortNameLength;
		WCHAR           ShortName[12];
		WCHAR           FileName[1];

	} FILE_BOTH_DIR_INFORMATION, *PFILE_BOTH_DIR_INFORMATION;

#endif // _NTIFS_

#if ML_USER_MODE

	typedef struct _FILE_NETWORK_OPEN_INFORMATION
	{
		LARGE_INTEGER   CreationTime;
		LARGE_INTEGER   LastAccessTime;
		LARGE_INTEGER   LastWriteTime;
		LARGE_INTEGER   ChangeTime;
		LARGE_INTEGER   AllocationSize;
		LARGE_INTEGER   EndOfFile;
		ULONG           FileAttributes;

	} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;


	// Named pipe values

	// NamedPipeType for NtCreateNamedPipeFile
#define FILE_PIPE_BYTE_STREAM_TYPE 0x00000000
#define FILE_PIPE_MESSAGE_TYPE 0x00000001

	// CompletionMode for NtCreateNamedPipeFile
#define FILE_PIPE_QUEUE_OPERATION 0x00000000
#define FILE_PIPE_COMPLETE_OPERATION 0x00000001

	// ReadMode for NtCreateNamedPipeFile
#define FILE_PIPE_BYTE_STREAM_MODE 0x00000000
#define FILE_PIPE_MESSAGE_MODE 0x00000001

	// NamedPipeConfiguration for NtQueryInformationFile
#define FILE_PIPE_INBOUND 0x00000000
#define FILE_PIPE_OUTBOUND 0x00000001
#define FILE_PIPE_FULL_DUPLEX 0x00000002

	// NamedPipeState for NtQueryInformationFile
#define FILE_PIPE_DISCONNECTED_STATE 0x00000001
#define FILE_PIPE_LISTENING_STATE 0x00000002
#define FILE_PIPE_CONNECTED_STATE 0x00000003
#define FILE_PIPE_CLOSING_STATE 0x00000004

	// NamedPipeEnd for NtQueryInformationFile
#define FILE_PIPE_CLIENT_END 0x00000000
#define FILE_PIPE_SERVER_END 0x00000001

#endif // r3 only


	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenDirectoryObject(
		OUT PHANDLE             DirectoryHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenDirectoryObject(
		OUT PHANDLE             DirectoryHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenFile(
		PHANDLE             FileHandle,
		ACCESS_MASK         DesiredAccess,
		POBJECT_ATTRIBUTES  ObjectAttributes,
		PIO_STATUS_BLOCK    IoStatusBlock,
		ULONG               ShareAccess,
		ULONG               OpenOptions
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenFile(
		PHANDLE             FileHandle,
		ACCESS_MASK         DesiredAccess,
		POBJECT_ATTRIBUTES  ObjectAttributes,
		PIO_STATUS_BLOCK    IoStatusBlock,
		ULONG               ShareAccess,
		ULONG               OpenOptions
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateFile(
		OUT PHANDLE             FileHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		OUT PLARGE_INTEGER      AllocationSize OPTIONAL,
		IN  ULONG               FileAttributes,
		IN  ULONG               ShareAccess,
		IN  ULONG               CreateDisposition,
		IN  ULONG               CreateOptions,
		IN  PVOID               EaBuffer,
		IN  ULONG               EaLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateFile(
		OUT PHANDLE             FileHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		OUT PLARGE_INTEGER      AllocationSize OPTIONAL,
		IN  ULONG               FileAttributes,
		IN  ULONG               ShareAccess,
		IN  ULONG               CreateDisposition,
		IN  ULONG               CreateOptions,
		IN  PVOID               EaBuffer,
		IN  ULONG               EaLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateNamedPipeFile(
		OUT PHANDLE             FileHandle,
		IN  ULONG               DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  ULONG               ShareAccess,
		IN  ULONG               CreateDisposition,
		IN  ULONG               CreateOptions,
		IN  ULONG               NamedPipeType,
		IN  ULONG               ReadMode,
		IN  ULONG               CompletionMode,
		IN  ULONG               MaximumInstances,
		IN  ULONG               InboundQuota,
		IN  ULONG               OutboundQuota,
		IN  PLARGE_INTEGER      DefaultTimeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateNamedPipeFile(
		OUT PHANDLE             FileHandle,
		IN  ULONG               DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  ULONG               ShareAccess,
		IN  ULONG               CreateDisposition,
		IN  ULONG               CreateOptions,
		IN  ULONG               NamedPipeType,
		IN  ULONG               ReadMode,
		IN  ULONG               CompletionMode,
		IN  ULONG               MaximumInstances,
		IN  ULONG               InboundQuota,
		IN  ULONG               OutboundQuota,
		IN  PLARGE_INTEGER      DefaultTimeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReadFile(
		IN  HANDLE              FileHandle,
		IN  HANDLE              Event OPTIONAL,
		IN  PIO_APC_ROUTINE     ApcRoutine OPTIONAL,
		IN  PVOID               ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		OUT PVOID               Buffer,
		IN  ULONG               Length,
		IN  PLARGE_INTEGER      ByteOffset OPTIONAL,
		IN  PULONG              Key OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwReadFile(
		IN  HANDLE              FileHandle,
		IN  HANDLE              Event OPTIONAL,
		IN  PIO_APC_ROUTINE     ApcRoutine OPTIONAL,
		IN  PVOID               ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		OUT PVOID               Buffer,
		IN  ULONG               Length,
		IN  PLARGE_INTEGER      ByteOffset OPTIONAL,
		IN  PULONG              Key OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWriteFile(
		IN  HANDLE              FileHandle,
		IN  HANDLE              Event,
		IN  PIO_APC_ROUTINE     ApcRoutine OPTIONAL,
		IN  PVOID               ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  PVOID               Buffer,
		IN  ULONG               Length,
		IN  PLARGE_INTEGER      ByteOffset OPTIONAL,
		IN  PULONG              Key OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwWriteFile(
		IN  HANDLE              FileHandle,
		IN  HANDLE              Event,
		IN  PIO_APC_ROUTINE     ApcRoutine OPTIONAL,
		IN  PVOID               ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  PVOID               Buffer,
		IN  ULONG               Length,
		IN  PLARGE_INTEGER      ByteOffset OPTIONAL,
		IN  PULONG              Key OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtFlushBuffersFile(
		IN  HANDLE              FileHandle,
		OUT PIO_STATUS_BLOCK    IoStatusBlock
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwFlushBuffersFile(
		IN  HANDLE              FileHandle,
		OUT PIO_STATUS_BLOCK    IoStatusBlock
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryAttributesFile(
		IN  POBJECT_ATTRIBUTES      ObjectAttributes,
		OUT PFILE_BASIC_INFORMATION FileInformation
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryAttributesFile(
		IN  POBJECT_ATTRIBUTES      ObjectAttributes,
		OUT PFILE_BASIC_INFORMATION FileInformation
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryFullAttributesFile(
		IN  POBJECT_ATTRIBUTES              ObjectAttributes,
		OUT PFILE_NETWORK_OPEN_INFORMATION  FileInformation
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryFullAttributesFile(
		IN  POBJECT_ATTRIBUTES              ObjectAttributes,
		OUT PFILE_NETWORK_OPEN_INFORMATION  FileInformation
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryInformationFile(
		IN  HANDLE                  FileHandle,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		OUT PVOID                   FileInformation,
		IN  ULONG                   Length,
		IN  FILE_INFORMATION_CLASS  FileInformationClass
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryVolumeInformationFile(
		IN  HANDLE                  FileHandle,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		OUT PVOID                   FsInformation,
		IN  ULONG                   Length,
		IN  FS_INFORMATION_CLASS    FsInformationClass
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryVolumeInformationFile(
		IN  HANDLE                  FileHandle,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		OUT PVOID                   FsInformation,
		IN  ULONG                   Length,
		IN  FS_INFORMATION_CLASS    FsInformationClass
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryInformationFile(
		IN  HANDLE                  FileHandle,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		OUT PVOID                   FileInformation,
		IN  ULONG                   Length,
		IN  FILE_INFORMATION_CLASS  FileInformationClass
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetInformationFile(
		IN  HANDLE                  FileHandle,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		IN  PVOID                   FileInformation,
		IN  ULONG                   Length,
		IN  FILE_INFORMATION_CLASS  FileInformationClass
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetInformationFile(
		IN  HANDLE                  FileHandle,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		IN  PVOID                   FileInformation,
		IN  ULONG                   Length,
		IN  FILE_INFORMATION_CLASS  FileInformationClass
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryDirectoryFile(
		IN  HANDLE                  FileHandle,
		IN  HANDLE                  Event OPTIONAL,
		IN  PIO_APC_ROUTINE         ApcRoutine OPTIONAL,
		IN  PVOID                   ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		OUT PVOID                   FileInformation,
		IN  ULONG                   Length,
		IN  FILE_INFORMATION_CLASS  FileInformationClass,
		IN  BOOLEAN                 ReturnSingleEntry,
		IN  PUNICODE_STRING         FileName OPTIONAL,
		IN  BOOLEAN                 RestartScan
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryDirectoryFile(
		IN  HANDLE                  FileHandle,
		IN  HANDLE                  Event OPTIONAL,
		IN  PIO_APC_ROUTINE         ApcRoutine OPTIONAL,
		IN  PVOID                   ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK        IoStatusBlock,
		OUT PVOID                   FileInformation,
		IN  ULONG                   Length,
		IN  FILE_INFORMATION_CLASS  FileInformationClass,
		IN  BOOLEAN                 ReturnSingleEntry,
		IN  PUNICODE_STRING         FileName OPTIONAL,
		IN  BOOLEAN                 RestartScan
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryEaFile(
		IN  HANDLE              FileHandle,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		OUT PVOID               Buffer,
		IN  ULONG               Length,
		IN  BOOLEAN             ReturnSingleEntry,
		IN  PVOID               EaList OPTIONAL,
		IN  ULONG               EaListLength,
		IN  PULONG              EaIndex OPTIONAL,
		IN  BOOLEAN             RestartScan
		);

#if !defined(_NTIFS_)

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryEaFile(
		IN  HANDLE              FileHandle,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		OUT PVOID               Buffer,
		IN  ULONG               Length,
		IN  BOOLEAN             ReturnSingleEntry,
		IN  PVOID               EaList OPTIONAL,
		IN  ULONG               EaListLength,
		IN  PULONG              EaIndex OPTIONAL,
		IN  BOOLEAN             RestartScan
		);

#endif // _NTIFS_

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenSymbolicLinkObject(
		OUT PHANDLE             LinkHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenSymbolicLinkObject(
		OUT PHANDLE             LinkHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQuerySymbolicLinkObject(
		IN      HANDLE          LinkHandle,
		IN OUT  PUNICODE_STRING LinkTarget,
		OUT     PULONG          ReturnedLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQuerySymbolicLinkObject(
		IN      HANDLE          LinkHandle,
		IN OUT  PUNICODE_STRING LinkTarget,
		OUT     PULONG          ReturnedLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDeviceIoControlFile(
		HANDLE              FileHandle,
		HANDLE              Event,
		PIO_APC_ROUTINE     ApcRoutine,
		PVOID               ApcContext,
		PIO_STATUS_BLOCK    IoStatusBlock,
		ULONG               IoControlCode,
		PVOID               InputBuffer,
		ULONG               InputBufferLength,
		PVOID               OutputBuffer,
		ULONG               OutputBufferLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwDeviceIoControlFile(
		HANDLE              FileHandle,
		HANDLE              Event,
		PIO_APC_ROUTINE     ApcRoutine,
		PVOID               ApcContext,
		PIO_STATUS_BLOCK    IoStatusBlock,
		ULONG               IoControlCode,
		PVOID               InputBuffer,
		ULONG               InputBufferLength,
		PVOID               OutputBuffer,
		ULONG               OutputBufferLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtFsControlFile(
		IN  HANDLE              FileHandle,
		IN  HANDLE              Event OPTIONAL,
		IN  PIO_APC_ROUTINE     ApcRoutine OPTIONAL,
		IN  PVOID               ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  ULONG               FsControlCode,
		IN  PVOID               InputBuffer OPTIONAL,
		IN  ULONG               InputBufferLength,
		OUT PVOID               OutputBuffer OPTIONAL,
		IN  ULONG               OutputBufferLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwFsControlFile(
		IN  HANDLE              FileHandle,
		IN  HANDLE              Event OPTIONAL,
		IN  PIO_APC_ROUTINE     ApcRoutine OPTIONAL,
		IN  PVOID               ApcContext OPTIONAL,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  ULONG               FsControlCode,
		IN  PVOID               InputBuffer OPTIONAL,
		IN  ULONG               InputBufferLength,
		OUT PVOID               OutputBuffer OPTIONAL,
		IN  ULONG               OutputBufferLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateIoCompletion(
		OUT PHANDLE             IoCompletionHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  ULONG               NumberOfConcurrentThreads
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetIoCompletion(
		IN HANDLE 	IoCompletionPortHandle,
		IN PVOID 	CompletionKey,
		IN PVOID 	CompletionContext,
		IN NTSTATUS CompletionStatus,
		IN ULONG 	CompletionInformation
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtRemoveIoCompletion(
		IN  HANDLE              IoCompletionHandle,
		OUT PULONG_PTR          CompletionKey,
		OUT PVOID              *CompletionValue,
		OUT PIO_STATUS_BLOCK    IoStatusBlock,
		IN  PLARGE_INTEGER      Timeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCancelIoFile(
		IN  HANDLE              FileHandle,
		OUT PIO_STATUS_BLOCK    IoStatusBlock
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCancelIoFileEx(
		IN  HANDLE              FileHandle,
		IN  LPOVERLAPPED        Overlapped,
		OUT PIO_STATUS_BLOCK    IoStatusBlock
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryIoCompletion(
		IN  HANDLE                          IoCompletionHandle,
		IN  IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,
		OUT PVOID                           IoCompletionInformation,
		IN  ULONG                           IoCompletionInformationLength,
		OUT PULONG                          ReturnLength OPTIONAL
		);

#if !ML_KERNEL_MODE

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlSetCurrentDirectory_U(
		PUNICODE_STRING Path
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlGetCurrentDirectory_U(
		ULONG   BytesInBuffer,
		PWCHAR  Buffer
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlWow64EnableFsRedirection(
		BOOLEAN Enable
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlWow64EnableFsRedirectionEx(
		BOOL    Disable,
		PBOOL   PreviousState
		);

#endif // ML_KERNEL_MODE

#endif // _NTFILEIO_H_a683f7a2_b20c_4e58_b9c8_e58a305b1315_
#ifndef _NTLPC_H_add4da86_44d6_42e5_801f_23fe1de78ffe_
#define _NTLPC_H_add4da86_44d6_42e5_801f_23fe1de78ffe_


#if defined(USE_LPC6432)

#define LPC_CLIENT_ID CLIENT_ID64
#define LPC_SIZE_T ULONGLONG
#define LPC_PVOID ULONGLONG
#define LPC_HANDLE ULONGLONG

	typedef CLIENT_ID64 LPC_CLIENT_ID;
	typedef ULONGLONG   LPC_SIZE_T, LPC_SIZE;
	typedef ULONGLONG   LPC_PVOID;
	typedef ULONGLONG   LPC_HANDLE;

#else

#define LPC_CLIENT_ID CLIENT_ID
#define LPC_SIZE_T SIZE_T
#define LPC_PVOID PVOID
#define LPC_HANDLE HANDLE

	typedef CLIENT_ID   LPC_CLIENT_ID;
	typedef ULONG_PTR   LPC_SIZE_T, LPC_SIZE;
	typedef PVOID       LPC_PVOID;
	typedef HANDLE      LPC_HANDLE;

#endif


	typedef NTSTATUS LPC_STATUS;


	//
	// Valid return values for the PORT_MESSAGE Type file
	//

	enum LPC_REQUEST_TYPE
	{
		LPC_NEW_MESSAGE = 0,
		LPC_REQUEST = 1,
		LPC_REPLY = 2,
		LPC_DATAGRAM = 3,
		LPC_LOST_REPLY = 4,
		LPC_PORT_CLOSED = 5,
		LPC_CLIENT_DIED = 6,
		LPC_EXCEPTION = 7,
		LPC_DEBUG_EVENT = 8,
		LPC_ERROR_EVENT = 9,
		LPC_CONNECTION_REQUEST = 10,
	};

	typedef struct
	{
		USHORT          DataLength;             // Length of data following header (bytes)
		USHORT          TotalLength;            // Length of data + sizeof(PORT_MESSAGE)
		USHORT          Type;                   // Type of the message (LPC_TYPE)
		USHORT          DataInfoOffset;         // Offset of array of virtual address ranges
		LPC_CLIENT_ID   ClientId;               // Client identifier of the message sender
		ULONG           MessageId;              // Identifier of the particular message instance
		union
		{
			ULONG ClientViewSize;               // Size, in bytes, of section created by the sender
			ULONG CallbackId;
		};

		// UCHAR Data[PORT_MAXIMUM_MESSAGE_LENGTH];

	} PORT_MESSAGE, *PPORT_MESSAGE;

	typedef struct _PORT_DATA_ENTRY
	{
		LPC_PVOID   Base;
		ULONG       Size;

	} PORT_DATA_ENTRY, *PPORT_DATA_ENTRY;

	typedef struct _PORT_DATA_INFORMATION
	{
		ULONG           CountDataEntries;
		PORT_DATA_ENTRY DataEntries[1];

	} PORT_DATA_INFORMATION, *PPORT_DATA_INFORMATION;

	// begin_ntifs

	//
	// The following bit may be placed in the Type field of a message
	// prior calling NtRequestPort or NtRequestWaitReplyPort.  If the
	// previous mode is KernelMode, the bit it left as is and passed
	// to the receiver of the message.  Otherwise the bit is clear.
	//

#define LPC_KERNELMODE_MESSAGE  (SHORT)0x8000

	// end_ntifs

#define LPC_NO_IMPERSONATE  (SHORT)0x4000

#define PORT_VALID_OBJECT_ATTRIBUTES (OBJ_CASE_INSENSITIVE)

	// begin_ntddk begin_wdm
#ifdef _WIN64
#define PORT_MAXIMUM_MESSAGE_LENGTH 512
#else
#define PORT_MAXIMUM_MESSAGE_LENGTH 256
#endif

#define LPC_MAX_CONNECTION_INFO_SIZE (16 * sizeof(ULONG_PTR))

#define PORT_TOTAL_MAXIMUM_MESSAGE_LENGTH ((PORT_MAXIMUM_MESSAGE_LENGTH + sizeof (PORT_MESSAGE) + LPC_MAX_CONNECTION_INFO_SIZE + 15) & ~15)

#define PORT_CREATE_MAXIMUM_MESSAGE_LENGTH          0x148
#define PORT_CREATE_MAXIMUM_CONNECTION_INFO_SIZE    0x104

	// end_ntddk end_wdm

#if defined(USE_LPC6432)
#undef PORT_MAXIMUM_MESSAGE_LENGTH
#define PORT_MAXIMUM_MESSAGE_LENGTH 512
#endif

	typedef struct _LPC_CLIENT_DIED_MSG
	{
		PORT_MESSAGE    PortMsg;
		LARGE_INTEGER   CreateTime;

	} LPC_CLIENT_DIED_MSG, *PLPC_CLIENT_DIED_MSG;

	// begin_ntifs

	typedef struct _PORT_VIEW
	{
		ULONG       Length;             // Size of this structure
		LPC_HANDLE  SectionHandle;      // Handle to section object with
		// SECTION_MAP_WRITE and SECTION_MAP_READ
		ULONG       SectionOffset;      // The offset in the section to map a view for
		// the port data area. the offset must be aligned
		// with the allocation granularity of the system.
		LPC_SIZE_T  ViewSize;           // The size of the view (in bytes)
		LPC_PVOID   ViewBase;           // The base address of the view in the creator
		LPC_PVOID   ViewRemoteBase;     // The Base address of the view in the process
		// connected to the port.

	} PORT_VIEW, *PPORT_VIEW;

	typedef struct _REMOTE_PORT_VIEW
	{
		ULONG       Length;         // Size of this structure
		LPC_SIZE_T  ViewSize;       // The size of the view (bytes)
		LPC_PVOID   ViewBase;       // Base address of the view

	} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW;

	// end_ntifs



#ifndef InitializePortHeader

#define InitializeServerView(__ServerView, __ViewSize, __ViewBase) { \
            (__ServerView)->Length = sizeof(*(__ServerView)); \
            (__ServerView)->ViewSize = (__ViewSize); \
            (__ServerView)->ViewBase = (__ViewBase); }

#define InitializeClientView(__ClientView, __SectionHandle, __SectionOffset, __ViewSize, __ViewBase, __ViewRemoteBase) { \
            (__ClientView)->Length = sizeof(*(__ClientView)); \
            (__ClientView)->SectionHandle = (__SectionHandle); \
            (__ClientView)->SectionOffset = (__SectionOffset); \
            (__ClientView)->ViewSize = (__ViewSize); \
            (__ClientView)->ViewBase = (__ViewBase); \
            (__ClientView)->ViewRemoteBase = (__ViewRemoteBase); }

#define InitializeMessageHeader(ph, l, t) {                        \
    (ph)->TotalLength    = (USHORT) (l);                            \
    (ph)->DataLength    = (USHORT) (l - sizeof(PORT_MESSAGE));    \
    (ph)->Type            = (USHORT) (t);                            \
    (ph)->VirtualRangesOffset = 0;                                \
						}

#define InitializeMessageData(msag, view, command, dataaddr, datalen) {        \
    InitializeMessageHeader(&((msag)->Header), 256, LPC_NEW_MESSAGE)        \
    (msag)->Command        = command;                                            \
    (msag)->DataLength  = datalen;                                            \
    if ((datalen) < 224)                                                    \
						    {                                                                        \
        CopyMemory((PVOID)(msag)->MessageText,                                    \
               (PVOID)(dataaddr),                                            \
               (ULONG)(datalen));                                            \
						    }                                                                        \
    else                                                                    \
						    {                                                                        \
    CopyMemory((PVOID)(view)->ViewBase,                                        \
               (PVOID)(dataaddr),                                            \
               (ULONG)(datalen));                                            \
						    }                                                                        \
						}

#endif  // InitializePortHeader

	/*++

	NtCreatePort
	============

	Creates a LPC port object. The creator of the LPC port becomes a server
	of LPC communication

	PortHandle - Points to a variable that will receive the
	port object handle if the call is successful.

	ObjectAttributes - Points to a structure that specifies the object
	attributes. OBJ_KERNEL_HANDLE, OBJ_OPENLINK, OBJ_OPENIF, OBJ_EXCLUSIVE,
	OBJ_PERMANENT, and OBJ_INHERIT are not valid attributes for a port object.

	MaxConnectionInfoLength - The maximum size, in bytes, of data that can
	be sent through the port.

	MaxMessageLength - The maximum size, in bytes, of a message
	that can be sent through the port.

	MaxPoolUsage - Specifies the maximum amount of NonPaged pool that can be used for
	message storage. Zero means default value.

	ZwCreatePort verifies that (MaxDataSize <= 0x104) and (MaxMessageSize <= 0x148).

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreatePort(
		OUT PHANDLE             PortHandle,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               MaxConnectionInfoLength,
		IN  ULONG               MaxMessageLength,
		IN  ULONG               MaxPoolUsage OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateWaitablePort(
		OUT PHANDLE             PortHandle,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               MaxConnectionInfoLength,
		IN  ULONG               MaxMessageLength,
		IN  ULONG               MaxPoolUsage OPTIONAL
		);

	/*++

	NtConnectPort
	=============

	Creates a port connected to a named port (cliend side).

	PortHandle - A pointer to a variable that will receive the client
	communication port object handle value.

	PortName - Points to a structure that specifies the name
	of the port to connect to.

	SecurityQos - Points to a structure that specifies the level
	of impersonation available to the port listener.

	ClientView - Optionally points to a structure describing
	the shared memory region used to send large amounts of data
	to the listener; if the call is successful, this will be updated.

	ServerView - Optionally points to a caller-allocated buffer
	or variable that receives information on the shared memory region
	used by the listener to send large amounts of data to the
	caller.

	MaxMessageLength - Optionally points to a variable that receives the size,
	in bytes, of the largest message that can be sent through the port.

	ConnectionInformation - Optionally points to a caller-allocated
	buffer or variable that specifies connect data to send to the listener,
	and receives connect data sent by the listener.

	ConnectionInformationLength - Optionally points to a variable that
	specifies the size, in bytes, of the connect data to send
	to the listener, and receives the size of the connect data
	sent by the listener.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtConnectPort(
		OUT     PHANDLE                         PortHandle,
		IN      PUNICODE_STRING                 PortName,
		IN      PSECURITY_QUALITY_OF_SERVICE    SecurityQos,
		IN OUT  PPORT_VIEW                      ClientView OPTIONAL,
		OUT     PREMOTE_PORT_VIEW               ServerView OPTIONAL,
		OUT     PULONG                          MaxMessageLength OPTIONAL,
		IN OUT  PVOID                           ConnectionInformation OPTIONAL,
		IN OUT  PULONG                          ConnectionInformationLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSecureConnectPort(
		OUT     PHANDLE                         PortHandle,
		IN      PUNICODE_STRING                 PortName,
		IN      PSECURITY_QUALITY_OF_SERVICE    SecurityQos,
		IN OUT  PPORT_VIEW                      ClientView OPTIONAL,
		IN      PSID                            RequiredServerSid OPTIONAL,
		IN OUT  PREMOTE_PORT_VIEW               ServerView OPTIONAL,
		OUT     PULONG                          MaxMessageLength OPTIONAL,
		IN OUT  PVOID                           ConnectionInformation OPTIONAL,
		IN OUT  PULONG                          ConnectionInformationLength OPTIONAL
		);

	/*++

	NtListenPort
	============

	Listens on a port for a connection request message on the server side.

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	ConnectionRequest - Points to a caller-allocated buffer
	or variable that receives the connect message sent to
	the port.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtListenPort(
		IN  HANDLE          PortHandle,
		OUT PPORT_MESSAGE   ConnectionRequest
		);

	/*++

	NtAcceptConnectPort
	===================

	Accepts or rejects a connection request on the server side.

	PortHandle - Points to a variable that will receive the port object
	handle if the call is successful.

	PortContext - A numeric identifier to be associated with the port.

	ConnectionRequest - Points to a caller-allocated buffer or variable
	that identifies the connection request and contains any connect
	data that should be returned to requestor of the connection

	AcceptConnection - Specifies whether the connection should
	be accepted or not

	ServerView - Optionally points to a structure describing
	the shared memory region used to send large amounts of data to the
	requestor; if the call is successful, this will be updated

	ClientView - Optionally points to a caller-allocated buffer
	or variable that receives information on the shared memory
	region used by the requestor to send large amounts of data to the
	caller

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAcceptConnectPort(
		OUT     PHANDLE             PortHandle,
		IN      PVOID               PortContext OPTIONAL,
		IN      PPORT_MESSAGE       ConnectionRequest,
		IN      BOOLEAN             AcceptConnection,
		IN OUT  PPORT_VIEW          ServerView OPTIONAL,
		OUT     PREMOTE_PORT_VIEW   ClientView OPTIONAL
		);

	/*++

	NtCompleteConnectPort
	=====================

	Completes the port connection process on the server side.

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCompleteConnectPort(
		IN HANDLE PortHandle
		);

	/*++

	NtRequestPort
	=============

	Sends a request message to a port (client side)

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	RequestMessage - Points to a caller-allocated buffer or variable
	that specifies the request message to send to the port.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtRequestPort(
		IN HANDLE           PortHandle,
		IN PPORT_MESSAGE    RequestMessage
		);

	/*++

	NtRequestWaitReplyPort
	======================

	Sends a request message to a port and waits for a reply (client side)

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	RequestMessage - Points to a caller-allocated buffer or variable
	that specifies the request message to send to the port.

	ReplyMessage - Points to a caller-allocated buffer or variable
	that receives the reply message sent to the port.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtRequestWaitReplyPort(
		IN  HANDLE          PortHandle,
		IN  PPORT_MESSAGE   RequestMessage,
		OUT PPORT_MESSAGE   ReplyMessage
		);

	/*++

	NtReplyPort
	===========

	Sends a reply message to a port (Server side)

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	ReplyMessage - Points to a caller-allocated buffer or variable
	that specifies the reply message to send to the port.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReplyPort(
		IN HANDLE           PortHandle,
		IN PPORT_MESSAGE    ReplyMessage
		);

	/*++

	NtReplyWaitReplyPort
	====================

	Sends a reply message to a port and waits for a reply message

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	ReplyMessage - Points to a caller-allocated buffer or variable
	that specifies the reply message to send to the port.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReplyWaitReplyPort(
		IN      HANDLE          PortHandle,
		IN OUT  PPORT_MESSAGE   ReplyMessage
		);

	/*++

	NtReplyWaitReceivePort
	======================

	Optionally sends a reply message to a port and waits for a
	message

	PortHandle - A handle to a port object. The handle doesn't need
	to grant any specific access.

	PortContext - Optionally points to a variable that receives
	a numeric identifier associated with the port.

	ReplyMessage - Optionally points to a caller-allocated buffer
	or variable that specifies the reply message to send to the port.

	ReceiveMessage - Points to a caller-allocated buffer or variable
	that receives the message sent to the port.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReplyWaitReceivePort(
		IN  HANDLE          PortHandle,
		OUT PVOID*          PortContext OPTIONAL,
		IN  PPORT_MESSAGE   ReplyMessage OPTIONAL,
		OUT PPORT_MESSAGE   ReceiveMessage
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReplyWaitReceivePortEx(
		IN  HANDLE          PortHandle,
		OUT PVOID*          PortContext OPTIONAL,
		IN  PPORT_MESSAGE   ReplyMessage OPTIONAL,
		OUT PPORT_MESSAGE   ReceiveMessage,
		IN  PLARGE_INTEGER  Timeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtImpersonateClientOfPort(
		IN HANDLE           PortHandle,
		IN PPORT_MESSAGE    Message
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReadRequestData(
		IN  HANDLE          PortHandle,
		IN  PPORT_MESSAGE   Message,
		IN  ULONG           DataEntryIndex,
		OUT PVOID           Buffer,
		IN  ULONG_PTR       BufferSize,
		OUT PULONG_PTR      NumberOfBytesRead OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWriteRequestData(
		IN  HANDLE          PortHandle,
		IN  PPORT_MESSAGE   Message,
		IN  ULONG           DataEntryIndex,
		OUT PVOID           Buffer,
		IN  ULONG_PTR       BufferSize,
		OUT PULONG_PTR      NumberOfBytesWritten OPTIONAL
		);


	typedef enum _PORT_INFORMATION_CLASS
	{
		PortBasicInformation,
		PortDumpInformation

	} PORT_INFORMATION_CLASS;

	typedef struct _IO_COMPLETION_BASIC_INFORMATION
	{
		LONG Depth;

	} IO_COMPLETION_BASIC_INFORMATION, *PIO_COMPLETION_BASIC_INFORMATION;

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryInformationPort(
		IN  HANDLE                  PortHandle,
		IN  PORT_INFORMATION_CLASS  PortInformationClass,
		IN  PVOID                   PortInformation,
		IN  ULONG                   Length,
		OUT PULONG                  ReturnLength OPTIONAL
		);



	// Asynchronous Local Inter-process Communication

	// ALPC handles aren't NT object manager handles, and
	// it seems traditional to use a typedef in these cases.
	// rev
	typedef PVOID ALPC_HANDLE, *PALPC_HANDLE;

#define ALPC_PORFLG_ALLOW_LPC_REQUESTS 0x20000 // rev
#define ALPC_PORFLG_WAITABLE_PORT 0x40000 // dbg
#define ALPC_PORFLG_SYSTEM_PROCESS 0x100000 // dbg

	// symbols
	typedef struct _ALPC_PORT_ATTRIBUTES
	{
		ULONG                       Flags;
		SECURITY_QUALITY_OF_SERVICE SecurityQos;
		ULONG_PTR                   MaxMessageLength;
		ULONG_PTR                   MemoryBandwidth;
		ULONG_PTR                   MaxPoolUsage;
		ULONG_PTR                   MaxSectionSize;
		ULONG_PTR                   MaxViewSize;
		ULONG_PTR                   MaxTotalSectionSize;
		ULONG                       DupObjectTypes;
#ifdef _M_X64
		ULONG                       Reserved;
#endif
	} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES;

	// begin_rev
#define ALPC_MESSAGE_SECURITY_ATTRIBUTE 0x80000000
#define ALPC_MESSAGE_VIEW_ATTRIBUTE 0x40000000
#define ALPC_MESSAGE_CONTEXT_ATTRIBUTE 0x20000000
#define ALPC_MESSAGE_HANDLE_ATTRIBUTE 0x10000000
	// end_rev

	// symbols
	typedef struct _ALPC_MESSAGE_ATTRIBUTES
	{
		ULONG AllocatedAttributes;
		ULONG ValidAttributes;
	} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES;

	// symbols
	typedef struct _ALPC_COMPLETION_LIST_STATE
	{
		union
		{
			struct
			{
				ULONG64 Head : 24;
				ULONG64 Tail : 24;
				ULONG64 ActiveThreadCount : 16;
			} s1;
			ULONG64 Value;
		} u1;
	} ALPC_COMPLETION_LIST_STATE, *PALPC_COMPLETION_LIST_STATE;

#define ALPC_COMPLETION_LIST_BUFFER_GRANULARITY_MASK 0x3f // dbg

#pragma warning(push)
#pragma warning(disable:4324)

#if ML_KERNEL_MODE

	typedef struct _RTL_SRWLOCK {
		PVOID Ptr;
	} RTL_SRWLOCK, *PRTL_SRWLOCK;

#endif // r0

	// symbols
	typedef struct DECL_ALIGN(128) _ALPC_COMPLETION_LIST_HEADER
	{
		ULONG64 StartMagic;

		ULONG TotalSize;
		ULONG ListOffset;
		ULONG ListSize;
		ULONG BitmapOffset;
		ULONG BitmapSize;
		ULONG DataOffset;
		ULONG DataSize;
		ULONG AttributeFlags;
		ULONG AttributeSize;

		DECL_ALIGN(128) ALPC_COMPLETION_LIST_STATE State;
		ULONG LastMessageId;
		ULONG LastCallbackId;
		DECL_ALIGN(128) ULONG PostCount;
		DECL_ALIGN(128) ULONG ReturnCount;
		DECL_ALIGN(128) ULONG LogSequenceNumber;
		DECL_ALIGN(128) RTL_SRWLOCK UserLock;

		ULONG64 EndMagic;
	} ALPC_COMPLETION_LIST_HEADER, *PALPC_COMPLETION_LIST_HEADER;

	// private
	typedef struct _ALPC_CONTEXT_ATTR
	{
		PVOID PortContext;
		PVOID MessageContext;
		ULONG Sequence;
		ULONG MessageId;
		ULONG CallbackId;
	} ALPC_CONTEXT_ATTR, *PALPC_CONTEXT_ATTR;

	// begin_rev
#define ALPC_HANDLEFLG_DUPLICATE_SAME_ACCESS 0x10000
#define ALPC_HANDLEFLG_DUPLICATE_SAME_ATTRIBUTES 0x20000
#define ALPC_HANDLEFLG_DUPLICATE_INHERIT 0x80000
	// end_rev

	// private
	typedef struct _ALPC_HANDLE_ATTR
	{
		ULONG Flags;
		HANDLE Handle;
		ULONG ObjectType; // ObjectTypeCode, not ObjectTypeIndex
		ACCESS_MASK DesiredAccess;
	} ALPC_HANDLE_ATTR, *PALPC_HANDLE_ATTR;

#define ALPC_SECFLG_CREATE_HANDLE 0x20000 // dbg

	// name:private
	// rev
	typedef struct _ALPC_SECURITY_ATTR
	{
		ULONG Flags;
		PSECURITY_QUALITY_OF_SERVICE SecurityQos;
		ALPC_HANDLE ContextHandle; // dbg
		ULONG Reserved1;
		ULONG Reserved2;
	} ALPC_SECURITY_ATTR, *PALPC_SECURITY_ATTR;

	// begin_rev
#define ALPC_VIEWFLG_NOT_SECURE 0x40000
	// end_rev

	// private
	typedef struct _ALPC_DATA_VIEW_ATTR
	{
		ULONG Flags;
		ALPC_HANDLE SectionHandle;
		PVOID ViewBase; // must be zero on input
		SIZE_T ViewSize;
	} ALPC_DATA_VIEW_ATTR, *PALPC_DATA_VIEW_ATTR;


#pragma warning(pop)

	// private

	typedef enum _ALPC_PORT_INFORMATION_CLASS
	{
		AlpcBasicInformation = 0, // q: out ALPC_BASIC_INFORMATION
		AlpcPortInformation = 1, // s: in ALPC_PORT_ATTRIBUTES
		AlpcAssociateCompletionPortInformation = 2, // s: in ALPC_PORT_ASSOCIATE_COMPLETION_PORT
		AlpcConnectedSIDInformation = 3, // q: in SID
		AlpcServerInformation = 4, // q: inout ALPC_SERVER_INFORMATION
		AlpcMessageZoneInformation = 5, // s: in ALPC_PORT_MESSAGE_ZONE_INFORMATION
		AlpcRegisterCompletionListInformation = 6, // s: in ALPC_PORT_COMPLETION_LIST_INFORMATION
		AlpcUnregisterCompletionListInformation = 7, // s: VOID
		AlpcAdjustCompletionListConcurrencyCountInformation = 8, // s: in ULONG
		AlpcRegisterCallback = 9, // kernel-mode only // rev
		AlpcCompletionListRundownInformation = 10,// s: VOID // rev
		MaxAlpcPortInfoClass,

	} ALPC_PORT_INFORMATION_CLASS;


	// private
	typedef struct _ALPC_BASIC_INFORMATION
	{
		ULONG Flags;
		ULONG SequenceNo;
		PVOID PortContext;
	} ALPC_BASIC_INFORMATION, *PALPC_BASIC_INFORMATION;

	// private
	typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT
	{
		PVOID CompletionKey;
		HANDLE CompletionPort;
	} ALPC_PORT_ASSOCIATE_COMPLETION_PORT, *PALPC_PORT_ASSOCIATE_COMPLETION_PORT;

	// private
	typedef struct _ALPC_SERVER_INFORMATION
	{
		union
		{
			struct
			{
				HANDLE ThreadHandle;
			} In;
			struct
			{
				BOOLEAN ThreadBlocked;
				HANDLE ConnectedProcessId;
				UNICODE_STRING ConnectionPortName;
			} Out;
		};
	} ALPC_SERVER_INFORMATION, *PALPC_SERVER_INFORMATION;

	// private
	typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION
	{
		PVOID Buffer;
		ULONG Size;
	} ALPC_PORT_MESSAGE_ZONE_INFORMATION, *PALPC_PORT_MESSAGE_ZONE_INFORMATION;

	// private
	typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION
	{
		PVOID Buffer; // PALPC_COMPLETION_LIST_HEADER
		ULONG Size;
		ULONG ConcurrencyCount;
		ULONG AttributeFlags;
	} ALPC_PORT_COMPLETION_LIST_INFORMATION, *PALPC_PORT_COMPLETION_LIST_INFORMATION;

	// private
	typedef enum _ALPC_MESSAGE_INFORMATION_CLASS
	{
		AlpcMessageSidInformation, // q: out SID
		AlpcMessageTokenModifiedIdInformation,  // q: out LUID
		MaxAlpcMessageInfoClass
	} ALPC_MESSAGE_INFORMATION_CLASS, *PALPC_MESSAGE_INFORMATION_CLASS;

	// begin_private

	// System calls

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcCreatePort(
		__out PHANDLE PortHandle,
		__in POBJECT_ATTRIBUTES ObjectAttributes,
		__in_opt PALPC_PORT_ATTRIBUTES PortAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcDisconnectPort(
		__in HANDLE PortHandle,
		__in ULONG Flags
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcQueryInformation(
		__in HANDLE PortHandle,
		__in ALPC_PORT_INFORMATION_CLASS PortInformationClass,
		__out_bcount(Length) PVOID PortInformation,
		__in ULONG Length,
		__out_opt PULONG ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcSetInformation(
		__in HANDLE PortHandle,
		__in ALPC_PORT_INFORMATION_CLASS PortInformationClass,
		__in_bcount(Length) PVOID PortInformation,
		__in ULONG Length
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcCreatePortSection(
		__in HANDLE PortHandle,
		__in ULONG Flags,
		__in_opt HANDLE SectionHandle,
		__in SIZE_T SectionSize,
		__out PALPC_HANDLE AlpcSectionHandle,
		__out PSIZE_T ActualSectionSize
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcDeletePortSection(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__in ALPC_HANDLE SectionHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcCreateResourceReserve(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__in SIZE_T MessageSize,
		__out PALPC_HANDLE ResourceId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcDeleteResourceReserve(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__in ALPC_HANDLE ResourceId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcCreateSectionView(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__inout PALPC_DATA_VIEW_ATTR ViewAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcDeleteSectionView(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__in PVOID ViewBase
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcCreateSecurityContext(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__inout PALPC_SECURITY_ATTR SecurityAttribute
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcDeleteSecurityContext(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__in ALPC_HANDLE ContextHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcRevokeSecurityContext(
		__in HANDLE PortHandle,
		__reserved ULONG Flags,
		__in ALPC_HANDLE ContextHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcQueryInformationMessage(
		__in HANDLE PortHandle,
		__in PPORT_MESSAGE PortMessage,
		__in ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass,
		__out_bcount(Length) PVOID MessageInformation,
		__in ULONG Length,
		__out_opt PULONG ReturnLength
		);

#define ALPC_MSGFLG_REPLY_MESSAGE 0x1
#define ALPC_MSGFLG_LPC_MODE 0x2 // ?
#define ALPC_MSGFLG_RELEASE_MESSAGE 0x10000 // dbg
#define ALPC_MSGFLG_SYNC_REQUEST 0x20000 // dbg
#define ALPC_MSGFLG_WAIT_USER_MODE 0x100000
#define ALPC_MSGFLG_WAIT_ALERTABLE 0x200000
#define ALPC_MSGFLG_WOW64_CALL 0x80000000 // dbg

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcConnectPort(
		__out PHANDLE PortHandle,
		__in PUNICODE_STRING PortName,
		__in POBJECT_ATTRIBUTES ObjectAttributes,
		__in_opt PALPC_PORT_ATTRIBUTES PortAttributes,
		__in ULONG Flags,
		__in_opt PSID RequiredServerSid,
		__inout PPORT_MESSAGE ConnectionMessage,
		__inout_opt PULONG BufferLength,
		__inout_opt PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes,
		__inout_opt PALPC_MESSAGE_ATTRIBUTES InMessageAttributes,
		__in_opt PLARGE_INTEGER Timeout
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcAcceptConnectPort(
		__out PHANDLE PortHandle,
		__in HANDLE ConnectionPortHandle,
		__in ULONG Flags,
		__in POBJECT_ATTRIBUTES ObjectAttributes,
		__in PALPC_PORT_ATTRIBUTES PortAttributes,
		__in_opt PVOID PortContext,
		__in PPORT_MESSAGE ConnectionRequest,
		__inout_opt PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes,
		__in BOOLEAN AcceptConnection
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcSendWaitReceivePort(
		__in HANDLE PortHandle,
		__in ULONG Flags,
		__in_opt PPORT_MESSAGE SendMessage,
		__in_opt PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes,
		__inout_opt PPORT_MESSAGE ReceiveMessage,
		__inout_opt PULONG BufferLength,
		__inout_opt PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes,
		__in_opt PLARGE_INTEGER Timeout
		);

#define ALPC_CANCELFLG_TRY_CANCEL 0x1 // dbg
#define ALPC_CANCELFLG_NO_CONTEXT_CHECK 0x8
#define ALPC_CANCELFLGP_FLUSH 0x10000 // dbg

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcCancelMessage(
		__in HANDLE PortHandle,
		__in ULONG Flags,
		__in PALPC_CONTEXT_ATTR MessageContext
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcImpersonateClientOfPort(
		__in HANDLE PortHandle,
		__in PPORT_MESSAGE PortMessage,
		__reserved PVOID Reserved
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcOpenSenderProcess(
		__out PHANDLE ProcessHandle,
		__in HANDLE PortHandle,
		__in PPORT_MESSAGE PortMessage,
		__reserved ULONG Flags,
		__in ACCESS_MASK DesiredAccess,
		__in POBJECT_ATTRIBUTES ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlpcOpenSenderThread(
		__out PHANDLE ThreadHandle,
		__in HANDLE PortHandle,
		__in PPORT_MESSAGE PortMessage,
		__reserved ULONG Flags,
		__in ACCESS_MASK DesiredAccess,
		__in POBJECT_ATTRIBUTES ObjectAttributes
		);

	// Support functions

	NATIVE_API
		ULONG
		NTAPI
		AlpcMaxAllowedMessageLength(
		VOID
		);

	NATIVE_API
		ULONG
		NTAPI
		AlpcGetHeaderSize(
		__in ULONG Flags
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		AlpcInitializeMessageAttribute(
		__in ULONG AttributeFlags,
		__out_opt PALPC_MESSAGE_ATTRIBUTES Buffer,
		__in ULONG BufferSize,
		__out PULONG RequiredBufferSize
		);

	NATIVE_API
		PVOID
		NTAPI
		AlpcGetMessageAttribute(
		__in PALPC_MESSAGE_ATTRIBUTES Buffer,
		__in ULONG AttributeFlag
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		AlpcRegisterCompletionList(
		__in HANDLE PortHandle,
		__out PALPC_COMPLETION_LIST_HEADER Buffer,
		__in ULONG Size,
		__in ULONG ConcurrencyCount,
		__in ULONG AttributeFlags
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		AlpcUnregisterCompletionList(
		__in HANDLE PortHandle
		);


	NATIVE_API
		NTSTATUS
		NTAPI
		AlpcRundownCompletionList(
		__in HANDLE PortHandle
		);


	NATIVE_API
		NTSTATUS
		NTAPI
		AlpcAdjustCompletionListConcurrencyCount(
		__in HANDLE PortHandle,
		__in ULONG ConcurrencyCount
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		AlpcRegisterCompletionListWorkerThread(
		__inout PVOID CompletionList
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		AlpcUnregisterCompletionListWorkerThread(
		__inout PVOID CompletionList
		);

	NATIVE_API
		VOID
		NTAPI
		AlpcGetCompletionListLastMessageInformation(
		__in PVOID CompletionList,
		__out PULONG LastMessageId,
		__out PULONG LastCallbackId
		);

	NATIVE_API
		ULONG
		NTAPI
		AlpcGetOutstandingCompletionListMessageCount(
		__in PVOID CompletionList
		);

	NATIVE_API
		PPORT_MESSAGE
		NTAPI
		AlpcGetMessageFromCompletionList(
		__in PVOID CompletionList,
		__out_opt PALPC_MESSAGE_ATTRIBUTES *MessageAttributes
		);

	NATIVE_API
		VOID
		NTAPI
		AlpcFreeCompletionListMessage(
		__inout PVOID CompletionList,
		__in PPORT_MESSAGE Message
		);

	NATIVE_API
		PALPC_MESSAGE_ATTRIBUTES
		NTAPI
		AlpcGetCompletionListMessageAttributes(
		__in PVOID CompletionList,
		__in PPORT_MESSAGE Message
		);

	// end_private


#endif // _NTLPC_H_add4da86_44d6_42e5_801f_23fe1de78ffe_
#ifndef _NTMEMORY_H_d4d5c9b1_7569_4859_b25a_cc5cadd2b166_
#define _NTMEMORY_H_d4d5c9b1_7569_4859_b25a_cc5cadd2b166_

#ifndef _NTOBJECT_H_44725294_0381_41e9_872d_92a0dd9f3ac0_
#define _NTOBJECT_H_44725294_0381_41e9_872d_92a0dd9f3ac0_


	typedef struct
	{
		ULONG           Attributes;
		ACCESS_MASK     DesiredAccess;
		ULONG           HandleCount;
		ULONG           ReferenceCount;
		ULONG           PagedPoolUsage;
		ULONG           NonPagedPoolUsage;
		ULONG           Reserved[3];
		ULONG           NameInformationLength;
		ULONG           TypeInformationLength;
		ULONG           SecurityDescriptorLength;
		LARGE_INTEGER   CreationTime;

	} OBJECT_BASIC_INFORMATION, *POBJECT_BASIC_INFORMATION;

	typedef struct
	{
		UNICODE_STRING  Name;
		WCHAR           Buffer[MAX_NTPATH];

	} OBJECT_NAME_INFORMATION2, *POBJECT_NAME_INFORMATION2;

	typedef struct _OBJECT_TYPE_INFORMATION
	{
		UNICODE_STRING      TypeName;
		ULONG               TotalNumberOfObjects;
		ULONG               TotalNumberOfHandles;
		ULONG               TotalPagedPoolUsage;
		ULONG               TotalNonPagedPoolUsage;
		ULONG               TotalNamePoolUsage;
		ULONG               TotalHandleTableUsage;
		ULONG               HighWaterNumberOfObjects;
		ULONG               HighWaterNumberOfHandles;
		ULONG               HighWaterPagedPoolUsage;
		ULONG               HighWaterNonPagedPoolUsage;
		ULONG               HighWaterNamePoolUsage;
		ULONG               HighWaterHandleTableUsage;
		ULONG               InvalidAttributes;
		GENERIC_MAPPING     GenericMapping;
		ULONG               ValidAccessMask;
		BOOLEAN             SecurityRequired;
		BOOLEAN             MaintainHandleCount;
		ULONG               PoolType;
		ULONG               DefaultPagedPoolCharge;
		ULONG               DefaultNonPagedPoolCharge;

	} OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;

#if CPP_DEFINED

	typedef struct OBJECT_TYPE_INFORMATION2 : public OBJECT_TYPE_INFORMATION
	{
		OBJECT_TYPE_INFORMATION Type;
		WCHAR TypeNameBuffer[MAX_NTPATH];

	} OBJECT_TYPE_INFORMATION2, *POBJECT_TYPE_INFORMATION2;

#endif // c++

	typedef struct
	{
		ULONG                   NumberOfObjectsTypes;
		OBJECT_TYPE_INFORMATION TypeInformation[1];

	} OBJECT_TYPES_INFORMATION, *POBJECT_TYPES_INFORMATION;

	typedef struct
	{
		BOOLEAN InheritHandle;
		BOOLEAN ProtectFromClose;

	} OBJECT_HANDLE_FLAG_INFORMATION, *POBJECT_HANDLE_FLAG_INFORMATION;

#if ML_USER_MODE
	typedef struct _OBJECT_TYPE *POBJECT_TYPE;
#endif // r3

	typedef struct _OBJECT_TYPE_INITIALIZER *POBJECT_TYPE_INITIALIZER;

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetInformationObject(
		IN  HANDLE                      ObjectHandle,
		IN  OBJECT_INFORMATION_CLASS    ObjectInformationClass,
		IN  PVOID                       ObjectInformation,
		IN  ULONG                       Length
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDuplicateObject(
		IN  HANDLE      SourceProcessHandle,
		IN  HANDLE      SourceHandle,
		IN  HANDLE      TargetProcessHandle OPTIONAL,
		OUT PHANDLE     TargetHandle OPTIONAL,
		IN  ACCESS_MASK DesiredAccess,
		IN  ULONG       HandleAttributes,
		IN  ULONG       Options
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwDuplicateObject(
		IN  HANDLE      SourceProcessHandle,
		IN  HANDLE      SourceHandle,
		IN  HANDLE      TargetProcessHandle OPTIONAL,
		OUT PHANDLE     TargetHandle OPTIONAL,
		IN  ACCESS_MASK DesiredAccess,
		IN  ULONG       HandleAttributes,
		IN  ULONG       Options
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryObject(
		HANDLE                      Handle,
		OBJECT_INFORMATION_CLASS    ObjectInformationClass,
		PVOID                       ObjectInformation,
		ULONG                       ObjectInformationLength,
		PULONG                      ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryObject(
		HANDLE                      Handle,
		OBJECT_INFORMATION_CLASS    ObjectInformationClass,
		PVOID                       ObjectInformation,
		ULONG                       ObjectInformationLength,
		PULONG                      ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtClose(
		IN HANDLE Handle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwClose(
		IN HANDLE Handle
		);

#if ML_KERNEL_MODE

	NTKRNLAPI
		NTSTATUS
		ObCreateObjectType(
		IN  PUNICODE_STRING             TypeName,
		IN  POBJECT_TYPE_INITIALIZER    ObjectTypeInitializer,
		IN  PSECURITY_DESCRIPTOR        SecurityDescriptor OPTIONAL,
		OUT POBJECT_TYPE*               ObjectType
		);

	NTSTATUS
		NTAPI
		ObCreateObject(
		IN      KPROCESSOR_MODE     ProbeMode           OPTIONAL,
		IN      POBJECT_TYPE        ObjectType,
		IN      POBJECT_ATTRIBUTES  ObjectAttributes    OPTIONAL,
		IN      KPROCESSOR_MODE     OwnershipMode,
		IN OUT  PVOID               ParseContext        OPTIONAL,
		IN      ULONG               ObjectBodySize,
		IN      ULONG               PagedPoolCharge     OPTIONAL,
		IN      ULONG               NonPagedPoolCharge  OPTIONAL,
		OUT     PVOID*              Object
		);

	NTKERNELAPI
		NTSTATUS
		NTAPI
		ObCloseHandle(
		IN HANDLE           Handle,
		IN KPROCESSOR_MODE  PreviousMode
		);

	NTKERNELAPI
		POBJECT_TYPE
		NTAPI
		ObGetObjectType(
		IN PVOID Object
		);

	//
	//  A function to enumerate through the handle table of a process using a
	//  callback.
	//

	typedef struct HANDLE_TABLE *PHANDLE_TABLE;
	typedef struct HANDLE_TABLE_ENTRY *PHANDLE_TABLE_ENTRY;

	typedef
		BOOLEAN
		(NTAPI
		*EX_ENUMERATE_HANDLE_ROUTINE)(
		IN PHANDLE_TABLE_ENTRY  HandleTableEntry,
		IN HANDLE               Handle,
		IN PVOID                EnumParameter
		);

	typedef
		BOOLEAN
		(NTAPI
		*EX_ENUMERATE_HANDLE_ROUTINE_WIN8)(
		IN PHANDLE_TABLE        HandleTable,
		IN PHANDLE_TABLE_ENTRY  HandleTableEntry,
		IN HANDLE               Handle,
		IN PVOID                EnumParameter
		);

	NTKERNELAPI
		BOOLEAN
		NTAPI
		ExEnumHandleTable(
		IN  PHANDLE_TABLE               HandleTable,
		IN  EX_ENUMERATE_HANDLE_ROUTINE EnumHandleProcedure,
		IN  PVOID                       EnumParameter,
		OUT PHANDLE                     Handle OPTIONAL
		);

#endif // r0

#endif // _NTOBJECT_H_44725294_0381_41e9_872d_92a0dd9f3ac0_

	/************************************************************************
	memory
	************************************************************************/
	typedef enum _MEMORY_INFORMATION_CLASS
	{
		MemoryBasicInformation = 0,
		MemoryWorkingSetInformation = 1,
		MemoryMappedFilenameInformation = 2,
		MemoryRegionInformation = 3,
		MemoryWorkingSetExInformation = 4,

	} MEMORY_INFORMATION_CLASS;

#if 0

	typedef struct _MEMORY_BASIC_INFORMATION
	{
		/* 0x000 */ PVOID                          BaseAddress;
		/* 0x004 */ PVOID                          AllocationBase;
		/* 0x008 */ ULONG                          AllocationProtect;
		/* 0x00C */ ULONG_PTR                      RegionSize;
		/* 0x010 */ ULONG                          State;
		/* 0x014 */ ULONG                          Protect;
		/* 0x018 */ ULONG                          Type;

	} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

#endif

	typedef OBJECT_NAME_INFORMATION MEMORY_MAPPED_FILENAME_INFORMATION, *PMEMORY_MAPPED_FILENAME_INFORMATION;
	typedef OBJECT_NAME_INFORMATION2 MEMORY_MAPPED_FILENAME_INFORMATION2;

	typedef struct _MEMORY_WORKING_SET_BLOCK
	{
		ULONG_PTR Protection : 5;
		ULONG_PTR ShareCount : 3;
		ULONG_PTR Shared : 1;
		ULONG_PTR Node : 3;
#ifdef ML_AMD64
		ULONG_PTR VirtualPage : 52;
#else
		ULONG VirtualPage : 20;
#endif
	} MEMORY_WORKING_SET_BLOCK, *PMEMORY_WORKING_SET_BLOCK;

	typedef struct _MEMORY_WORKING_SET_INFORMATION
	{
		ULONG_PTR NumberOfEntries;
		MEMORY_WORKING_SET_BLOCK WorkingSetInfo[1];
	} MEMORY_WORKING_SET_INFORMATION, *PMEMORY_WORKING_SET_INFORMATION;

	// private
	typedef struct _MEMORY_REGION_INFORMATION
	{
		PVOID AllocationBase;
		ULONG AllocationProtect;
		ULONG RegionType;
		SIZE_T RegionSize;
	} MEMORY_REGION_INFORMATION, *PMEMORY_REGION_INFORMATION;

	// private
	typedef struct _MEMORY_WORKING_SET_EX_BLOCK
	{
		union
		{
			struct
			{
				ULONG_PTR Valid : 1;
				ULONG_PTR ShareCount : 3;
				ULONG_PTR Win32Protection : 11;
				ULONG_PTR Shared : 1;
				ULONG_PTR Node : 6;
				ULONG_PTR Locked : 1;
				ULONG_PTR LargePage : 1;
				ULONG_PTR Priority : 3;
				ULONG_PTR Reserved : 4;
				ULONG_PTR Bad : 1;
#ifdef ML_AMD64
				ULONG_PTR ReservedUlong : 32;
#endif
			};
			struct
			{
				ULONG_PTR Valid : 1;
				ULONG_PTR Reserved0 : 14;
				ULONG_PTR Shared : 1;
				ULONG_PTR Reserved1 : 5;
				ULONG_PTR PageTable : 1;
				ULONG_PTR Location : 2;
				ULONG_PTR Reserved2 : 7;
				ULONG_PTR Bad : 1;
#ifdef ML_AMD64
				ULONG_PTR ReservedUlong : 32;
#endif
			} Invalid;
		};
	} MEMORY_WORKING_SET_EX_BLOCK, *PMEMORY_WORKING_SET_EX_BLOCK;

	// private
	typedef struct _MEMORY_WORKING_SET_EX_INFORMATION
	{
		PVOID VirtualAddress;
		union
		{
			MEMORY_WORKING_SET_EX_BLOCK VirtualAttributes;
			ULONG Long;
		} u1;
	} MEMORY_WORKING_SET_EX_INFORMATION, *PMEMORY_WORKING_SET_EX_INFORMATION;

	/************************************************************************
	image section information
	************************************************************************/

#if ML_USER_MODE

	typedef enum
	{
		ViewShare = 1,
		ViewUnmap = 2,

	} SECTION_INHERIT;

#endif

	typedef enum
	{
		SectionBasicInformation,
		SectionImageInformation,
		SectionRelocationInformation,   // ret = now_base - desire_base

	} SECTION_INFORMATION_CLASS;

	typedef struct _SECTION_BASIC_INFORMATION
	{
		PVOID           BaseAddress;
		ULONG           Attributes;
		LARGE_INTEGER   Size;
	} SECTION_BASIC_INFORMATION, *PSECTION_BASIC_INFORMATION;

	typedef struct _SECTION_IMAGE_INFORMATION
	{
		PVOID   TransferAddress;                    // 0x00
		ULONG   ZeroBits;                           // 0x04
		SIZE_T  MaximumStackSize;                   // 0x08
		SIZE_T  CommittedStackSize;                 // 0x0C
		ULONG   SubSystemType;                      // 0x10

		union
		{
			struct
			{
				USHORT SubSystemMinorVersion;
				USHORT SubSystemMajorVersion;
			};
			ULONG SubSystemVersion;                 // 0x14
		};

		ULONG   GpValue;                            // 0x18
		USHORT  ImageCharacteristics;               // 0x1C
		USHORT  DllCharacteristics;                 // 0x1E
		USHORT  Machine;                            // 0x20
		UCHAR   ImageContainsCode;                  // 0x22
		union
		{
			UCHAR ImageFlags;                       // 0x23
			struct
			{
				UCHAR ComPlusNativeReady : 1;
				UCHAR ComPlusILOnly : 1;
				UCHAR ImageDynamicallyRelocated : 1;
				UCHAR ImageMappedFlat : 1;
			};
		} ImageFlags;

		ULONG   LoaderFlags;                        // 0x24
		ULONG   ImageFileSize;                      // 0x28
		ULONG   CheckSum;                           // 0x2C

	} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION;

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAllocateVirtualMemory(
		IN      HANDLE      ProcessHandle,
		IN OUT  PVOID*      BaseAddress,
		IN      ULONG_PTR   ZeroBits,
		IN OUT  PSIZE_T     RegionSize,
		IN      ULONG       AllocationType,
		IN      ULONG       Protect
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwAllocateVirtualMemory(
		IN      HANDLE      ProcessHandle,
		IN OUT  PVOID*      BaseAddress,
		IN      ULONG_PTR   ZeroBits,
		IN OUT  PSIZE_T     RegionSize,
		IN      ULONG       AllocationType,
		IN      ULONG       Protect
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtFreeVirtualMemory(
		IN      HANDLE  ProcessHandle,
		IN OUT  PVOID  *BaseAddress,
		IN OUT  PSIZE_T RegionSize,
		IN      ULONG   FreeType
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwFreeVirtualMemory(
		IN      HANDLE  ProcessHandle,
		IN OUT  PVOID  *BaseAddress,
		IN OUT  PSIZE_T RegionSize,
		IN      ULONG   FreeType
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtProtectVirtualMemory(
		IN      HANDLE      ProcessHandle,
		IN OUT  PVOID*      BaseAddress,
		IN OUT  PULONG_PTR  ProtectSize,
		IN      ULONG       NewProtect,
		OUT     PULONG      OldProtect
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwProtectVirtualMemory(
		IN      HANDLE      ProcessHandle,
		IN OUT  PVOID*      BaseAddress,
		IN OUT  PULONG_PTR  ProtectSize,
		IN      ULONG       NewProtect,
		OUT     PULONG      OldProtect
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryVirtualMemory(
		HANDLE                      ProcessHandle,
		PVOID                       BaseAddress,
		MEMORY_INFORMATION_CLASS    MemoryInformationClass,
		PVOID                       MemoryInformation,
		ULONG_PTR                   MemoryInformationLength,
		PULONG_PTR                  ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWow64QueryVirtualMemory64(
		IN  HANDLE                      ProcessHandle,
		IN  PVOID64                     BaseAddress,
		IN  MEMORY_INFORMATION_CLASS    MemoryInformationClass,
		OUT PVOID                       MemoryInformation, /* NB must be 64bit aligned */
		IN  ULONG64                     Length,
		OUT PULONGLONG                  ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReadVirtualMemory(
		IN    HANDLE  ProcessHandle,
		IN    PVOID   BaseAddress,
		OUT   PVOID   Buffer,
		IN    SIZE_T  NumberOfBytesToRead,
		OUT   PSIZE_T NumberOfBytesRead OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwReadVirtualMemory(
		IN    HANDLE  ProcessHandle,
		IN    PVOID   BaseAddress,
		OUT   PVOID   Buffer,
		IN    SIZE_T  NumberOfBytesToRead,
		OUT   PSIZE_T NumberOfBytesRead OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWriteVirtualMemory(
		IN    HANDLE  ProcessHandle,
		IN    PVOID   BaseAddress,
		IN    PVOID   Buffer,
		IN    SIZE_T  NumberOfBytesToWrite,
		OUT   PSIZE_T NumberOfBytesWritten OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwWriteVirtualMemory(
		IN    HANDLE  ProcessHandle,
		IN    PVOID   BaseAddress,
		IN    PVOID   Buffer,
		IN    SIZE_T  NumberOfBytesToWrite,
		OUT   PSIZE_T NumberOfBytesWritten OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtFlushInstructionCache(
		IN HANDLE ProcessHandle,
		IN PVOID  BaseAddress,
		IN SIZE_T NumberOfBytesToFlush
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwFlushInstructionCache(
		IN HANDLE ProcessHandle,
		IN PVOID  BaseAddress,
		IN SIZE_T NumberOfBytesToFlush
		);

	/*++

	NtCreateSection
	===============

	Creates a section object.

	SectionHandle - Points to a variable that will receive the section
	object handle if the call is successful.

	DesiredAccess - Specifies the type of access that the caller requires
	to the section object. This parameter can be zero, or any combination
	of the following flags:

	SECTION_QUERY       - Query access
	SECTION_MAP_WRITE   - Can be written when mapped
	SECTION_MAP_READ    - Can be read when mapped
	SECTION_MAP_EXECUTE - Can be executed when mapped
	SECTION_EXTEND_SIZE - Extend access
	SECTION_ALL_ACCESS  - All of the preceding +
	STANDARD_RIGHTS_REQUIRED

	ObjectAttributes - Points to a structure that specifies the objects attributes.
	OBJ_OPENLINK is not a valid attribute for a section object.

	MaximumSize - Optionally points to a variable that specifies the size,
	in bytes, of the section. If FileHandle is zero, the size must be
	specified; otherwise, it can be defaulted from the size of the file
	referred to by FileHandle.

	SectionPageProtection - The protection desired for the pages
	of the section when the section is mapped. This parameter can take
	one of the following values:

	PAGE_READONLY
	PAGE_READWRITE
	PAGE_WRITECOPY
	PAGE_EXECUTE
	PAGE_EXECUTE_READ
	PAGE_EXECUTE_READWRITE
	PAGE_EXECUTE_WRITECOPY

	AllocationAttributes - The attributes for the section. This parameter must
	be a combination of the following values:

	SEC_BASED     0x00200000    // Map section at same address in each process
	SEC_NO_CHANGE 0x00400000    // Disable changes to protection of pages
	SEC_IMAGE     0x01000000    // Map section as an image
	SEC_VLM       0x02000000    // Map section in VLM region
	SEC_RESERVE   0x04000000    // Reserve without allocating pagefile storage
	SEC_COMMIT    0x08000000    // Commit pages; the default behavior
	SEC_NOCACHE   0x10000000    // Mark pages as non-cacheable

	FileHandle - Identifies the file from which to create the section object.
	The file must be opened with an access mode compatible with the protection
	flags specified by the Protect parameter. If FileHandle is zero,
	the function creates a section object of the specified size backed
	by the paging file rather than by a named file in the file system.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateSection(
		OUT PHANDLE             SectionHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  PLARGE_INTEGER      MaximumSize,
		IN  ULONG               SectionPageProtection,
		IN  ULONG               AllocationAttributes,
		IN  HANDLE              FileHandle OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateSection(
		OUT PHANDLE             SectionHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  PLARGE_INTEGER      MaximumSize OPTIONAL,
		IN  ULONG               SectionPageProtection,
		IN  ULONG               AllocationAttributes,
		IN  HANDLE              FileHandle OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenSection(
		OUT PHANDLE             SectionHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenSection(
		OUT PHANDLE             SectionHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtMapViewOfSection(
		IN      HANDLE          SectionHandle,
		IN      HANDLE          ProcessHandle,
		IN OUT  PVOID          *BaseAddress,
		IN      ULONG_PTR       ZeroBits,
		IN      SIZE_T          CommitSize,
		IN OUT  PLARGE_INTEGER  SectionOffset OPTIONAL,
		IN OUT  PSIZE_T         ViewSize,
		IN      SECTION_INHERIT InheritDisposition,
		IN      ULONG           AllocationType,
		IN      ULONG           Win32Protect
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwMapViewOfSection(
		IN      HANDLE          SectionHandle,
		IN      HANDLE          ProcessHandle,
		IN OUT  PVOID          *BaseAddress,
		IN      ULONG_PTR       ZeroBits,
		IN      SIZE_T          CommitSize,
		IN OUT  PLARGE_INTEGER  SectionOffset OPTIONAL,
		IN OUT  PSIZE_T         ViewSize,
		IN      SECTION_INHERIT InheritDisposition,
		IN      ULONG           AllocationType,
		IN      ULONG           Win32Protect
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtUnmapViewOfSection(
		IN HANDLE ProcessHandle,
		IN PVOID BaseAddress
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwUnmapViewOfSection(
		IN HANDLE ProcessHandle,
		IN PVOID BaseAddress
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQuerySection(
		IN  HANDLE                      SectionHandle,
		IN  SECTION_INFORMATION_CLASS   SectionInformationClass,
		OUT PVOID                       SectionInformation,
		IN  SIZE_T                      Length,
		OUT PULONG                      ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAllocateUserPhysicalPages(
		IN      HANDLE      ProcessHandle,
		IN OUT  PULONG_PTR  NumberOfPages,
		OUT     PULONG_PTR  UserPfnArray
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtGetWriteWatch(
		HANDLE      ProcessHandle,
		ULONG       Flags,
		PVOID       BaseAddress,
		SIZE_T      RegionSize,
		PVOID*      UserAddressArray,
		PULONG_PTR  EntriesInUserAddressArray,
		PULONG      Granularity
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtResetWriteWatch(
		HANDLE  ProcessHandle,
		PVOID   BaseAddress,
		SIZE_T  RegionSize
		);

#if !ML_KERNEL_MODE

	/************************************************************************
	user mode
	************************************************************************/

	/************************************************************************
	memory
	************************************************************************/

	NATIVE_API
		HANDLE
		NTAPI
		RtlCreateHeap(
		IN ULONG                Flags,
		IN PVOID                HeapBase OPTIONAL,
		IN SIZE_T               ReserveSize OPTIONAL,
		IN SIZE_T               CommitSize OPTIONAL,
		IN PVOID                Lock OPTIONAL,
		IN PRTL_HEAP_PARAMETERS Parameters OPTIONAL
		);

	NATIVE_API
		HANDLE
		NTAPI
		RtlDestroyHeap(
		IN HANDLE HeapBase
		);

	NATIVE_API
		PVOID
		NTAPI
		RtlAllocateHeap(
		IN HANDLE   HeapBase,
		IN ULONG    Flags,
		IN SIZE_T   Bytes
		);

	NATIVE_API
		PVOID
		NTAPI
		RtlReAllocateHeap(
		IN HANDLE   HeapBase,
		IN ULONG    Flags,
		IN PVOID    Memory,
		IN SIZE_T   Bytes
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlFreeHeap(
		IN HANDLE   HeapBase,
		IN ULONG    Flags,
		IN LPVOID   Memory
		);

	NATIVE_API
		ULONG_PTR
		WINAPI
		RtlSizeHeap(
		IN HANDLE   HeapBase,
		IN ULONG    Flags,
		IN PVOID    Memory
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlLockHeap(
		IN PVOID HeapHandle
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlUnlockHeap(
		IN PVOID HeapHandle
		);

#endif // !kernel mode

	/************************************************************************
	C interface
	************************************************************************/

	NTSTATUS
		Nt_AllocateMemory(
		HANDLE      ProcessHandle,
		PVOID*      BaseAddress,
		ULONG_PTR   Size,
		ULONG       DEF_VAL(Protect, PAGE_EXECUTE_READWRITE),
		ULONG       DEF_VAL(AllocationType, MEM_RESERVE | MEM_COMMIT)
		);

	NTSTATUS
		Nt_FreeMemory(
		HANDLE  ProcessHandle,
		PVOID   BaseAddress
		);

#endif // _NTMEMORY_H_d4d5c9b1_7569_4859_b25a_cc5cadd2b166_
#ifndef _NTMISC_H_e2789f20_6dd7_48d9_841c_b38cc5e46666_
#define _NTMISC_H_e2789f20_6dd7_48d9_841c_b38cc5e46666_

#ifndef _NTPROCESS_H_39560d0d_86be_4220_839a_0fcdb8e556cf_
#define _NTPROCESS_H_39560d0d_86be_4220_839a_0fcdb8e556cf_




	/************************************************************************
	process information
	************************************************************************/

	typedef struct _PROCESS_TIMES
	{
		LARGE_INTEGER CreationTime;
		LARGE_INTEGER ExitTime;
		LARGE_INTEGER KernelTime;
		LARGE_INTEGER UserTime;

	} PROCESS_TIMES, *PPROCESS_TIMES;

	typedef struct
	{
		UNICODE_STRING  ImageFileName;
		WCHAR           Buffer[1];
	} PROCESS_IMAGE_FILE_NAME, *PPROCESS_IMAGE_FILE_NAME;

	typedef struct
	{
		UNICODE_STRING  ImageFileName;
		WCHAR           Buffer[MAX_NTPATH];
	} PROCESS_IMAGE_FILE_NAME2;



	typedef struct
	{
		ULONG       Length;                             // +0x00
		BOOL        Initialized;                        // +0x04
		PVOID       SsHandle;                           // +0x08
		LIST_ENTRY  InLoadOrderModuleList;              // +0x0c
		LIST_ENTRY  InMemoryOrderModuleList;            // +0x14
		LIST_ENTRY  InInitializationOrderModuleList;    // +0x1c
		PVOID       EntryInProgress;                    // +0x24
		ULONG       ShutdownInProgress;                 // +0x28
		ULONG_PTR   ShutdownThreadId;                   // +0x2C
	} PEB_LDR_DATA, *PPEB_LDR_DATA;                     // +0x30

	typedef struct
	{
		UNICODE_STRING  DosPath;
		HANDLE          Handle;
	} CURDIR;

	typedef struct _RTLP_CURDIR_REF *PRTLP_CURDIR_REF;

	typedef struct _RTL_RELATIVE_NAME_U
	{
		UNICODE_STRING RelativeName;
		HANDLE ContainingDirectory;
		PRTLP_CURDIR_REF CurDirRef;
	} RTL_RELATIVE_NAME_U, *PRTL_RELATIVE_NAME_U;

	typedef struct
	{
		/* 0x000 */ USHORT      Flags;
		/* 0x002 */ USHORT      Length;
		/* 0x004 */ ULONG       TimeStamp;
		/* 0x008 */ ANSI_STRING DosPath;
	} RTL_DRIVE_LETTER_CURDIR;

#define USER_PROCESS_PARAMETERS_NORMALIZED  (1u << 0)

	typedef struct
	{
		/* 0x000 */ ULONG                   MaximumLength;
		/* 0x004 */ ULONG                   Length;
		/* 0x008 */ ULONG                   Flags;
		/* 0x00c */ ULONG                   DebugFlags;
		/* 0x010 */ HANDLE                  ConsoleHandle;
		/* 0x014 */ ULONG                   ConsoleFlags;
		/* 0x018 */ HANDLE                  StandardInput;
		/* 0x01c */ HANDLE                  StandardOutput;
		/* 0x020 */ HANDLE                  StandardError;
		/* 0x024 */ CURDIR                  CurrentDirectory;
		/* 0x030 */ UNICODE_STRING          DllPath;
		/* 0x038 */ UNICODE_STRING          ImagePathName;
		/* 0x040 */ UNICODE_STRING          CommandLine;
		/* 0x048 */ PWCHAR                  Environment;
		/* 0x04c */ ULONG                   StartingX;
		/* 0x050 */ ULONG                   StartingY;
		/* 0x054 */ ULONG                   CountX;
		/* 0x058 */ ULONG                   CountY;
		/* 0x05c */ ULONG                   CountCharsX;
		/* 0x060 */ ULONG                   CountCharsY;
		/* 0x064 */ ULONG                   FillAttribute;
		/* 0x068 */ ULONG                   WindowFlags;
		/* 0x06c */ ULONG                   ShowWindowFlags;
		/* 0x070 */ UNICODE_STRING          WindowTitle;
		/* 0x078 */ UNICODE_STRING          DesktopInfo;
		/* 0x080 */ UNICODE_STRING          ShellInfo;
		/* 0x088 */ UNICODE_STRING          RuntimeData;
		/* 0x090 */ RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
		/* 0x290 */ ULONG_PTR               EnvironmentSize;
		/* 0x294 */ ULONG_PTR               EnvironmentVersion;
	} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;

	//  NtCreateUserProcess defs

	typedef enum _PS_CREATE_STATE
	{
		PsCreateInitialState = 0,
		PsCreateFailOnFileOpen = 1,
		PsCreateFailOnSectionCreate = 2,
		PsCreateFailExeFormat = 3,
		PsCreateFailMachineMismatch = 4,
		PsCreateFailExeName = 5,    // Debugger specified
		PsCreateSuccess = 6,

		PsCreateMaximumStates

	} PS_CREATE_STATE;

	typedef struct _PS_CREATE_INFO
	{
		SIZE_T Size;
		PS_CREATE_STATE State;
		union
		{
			// PsCreateInitialState
			struct
			{
				union
				{
					ULONG InitFlags;
					struct
					{
						UCHAR WriteOutputOnExit : 1;
						UCHAR DetectManifest : 1;
						UCHAR SpareBits1 : 6;
						UCHAR IFEOKeyState : 2; // PS_IFEO_KEY_STATE
						UCHAR SpareBits2 : 6;
						USHORT ProhibitedImageCharacteristics : 16;
					};
				};
				ACCESS_MASK AdditionalFileAccess;
			} InitState;

			// PsCreateFailOnSectionCreate
			struct
			{
				HANDLE FileHandle;
			} FailSection;

			// PsCreateFailExeName
			struct
			{
				HANDLE IFEOKey;
			} ExeName;

			// PsCreateSuccess
			struct
			{
				union
				{
					ULONG OutputFlags;
					struct
					{
						UCHAR ProtectedProcess : 1;
						UCHAR AddressSpaceOverride : 1;
						UCHAR DevOverrideEnabled : 1; // from Image File Execution Options
						UCHAR ManifestDetected : 1;
						UCHAR SpareBits1 : 4;
						UCHAR SpareBits2 : 8;
						USHORT SpareBits3 : 16;
					};
				};

				HANDLE FileHandle;
				HANDLE SectionHandle;
				ULONGLONG UserProcessParametersNative;
				ULONG UserProcessParametersWow64;
				ULONG CurrentParameterFlags;
				ULONGLONG PebAddressNative;
				ULONG PebAddressWow64;
				ULONGLONG ManifestAddress;
				ULONG ManifestSize;
			} SuccessState;
		};
	} PS_CREATE_INFO, *PPS_CREATE_INFO;

	// Attributes

	// begin_rev
#define PS_ATTRIBUTE_NUMBER_MASK    0x0000FFFF
#define PS_ATTRIBUTE_THREAD         0x00010000 // can be used with threads
#define PS_ATTRIBUTE_INPUT          0x00020000 // input only
#define PS_ATTRIBUTE_UNKNOWN        0x00040000

#define PS_ATTRIBUTE_FLAG_THREAD    0x0001 // can be used with threads
#define PS_ATTRIBUTE_FLAG_INPUT     0x0002 // input only
#define PS_ATTRIBUTE_FLAG_UNKNOWN   0x0004

#define PS_ATTRIBUTE_FLAG_INPUT_HANDLE   (PS_ATTRIBUTE_FLAG_INPUT | PS_ATTRIBUTE_FLAG_UNKNOWN)

	// end_rev

	// private
	typedef enum _PS_ATTRIBUTE_NUM
	{
		PsAttributeParentProcess = 0, // in HANDLE
		PsAttributeDebugPort = 1, // in HANDLE
		PsAttributeToken = 2, // in HANDLE
		PsAttributeClientId = 3, // out PCLIENT_ID
		PsAttributeTebAddress = 4, // out PTEB *
		PsAttributeImageName = 5, // in PWSTR
		PsAttributeImageInfo = 6, // out PSECTION_IMAGE_INFORMATION
		PsAttributeMemoryReserve = 7, // in PPS_MEMORY_RESERVE
		PsAttributePriorityClass = 8, // in UCHAR
		PsAttributeErrorMode = 9, // in ULONG
		PsAttributeStdHandleInfo = 10, // in PPS_STD_HANDLE_INFO
		PsAttributeHandleList = 11, // in PHANDLE
		PsAttributeGroupAffinity = 12, // in PGROUP_AFFINITY
		PsAttributePreferredNode = 13, // in PUSHORT
		PsAttributeIdealProcessor = 14, // in PPROCESSOR_NUMBER
		PsAttributeUmsThread = 15, // ? in PUMS_CREATE_THREAD_ATTRIBUTES
		PsAttributeMitigationOptions = 16, // in UCHAR
		PsAttributeMax

	} PS_ATTRIBUTE_NUM;

	typedef struct _PS_STD_HANDLE_INFO
	{
		union
		{
			/* 0x000 */ ULONG                          Flags;

			struct
			{
				/* 0x000 */     UCHAR                      StdHandleState : 2;
				/* 0x000 */     UCHAR                      PseudoHandleMask : 3;
			};
		};

		/* 0x004 */ ULONG                          StdHandleSubsystemType;

	} PS_STD_HANDLE_INFO, *PPS_STD_HANDLE_INFO;

	typedef struct _PS_MEMORY_RESERVE
	{
		/* 0x000 */ PVOID   ReserveAddress;
		/* 0x004 */ ULONG   ReserveSize;

	} PS_MEMORY_RESERVE, *PPS_MEMORY_RESERVE;

	// begin_rev

#define PsAttributeValue(Number, Thread, Input, Unknown) \
    (((Number) & PS_ATTRIBUTE_NUMBER_MASK) | \
    ((Thread) ? PS_ATTRIBUTE_THREAD : 0) | \
    ((Input) ? PS_ATTRIBUTE_INPUT : 0) | \
    ((Unknown) ? PS_ATTRIBUTE_UNKNOWN : 0))

#define PS_ATTRIBUTE_PARENT_PROCESS         PsAttributeValue(PsAttributeParentProcess, FALSE, TRUE, TRUE)
#define PS_ATTRIBUTE_DEBUG_PORT             PsAttributeValue(PsAttributeDebugPort, FALSE, TRUE, TRUE)
#define PS_ATTRIBUTE_TOKEN                  PsAttributeValue(PsAttributeToken, FALSE, TRUE, TRUE)
#define PS_ATTRIBUTE_CLIENT_ID              PsAttributeValue(PsAttributeClientId, TRUE, FALSE, FALSE)
#define PS_ATTRIBUTE_TEB_ADDRESS            PsAttributeValue(PsAttributeTebAddress, TRUE, FALSE, FALSE)
#define PS_ATTRIBUTE_IMAGE_NAME             PsAttributeValue(PsAttributeImageName, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_IMAGE_INFO             PsAttributeValue(PsAttributeImageInfo, FALSE, FALSE, FALSE)
#define PS_ATTRIBUTE_MEMORY_RESERVE         PsAttributeValue(PsAttributeMemoryReserve, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_PRIORITY_CLASS         PsAttributeValue(PsAttributePriorityClass, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_ERROR_MODE             PsAttributeValue(PsAttributeErrorMode, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_STD_HANDLE_INFO        PsAttributeValue(PsAttributeStdHandleInfo, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_HANDLE_LIST            PsAttributeValue(PsAttributeHandleList, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_GROUP_AFFINITY         PsAttributeValue(PsAttributeGroupAffinity, TRUE, TRUE, FALSE)
#define PS_ATTRIBUTE_PREFERRED_NODE         PsAttributeValue(PsAttributePreferredNode, FALSE, TRUE, FALSE)
#define PS_ATTRIBUTE_IDEAL_PROCESSOR        PsAttributeValue(PsAttributeIdealProcessor, TRUE, TRUE, FALSE)
#define PS_ATTRIBUTE_MITIGATION_OPTIONS     PsAttributeValue(PsAttributeMitigationOptions, FALSE, TRUE, TRUE)

	// end_rev

	// begin_private

	typedef struct _PS_ATTRIBUTE
	{
		//    ULONG       Attribute;
		USHORT      AttributeNumber;
		USHORT      AttributeFlags;

		ULONG_PTR   Size;

		union
		{
			ULONG_PTR   Value;
			PVOID       ValuePtr;
		};

		PULONG_PTR  ReturnLength;

	} PS_ATTRIBUTE, *PPS_ATTRIBUTE;

	typedef struct _PS_ATTRIBUTE_LIST
	{
		ULONG_PTR       TotalLength;
		PS_ATTRIBUTE    Attributes[1];
	} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;

#define PROCESS_CREATE_FLAGS_BREAKAWAY              0x00000001
#define PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT       0x00000002
#define PROCESS_CREATE_FLAGS_INHERIT_HANDLES        0x00000004
#define PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE 0x00000008
#define PROCESS_CREATE_FLAGS_LARGE_PAGES            0x00000010

#define THREAD_CREATE_FLAGS_CREATE_SUSPENDED        0x00000001
#define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH      0x00000002 // ?
#define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER      0x00000004
#define THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR 0x00000010 // ?
#define THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET  0x00000020 // ?
#define THREAD_CREATE_FLAGS_INITIAL_THREAD          0x00000080

#if CPP_DEFINED

	IF_NOT_EXIST(EXCEPTION_ROUTINE)
	{
		typedef
			EXCEPTION_DISPOSITION
			STDCALL
			EXCEPTION_ROUTINE(
			PEXCEPTION_RECORD   ExceptionRecord,
			PVOID               EstablisherFrame,
			PCONTEXT            ContextRecord,
			PVOID               DispatcherContext
			);
	}

#endif // CPP_DEFINED

#ifndef _WIN32_WINNT_WIN8

	typedef struct _EXCEPTION_REGISTRATION_RECORD
	{
		/* 0x000 */ struct _EXCEPTION_REGISTRATION_RECORD   *Next;
		/* 0x004 */ EXCEPTION_ROUTINE                       *Handler;
	} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;

#endif // _WIN32_WINNT_WIN8

#if 0
	typedef struct _NT_TIB
	{
		/* 0x000 */ EXCEPTION_REGISTRATION_RECORD *ExceptionList;
		/* 0x004 */ PVOID StackBase;
		/* 0x008 */ PVOID StackLimit;
		/* 0x00c */ PVOID SubSystemTib;
		/* 0x010 */ union
		{
			PVOID FiberData;
			ULONG Version;
		};
		/* 0x014 */ PVOID ArbitraryUserPointer;
		/* 0x018 */ struct _NT_TIB *Self;
	} NT_TIB;

#endif

	typedef struct
	{
		UNICODE_STRING  WindowsDirectory;
		UNICODE_STRING  SystemDirectory;
		UNICODE_STRING  BaseNamedObjects;
		ULONG           Unknown;
		USHORT          Unknown2;
		USHORT          ServicePackLength;
		USHORT          ServicePackMaximumLength;
		WCHAR           ServicePack[1];

	} *PSTATIC_SERVER_DATA;

	typedef struct
	{
		UNICODE_STRING64    WindowsDirectory;
		UNICODE_STRING64    SystemDirectory;
		UNICODE_STRING64    BaseNamedObjects;
		ULONG               Unknown;
		USHORT              Unknown2;
		USHORT              ServicePackLength;
		USHORT              ServicePackMaximumLength;
		WCHAR               ServicePack[1];

	} *PSTATIC_SERVER_DATA64;

	typedef struct
	{
		PVOID               Reserve;
		PSTATIC_SERVER_DATA StaticServerData;

	} *STATIC_SERVER_DATA_PTR;

	//
	// Global flags that can be set to control system behavior.
	// Flag word is 32 bits.
	//

#define FLG_STOP_ON_EXCEPTION           0x00000001      // user and kernel mode
#define FLG_SHOW_LDR_SNAPS              0x00000002      // user and kernel mode
#define FLG_DEBUG_INITIAL_COMMAND       0x00000004      // kernel mode only up until WINLOGON started
#define FLG_STOP_ON_HUNG_GUI            0x00000008      // kernel mode only while running

#define FLG_HEAP_ENABLE_TAIL_CHECK      0x00000010      // user mode only
#define FLG_HEAP_ENABLE_FREE_CHECK      0x00000020      // user mode only
#define FLG_HEAP_VALIDATE_PARAMETERS    0x00000040      // user mode only
#define FLG_HEAP_VALIDATE_ALL           0x00000080      // user mode only

#define FLG_APPLICATION_VERIFIER        0x00000100      // user mode only
#define FLG_POOL_ENABLE_TAGGING         0x00000400      // kernel mode only
#define FLG_HEAP_ENABLE_TAGGING         0x00000800      // user mode only

#define FLG_USER_STACK_TRACE_DB         0x00001000      // x86 user mode only
#define FLG_KERNEL_STACK_TRACE_DB       0x00002000      // x86 kernel mode only at boot time
#define FLG_MAINTAIN_OBJECT_TYPELIST    0x00004000      // kernel mode only at boot time
#define FLG_HEAP_ENABLE_TAG_BY_DLL      0x00008000      // user mode only

#define FLG_DISABLE_STACK_EXTENSION     0x00010000      // user mode only
#define FLG_ENABLE_CSRDEBUG             0x00020000      // kernel mode only at boot time
#define FLG_ENABLE_KDEBUG_SYMBOL_LOAD   0x00040000      // kernel mode only
#define FLG_DISABLE_PAGE_KERNEL_STACKS  0x00080000      // kernel mode only at boot time

#define FLG_ENABLE_SYSTEM_CRIT_BREAKS   0x00100000      // user mode only
#define FLG_HEAP_DISABLE_COALESCING     0x00200000      // user mode only
#define FLG_ENABLE_CLOSE_EXCEPTIONS     0x00400000      // kernel mode only
#define FLG_ENABLE_EXCEPTION_LOGGING    0x00800000      // kernel mode only

#define FLG_ENABLE_HANDLE_TYPE_TAGGING  0x01000000      // kernel mode only
#define FLG_HEAP_PAGE_ALLOCS            0x02000000      // user mode only
#define FLG_DEBUG_INITIAL_COMMAND_EX    0x04000000      // kernel mode only up until WINLOGON started
#define FLG_DISABLE_DBGPRINT            0x08000000      // kernel mode only

#define FLG_CRITSEC_EVENT_CREATION      0x10000000      // user mode only, Force early creation of resource events
#define FLG_LDR_TOP_DOWN                0x20000000      // user mode only, win64 only
#define FLG_ENABLE_HANDLE_EXCEPTIONS    0x40000000      // kernel mode only
#define FLG_DISABLE_PROTDLLS            0x80000000      // user mode only (smss/winlogon)

#define FLG_VALID_BITS                  0xFFFFFDFF

#define FLG_USERMODE_VALID_BITS        (FLG_STOP_ON_EXCEPTION           | \
                                        FLG_SHOW_LDR_SNAPS              | \
                                        FLG_HEAP_ENABLE_TAIL_CHECK      | \
                                        FLG_HEAP_ENABLE_FREE_CHECK      | \
                                        FLG_HEAP_VALIDATE_PARAMETERS    | \
                                        FLG_HEAP_VALIDATE_ALL           | \
                                        FLG_APPLICATION_VERIFIER        | \
                                        FLG_HEAP_ENABLE_TAGGING         | \
                                        FLG_USER_STACK_TRACE_DB         | \
                                        FLG_HEAP_ENABLE_TAG_BY_DLL      | \
                                        FLG_DISABLE_STACK_EXTENSION     | \
                                        FLG_ENABLE_SYSTEM_CRIT_BREAKS   | \
                                        FLG_HEAP_DISABLE_COALESCING     | \
                                        FLG_DISABLE_PROTDLLS            | \
                                        FLG_HEAP_PAGE_ALLOCS            | \
                                        FLG_CRITSEC_EVENT_CREATION      | \
                                        FLG_LDR_TOP_DOWN)

#define FLG_BOOTONLY_VALID_BITS        (FLG_KERNEL_STACK_TRACE_DB       | \
                                        FLG_MAINTAIN_OBJECT_TYPELIST    | \
                                        FLG_ENABLE_CSRDEBUG             | \
                                        FLG_DEBUG_INITIAL_COMMAND       | \
                                        FLG_DEBUG_INITIAL_COMMAND_EX    | \
                                        FLG_DISABLE_PAGE_KERNEL_STACKS)

#define FLG_KERNELMODE_VALID_BITS      (FLG_STOP_ON_EXCEPTION           | \
                                        FLG_SHOW_LDR_SNAPS              | \
                                        FLG_STOP_ON_HUNG_GUI            | \
                                        FLG_POOL_ENABLE_TAGGING         | \
                                        FLG_ENABLE_KDEBUG_SYMBOL_LOAD   | \
                                        FLG_ENABLE_CLOSE_EXCEPTIONS     | \
                                        FLG_ENABLE_EXCEPTION_LOGGING    | \
                                        FLG_ENABLE_HANDLE_TYPE_TAGGING  | \
                                        FLG_DISABLE_DBGPRINT            | \
                                        FLG_ENABLE_HANDLE_EXCEPTIONS      \
                                       )

	typedef struct PEB_BASE
	{
		/* 0x000 */ UCHAR                           InheritedAddressSpace;
		/* 0x001 */ UCHAR                           ReadImageFileExecOptions;
		/* 0x002 */ UCHAR                           BeingDebugged;
		/* 0x003 */ struct
		{
			UCHAR                       ImageUsesLargePages : 1;
			UCHAR                       IsProtectedProcess : 1;
			UCHAR                       IsLegacyProcess : 1;
			UCHAR                       IsImageDynamicallyRelocated : 1;
			UCHAR                       SkipPatchingUser32Forwarders : 1;
			UCHAR                       SpareBits : 3;
		};
		/* 0x004 */ PVOID                           Mutant;
		/* 0x008 */ PVOID                           ImageBaseAddress;
		/* 0x00c */ PPEB_LDR_DATA                   Ldr;
		/* 0x010 */ PRTL_USER_PROCESS_PARAMETERS    ProcessParameters;
		/* 0x014 */ PVOID                           SubSystemData;
		/* 0x018 */ HANDLE                          ProcessHeap;
		/* 0x01c */ PRTL_CRITICAL_SECTION           FastPebLock;
		/* 0x020 */ PVOID                           AtlThunkSListPtr;
		/* 0x024 */ PVOID                           IFEOKey;
		/* 0x028 */ union
		{
			ULONG_PTR CrossProcessFlags;
			struct
			{
				UCHAR ProcessInJob : 1;
				UCHAR ProcessInitializing : 1;
				UCHAR ProcessUsingVEH : 1;
				UCHAR ProcessUsingVCH : 1;
				UCHAR ProcessUsingFTH : 1;
			};
		};

		/* 0x02C */ union
		{
			PVOID                       KernelCallbackTable;
			PVOID                       UserSharedInfoPtr;
		};

		/* 0x030 */ ULONG                           SystemReserved[1];
		/* 0x034 */ ULONG                           AtlThunkSListPtr32;
		/* 0x038 */ PVOID                           ApiSetMap;
		/* 0x03c */ ULONG                           TlsExpansionCounter;
		/* 0x040 */ PVOID                           TlsBitmap;
		/* 0x044 */ ULONG                           TlsBitmapBits[2];
		/* 0x04c */ PVOID                           ReadOnlySharedMemoryBase;
		/* 0x050 */ PVOID                           HotpatchInformation;
		/* 0x054 */ STATIC_SERVER_DATA_PTR          ReadOnlyStaticServerData;
		/* 0x058 */ PUSHORT                         AnsiCodePageData;
		/* 0x05c */ PUSHORT                         OemCodePageData;
		/* 0x060 */ PVOID                           UnicodeCaseTableData;
		/* 0x064 */ ULONG                           NumberOfProcessors;
		/* 0x068 */ ULONG                           NtGlobalFlag;
		/* 0x06C */ ULONG                           Dummy;
		/* 0x070 */ LARGE_INTEGER                   CriticalSectionTimeout;
		/* 0x078 */ ULONG                           HeapSegmentReserve;
		/* 0x07c */ ULONG                           HeapSegmentCommit;
		/* 0x080 */ ULONG                           HeapDeCommitTotalFreeThreshold;
		/* 0x084 */ ULONG                           HeapDeCommitFreeBlockThreshold;
		/* 0x088 */ ULONG                           NumberOfHeaps;
		/* 0x08c */ ULONG                           MaximumNumberOfHeaps;
		/* 0x090 */ PVOID                           ProcessHeaps;
		/* 0x094 */ PVOID                           GdiSharedHandleTable;
		/* 0x098 */ PVOID                           ProcessStarterHelper;
		/* 0x09c */ ULONG                           GdiDCAttributeList;
		/* 0x0a0 */ PRTL_CRITICAL_SECTION           LoaderLock;
		/* 0x0a4 */ ULONG                           OSMajorVersion;
		/* 0x0a8 */ ULONG                           OSMinorVersion;
		/* 0x0ac */ USHORT                          OSBuildNumber;
		/* 0x0ae */ USHORT                          OSCSDVersion;
		/* 0x0b0 */ ULONG                           OSPlatformId;
	} PEB_BASE, *PPEB_BASE;

	typedef struct TEB_BASE
	{
		/* 0x000 */ NT_TIB      NtTib;
		/* 0x01C */ PVOID       EnvironmentPointer;
		/* 0x020 */ CLIENT_ID   ClientId;
		/* 0x028 */ HANDLE      ActiveRpcHandle;
		/* 0x02C */ PVOID       ThreadLocalStoragePointer;
		/* 0x030 */ PPEB_BASE   ProcessEnvironmentBlock;
		/* 0x034 */ ULONG       LastErrorValue;
		/* 0x038 */ ULONG       CountOfOwnedCriticalSections;
		/* 0x03C */ PVOID       CsrClientThread;
		/* 0x040 */ PVOID       Win32ThreadInfo;
		/* 0x044 */ ULONG       User32Reserved[26];
		/* 0x0AC */ ULONG       UserReserved[5];
		/* 0x0C0 */ PVOID       WOW32Reserved;
		/* 0x0C4 */ ULONG       CurrentLocale;
		/* 0x0C8 */ ULONG       FpSoftwareStatusRegister;
		/* 0x0CC */ PVOID       SystemReserved1[54];
		/* 0x1A4 */ LONG        ExceptionCode;

	} TEB_BASE, *PTEB_BASE;

	/************************************************************************
	thread information
	************************************************************************/

#ifndef _LDT_ENTRY_DEFINED
#define _LDT_ENTRY_DEFINED

	typedef struct _LDT_ENTRY {
		WORD    LimitLow;
		WORD    BaseLow;
		union {
			struct {
				BYTE    BaseMid;
				BYTE    Flags1;     // Declare as bytes to avoid alignment
				BYTE    Flags2;     // Problems.
				BYTE    BaseHi;
			} Bytes;
			struct {
				DWORD   BaseMid : 8;
				DWORD   Type : 5;
				DWORD   Dpl : 2;
				DWORD   Pres : 1;
				DWORD   LimitHi : 4;
				DWORD   Sys : 1;
				DWORD   Reserved_0 : 1;
				DWORD   Default_Big : 1;
				DWORD   Granularity : 1;
				DWORD   BaseHi : 8;
			} Bits;
		} HighWord;
	} LDT_ENTRY, *PLDT_ENTRY;

#endif

	typedef struct _DESCRIPTOR_TABLE_ENTRY {
		ULONG Selector;
		LDT_ENTRY Descriptor;
	} DESCRIPTOR_TABLE_ENTRY, *PDESCRIPTOR_TABLE_ENTRY;

	typedef
		VOID
		(NTAPI
		*PKNORMAL_ROUTINE)(
		IN PVOID NormalContext OPTIONAL,
		IN PVOID SystemArgument1 OPTIONAL,
		IN PVOID SystemArgument2 OPTIONAL
		);

#if ML_KERNEL_MODE


#define PROCESS_TERMINATE                  (0x0001)
#define PROCESS_CREATE_THREAD              (0x0002)
#define PROCESS_SET_SESSIONID              (0x0004)
#define PROCESS_VM_OPERATION               (0x0008)
#define PROCESS_VM_READ                    (0x0010)
#define PROCESS_VM_WRITE                   (0x0020)
#define PROCESS_DUP_HANDLE                 (0x0040)
#define PROCESS_CREATE_PROCESS             (0x0080)
#define PROCESS_SET_QUOTA                  (0x0100)
#define PROCESS_SET_INFORMATION            (0x0200)
#define PROCESS_QUERY_INFORMATION          (0x0400)
#define PROCESS_SUSPEND_RESUME             (0x0800)
#define PROCESS_QUERY_LIMITED_INFORMATION  (0x1000)
#define PROCESS_SET_LIMITED_INFORMATION    (0x2000)
#if (NTDDI_VERSION >= NTDDI_VISTA)
#define PROCESS_ALL_ACCESS        (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | \
                                   0xFFFF)
#else
#define PROCESS_ALL_ACCESS        (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | \
                                   0xFFF)
#endif

	typedef
		VOID
		(NTAPI
		*PKKERNEL_ROUTINE)(
		PKAPC               Apc,
		PKNORMAL_ROUTINE*   NormalRoutine,
		PVOID*              NormalContext,
		PVOID*              SystemArgument1,
		PVOID*              SystemArgument2
		);

	typedef
		VOID
		(NTAPI
		*PKRUNDOWN_ROUTINE)(
		PKAPC *Apc
		);

#endif // r0

#if ML_USER_MODE

	//
	// Define process debug flags
	//
#define PROCESS_DEBUG_INHERIT 0x00000001

	typedef enum
	{
		ProcessBasicInformation = 0,        // 0, q: PROCESS_BASIC_INFORMATION, PROCESS_EXTENDED_BASIC_INFORMATION
		ProcessQuotaLimits = 1,        // qs: QUOTA_LIMITS, QUOTA_LIMITS_EX
		ProcessIoCounters = 2,        // q: IO_COUNTERS
		ProcessVmCounters = 3,        // q: VM_COUNTERS, VM_COUNTERS_EX
		ProcessTimes = 4,        // q: KERNEL_USER_TIMES
		ProcessBasePriority = 5,        // s: KPRIORITY
		ProcessRaisePriority = 6,        // s: ULONG
		ProcessDebugPort = 7,        // q: HANDLE
		ProcessExceptionPort = 8,        // s: HANDLE
		ProcessAccessToken = 9,        // s: PROCESS_ACCESS_TOKEN
		ProcessLdtInformation = 10,
		ProcessLdtSize = 11,
		ProcessDefaultHardErrorMode = 12,       // qs: ULONG
		ProcessIoPortHandlers = 13,       // (kernel-mode only)
		ProcessPooledUsageAndLimits = 14,       // q: POOLED_USAGE_AND_LIMITS
		ProcessWorkingSetWatch = 15,       // q: PROCESS_WS_WATCH_INFORMATION[]; s: void
		ProcessUserModeIOPL = 16,
		ProcessEnableAlignmentFaultFixup = 17,       // s: BOOLEAN
		ProcessPriorityClass = 18,       // qs: PROCESS_PRIORITY_CLASS
		ProcessWx86Information = 19,
		ProcessHandleCount = 20,       // q: ULONG, PROCESS_HANDLE_INFORMATION
		ProcessAffinityMask = 21,       // s: KAFFINITY
		ProcessPriorityBoost = 22,       // qs: ULONG
		ProcessDeviceMap = 23,       // qs: PROCESS_DEVICEMAP_INFORMATION, PROCESS_DEVICEMAP_INFORMATION_EX
		ProcessSessionInformation = 24,       // q: PROCESS_SESSION_INFORMATION
		ProcessForegroundInformation = 25,       // s: PROCESS_FOREGROUND_BACKGROUND
		ProcessWow64Information = 26,       // q: ULONG_PTR
		ProcessImageFileName = 27,       // q: UNICODE_STRING
		ProcessLUIDDeviceMapsEnabled = 28,       // q: ULONG
		ProcessBreakOnTermination = 29,       // qs: ULONG
		ProcessDebugObjectHandle = 30,       // q: HANDLE
		ProcessDebugFlags = 31,       // qs: ULONG
		ProcessHandleTracing = 32,       // q: PROCESS_HANDLE_TRACING_QUERY; s: size 0 disables, otherwise enables
		ProcessIoPriority = 33,       // qs: ULONG
		ProcessExecuteFlags = 34,       // qs: ULONG
		ProcessTlsInformation = 35,
		ProcessCookie = 36,       // q: ULONG
		ProcessImageInformation = 37,       // q: SECTION_IMAGE_INFORMATION
		ProcessCycleTime = 38,       // q: PROCESS_CYCLE_TIME_INFORMATION
		ProcessPagePriority = 39,       // q: ULONG
		ProcessInstrumentationCallback = 40,
		ProcessThreadStackAllocation = 41,       // s: PROCESS_STACK_ALLOCATION_INFORMATION, PROCESS_STACK_ALLOCATION_INFORMATION_EX
		ProcessWorkingSetWatchEx = 42,       // q: PROCESS_WS_WATCH_INFORMATION_EX[]
		ProcessImageFileNameWin32 = 43,       // q: UNICODE_STRING
		ProcessImageFileMapping = 44,       // q: HANDLE (input)
		ProcessAffinityUpdateMode = 45,       // qs: PROCESS_AFFINITY_UPDATE_MODE
		ProcessMemoryAllocationMode = 46,       // qs: PROCESS_MEMORY_ALLOCATION_MODE
		ProcessGroupInformation = 47,       // q: USHORT[]
		ProcessTokenVirtualizationEnabled = 48,       // s: ULONG
		ProcessConsoleHostProcess = 49,       // q: ULONG_PTR
		ProcessWindowInformation = 50,       // q: PROCESS_WINDOW_INFORMATION
		ProcessHandleInformation = 51,       // q: PROCESS_HANDLE_SNAPSHOT_INFORMATION // since WIN8
		ProcessMitigationPolicy = 52,       // s: PROCESS_MITIGATION_POLICY_INFORMATION
		ProcessDynamicFunctionTableInformation = 53,
		ProcessHandleCheckingMode = 54,
		ProcessKeepAliveCount = 55,       // q: PROCESS_KEEPALIVE_COUNT_INFORMATION
		ProcessRevokeFileHandles = 56,       // s: PROCESS_REVOKE_FILE_HANDLES_INFORMATION
		ProcessWorkingSetControl = 57,

		MaxProcessInfoClass

	} PROCESSINFOCLASS;

	typedef struct _PROCESS_BASIC_INFORMATION
	{
		NTSTATUS    ExitStatus;
		struct PEB* PebBaseAddress;
		ULONG_PTR   AffinityMask;
		LONG        BasePriority;
		ULONG_PTR   UniqueProcessId;
		ULONG_PTR   InheritedFromUniqueProcessId;

	} PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION;

	typedef struct _PROCESS_SESSION_INFORMATION {
		ULONG SessionId;
	} PROCESS_SESSION_INFORMATION, *PPROCESS_SESSION_INFORMATION;


	typedef struct _PROCESS_ACCESS_TOKEN {

		//
		// Handle to Primary token to assign to the process.
		// TOKEN_ASSIGN_PRIMARY access to this token is needed.
		//

		HANDLE Token;

		//
		// Handle to the initial thread of the process.
		// A process's access token can only be changed if the process has
		// no threads or a single thread that has not yet begun execution.
		//
		// N.B. This field is unused.
		//

		HANDLE Thread;

	} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;

	typedef struct _PROCESS_DEVICEMAP_INFORMATION {
		union {
			struct {
				HANDLE DirectoryHandle;
			} Set;
			struct {
				ULONG DriveMap;
				UCHAR DriveType[32];
			} Query;
		} DUMMYUNIONNAME;
	} PROCESS_DEVICEMAP_INFORMATION, *PPROCESS_DEVICEMAP_INFORMATION;

	typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX {
		union {
			struct {
				HANDLE DirectoryHandle;
			} Set;
			struct {
				ULONG DriveMap;
				UCHAR DriveType[32];
			} Query;
		} DUMMYUNIONNAME;
		ULONG Flags;    // specifies that the query type
	} PROCESS_DEVICEMAP_INFORMATION_EX, *PPROCESS_DEVICEMAP_INFORMATION_EX;


	typedef enum
	{
		ThreadBasicInformation = 0,        // q: THREAD_BASIC_INFORMATION
		ThreadTimes = 1,        // q: KERNEL_USER_TIMES
		ThreadPriority = 2,        // s: KPRIORITY
		ThreadBasePriority = 3,        // s: LONG
		ThreadAffinityMask = 4,        // s: KAFFINITY
		ThreadImpersonationToken = 5,        // s: HANDLE
		ThreadDescriptorTableEntry = 6,
		ThreadEnableAlignmentFaultFixup = 7,        // s: BOOLEAN
		ThreadEventPair_Reusable = 8,
		ThreadQuerySetWin32StartAddress = 9,        // q: PVOID
		ThreadZeroTlsCell = 10,
		ThreadPerformanceCount = 11,       // q: LARGE_INTEGER
		ThreadAmILastThread = 12,       // q: ULONG
		ThreadIdealProcessor = 13,       // s: ULONG
		ThreadPriorityBoost = 14,       // qs: ULONG
		ThreadSetTlsArrayAddress = 15,       // Obsolet
		ThreadIsIoPending = 16,       // q: ULONG
		ThreadHideFromDebugger = 17,       // s: void
		ThreadBreakOnTermination = 18,       // qs: ULONG
		ThreadSwitchLegacyState = 19,
		ThreadIsTerminated = 20,       // q: ULONG
		ThreadLastSystemCall = 21,       // q: THREAD_LAST_SYSCALL_INFORMATION
		ThreadIoPriority = 22,       // qs: ULONG
		ThreadCycleTime = 23,       // q: THREAD_CYCLE_TIME_INFORMATION
		ThreadPagePriority = 24,       // q: ULONG
		ThreadActualBasePriority = 25,
		ThreadTebInformation = 26,       // q: THREAD_TEB_INFORMATION (requires THREAD_GET_CONTEXT + THREAD_SET_CONTEXT)
		ThreadCSwitchMon = 27,       // Obsolete
		ThreadCSwitchPmu = 28,
		ThreadWow64Context = 29,       // q: WOW64_CONTEXT
		ThreadGroupInformation = 30,       // q: GROUP_AFFINITY
		ThreadUmsInformation = 31,
		ThreadCounterProfiling = 32,
		ThreadIdealProcessorEx = 33,       // q: PROCESSOR_NUMBER
		ThreadCpuAccountingInformation = 34,       // since WIN8
		ThreadSwitchStackCheck = 35,

		MaxThreadInfoClass

	} THREADINFOCLASS;


#define LOW_PRIORITY            0              // Lowest thread priority level
#define LOW_REALTIME_PRIORITY   16    // Lowest realtime priority level
#define HIGH_PRIORITY           31            // Highest thread priority level
#define MAXIMUM_PRIORITY        32         // Number of thread priority levels

	typedef LONG KPRIORITY;

	typedef struct _KERNEL_USER_TIMES {
		LARGE_INTEGER CreateTime;
		LARGE_INTEGER ExitTime;
		LARGE_INTEGER KernelTime;
		LARGE_INTEGER UserTime;
	} KERNEL_USER_TIMES, *PKERNEL_USER_TIMES;


#endif // r3 only



	/************************************************************************
	threads
	************************************************************************/

	typedef struct _THREAD_BASIC_INFORMATION
	{
		NTSTATUS    ExitStatus;
		PVOID       TebBaseAddress;
		CLIENT_ID   ClientId;
		KAFFINITY   AffinityMask;
		KPRIORITY   Priority;
		KPRIORITY   BasePriority;

	} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;

	typedef struct _THREAD_TEB_INFORMATION
	{
		PVOID TebInformation; // buffer to place data in
		ULONG TebOffset; // offset in TEB to begin reading from
		ULONG BytesToRead; // number of bytes to read
	} THREAD_TEB_INFORMATION, *PTHREAD_TEB_INFORMATION;


	typedef struct _USER_STACK
	{
		PVOID  FixedStackBase;
		PVOID  FixedStackLimit;
		PVOID  ExpandableStackBase;
		PVOID  ExpandableStackLimit;
		PVOID  ExpandableStackBottom;

	} USER_STACK, *PUSER_STACK;

	/************************************************************************
	Process api
	************************************************************************/

	/*
	typedef struct _SECTION_IMAGE_INFORMATION
	{
	PVOID   EntryPoint;
	ULONG   StackZeroBits;
	ULONG   StackReserved;
	ULONG   StackCommit;
	ULONG   ImageSubsystem;
	WORD    SubSystemVersionLow;
	WORD    SubSystemVersionHigh;
	ULONG   Unknown1;
	ULONG   ImageCharacteristics;
	ULONG   ImageMachineType;
	ULONG   Unknown2[3];
	} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION;
	*/
	typedef struct _RTL_USER_PROCESS_INFORMATION
	{
		ULONG                       Size;
		HANDLE                      ProcessHandle;
		HANDLE                      ThreadHandle;
		CLIENT_ID                   ClientId;
		SECTION_IMAGE_INFORMATION   ImageInformation;
	} RTL_USER_PROCESS_INFORMATION, *PRTL_USER_PROCESS_INFORMATION;


	typedef struct _INITIAL_TEB
	{
		struct
		{
			PVOID OldStackBase;
			PVOID OldStackLimit;
		} OldInitialTeb;

		PVOID StackBase;
		PVOID StackLimit;
		PVOID StackAllocationBase;

	} INITIAL_TEB, *PINITIAL_TEB;

	typedef struct _WOW64_PROCESS
	{
		PVOID Wow64;
	} WOW64_PROCESS, *PWOW64_PROCESS;


	NATIVE_API
		HANDLE
		NTAPI
		CsrGetProcessId(
		VOID
		);


#define RTL_USER_PROC_PARAMS_NORMALIZED         0x00000001
#define RTL_USER_PROC_PROFILE_USER              0x00000002
#define RTL_USER_PROC_PROFILE_KERNEL            0x00000004
#define RTL_USER_PROC_PROFILE_SERVER            0x00000008
#define RTL_USER_PROC_RESERVE_1MB               0x00000020
#define RTL_USER_PROC_RESERVE_16MB              0x00000040
#define RTL_USER_PROC_CASE_SENSITIVE            0x00000080
#define RTL_USER_PROC_DISABLE_HEAP_DECOMMIT     0x00000100
#define RTL_USER_PROC_DLL_REDIRECTION_LOCAL     0x00001000
#define RTL_USER_PROC_APP_MANIFEST_PRESENT      0x00002000
#define RTL_USER_PROC_IMAGE_KEY_MISSING         0x00004000
#define RTL_USER_PROC_OPTIN_PROCESS             0x00020000

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateProcessParameters(
		OUT PRTL_USER_PROCESS_PARAMETERS*   ProcessParameters,
		IN  PUNICODE_STRING                 ImagePathName,
		IN  PUNICODE_STRING                 DllPath             OPTIONAL,
		IN  PUNICODE_STRING                 CurrentDirectory    OPTIONAL,
		IN  PUNICODE_STRING                 CommandLine         OPTIONAL,
		IN  PWCHAR                          Environment         OPTIONAL,
		IN  PUNICODE_STRING                 WindowTitle         OPTIONAL,
		IN  PUNICODE_STRING                 DesktopInfo         OPTIONAL,
		IN  PUNICODE_STRING                 ShellInfo           OPTIONAL,
		IN  PUNICODE_STRING                 RuntimeData         OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateProcessParametersEx(
		OUT PRTL_USER_PROCESS_PARAMETERS*   ProcessParameters,
		IN  PUNICODE_STRING                 ImagePathName,
		IN  PUNICODE_STRING                 DllPath          OPTIONAL,
		IN  PUNICODE_STRING                 CurrentDirectory OPTIONAL,
		IN  PUNICODE_STRING                 CommandLine      OPTIONAL,
		IN  PVOID                           Environment      OPTIONAL,
		IN  PUNICODE_STRING                 WindowTitle      OPTIONAL,
		IN  PUNICODE_STRING                 DesktopInfo      OPTIONAL,
		IN  PUNICODE_STRING                 ShellInfo        OPTIONAL,
		IN  PUNICODE_STRING                 RuntimeData      OPTIONAL,
		IN  ULONG                           Flags // pass RTL_USER_PROC_PARAMS_NORMALIZED to keep parameters normalized
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlDestroyProcessParameters(
		PRTL_USER_PROCESS_PARAMETERS ProcessParameters
		);

	NATIVE_API
		PRTL_USER_PROCESS_PARAMETERS
		NTAPI
		RtlNormalizeProcessParams(
		IN OUT PRTL_USER_PROCESS_PARAMETERS ProcessParameters
		);

	NATIVE_API
		PRTL_USER_PROCESS_PARAMETERS
		NTAPI
		RtlDeNormalizeProcessParams(
		IN OUT PRTL_USER_PROCESS_PARAMETERS ProcessParameters
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateUserProcess(
		IN      PUNICODE_STRING                 ImagePath,
		IN      ULONG                           ObjectAttributes,
		IN OUT  PRTL_USER_PROCESS_PARAMETERS    ProcessParameters,
		IN      PSECURITY_DESCRIPTOR            ProcessSecurityDescriptor OPTIONAL,
		IN      PSECURITY_DESCRIPTOR            ThreadSecurityDescriptor OPTIONAL,
		IN      HANDLE                          ParentProcess,
		IN      BOOLEAN                         InheritHandles,
		IN      HANDLE                          DebugPort OPTIONAL,
		IN      HANDLE                          ExceptionPort OPTIONAL,
		OUT     PRTL_USER_PROCESS_INFORMATION   ProcessInformation
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlQueryEnvironmentVariable_U(
		IN PVOID                Environment OPTIONAL,
		IN PUNICODE_STRING      VariableName,
		OUT PUNICODE_STRING     VariableValue
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryInformationProcess(
		HANDLE              ProcessHandle,
		PROCESSINFOCLASS    ProcessInformationClass,
		PVOID               ProcessInformation,
		ULONG               ProcessInformationLength,
		PULONG              ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryInformationProcess(
		HANDLE                      ProcessHandle,
		PROCESSINFOCLASS   ProcessInformationClass,
		PVOID                       ProcessInformation,
		ULONG                       ProcessInformationLength,
		PULONG                      ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetInformationProcess(
		IN HANDLE                       ProcessHandle,
		IN PROCESSINFOCLASS    ProcessInformationClass,
		IN PVOID                        ProcessInformation,
		IN ULONG                        ProcessInformationLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetInformationProcess(
		IN HANDLE                       ProcessHandle,
		IN PROCESSINFOCLASS    ProcessInformationClass,
		IN PVOID                        ProcessInformation,
		IN ULONG                        ProcessInformationLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateProcess(
		OUT PHANDLE             ProcessHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  HANDLE              ParentProcess,
		IN  BOOLEAN             InheritObjectTable,
		IN  HANDLE              SectionHandle OPTIONAL,
		IN  HANDLE              DebugPort OPTIONAL,
		IN  HANDLE              ExceptionPort OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateProcessEx(
		OUT PHANDLE             ProcessHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  HANDLE              ParentProcess,
		IN  ULONG               Flags,
		IN  HANDLE              SectionHandle OPTIONAL,
		IN  HANDLE              DebugPort OPTIONAL,
		IN  HANDLE              ExceptionPort OPTIONAL,
		IN  ULONG               JobMemberLevel
		);


	typedef struct
	{
		PHANDLE                         ProcessHandle;
		PHANDLE                         ThreadHandle;
		ACCESS_MASK                     ProcessDesiredAccess;
		ACCESS_MASK                     ThreadDesiredAccess;
		POBJECT_ATTRIBUTES              ProcessObjectAttributes;
		POBJECT_ATTRIBUTES              ThreadObjectAttributes;
		ULONG                           ProcessFlags;
		ULONG                           ThreadFlags;
		PRTL_USER_PROCESS_PARAMETERS    ProcessParameters;
		PPS_CREATE_INFO                 CreateInfo;
		PPS_ATTRIBUTE_LIST              AttributeList;
		NTSTATUS                        Status;

	} CREATE_USER_PROCESS_PARAMETER, *PCREATE_USER_PROCESS_PARAMETER;


	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateUserProcess(
		OUT     PHANDLE                         ProcessHandle,
		OUT     PHANDLE                         ThreadHandle,
		IN      ACCESS_MASK                     ProcessDesiredAccess,
		IN      ACCESS_MASK                     ThreadDesiredAccess,
		IN      POBJECT_ATTRIBUTES              ProcessObjectAttributes OPTIONAL,
		IN      POBJECT_ATTRIBUTES              ThreadObjectAttributes OPTIONAL,
		IN      ULONG                           ProcessFlags,                   // PROCESS_CREATE_FLAGS_*
		IN      ULONG                           ThreadFlags,                    // THREAD_CREATE_FLAGS_*
		IN      PRTL_USER_PROCESS_PARAMETERS    ProcessParameters,
		IN OUT  PPS_CREATE_INFO                 CreateInfo,
		IN      PPS_ATTRIBUTE_LIST              AttributeList
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenProcess(
		PHANDLE             ProcessHandle,
		ACCESS_MASK         DesiredAccess,
		POBJECT_ATTRIBUTES  ObjectAttributes,
		PCLIENT_ID          ClientId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenProcess(
		PHANDLE             ProcessHandle,
		ACCESS_MASK         DesiredAccess,
		POBJECT_ATTRIBUTES  ObjectAttributes,
		PCLIENT_ID          ClientId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtTerminateProcess(
		IN HANDLE ProcessHandle,
		IN NTSTATUS ExitStatus
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwTerminateProcess(
		IN HANDLE ProcessHandle,
		IN NTSTATUS ExitStatus
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSuspendProcess(
		HANDLE ProcessHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSuspendProcess(
		HANDLE ProcessHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtResumeProcess(
		HANDLE ProcessHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwResumeProcess(
		HANDLE ProcessHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtGetNextProcess(
		IN  HANDLE      ProcessHandle,
		IN  ACCESS_MASK DesiredAccess,
		IN  ULONG       HandleAttributes,
		IN  ULONG       Flags,
		OUT PHANDLE     NewProcessHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwGetNextProcess(
		IN  HANDLE      ProcessHandle,
		IN  ACCESS_MASK DesiredAccess,
		IN  ULONG       HandleAttributes,
		IN  ULONG       Flags,
		OUT PHANDLE     NewProcessHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtGetNextThread(
		IN  HANDLE      ProcessHandle,
		IN  HANDLE      ThreadHandle,
		IN  ACCESS_MASK DesiredAccess,
		IN  ULONG       HandleAttributes,
		IN  ULONG       Flags,
		OUT PHANDLE     NewThreadHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwGetNextThread(
		IN  HANDLE      ProcessHandle,
		IN  HANDLE      ThreadHandle,
		IN  ACCESS_MASK DesiredAccess,
		IN  ULONG       HandleAttributes,
		IN  ULONG       Flags,
		OUT PHANDLE     NewThreadHandle
		);

	/************************************************************************
	threads api
	************************************************************************/

	typedef struct
	{
		/* 0x000 */ ULONG   Flags;
		/* 0x004 */ PSTR    FrameName;

	} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT;

	typedef struct TEB_ACTIVE_FRAME
	{
		/* 0x000 */ ULONG                       Context;  // Flags;
		/* 0x004 */ struct TEB_ACTIVE_FRAME    *Previous;
		ULONG_PTR                   Data;
		// /* 0x008 */ PTEB_ACTIVE_FRAME_CONTEXT   Context;

#if CPP_DEFINED

		BOOL NeedPop;

		TEB_ACTIVE_FRAME(ULONG Context = 0)
		{
			NeedPop = FALSE;
			this->Context = Context;
			this->Data = 0;
		}

		~TEB_ACTIVE_FRAME()
		{
			if (NeedPop)
				Pop();
		}

		VOID Push();
		VOID Pop();

#endif // cpp

	} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME;

	NATIVE_API
		VOID
		NTAPI
		RtlPushFrame(
		PTEB_ACTIVE_FRAME Frame
		);

	NATIVE_API
		PTEB_ACTIVE_FRAME
		NTAPI
		RtlGetFrame(
		VOID
		);

	NATIVE_API
		VOID
		NTAPI
		RtlPopFrame(
		PTEB_ACTIVE_FRAME Frame
		);

#if CPP_DEFINED

	inline VOID TEB_ACTIVE_FRAME::Push()
	{
		NeedPop = TRUE;
		RtlPushFrame(this);
	}

	inline VOID TEB_ACTIVE_FRAME::Pop()
	{
		NeedPop = FALSE;
		RtlPopFrame(this);
	}

#endif // cpp

	NATIVE_API
		NTSTATUS
		NTAPI
		NtGetContextThread(
		IN  HANDLE ThreadHandle,
		OUT PCONTEXT Context
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetContextThread(
		IN HANDLE ThreadHandle,
		IN PCONTEXT Context
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwGetContextThread(
		IN  HANDLE ThreadHandle,
		OUT PCONTEXT Context
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetContextThread(
		IN HANDLE ThreadHandle,
		IN PCONTEXT Context
		);

	NATIVE_API
		VOID
		NTAPI
		RtlExitUserThread(
		ULONG ExitCode
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtYieldExecution(
		VOID
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwYieldExecution(
		VOID
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateThread(
		OUT PHANDLE             ThreadHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  HANDLE              ProcessHandle,
		OUT PCLIENT_ID          ClientId,
		IN  PCONTEXT            ThreadContext,
		IN  PUSER_STACK         UserStack,
		IN  BOOLEAN             CreateSuspended
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateThread(
		OUT PHANDLE             ThreadHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  HANDLE              ProcessHandle,
		OUT PCLIENT_ID          ClientId,
		IN  PCONTEXT            ThreadContext,
		IN  PINITIAL_TEB        InitialTeb,
		IN  BOOLEAN             CreateSuspended
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateThreadEx(
		OUT PHANDLE             ThreadHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes    OPTIONAL,
		IN  HANDLE              ProcessHandle,
		IN  PVOID               StartRoutine,
		IN  PVOID               Argument            OPTIONAL,
		IN  ULONG               CreateFlags, // THREAD_CREATE_FLAGS_*
		IN  ULONG_PTR           ZeroBits            OPTIONAL,
		IN  ULONG_PTR           StackSize           OPTIONAL,
		IN  ULONG_PTR           MaximumStackSize    OPTIONAL,
		IN  PPS_ATTRIBUTE_LIST  AttributeList       OPTIONAL
		);

	NTSTATUS
		NTAPI
		ZwCreateThreadEx(
		OUT PHANDLE             ThreadHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  HANDLE              ProcessHandle,
		IN  PVOID               StartRoutine,
		IN  PVOID               Argument OPTIONAL,
		IN  ULONG               CreateFlags, // THREAD_CREATE_FLAGS_*
		IN  ULONG_PTR           ZeroBits OPTIONAL,
		IN  ULONG_PTR           StackSize OPTIONAL,
		IN  ULONG_PTR           MaximumStackSize OPTIONAL,
		IN  PPS_ATTRIBUTE_LIST  AttributeList OPTIONAL
		);

	typedef
		NTSTATUS
		(NTAPI
		*PUSER_THREAD_START_ROUTINE)(
		IN PVOID ThreadParameter
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateUserThread(
		IN  HANDLE                      Process,
		IN  PSECURITY_DESCRIPTOR        ThreadSecurityDescriptor    OPTIONAL,
		IN  BOOLEAN                     CreateSuspended,
		IN  ULONG                       ZeroBits                    OPTIONAL,
		IN  ULONG_PTR                   MaximumStackSize            OPTIONAL,
		IN  ULONG_PTR                   CommittedStackSize          OPTIONAL,
		IN  PUSER_THREAD_START_ROUTINE  StartAddress,
		IN  PVOID                       Parameter                   OPTIONAL,
		OUT PHANDLE                     Thread                      OPTIONAL,
		OUT PCLIENT_ID                  ClientId                    OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSuspendThread(
		IN  HANDLE ThreadHandle,
		OUT PULONG PreviousSuspendCount OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtResumeThread(
		IN  HANDLE ThreadHandle,
		OUT PULONG PreviousSuspendCount OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlertThread(
		IN HANDLE ThreadHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAlertResumeThread(
		IN  HANDLE  ThreadHandle,
		OUT PULONG  SuspendCount
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenThread(
		PHANDLE             ThreadHandle,
		ACCESS_MASK         DesiredAccess,
		POBJECT_ATTRIBUTES  ObjectAttributes,
		PCLIENT_ID          ClientId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenThread(
		PHANDLE             ThreadHandle,
		ACCESS_MASK         DesiredAccess,
		POBJECT_ATTRIBUTES  ObjectAttributes,
		PCLIENT_ID          ClientId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryInformationThread(
		HANDLE          ThreadHandle,
		THREADINFOCLASS ThreadInformationClass,
		PVOID           ThreadInformation,
		ULONG           ThreadInformationLength,
		PULONG          ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryInformationThread(
		HANDLE          ThreadHandle,
		THREADINFOCLASS ThreadInformationClass,
		PVOID           ThreadInformation,
		ULONG           ThreadInformationLength,
		PULONG          ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetInformationThread(
		HANDLE                      ThreadHandle,
		THREADINFOCLASS    ThreadInformationClass,
		PVOID                       ThreadInformation,
		ULONG                       ThreadInformationLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetInformationThread(
		HANDLE                      ThreadHandle,
		THREADINFOCLASS    ThreadInformationClass,
		PVOID                       ThreadInformation,
		ULONG                       ThreadInformationLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtTerminateThread(
		IN HANDLE   ThreadHandle,
		IN ULONG    ExitCode
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwTerminateThread(
		IN HANDLE   ThreadHandle,
		IN ULONG    ExitCode
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtContinue(
		IN PCONTEXT Context,
		IN BOOLEAN  TestAlert
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwContinue(
		IN PCONTEXT Context,
		IN BOOLEAN  TestAlert
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlRemoteCall(
		IN  HANDLE      Process,
		IN  HANDLE      Thread,
		IN  PVOID       CallSite,
		IN  ULONG       ArgumentCount,
		IN  PULONG_PTR  Arguments OPTIONAL,
		IN  BOOLEAN     PassContext,
		IN  BOOLEAN     AlreadySuspended
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueueApcThread(
		IN HANDLE           ThreadHandle,
		IN PKNORMAL_ROUTINE ApcRoutine,
		IN PVOID            ApcRoutineContext OPTIONAL,
		IN PVOID            Argument1 OPTIONAL,
		IN PVOID            Argument2 OPTIONAL
		);

	NATIVE_API
		VOID
		NTAPI
		RtlCaptureContext(
		OUT PCONTEXT ContextRecord
		);

#if ML_KERNEL_MODE

	NTKRNLAPI
		PVOID
		NTAPI
		PsGetThreadWin32Thread(
		PETHREAD Thread
		);

	NTKRNLAPI
		NTSTATUS
		NTAPI
		PsGetContextThread(
		IN      PETHREAD        Thread,
		IN OUT  PCONTEXT        ThreadContext,
		IN      KPROCESSOR_MODE PreviousMode
		);

	NTKRNLAPI
		NTSTATUS
		NTAPI
		PsSetContextThread(
		IN      PETHREAD        Thread,
		IN OUT  PCONTEXT        ThreadContext,
		IN      KPROCESSOR_MODE PreviousMode
		);

	NTKRNLAPI
		VOID
		NTAPI
		KeInitializeApc(
		OUT PRKAPC              Apc,
		IN  PRKTHREAD           Thread,
		IN  KAPC_ENVIRONMENT    Environment,
		IN  PKKERNEL_ROUTINE    KernelRoutine,
		IN  PKRUNDOWN_ROUTINE   RundownRoutine OPTIONAL,
		IN  PKNORMAL_ROUTINE    NormalRoutine OPTIONAL,
		IN  KPROCESSOR_MODE     ApcMode OPTIONAL,
		IN  PVOID               NormalContext OPTIONAL
		);

	NTKRNLAPI
		BOOLEAN
		NTAPI
		KeInsertQueueApc(
		IN OUT  PRKAPC Apc,
		IN      PVOID SystemArgument1 OPTIONAL,
		IN      PVOID SystemArgument2 OPTIONAL,
		IN      KPRIORITY Increment
		);

	NTKRNLAPI
		NTSTATUS
		NTAPI
		PsLookupProcessThreadByCid(
		IN  PCLIENT_ID  Cid,
		OUT PEPROCESS*  Process OPTIONAL,
		OUT PETHREAD*   Thread
		);

	NTKRNLAPI
		PVOID
		PsGetProcessSectionBaseAddress(
		IN PEPROCESS Process
		);

	NTKRNLAPI
		PCHAR
		NTAPI
		PsGetProcessImageFileName(
		IN PEPROCESS Process
		);

	NTKRNLAPI
		PVOID
		NTAPI
		PsGetProcessDebugPort(
		IN PEPROCESS Process
		);

	NTKRNLAPI
		PVOID
		NTAPI
		PsGetProcessSecurityPort(
		IN PEPROCESS Process
		);

	NTKRNLAPI
		NTSTATUS
		NTAPI
		PsSetProcessSecurityPort(
		OUT PEPROCESS Process,
		IN  PVOID Port
		);

	NTKRNLAPI
		NTSTATUS
		NTAPI
		PsGetProcessExitStatus(
		IN PEPROCESS Process
		);

	NTKRNLAPI
		HANDLE
		NTAPI
		PsGetThreadProcessId(
		IN PETHREAD Thread
		);

	NTKRNLAPI
		PEPROCESS
		NTAPI
		PsGetThreadProcess(
		IN PETHREAD Thread
		);

	NTKERNELAPI
		PVOID
		NTAPI
		PsGetThreadTeb(
		PETHREAD Thread
		);

	NTKERNELAPI
		NTSTATUS
		NTAPI
		PsSuspendProcess(
		PEPROCESS Process
		);

	NTKERNELAPI
		NTSTATUS
		NTAPI
		PsResumeProcess(
		PEPROCESS Process
		);

	NTKRNLAPI
		VOID
		NTAPI
		KiAttachProcess_NT5(
		IN OUT  PRKTHREAD           Thread,
		IN      PKPROCESS           Process,
		IN      PKLOCK_QUEUE_HANDLE LockHandle,
		OUT     PRKAPC_STATE        SavedApcState
		);

	NTKRNLAPI
		VOID
		NTAPI
		KiAttachProcess_NT6(
		// IN OUT  PRKTHREAD           Thread, // eax
		IN      PKPROCESS       Process,
		IN      KIRQL           PreviousIrql,
		OUT     PRKAPC_STATE    SavedApcState
		);

#endif // r0

#endif // _NTPROCESS_H_39560d0d_86be_4220_839a_0fcdb8e556cf_

	/************************************************************************
	debugs
	************************************************************************/

	typedef enum
	{
		SysDbgQueryModuleInformation = 0,
		SysDbgQueryTraceInformation = 1,
		SysDbgSetTracepoint = 2,
		SysDbgSetSpecialCall = 3,
		SysDbgClearSpecialCalls = 4,
		SysDbgQuerySpecialCalls = 5,
		SysDbgBreakPoint = 6,
		SysDbgQueryVersion = 7,
		SysDbgReadVirtual = 8,
		SysDbgWriteVirtual = 9,
		SysDbgReadPhysical = 10,
		SysDbgWritePhysical = 11,
		SysDbgReadControlSpace = 12,
		SysDbgWriteControlSpace = 13,
		SysDbgReadIoSpace = 14,
		SysDbgWriteIoSpace = 15,
		SysDbgReadMsr = 16,
		SysDbgWriteMsr = 17,
		SysDbgReadBusData = 18,
		SysDbgWriteBusData = 19,
		SysDbgCheckLowMemory = 20,
		SysDbgEnableKernelDebugger = 21,
		SysDbgDisableKernelDebugger = 22,
		SysDbgGetAutoKdEnable = 23,
		SysDbgSetAutoKdEnable = 24,
		SysDbgGetPrintBufferSize = 25,
		SysDbgSetPrintBufferSize = 26,
		SysDbgGetKdUmExceptionEnable = 27,
		SysDbgSetKdUmExceptionEnable = 28,
		SysDbgGetTriageDump = 29,
		SysDbgGetKdBlockEnable = 30,
		SysDbgSetKdBlockEnable = 31,
		SysDbgRegisterForUmBreakInfo = 32,
		SysDbgGetUmBreakPid = 33,
		SysDbgClearUmBreakPid = 34,
		SysDbgGetUmAttachPid = 35,
		SysDbgClearUmAttachPid = 36,

	} SYSDBG_COMMAND;



	/************************************************************************
	system information
	************************************************************************/

	typedef enum
	{
		SystemBasicInformation = 0,
		SystemProcessorInformation = 1,
		SystemPerformanceInformation = 2,
		SystemTimeOfDayInformation = 3,
		SystemPathInformation = 4,
		SystemProcessInformation = 5,
		SystemCallCountInformation = 6,
		SystemDeviceInformation = 7,
		SystemProcessorPerformanceInformation = 8,
		SystemFlagsInformation = 9,
		SystemCallTimeInformation = 10,
		SystemModuleInformation = 11,
		SystemLocksInformation = 12,
		SystemStackTraceInformation = 13,
		SystemPagedPoolInformation = 14,
		SystemNonPagedPoolInformation = 15,
		SystemHandleInformation = 16,
		SystemObjectInformation = 17,
		SystemPageFileInformation = 18,
		SystemVdmInstemulInformation = 19,
		SystemVdmBopInformation = 20,
		SystemFileCacheInformation = 21,
		SystemPoolTagInformation = 22,
		SystemInterruptInformation = 23,
		SystemDpcBehaviorInformation = 24,
		SystemFullMemoryInformation = 25,
		SystemLoadGdiDriverInformation = 26,
		SystemUnloadGdiDriverInformation = 27,
		SystemTimeAdjustmentInformation = 28,
		SystemSummaryMemoryInformation = 29,
		SystemMirrorMemoryInformation = 30,
		SystemPerformanceTraceInformation = 31,
		SystemObsolete0 = 32,
		SystemExceptionInformation = 33,
		SystemCrashDumpStateInformation = 34,
		SystemKernelDebuggerInformation = 35,
		SystemContextSwitchInformation = 36,
		SystemRegistryQuotaInformation = 37,
		SystemExtendServiceTableInformation = 38,
		SystemPrioritySeperation = 39,
		SystemVerifierAddDriverInformation = 40,
		SystemVerifierRemoveDriverInformation = 41,
		SystemProcessorIdleInformation = 42,
		SystemLegacyDriverInformation = 43,
		SystemCurrentTimeZoneInformation = 44,
		SystemLookasideInformation = 45,
		SystemTimeSlipNotification = 46,
		SystemSessionCreate = 47,
		SystemSessionDetach = 48,
		SystemSessionInformation = 49,
		SystemRangeStartInformation = 50,
		SystemVerifierInformation = 51,
		SystemVerifierThunkExtend = 52,
		SystemSessionProcessInformation = 53,
		SystemLoadGdiDriverInSystemSpace = 54,
		SystemNumaProcessorMap = 55,
		SystemPrefetcherInformation = 56,
		SystemExtendedProcessInformation = 57,
		SystemRecommendedSharedDataAlignment = 58,
		SystemComPlusPackage = 59,
		SystemNumaAvailableMemory = 60,
		SystemProcessorPowerInformation = 61,
		SystemEmulationBasicInformation = 62,
		SystemEmulationProcessorInformation = 63,
		SystemExtendedHandleInformation = 64,
		SystemLostDelayedWriteInformation = 65,
		SystemBigPoolInformation = 66,
		SystemSessionPoolTagInformation = 67,
		SystemSessionMappedViewInformation = 68,
		SystemHotpatchInformation = 69,
		SystemObjectSecurityMode = 70,
		SystemWatchdogTimerHandler = 71,
		SystemWatchdogTimerInformation = 72,
		SystemLogicalProcessorInformation = 73,
		SystemWow64SharedInformationObsolete = 74,
		SystemRegisterFirmwareTableInformationHandler = 75,
		SystemFirmwareTableInformation = 76,
		SystemModuleInformationEx = 77,
		SystemVerifierTriageInformation = 78,
		SystemSuperfetchInformation = 79,
		SystemMemoryListInformation = 80,
		SystemFileCacheInformationEx = 81,
		SystemThreadPriorityClientIdInformation = 82,
		SystemProcessorIdleCycleTimeInformation = 83,
		SystemVerifierCancellationInformation = 84,
		SystemProcessorPowerInformationEx = 85,
		SystemRefTraceInformation = 86,
		SystemSpecialPoolInformation = 87,
		SystemProcessIdInformation = 88,
		SystemErrorPortInformation = 89,
		SystemBootEnvironmentInformation = 90,
		SystemHypervisorInformation = 91,
		SystemVerifierInformationEx = 92,
		SystemTimeZoneInformation = 93,
		SystemImageFileExecutionOptionsInformation = 94,
		SystemCoverageInformation = 95,
		SystemPrefetchPatchInformation = 96,
		SystemVerifierFaultsInformation = 97,
		SystemSystemPartitionInformation = 98,
		SystemSystemDiskInformation = 99,
		SystemProcessorPerformanceDistribution = 100,
		SystemNumaProximityNodeInformation = 101,
		SystemDynamicTimeZoneInformation = 102,
		SystemCodeIntegrityInformation = 103,
		SystemProcessorMicrocodeUpdateInformation = 104,
		SystemProcessorBrandString = 105,
		SystemVirtualAddressInformation = 106,
		SystemLogicalProcessorAndGroupInformation = 107,
		SystemProcessorCycleTimeInformation = 108,
		SystemStoreInformation = 109,
		SystemRegistryAppendString = 110,
		SystemAitSamplingValue = 111,
		SystemVhdBootInformation = 112,
		SystemCpuQuotaInformation = 113,
		SystemSpare0 = 114,
		SystemSpare1 = 115,
		SystemLowPriorityIoInformation = 116,
		SystemTpmBootEntropyInformation = 117,
		SystemVerifierCountersInformation = 118,
		SystemPagedPoolInformationEx = 119,
		SystemSystemPtesInformationEx = 120,
		SystemNodeDistanceInformation = 121,
		SystemAcpiAuditInformation = 122,
		SystemBasicPerformanceInformation = 123,
		SystemQueryPerformanceCounterInformation = 124,
		MaxSystemInfoClass = 125,

	} SYSTEM_INFORMATION_CLASS;

	typedef struct _SYSTEM_BASIC_INFORMATION
	{
		/* 0x000 */ ULONG       Reserved;
		/* 0x004 */ ULONG       TimerResolution;
		/* 0x008 */ ULONG       PageSize;
		/* 0x00C */ ULONG       NumberOfPhysicalPages;
		/* 0x010 */ ULONG       LowestPhysicalPageNumber;
		/* 0x014 */ ULONG       HighestPhysicalPageNumber;
		/* 0x018 */ ULONG       AllocationGranularity;
		/* 0x01C */ ULONG_PTR   MinimumUserModeAddress;
		/* 0x020 */ ULONG_PTR   MaximumUserModeAddress;
		/* 0x024 */ ULONG_PTR   ActiveProcessorsAffinityMask;
		/* 0x028 */ CHAR        NumberOfProcessors;

	} SYSTEM_BASIC_INFORMATION, *PSYSTEM_BASIC_INFORMATION;


	//
	// Thread scheduling states.
	//

	typedef enum _THREAD_STATE {
		Initialized,
		Ready,
		Running,
		Standby,
		Terminated,
		Waiting,
		Transition,
		DeferredReady,
		GateWait
	} KTHREAD_STATE;

	typedef struct _SYSTEM_THREAD_INFORMATION
	{
		/* 0x000 */ LARGE_INTEGER   KernelTime;
		/* 0x008 */ LARGE_INTEGER   UserTime;
		/* 0x010 */ LARGE_INTEGER   CreateTime;
		/* 0x018 */ ULONG           WaitTime;
		/* 0x01c */ PVOID           StartAddress;
		/* 0x020 */ CLIENT_ID       ClientId;
		/* 0x028 */ LONG            Priority;
		/* 0x02c */ LONG            BasePriority;
		/* 0x030 */ ULONG           ContextSwitches;
		/* 0x034 */ ULONG           ThreadState;
		/* 0x038 */ ULONG           WaitReason;
		/* 0x03C */ ULONG           PadFor16Byte;

	} SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;

	typedef struct _SYSTEM_PROCESS_INFORMATION
	{
		/* 0x000 */ ULONG                       NextEntryOffset;
		/* 0x004 */ ULONG                       NumberOfThreads;
		/* 0x008 */ LARGE_INTEGER               WorkingSetPrivateSize;
		/* 0x010 */ ULONG                       HardFaultCount;
		/* 0x014 */ ULONG                       NumberOfThreadsHighWatermark;
		/* 0x018 */ ULONG64                     CycleTime;
		/* 0x020 */ LARGE_INTEGER               CreateTime;
		/* 0x028 */ LARGE_INTEGER               UserTime;
		/* 0x030 */ LARGE_INTEGER               KernelTime;
		/* 0x038 */ UNICODE_STRING              ImageName;
		/* 0x040 */ LONG                        BasePriority;
		/* 0x044 */ ULONG_PTR                   UniqueProcessId;
		/* 0x048 */ ULONG_PTR                   InheritedFromUniqueProcessId;
		/* 0x04c */ ULONG                       HandleCount;
		/* 0x050 */ ULONG                       SessionId;
		/* 0x054 */ ULONG_PTR                   UniqueProcessKey;
		/* 0x058 */ ULONG_PTR                   PeakVirtualSize;
		/* 0x05c */ ULONG_PTR                   VirtualSize;
		/* 0x060 */ ULONG                       PageFaultCount;
		/* 0x064 */ ULONG_PTR                   PeakWorkingSetSize;
		/* 0x068 */ ULONG_PTR                   WorkingSetSize;
		/* 0x06c */ ULONG_PTR                   QuotaPeakPagedPoolUsage;
		/* 0x070 */ ULONG_PTR                   QuotaPagedPoolUsage;
		/* 0x074 */ ULONG_PTR                   QuotaPeakNonPagedPoolUsage;
		/* 0x078 */ ULONG_PTR                   QuotaNonPagedPoolUsage;
		/* 0x07c */ ULONG_PTR                   PagefileUsage;
		/* 0x080 */ ULONG_PTR                   PeakPagefileUsage;
		/* 0x084 */ ULONG_PTR                   PrivatePageCount;
		/* 0x088 */ LARGE_INTEGER               ReadOperationCount;
		/* 0x090 */ LARGE_INTEGER               WriteOperationCount;
		/* 0x098 */ LARGE_INTEGER               OtherOperationCount;
		/* 0x0a0 */ LARGE_INTEGER               ReadTransferCount;
		/* 0x0a8 */ LARGE_INTEGER               WriteTransferCount;
		/* 0x0b0 */ LARGE_INTEGER               OtherTransferCount;
		/* 0x0b8 */ SYSTEM_THREAD_INFORMATION   Threads[1];

	} SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;

	typedef struct
	{
		/* 0x000 */ LARGE_INTEGER  IdleProcessTime;
		/* 0x008 */ LARGE_INTEGER  IoReadTransferCount;
		/* 0x010 */ LARGE_INTEGER  IoWriteTransferCount;
		/* 0x018 */ LARGE_INTEGER  IoOtherTransferCount;
		/* 0x020 */ ULONG          IoReadOperationCount;
		/* 0x024 */ ULONG          IoWriteOperationCount;
		/* 0x028 */ ULONG          IoOtherOperationCount;
		/* 0x02c */ ULONG          AvailablePages;
		/* 0x030 */ ULONG          CommittedPages;
		/* 0x034 */ ULONG          CommitLimit;
		/* 0x038 */ ULONG          PeakCommitment;
		/* 0x03c */ ULONG          PageFaultCount;
		/* 0x040 */ ULONG          CopyOnWriteCount;
		/* 0x044 */ ULONG          TransitionCount;
		/* 0x048 */ ULONG          CacheTransitionCount;
		/* 0x04c */ ULONG          DemandZeroCount;
		/* 0x050 */ ULONG          PageReadCount;
		/* 0x054 */ ULONG          PageReadIoCount;
		/* 0x058 */ ULONG          CacheReadCount;
		/* 0x05c */ ULONG          CacheIoCount;
		/* 0x060 */ ULONG          DirtyPagesWriteCount;
		/* 0x064 */ ULONG          DirtyWriteIoCount;
		/* 0x068 */ ULONG          MappedPagesWriteCount;
		/* 0x06c */ ULONG          MappedWriteIoCount;
		/* 0x070 */ ULONG          PagedPoolPages;
		/* 0x074 */ ULONG          NonPagedPoolPages;
		/* 0x078 */ ULONG          PagedPoolAllocs;
		/* 0x07c */ ULONG          PagedPoolFrees;
		/* 0x080 */ ULONG          NonPagedPoolAllocs;
		/* 0x084 */ ULONG          NonPagedPoolFrees;
		/* 0x088 */ ULONG          FreeSystemPtes;
		/* 0x08c */ ULONG          ResidentSystemCodePage;
		/* 0x090 */ ULONG          TotalSystemDriverPages;
		/* 0x094 */ ULONG          TotalSystemCodePages;
		/* 0x098 */ ULONG          NonPagedPoolLookasideHits;
		/* 0x09c */ ULONG          PagedPoolLookasideHits;
		/* 0x0a0 */ ULONG          AvailablePagedPoolPages;
		/* 0x0a4 */ ULONG          ResidentSystemCachePage;
		/* 0x0a8 */ ULONG          ResidentPagedPoolPage;
		/* 0x0ac */ ULONG          ResidentSystemDriverPage;
		/* 0x0b0 */ ULONG          CcFastReadNoWait;
		/* 0x0b4 */ ULONG          CcFastReadWait;
		/* 0x0b8 */ ULONG          CcFastReadResourceMiss;
		/* 0x0bc */ ULONG          CcFastReadNotPossible;
		/* 0x0c0 */ ULONG          CcFastMdlReadNoWait;
		/* 0x0c4 */ ULONG          CcFastMdlReadWait;
		/* 0x0c8 */ ULONG          CcFastMdlReadResourceMiss;
		/* 0x0cc */ ULONG          CcFastMdlReadNotPossible;
		/* 0x0d0 */ ULONG          CcMapDataNoWait;
		/* 0x0d4 */ ULONG          CcMapDataWait;
		/* 0x0d8 */ ULONG          CcMapDataNoWaitMiss;
		/* 0x0dc */ ULONG          CcMapDataWaitMiss;
		/* 0x0e0 */ ULONG          CcPinMappedDataCount;
		/* 0x0e4 */ ULONG          CcPinReadNoWait;
		/* 0x0e8 */ ULONG          CcPinReadWait;
		/* 0x0ec */ ULONG          CcPinReadNoWaitMiss;
		/* 0x0f0 */ ULONG          CcPinReadWaitMiss;
		/* 0x0f4 */ ULONG          CcCopyReadNoWait;
		/* 0x0f8 */ ULONG          CcCopyReadWait;
		/* 0x0fc */ ULONG          CcCopyReadNoWaitMiss;
		/* 0x100 */ ULONG          CcCopyReadWaitMiss;
		/* 0x104 */ ULONG          CcMdlReadNoWait;
		/* 0x108 */ ULONG          CcMdlReadWait;
		/* 0x10c */ ULONG          CcMdlReadNoWaitMiss;
		/* 0x110 */ ULONG          CcMdlReadWaitMiss;
		/* 0x114 */ ULONG          CcReadAheadIos;
		/* 0x118 */ ULONG          CcLazyWriteIos;
		/* 0x11c */ ULONG          CcLazyWritePages;
		/* 0x120 */ ULONG          CcDataFlushes;
		/* 0x124 */ ULONG          CcDataPages;
		/* 0x128 */ ULONG          ContextSwitches;
		/* 0x12c */ ULONG          FirstLevelTbFills;
		/* 0x130 */ ULONG          SecondLevelTbFills;
		/* 0x134 */ ULONG          SystemCalls;
		/* 0x138 */ ULONG64        CcTotalDirtyPages;
		/* 0x140 */ ULONG64        CcDirtyPageThreshold;

	} SYSTEM_PERFORMANCE_INFORMATION;

	typedef struct
	{
		/* 0x000 */ LARGE_INTEGER   BootTime;
		/* 0x008 */ LARGE_INTEGER   CurrentTime;
		/* 0x010 */ LARGE_INTEGER   TimeZoneBias;
		/* 0x018 */ ULONG           TimeZoneId;
		/* 0x01c */ ULONG           Reserved;
		/* 0x020 */ ULONG64         BootTimeBias;
		/* 0x028 */ ULONG64         SleepTimeBias;

	} SYSTEM_TIMEOFDAY_INFORMATION;

	typedef struct
	{
		/* 0x000 */ USHORT  ProcessorArchitecture;
		/* 0x002 */ USHORT  ProcessorLevel;
		/* 0x004 */ USHORT  ProcessorRevision;
		/* 0x006 */ USHORT  Reserved;
		/* 0x008 */ ULONG   ProcessorFeatureBits;

	} SYSTEM_PROCESSOR_INFORMATION;

	typedef struct
	{
		/* 0x000 */ LARGE_INTEGER   IdleTime;
		/* 0x008 */ LARGE_INTEGER   KernelTime;
		/* 0x010 */ LARGE_INTEGER   UserTime;
		/* 0x018 */ LARGE_INTEGER   DpcTime;
		/* 0x020 */ LARGE_INTEGER   InterruptTime;
		/* 0x028 */ ULONG           InterruptCount;

	} SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;

	typedef struct
	{
		/* 0x000 */ ULONG Length;
		/* 0x004 */ ULONG NumberOfTables;
		//          ULONG TableLimit[1]

	} SYSTEM_CALL_COUNT_INFORMATION;
	/*
	typedef struct
	{
	PVOID   Reserved1;
	PVOID   Reserved2;
	PVOID   ImageBaseAddress;
	ULONG   ImageSize;
	ULONG   Flags;
	USHORT  Id;
	USHORT  Rank;
	USHORT  w018;
	USHORT  NameOffset;
	CHAR    Name[MAXIMUM_FILENAME_LENGTH];

	} SYSTEM_MODULE, *PSYSTEM_MODULE;

	typedef struct
	{
	USHORT  NextEntryOffset;
	USHORT  Dummy;
	ULONG   Reserved1;
	ULONG   Reserved2;
	PVOID   ImageBaseAddress;
	ULONG   ImageSize;
	ULONG   Flags;
	WORD    Id;
	WORD    Rank;
	WORD    w018;
	WORD    NameOffset;
	CHAR    Name[MAXIMUM_FILENAME_LENGTH];
	ULONG   Unknown;
	ULONG   Reserved3;
	ULONG   Reserved4;

	} SYSTEM_MODULE_INFORMATION_EX, *PSYSTEM_MODULE_INFORMATION_EX;

	typedef struct
	{
	ULONG           ModulesCount;
	SYSTEM_MODULE   Modules[1];
	} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;
	*/
	typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
	{
		USHORT  UniqueProcessId;
		USHORT  CreatorBackTraceIndex;
		UCHAR   ObjectTypeIndex;
		UCHAR   HandleAttributes;
		USHORT  HandleValue;
		PVOID   Object;
		ULONG   GrantedAccess;

	} SYSTEM_HANDLE_TABLE_ENTRY_INFO, *PSYSTEM_HANDLE_TABLE_ENTRY_INFO;

	typedef struct _SYSTEM_HANDLE_INFORMATION
	{
		ULONG NumberOfHandles;
		SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];

	} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;

	typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
	{
		PVOID       Object;
		ULONG_PTR   UniqueProcessId;
		HANDLE      HandleValue;
		ULONG       GrantedAccess;
		USHORT      CreatorBackTraceIndex;
		USHORT      ObjectTypeIndex;
		ULONG       HandleAttributes;
		ULONG       Reserved;

	} SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX, *PSYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;

	typedef struct _SYSTEM_HANDLE_INFORMATION_EX
	{
		ULONG_PTR NumberOfHandles;
		ULONG_PTR Reserved;
		SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[1];

	} SYSTEM_HANDLE_INFORMATION_EX, *PSYSTEM_HANDLE_INFORMATION_EX;

	typedef struct
	{
		/* 0x000 */ ULONG CurrentSize;
		/* 0x004 */ ULONG PeakSize;
		/* 0x008 */ ULONG PageFaultCount;
		/* 0x00c */ ULONG MinimumWorkingSet;
		/* 0x010 */ ULONG MaximumWorkingSet;
		/* 0x014 */ ULONG CurrentSizeIncludingTransitionInPages;
		/* 0x018 */ ULONG PeakSizeIncludingTransitionInPages;
		/* 0x01c */ ULONG TransitionRePurposeCount;
		/* 0x020 */ ULONG Flags;

	} SYSTEM_FILECACHE_INFORMATION;

	typedef struct
	{
		BOOLEAN DebuggerEnabled;
		BOOLEAN DebuggerNotPresent;

	} SYSTEM_KERNEL_DEBUGGER_INFORMATION, *PSYSTEM_KERNEL_DEBUGGER_INFORMATION;

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryLicenseValue(
		IN  PUNICODE_STRING Name,
		IN  PULONG          Type OPTIONAL,
		OUT PVOID           Buffer,
		IN  ULONG           Length,
		OUT PULONG          DataLength
		);

	NATIVE_API
		BOOL
		NTAPI
		RtlQueryPerformanceCounter(
		OUT PLARGE_INTEGER PerformanceCount
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryPerformanceCounter(
		IN PLARGE_INTEGER   Counter,
		IN PLARGE_INTEGER   Frequency
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQuerySystemInformation(
		IN  SYSTEM_INFORMATION_CLASS    SystemInformationClass,
		OUT PVOID                       SystemInformation,
		IN  ULONG_PTR                   SystemInformationLength,
		OUT PULONG                      ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQuerySystemInformation(
		IN  SYSTEM_INFORMATION_CLASS    SystemInformationClass,
		OUT PVOID                       SystemInformation,
		IN  ULONG_PTR                   SystemInformationLength,
		OUT PULONG                      ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAddAtom(
		PCWSTR  AtomString,
		ULONG   BytesInString,
		ATOM   *Atom
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwAddAtom(
		PCWSTR  AtomString,
		ULONG   BytesInString,
		ATOM   *Atom
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDeleteAtom(
		ATOM Atom
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwDeleteAtom(
		ATOM Atom
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSystemDebugControl(
		IN  SYSDBG_COMMAND  Command,
		IN  PVOID           InputBuffer,
		IN  ULONG_PTR       InputBufferLength,
		OUT PVOID           OutputBuffer,
		IN  ULONG_PTR       OutputBufferLength,
		OUT PULONG          ReturnLength
		);

#if !ML_KERNEL_MODE

	NATIVE_API
		VOID
		NTAPI
		LdrInitializeThunk(
		PCONTEXT    ThreadContext,
		PVOID       NtdllBase
		);

	NATIVE_API
		VOID
		FASTCALL
		KiFastSystemCall(
		VOID
		);

	NATIVE_API
		VOID
		NTAPI
		KiUserCallbackDispatcher(
		ULONG_PTR,
		ULONG_PTR   apfnDispatchIndex,
		PVOID       Parameter
		);

	NATIVE_API
		ULONG64
		NTAPI
		NtGetTickCount(
		VOID
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlRandom(
		IN OUT PULONG Seed
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlRandomEx(
		IN OUT PULONG Random
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlExpandEnvironmentStrings_U(
		IN  PVOID           Environment OPTIONAL,
		IN  PUNICODE_STRING SourceString,
		OUT PUNICODE_STRING DestinationString,
		OUT PULONG          DestinationBufferLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateSecurityDescriptor(
		IN OUT  PSECURITY_DESCRIPTOR    SecurityDescriptor,
		IN      ULONG                   Revision
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateAcl(
		IN PACL     Acl,
		IN ULONG    AclLength,
		IN ULONG    AclRevision
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlAddAccessDeniedAce(
		IN OUT  PACL            Acl,
		IN      ULONG           AceRevision,
		IN      ACCESS_MASK     AccessMask,
		IN      PSID            Sid
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlAddAccessAllowedAce(
		IN OUT  PACL            Acl,
		IN      ULONG           AceRevision,
		IN      ACCESS_MASK     AccessMask,
		IN      PSID            Sid
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlSetOwnerSecurityDescriptor(
		IN PSECURITY_DESCRIPTOR SecurityDescriptor,
		IN PSID                 Owner OPTIONAL,
		IN BOOLEAN              OwnerDefaulted OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlSetGroupSecurityDescriptor(
		IN PSECURITY_DESCRIPTOR SecurityDescriptor,
		IN PSID                 Group OPTIONAL,
		IN BOOLEAN              GroupDefaulted OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlSetDaclSecurityDescriptor(
		IN OUT  PSECURITY_DESCRIPTOR    SecurityDescriptor,
		IN      BOOLEAN                 DaclPresent,
		IN      PACL                    Dacl OPTIONAL,
		IN      BOOLEAN                 DaclDefaulted OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlFormatMessage(
		LPWSTR  Message,              // [In] Message to format
		UCHAR   MaxWidth,             // [In] Maximum width in characters of each output line
		BOOLEAN IgnoreInserts,        // [In] Whether to copy the message without processing inserts
		BOOLEAN Ansi,                 // [In] Whether Arguments may have ANSI strings
		BOOLEAN ArgumentIsArray,      // [In] Whether Arguments is actually an array rather than a va_list *
		va_list *Arguments,
		LPWSTR  Buffer,               // [Out] Buffer to store processed message in
		ULONG   BufferSize            // [In] Size of Buffer (in bytes?)
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlDosPathNameToNtPathName_U(
		IN  PCWSTR                  DosName,
		OUT PUNICODE_STRING         NtName,
		OUT PCWSTR*                 DosFilePath OPTIONAL,
		OUT PRTL_RELATIVE_NAME_U    FileName OPTIONAL
		);

	NATIVE_API
		VOID
		NTAPI
		RtlReleaseRelativeName(
		IN OUT PRTL_RELATIVE_NAME_U RelativeName
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlNtPathNameToDosPathName(
		IN      ULONG                       Flags,
		IN OUT  PRTL_UNICODE_STRING_BUFFER  Path,
		OUT     PULONG                      Disposition OPTIONAL,
		OUT     PWSTR*                      FilePart OPTIONAL
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlGetFullPathName_U(
		LPCWSTR FileName,
		ULONG   BufferSizeInBytes,
		LPWSTR  Buffer,
		LPWSTR *FilePart
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlDosPathNameToRelativeNtPathName_U(
		IN  PWSTR                   DosFileName,
		OUT PUNICODE_STRING         NtFileName,
		OUT PWSTR*                  FilePart OPTIONAL,
		OUT PRTL_RELATIVE_NAME_U    RelativeName OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlGetVersion(
		IN OUT PRTL_OSVERSIONINFOW lpVersionInformation
		);

	NATIVE_API
		ULONG
		NTAPI
		RtlNtStatusToDosError(
		NTSTATUS Status
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlGetLastWin32Error(
		VOID
		);

	NATIVE_API
		VOID
		NTAPI
		RtlSetLastWin32Error(
		IN LONG ErrorCode
		);

	NATIVE_API
		VOID
		NTAPI
		RtlSetLastWin32ErrorAndNtStatusFromNtStatus(
		IN NTSTATUS NtStatus
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlFindMessage(
		PVOID                    DllHandle,
		ULONG                    MessageTableId,
		ULONG                    MessageLanguageId,
		ULONG                    MessageId,
		PMESSAGE_RESOURCE_ENTRY *MessageEntry
		);

	typedef struct
	{
		ULONG Count[2];
		ULONG State[4];
		UCHAR Buffer[64];
		ULONG Digest[4];

	} RTL_MD5_CTX, *PRTL_MD5_CTX;

	NATIVE_API
		VOID
		NTAPI
		MD5Init(
		OUT PRTL_MD5_CTX Context
		);

	NATIVE_API
		VOID
		NTAPI
		MD5Update(
		IN OUT  PRTL_MD5_CTX    Context,
		IN      PVOID           Buffer,
		IN      ULONG           BufferSize
		);

	NATIVE_API
		VOID
		NTAPI
		MD5Final(
		IN OUT  PRTL_MD5_CTX Context
		);

	typedef struct
	{
		ULONG Unknown[6];
		ULONG State[5];
		ULONG Count[2];
		UCHAR Buffer[64];

	} RTL_SHA_CTX, *PRTL_SHA_CTX;

	typedef struct
	{
		ULONG Digest[5];
	} RTL_SHA_DIG, *PRTL_SHA_DIG;

	NATIVE_API
		VOID
		NTAPI
		A_SHAInit(
		PRTL_SHA_CTX ShaContext
		);

	NATIVE_API
		VOID
		NTAPI
		A_SHAUpdate(
		PRTL_SHA_CTX    ShaContext,
		PVOID           Buffer,
		ULONG           BufferSize
		);

	NATIVE_API
		VOID
		NTAPI
		A_SHAFinal(
		PRTL_SHA_CTX ShaContext,
		PRTL_SHA_DIG Digest
		);

	/************************************************************************
	handles
	************************************************************************/

	NATIVE_API
		VOID
		NTAPI
		RtlInitializeHandleTable(
		IN  ULONG               TableSize,
		IN  ULONG               HandleSize,
		OUT PRTL_HANDLE_TABLE   HandleTable
		);

	NATIVE_API
		PRTL_HANDLE_TABLE_ENTRY
		NTAPI
		RtlAllocateHandle(
		IN OUT  PRTL_HANDLE_TABLE   HandleTable,
		OUT     PULONG              Index
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlFreeHandle(
		IN OUT  PRTL_HANDLE_TABLE       HandleTable,
		IN      PRTL_HANDLE_TABLE_ENTRY Handle
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlIsValidHandle(
		IN PRTL_HANDLE_TABLE        HandleTable,
		IN PRTL_HANDLE_TABLE_ENTRY  Handle
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlIsValidIndexHandle(
		IN  PRTL_HANDLE_TABLE        HandleTable,
		IN  ULONG                    Index,
		OUT PRTL_HANDLE_TABLE_ENTRY *Handle
		);

	NATIVE_API
		VOID
		NTAPI
		RtlDestroyHandleTable(
		IN OUT PRTL_HANDLE_TABLE HandleTable
		);

#define COMPRESSION_FORMAT_NONE          (0x0000)   // winnt
#define COMPRESSION_FORMAT_DEFAULT       (0x0001)   // winnt
#define COMPRESSION_FORMAT_LZNT1         (0x0002)   // winnt
#define COMPRESSION_FORMAT_XPRESS        (0x0003)
#define COMPRESSION_FORMAT_XPRESS_HUFF   (0x0004)

#define COMPRESSION_ENGINE_STANDARD      (0x0000)   // winnt
#define COMPRESSION_ENGINE_MAXIMUM       (0x0100)   // winnt
#define COMPRESSION_ENGINE_HIBER         (0x0200)   // winnt

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlGetCompressionWorkSpaceSize(
		IN  USHORT CompressionFormatAndEngine,
		OUT PULONG CompressBufferWorkSpaceSize,
		OUT PULONG CompressFragmentWorkSpaceSize
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCompressBuffer(
		IN  USHORT  CompressionFormatAndEngine,
		IN  PVOID   UncompressedBuffer,
		IN  ULONG   UncompressedBufferSize,
		OUT PVOID   CompressedBuffer,
		IN  ULONG   CompressedBufferSize,
		IN  ULONG   UncompressedChunkSize,
		OUT PULONG  FinalCompressedSize,
		IN  PVOID   WorkSpace
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlDecompressBuffer(
		IN  USHORT  CompressionFormat,
		OUT PVOID   UncompressedBuffer,
		IN  ULONG   UncompressedBufferSize,
		IN  PVOID   CompressedBuffer,
		IN  ULONG   CompressedBufferSize,
		OUT PULONG  FinalUncompressedSize
		);

#endif // !ML_KERNEL_MODE

#endif // _NTMISC_H_e2789f20_6dd7_48d9_841c_b38cc5e46666_
#ifndef _NTMODULE_H_da9e04cd_9069_411f_8914_6b5fce052ca8_
#define _NTMODULE_H_da9e04cd_9069_411f_8914_6b5fce052ca8_



#endif // _NTMODULE_H_da9e04cd_9069_411f_8914_6b5fce052ca8_
#ifndef _NTREGISTRY_H_0aecc908_7e96_445f_a102_94f7cf820671_
#define _NTREGISTRY_H_0aecc908_7e96_445f_a102_94f7cf820671_


#if ML_USER_MODE

	typedef enum
	{
		KeyBasicInformation = 0,
		KeyNodeInformation = 1,
		KeyFullInformation = 2,
		KeyNameInformation = 3,
		KeyCachedInformation = 4,
		KeyFlagsInformation = 5,
		KeyVirtualizationInformation = 6,
		KeyHandleTagsInformation = 7,

		MaxKeyInfoClass,

	} KEY_INFORMATION_CLASS;

	typedef struct _KEY_NAME_INFORMATION {
		ULONG   NameLength;
		WCHAR   Name[1];            // Variable length string
	} KEY_NAME_INFORMATION, *PKEY_NAME_INFORMATION;

	typedef struct _KEY_WRITE_TIME_INFORMATION {
		LARGE_INTEGER LastWriteTime;
	} KEY_WRITE_TIME_INFORMATION, *PKEY_WRITE_TIME_INFORMATION;

	typedef struct _KEY_WOW64_FLAGS_INFORMATION {
		ULONG   UserFlags;
	} KEY_WOW64_FLAGS_INFORMATION, *PKEY_WOW64_FLAGS_INFORMATION;

	typedef struct _KEY_HANDLE_TAGS_INFORMATION {
		ULONG   HandleTags;
	} KEY_HANDLE_TAGS_INFORMATION, *PKEY_HANDLE_TAGS_INFORMATION;

	typedef struct _KEY_CONTROL_FLAGS_INFORMATION {
		ULONG   ControlFlags;
	} KEY_CONTROL_FLAGS_INFORMATION, *PKEY_CONTROL_FLAGS_INFORMATION;



	typedef enum _KEY_SET_INFORMATION_CLASS {
		KeyWriteTimeInformation,
		KeyWow64FlagsInformation,
		KeyControlFlagsInformation,
		KeySetVirtualizationInformation,
		KeySetDebugInformation,
		KeySetHandleTagsInformation,
		MaxKeySetInfoClass  // MaxKeySetInfoClass should always be the last enum
	} KEY_SET_INFORMATION_CLASS;

	typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION {
		ULONG   VirtualTarget : 1; // Tells if the key is a virtual target key.
		ULONG   VirtualStore : 1; // Tells if the key is a virtual store key.
		ULONG   VirtualSource : 1; // Tells if the key has been virtualized at least one (virtual hint)
		ULONG   Reserved : 29;
	} KEY_SET_VIRTUALIZATION_INFORMATION, *PKEY_SET_VIRTUALIZATION_INFORMATION;


	//
	// Value entry query structures
	//

	typedef enum _KEY_VALUE_INFORMATION_CLASS
	{
		KeyValueBasicInformation,
		KeyValueFullInformation,
		KeyValuePartialInformation,
		KeyValueFullInformationAlign64,
		KeyValuePartialInformationAlign64,
		MaxKeyValueInfoClass  // MaxKeyValueInfoClass should always be the last enum

	} KEY_VALUE_INFORMATION_CLASS;

	typedef struct _KEY_VALUE_BASIC_INFORMATION {
		ULONG   TitleIndex;
		ULONG   Type;
		ULONG   NameLength;
		WCHAR   Name[1];            // Variable size
	} KEY_VALUE_BASIC_INFORMATION, *PKEY_VALUE_BASIC_INFORMATION;

	typedef struct _KEY_VALUE_FULL_INFORMATION {
		ULONG   TitleIndex;
		ULONG   Type;
		ULONG   DataOffset;
		ULONG   DataLength;
		ULONG   NameLength;
		WCHAR   Name[1];            // Variable size
		//          Data[1];            // Variable size data not declared
	} KEY_VALUE_FULL_INFORMATION, *PKEY_VALUE_FULL_INFORMATION;

	typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
		ULONG   TitleIndex;
		ULONG   Type;
		ULONG   DataLength;
		UCHAR   Data[1];            // Variable size
	} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION;

	typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
		ULONG   Type;
		ULONG   DataLength;
		UCHAR   Data[1];            // Variable size
	} KEY_VALUE_PARTIAL_INFORMATION_ALIGN64, *PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64;

	typedef struct _KEY_VALUE_ENTRY
	{
		PUNICODE_STRING ValueName;
		ULONG           DataLength;
		ULONG           DataOffset;
		ULONG           Type;
	} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY;

	typedef struct _KEY_BASIC_INFORMATION
	{
		LARGE_INTEGER   LastWriteTime;
		ULONG           TitleIndex;
		ULONG           NameLength;
		WCHAR           Name[1];            // Variable length string

	} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION;

#endif // r3

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlOpenCurrentUser(
		IN  ACCESS_MASK DesiredAccess,
		OUT PHANDLE     CurrentUserKey
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlFormatCurrentUserKeyPath(
		OUT PUNICODE_STRING CurrentUserKeyPath
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenKey(
		OUT PHANDLE             KeyHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenKey(
		OUT PHANDLE             KeyHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenKeyEx(
		OUT PHANDLE             KeyHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               OpenOptions
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateKey(
		OUT PHANDLE             KeyHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               TitleIndex,
		IN  PUNICODE_STRING     Class OPTIONAL,
		IN  ULONG               CreateOptions,
		OUT PULONG              Disposition OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateKey(
		OUT PHANDLE             KeyHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               TitleIndex,
		IN  PUNICODE_STRING     Class OPTIONAL,
		IN  ULONG               CreateOptions,
		OUT PULONG              Disposition OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateKeyTransacted(
		OUT PHANDLE             KeyHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  ULONG               TitleIndex OPTIONAL,
		IN  PUNICODE_STRING     Class OPTIONAL,
		IN  ULONG               CreateOptions,
		IN  HANDLE              TransactionHandle,
		OUT PULONG              Disposition OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryKey(
		IN  HANDLE                  KeyHandle,
		IN  KEY_INFORMATION_CLASS   KeyInformationClass,
		OUT PVOID                   KeyInformation,
		IN  ULONG                   Length,
		OUT PULONG                  ResultLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryKey(
		IN  HANDLE                  KeyHandle,
		IN  KEY_INFORMATION_CLASS   KeyInformationClass,
		OUT PVOID                   KeyInformation,
		IN  ULONG                   Length,
		OUT PULONG                  ResultLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryValueKey(
		HANDLE                      KeyHandle,
		PUNICODE_STRING             ValueName,
		KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
		PVOID                       KeyValueInformation,
		ULONG                       Length,
		PULONG                      ResultLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryValueKey(
		HANDLE                      KeyHandle,
		PUNICODE_STRING             ValueName,
		KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
		PVOID                       KeyValueInformation,
		ULONG                       Length,
		PULONG                      ResultLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetValueKey(
		IN  HANDLE          KeyHandle,
		IN  PUNICODE_STRING ValueName,
		IN  ULONG           TitleIndex OPTIONAL,
		IN  ULONG           ValueType,
		IN  PVOID           ValueData OPTIONAL,
		IN  ULONG           ValueDataSize
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetValueKey(
		IN  HANDLE          KeyHandle,
		IN  PUNICODE_STRING ValueName,
		IN  ULONG           TitleIndex OPTIONAL,
		IN  ULONG           ValueType,
		IN  PVOID           ValueData OPTIONAL,
		IN  ULONG           ValueDataSize
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryMultipleValueKey(
		IN      HANDLE              KeyHandle,
		IN OUT  PKEY_VALUE_ENTRY    ValueEntries,
		IN      ULONG               EntryCount,
		OUT     PVOID               ValueBuffer,
		IN OUT  PULONG              BufferLength,
		OUT     PULONG              RequiredBufferLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwQueryMultipleValueKey(
		IN      HANDLE              KeyHandle,
		IN OUT  PKEY_VALUE_ENTRY    ValueEntries,
		IN      ULONG               EntryCount,
		OUT     PVOID               ValueBuffer,
		IN OUT  PULONG              BufferLength,
		OUT     PULONG              RequiredBufferLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDeleteKey(
		IN HANDLE KeyHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwDeleteKey(
		IN HANDLE KeyHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDeleteValueKey(
		IN  HANDLE          KeyHandle,
		IN  PUNICODE_STRING ValueName
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwDeleteValueKey(
		IN  HANDLE          KeyHandle,
		IN  PUNICODE_STRING ValueName
		);

#endif // _NTREGISTRY_H_0aecc908_7e96_445f_a102_94f7cf820671_
#ifndef _NTSHIMENGINE_H_089a57ff_0a3f_4bd4_b4ea_37b0c469848f_
#define _NTSHIMENGINE_H_089a57ff_0a3f_4bd4_b4ea_37b0c469848f_

#ifndef _NTLDR_H_f6018b26_f2d3_44a1_b76f_f79cb5ff59dc_
#define _NTLDR_H_f6018b26_f2d3_44a1_b76f_f79cb5ff59dc_


	//
	// Private flags for loader data table entries
	//

#define LDRP_STATIC_LINK                0x00000002
#define LDRP_IMAGE_DLL                  0x00000004
#define LDRP_LOAD_IN_PROGRESS           0x00001000
#define LDRP_UNLOAD_IN_PROGRESS         0x00002000
#define LDRP_ENTRY_PROCESSED            0x00004000
#define LDRP_ENTRY_INSERTED             0x00008000
#define LDRP_CURRENT_LOAD               0x00010000
#define LDRP_FAILED_BUILTIN_LOAD        0x00020000
#define LDRP_DONT_CALL_FOR_THREADS      0x00040000
#define LDRP_PROCESS_ATTACH_CALLED      0x00080000
#define LDRP_DEBUG_SYMBOLS_LOADED       0x00100000
#define LDRP_IMAGE_NOT_AT_BASE          0x00200000
#define LDRP_COR_IMAGE                  0x00400000
#define LDRP_COR_OWNS_UNMAP             0x00800000
#define LDRP_SYSTEM_MAPPED              0x01000000
#define LDRP_IMAGE_VERIFYING            0x02000000
#define LDRP_DRIVER_DEPENDENT_DLL       0x04000000
#define LDRP_ENTRY_NATIVE               0x08000000
#define LDRP_REDIRECTED                 0x10000000
#define LDRP_NON_PAGED_DEBUG_INFO       0x20000000
#define LDRP_MM_LOADED                  0x40000000
#define LDRP_COMPAT_DATABASE_PROCESSED  0x80000000

	typedef struct _LDR_DATA_TABLE_ENTRY
	{
		/* +0x000 */ LIST_ENTRY     InLoadOrderLinks;
		/* +0x008 */ LIST_ENTRY     InMemoryOrderLinks;
		/* +0x010 */ LIST_ENTRY     InInitializationOrderLinks;
		/* +0x018 */ PVOID          DllBase;
		/* +0x01c */ PVOID          EntryPoint;
		/* +0x020 */ ULONG          SizeOfImage;
		/* +0x024 */ UNICODE_STRING FullDllName;
		/* +0x02c */ UNICODE_STRING BaseDllName;
		/* +0x034 */ ULONG          Flags;
		/* +0x038 */ USHORT         LoadCount;
		/* +0x03a */ USHORT         TlsIndex;

		union
		{
			/* +0x03c */    LIST_ENTRY     HashLinks;
			struct
			{
				/* +0x03c */        PVOID          SectionPointer;
				/* +0x040 */        ULONG          CheckSum;
			};
		};

		union
		{
			/* +0x044 */    ULONG          TimeDateStamp;
			/* +0x044 */    PVOID          LoadedImports;
		};

		/* +0x048 */ PVOID          EntryPointActivationContext;
		/* +0x04c */ PVOID          PatchInformation;
		/* +0x050 */ LIST_ENTRY     ForwarderLinks;
		/* +0x058 */ LIST_ENTRY     ServiceTagLinks;
		/* +0x060 */ LIST_ENTRY     StaticLinks;
		/* +0x068 */ PVOID          ContextInformation;
		/* +0x06c */ ULONG          OriginalBase;
		/* +0x070 */ LARGE_INTEGER  LoadTime;

#if CPP_DEFINED

		ForceInline _LDR_DATA_TABLE_ENTRY* NextLoadOrder()
		{
			return FIELD_BASE(this->InLoadOrderLinks.Flink, _LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);
		}

		ForceInline _LDR_DATA_TABLE_ENTRY* NextMemoryOrder()
		{
			return FIELD_BASE(this->InMemoryOrderLinks.Flink, _LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);
		}

		ForceInline _LDR_DATA_TABLE_ENTRY* NextInitializationOrder()
		{
			return FIELD_BASE(this->InInitializationOrderLinks.Flink, _LDR_DATA_TABLE_ENTRY, InInitializationOrderLinks);
		}

		ForceInline _LDR_DATA_TABLE_ENTRY* PrevLoadOrder()
		{
			return FIELD_BASE(this->InLoadOrderLinks.Blink, _LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);
		}

		ForceInline _LDR_DATA_TABLE_ENTRY* PrevMemoryOrder()
		{
			return FIELD_BASE(this->InMemoryOrderLinks.Blink, _LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);
		}

		ForceInline _LDR_DATA_TABLE_ENTRY* PrevInitializationOrder()
		{
			return FIELD_BASE(this->InInitializationOrderLinks.Blink, _LDR_DATA_TABLE_ENTRY, InInitializationOrderLinks);
		}

#endif // cpp

	} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;

	typedef const LDR_DATA_TABLE_ENTRY* PCLDR_DATA_TABLE_ENTRY;

	typedef LDR_DATA_TABLE_ENTRY LDR_MODULE;
	typedef PLDR_DATA_TABLE_ENTRY PLDR_MODULE;
	typedef PCLDR_DATA_TABLE_ENTRY PCLDR_MODULE;


	NATIVE_API
		VOID
		NTAPI
		LdrShutdownProcess(
		VOID
		);

	NATIVE_API
		VOID
		NTAPI
		LdrShutdownThread(
		VOID
		);

#define LDR_ADDREF_DLL_PIN 0x00000001

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrAddRefDll(
		ULONG Flags,
		PVOID DllHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrGetDllHandle(
		IN  PUSHORT         PathToFile OPTIONAL,
		IN  PULONG          DllCharacteristics OPTIONAL,
		IN  PUNICODE_STRING ModuleFileName,
		OUT PVOID*          DllHandle
		);


#define LDR_GET_DLL_HANDLE_EX_UNCHANGED_REFCOUNT 0x00000001
#define LDR_GET_DLL_HANDLE_EX_PIN 0x00000002

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrGetDllHandleEx(
		IN  ULONG           Flags,
		IN  PCWSTR          DllPath OPTIONAL,
		IN  PULONG          DllCharacteristics OPTIONAL,
		IN  PUNICODE_STRING DllName,
		OUT PVOID*          DllHandle OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrGetDllHandleByMapping(
		IN  PVOID   Base,
		OUT PVOID*  DllHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrGetDllHandleByName(
		IN  PUNICODE_STRING BaseDllName OPTIONAL,
		IN  PUNICODE_STRING FullDllName OPTIONAL,
		OUT PVOID*          DllHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrLoadDll(
		IN  PWSTR               PathToFile OPTIONAL,
		IN  PULONG              DllCharacteristics OPTIONAL,
		IN  PCUNICODE_STRING    ModuleFileName,
		OUT PVOID*              DllHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrUnloadDll(
		PVOID DllHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrGetProcedureAddress(
		IN  PVOID           DllHandle,
		IN  PANSI_STRING    ProcedureName OPTIONAL,
		IN  USHORT          ProcedureNumber OPTIONAL,
		OUT PVOID*          ProcedureAddress
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrDisableThreadCalloutsForDll(
		IN PVOID DllHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrFindEntryForAddress(
		IN  PVOID Address,
		OUT PLDR_DATA_TABLE_ENTRY *TableEntry
		);

	typedef struct _RTL_PROCESS_MODULE_INFORMATION
	{
		/* 0x000 */ HANDLE                              Section;
		/* 0x004 */ PVOID                               MappedBase;
		/* 0x008 */ PVOID                               ImageBase;
		/* 0x00C */ ULONG                               ImageSize;
		/* 0x010 */ ULONG                               Flags;
		/* 0x014 */ USHORT                              LoadOrderIndex;
		/* 0x016 */ USHORT                              InitOrderIndex;
		/* 0x018 */ USHORT                              LoadCount;
		/* 0x01A */ USHORT                              OffsetToFileName;
		/* 0x01C */ UCHAR                               FullPathName[MAXIMUM_FILENAME_LENGTH];

	} RTL_PROCESS_MODULE_INFORMATION, *PRTL_PROCESS_MODULE_INFORMATION;

	typedef struct _RTL_PROCESS_MODULES
	{
		/* 0x000 */ ULONG                               NumberOfModules;
		/* 0x004 */ RTL_PROCESS_MODULE_INFORMATION      Modules[1];

	} RTL_PROCESS_MODULES, *PRTL_PROCESS_MODULES;

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrQueryProcessModuleInformation(
		OUT PRTL_PROCESS_MODULES    ModuleInformation,
		IN  ULONG                   ModuleInformationLength,
		OUT PULONG                  ReturnLength OPTIONAL
		);


	typedef
		VOID
		(NTAPI
		*PLDR_LOADED_MODULE_ENUMERATION_CALLBACK_FUNCTION)(
		IN PCLDR_DATA_TABLE_ENTRY   DataTableEntry,
		IN PVOID                    Context,
		IN OUT PBOOLEAN             StopEnumeration
		);

	NTSYSAPI
		NTSTATUS
		NTAPI
		LdrEnumerateLoadedModules(
		IN ULONG Flags,
		IN PLDR_LOADED_MODULE_ENUMERATION_CALLBACK_FUNCTION CallbackFunction,
		IN PVOID Context
		);


#define LDR_RESOURCE_ID_NAME_MASK   ((~(ULONG_PTR)0) << 16) /* lower 16bits clear */
#define LDR_RESOURCE_ID_NAME_MINVAL (( (ULONG_PTR)1) << 16) /* 17th bit set */

	//
	// These are how you currently pass the flag to FindResource.
	//
	// VIEW_TO_DATAFILE and DATAFILE_TO_VIEW are idempotent,
	// so you can covert a datafile to a datafile with VIEW_TO_DATAFILE.
	// Think of better names therefore..
	//
#define LDR_VIEW_TO_DATAFILE(x) ((PVOID)(((ULONG_PTR)(x)) |  (ULONG_PTR)1))
#define LDR_IS_DATAFILE(x)              (((ULONG_PTR)(x)) &  (ULONG_PTR)1)
#define LDR_IS_VIEW(x)                  (!LDR_IS_DATAFILE(x))
#define LDR_DATAFILE_TO_VIEW(x) ((PVOID)(((ULONG_PTR)(x)) & ~(ULONG_PTR)1))

	//
	// These functions work on ULONG, ULONG_PTR, ULONG64, etc.
	// They do not work on pointers.
	//
#define LDR_VIEW_TO_DATAFILE_INTEGER(x) ((x) | 1)
#define LDR_IS_DATAFILE_INTEGER(x)      (((x) & 1) == 1)
#define LDR_IS_VIEW_INTEGER(x)          (((x) & 1) == 0)
#define LDR_DATAFILE_TO_VIEW_INTEGER(x) ((x) - ((x) & 1))


	//
	// These are flags to a function that doesn't yet exist:
	//    LdrpSearchResourceSectionEx and/or LdrpSearchOutOfProcessResourceSection
	//
#define LDRP_FIND_RESOURCE_DATA                 (0x00000000)
#define LDRP_FIND_RESOURCE_DIRECTORY            (0x00000002)

	//
	// Flags to LdrFindResourceEx/LdrpSearchResourceSection/LdrFindOutOfProcessResource.
	//
#define LDR_FIND_RESOURCE_LANGUAGE_CAN_FALLBACK            (0x00000000)
#define LDR_FIND_RESOURCE_LANGUAGE_EXACT                   (0x00000004)
#define LDR_FIND_RESOURCE_LANGUAGE_REDIRECT_VERSION        (0x00000008)

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrFindResourceDirectory_U(
		IN PVOID                        DllHandle,
		IN CONST ULONG_PTR*             ResourceIdPath,
		IN ULONG                        ResourceIdPathLength,
		OUT PIMAGE_RESOURCE_DIRECTORY*  ResourceDirectory
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrFindResource_U(
		IN  PVOID                       DllHandle,
		IN  PULONG_PTR                  ResourceIdPath,
		IN  ULONG                       ResourceIdPathLength,
		OUT PIMAGE_RESOURCE_DATA_ENTRY* ResourceDataEntry
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrFindResourceEx_U(
		IN  ULONG                       Flags,
		IN  PVOID                       DllHandle,
		IN  PULONG_PTR                  ResourceIdPath,
		IN  ULONG                       ResourceIdPathLength,
		OUT PIMAGE_RESOURCE_DATA_ENTRY* ResourceDataEntry
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrResSearchResource(
		IN  PVOID       DllHandle,
		IN  PULONG_PTR  ResourceIdPath,
		IN  ULONG       ResourceIdPathLength,
		IN  ULONG       Flags,
		OUT PVOID*      Resource,
		OUT PULONG      Size,
		PVOID       Reserve1,
		PVOID       Reserve2
		);

	// type, id/name, langid
#define LDR_MAXIMUM_RESOURCE_PATH_DEPTH (3)

	typedef struct _LDR_ENUM_RESOURCE_ENTRY {
		union {
			ULONG_PTR NameOrId;
			PIMAGE_RESOURCE_DIRECTORY_STRING Name;
			struct {
				USHORT Id;
				USHORT NameIsPresent;
			};
		} Path[LDR_MAXIMUM_RESOURCE_PATH_DEPTH];
		PVOID Data;
		ULONG Size;
		ULONG Reserved;
	} LDR_ENUM_RESOURCE_ENTRY, *PLDR_ENUM_RESOURCE_ENTRY;

	NTSYSAPI
		NTSTATUS
		NTAPI
		LdrEnumResources(
		IN PVOID                        DllHandle,
		IN PULONG_PTR                   ResourceIdPath,
		IN ULONG                        ResourceIdPathLength,
		IN OUT PULONG                   NumberOfResources,
		OUT PLDR_ENUM_RESOURCE_ENTRY    Resources OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrAccessResource(
		IN  PVOID                       DllHandle,
		IN  PIMAGE_RESOURCE_DATA_ENTRY  ResourceDataEntry,
		OUT PVOID*                      Address OPTIONAL,
		OUT PULONG                      Size OPTIONAL
		);

	typedef struct _LDR_DLL_LOADED_NOTIFICATION_DATA {
		ULONG               Flags;          // Reserved.
		PCUNICODE_STRING    FullDllName;    // The full path name of the DLL module.
		PCUNICODE_STRING    BaseDllName;    // The base file name of the DLL module.
		PVOID               DllBase;        // A pointer to the base address for the DLL in memory.
		ULONG               SizeOfImage;    // The size of the DLL image, in bytes.
	} LDR_DLL_LOADED_NOTIFICATION_DATA, *PLDR_DLL_LOADED_NOTIFICATION_DATA;

	typedef struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA {
		ULONG               Flags;          // Reserved.
		PCUNICODE_STRING    FullDllName;    // The full path name of the DLL module.
		PCUNICODE_STRING    BaseDllName;    // The base file name of the DLL module.
		PVOID               DllBase;        // A pointer to the base address for the DLL in memory.
		ULONG               SizeOfImage;    // The size of the DLL image, in bytes.
	} LDR_DLL_UNLOADED_NOTIFICATION_DATA, *PLDR_DLL_UNLOADED_NOTIFICATION_DATA;

	typedef union _LDR_DLL_NOTIFICATION_DATA {
		LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
		LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
	} LDR_DLL_NOTIFICATION_DATA, *PLDR_DLL_NOTIFICATION_DATA;

	typedef const LDR_DLL_NOTIFICATION_DATA* PCLDR_DLL_NOTIFICATION_DATA;

#define LDR_DLL_NOTIFICATION_REASON_LOADED      1
#define LDR_DLL_NOTIFICATION_REASON_UNLOADED    2

	typedef
		VOID
		(NTAPI
		*PLDR_DLL_NOTIFICATION_FUNCTION)(
		IN  ULONG                       NotificationReason,
		IN  PCLDR_DLL_NOTIFICATION_DATA NotificationData,
		IN  PVOID                       Context OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrRegisterDllNotification(
		IN  ULONG                           Flags,
		IN  PLDR_DLL_NOTIFICATION_FUNCTION  NotificationFunction,
		IN  PVOID                           Context OPTIONAL,
		OUT PVOID*                          Cookie
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrUnregisterDllNotification(
		IN PVOID Cookie
		);

#define LDR_LOCK_LOADER_LOCK_FLAG_RAISE_ON_ERRORS               (0x00000001)
#define LDR_LOCK_LOADER_LOCK_FLAG_TRY_ONLY                      (0x00000002)

#define LDR_LOCK_LOADER_LOCK_DISPOSITION_INVALID                (0)
#define LDR_LOCK_LOADER_LOCK_DISPOSITION_LOCK_ACQUIRED          (1)
#define LDR_LOCK_LOADER_LOCK_DISPOSITION_LOCK_NOT_ACQUIRED      (2)

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrLockLoaderLock(
		IN  ULONG   Flags,
		OUT PULONG  Disposition OPTIONAL,
		OUT PVOID*  Cookie
		);

#define LDR_UNLOCK_LOADER_LOCK_FLAG_RAISE_ON_ERRORS             (0x00000001)

	NATIVE_API
		NTSTATUS
		NTAPI
		LdrUnlockLoaderLock(
		IN      ULONG Flags,
		IN OUT  PVOID Cookie
		);

	/************************************************************************
	ml C interface
	************************************************************************/
	PIMAGE_RESOURCE_DATA_ENTRY
		Nt_FindResource(
		PVOID   Module,
		PCWSTR  Name,
		PCWSTR  Type
		);

	PVOID
		Nt_LoadResource(
		PVOID                       Module,
		PIMAGE_RESOURCE_DATA_ENTRY  ResourceDataEntry,
		PULONG                      DEF_VAL(Size, NULL)
		);

#endif // _NTLDR_H_f6018b26_f2d3_44a1_b76f_f79cb5ff59dc_

	typedef
		SHIM_HOOK_API_INFO*
		(STDCALL
		*GetHookAPIsRoutine)(
		IN  PCWSTR ShimCommandLine,
		IN  PCWSTR CompatibilityFixName,
		OUT PULONG HookApiCount
		);

	typedef
		VOID
		(STDCALL
		*NotifyShimsRoutine)(
		IN SHIM_NOTIFY_REASON   Reason,
		IN PLDR_MODULE          LoadedDll
		);

	typedef struct
	{
		WCHAR ShimEngineFullPath[MAX_PATH];
		ULONG SizeOfData;
		ULONG Magic;        // 0xAC0DEDAB

	} SHIM_ENGINE_DATA, *PSHIM_ENGINE_DATA;

	/*++

	if return success, load LayerDll

	--*/

	typedef
		NTSTATUS
		(STDCALL
		*SE_InitializeEngine)(
		PUNICODE_STRING     LayerDll,
		PUNICODE_STRING     ExeFullPath,
		PSHIM_ENGINE_DATA   ShimData
		);


	/*++

	call before invoke dll EntryPoint
	return value seems be ignored
	must export

	--*/

	typedef
		BOOLEAN
		(STDCALL
		*SE_InstallBeforeInitRoutine)(
		PUNICODE_STRING     ModuleLoading,
		PSHIM_ENGINE_DATA   ShimData
		);


	/*++

	call after invoke dll EntryPoint
	return FALSE will be unloaded
	must export

	--*/

	typedef
		BOOLEAN
		(STDCALL
		*SE_InstallAfterInitRoutine)(
		PUNICODE_STRING     ModuleLoading,
		PSHIM_ENGINE_DATA   ShimData
		);


	typedef
		VOID
		(STDCALL
		*SE_ShimDllLoaded)(
		PVOID DllHandle
		);

	/*++

	invoke before LdrpCallInitRoutine
	must export

	--*/

	typedef
		VOID
		(STDCALL
		*SE_DllLoadedRoutine)(
		PLDR_DATA_TABLE_ENTRY DllLoaded
		);

	/*++

	invoke before NtUnmapViewOfSection and after decrement LoadCount
	must export

	--*/

	typedef
		VOID
		(STDCALL
		*SE_DllUnloadedRoutine)(
		PLDR_DATA_TABLE_ENTRY DllUnLoading
		);

	/*++

	must export

	--*/

	typedef
		VOID
		(STDCALL
		*SE_ProcessDyingRoutine)(
		VOID
		);

	typedef
		VOID
		(STDCALL
		*SE_LdrEntryRemovedRoutine)(
		PLDR_DATA_TABLE_ENTRY EntryRemoving
		);

	/*++

	call when first LdrGetProcedureAddressEx invoked

	--*/

	typedef
		VOID
		(STDCALL
		*SE_GetProcAddressLoadRoutine)(
		PLDR_DATA_TABLE_ENTRY LdrEntryLinks
		);

	NATIVE_API
		BOOL
		NTAPI
		LdrInitShimEngineDynamic(
		PVOID ShimEngineModule
		);

#endif // _NTSHIMENGINE_H_089a57ff_0a3f_4bd4_b4ea_37b0c469848f_
#ifndef _NTSTRING_H_9bfab99e_9722_48ad_9a23_53edcb64be76_
#define _NTSTRING_H_9bfab99e_9722_48ad_9a23_53edcb64be76_

#ifndef _STRINGHELPER_H_4eabe4cb_a327_45e5_9b83_14061dceb3c6
#define _STRINGHELPER_H_4eabe4cb_a327_45e5_9b83_14061dceb3c6

	//#include "Algorithm.h"
#ifndef _KMP_H_56576ff0_9962_4584_aa21_3e68ef01d6ff_
#define _KMP_H_56576ff0_9962_4584_aa21_3e68ef01d6ff_


	_ML_C_HEAD_

		/************************************************************************/
		/* KMP                                                                  */
		/************************************************************************/
		inline Long_Ptr InitNext(const Void *lpKeyWord, Long_Ptr KeyWordLen, PLong_Ptr piNext)
	{
		Long_Ptr i, j;
		const Char *pDest;

		pDest = (const Char *)lpKeyWord;

		piNext[0] = -1;
		i = 0;
		j = (Long_Ptr)-1;

		while (i < KeyWordLen)
		{
			if (j == -1 || pDest[i] == pDest[j])
			{
				if (pDest[++i] != pDest[++j])
				{
					piNext[i] = j;
				}
				else
				{
					piNext[i] = piNext[j];
				}
			}
			else
			{
				j = piNext[j];
			}
		}

		return KeyWordLen;
	}

	inline PVoid KMP(PCVoid _Src, Long_Ptr SrcLength, PCVoid _KeyWord, Long_Ptr KeyWordLen)
	{
		Long_Ptr i, j;
		PLong_Ptr  Next;//[100];
		PLong_Ptr pNext;
		const Char *pSrc, *pKeyWord;

		if (SrcLength == 0)
			return nullptr;

		Next = (PLong_Ptr)AllocStack((KeyWordLen + 1) * sizeof(*pNext));
		pNext = Next;
		pSrc = (const Char *)_Src;
		pKeyWord = (const Char *)_KeyWord;
		InitNext(_KeyWord, KeyWordLen, pNext);
		i = 0;
		j = 0;
		while (i != SrcLength && j != KeyWordLen)
		{
			if (j == -1 || pSrc[i] == pKeyWord[j])
			{
				++i;
				++j;
			}
			else
			{
				j = pNext[j];
			}
		}

		if (i == SrcLength && j != KeyWordLen)
			return nullptr;

		return (Void *)(pSrc + i - KeyWordLen);
	}

	_ML_C_TAIL_

#endif // _KMP_H_56576ff0_9962_4584_aa21_3e68ef01d6ff_
#include <stdarg.h>

#pragma warning(disable:4127)

		_ML_C_HEAD_

		PChar                StringLowerA(PChar pszString, ULong DEF_VAL(Length, -1));
	PWChar               StringLowerW(PWChar pszString, ULong DEF_VAL(Length, -1));
	PChar                StringUpperA(PChar pszString, ULong DEF_VAL(Length, -1));
	PWChar               StringUpperW(PWChar pszString, ULong DEF_VAL(Length, -1));
	Long_Ptr    FASTCALL StrLengthA(PCChar pString);
	Long_Ptr    FASTCALL SSE2_StrLengthA(PCChar pString);
	Long_Ptr    FASTCALL StrLengthW(PCWChar pString);
	PChar       FASTCALL StrCopyA(PChar DestinationString, PCChar SourceString);
	PWChar      FASTCALL StrCopyW(PWChar DestinationString, PCWChar SourceString);
	PChar       FASTCALL StrConcatenateA(PChar DestinationString, PCChar SourceString);
	PWChar      FASTCALL StrConcatenateW(PWChar DestinationString, PCWChar SourceString);
	Long_Ptr    FASTCALL StrNCompareA(PCChar pString1, PCChar pString2, SizeT LengthToCompare);

	PChar   FASTCALL findexta(PCChar lpFileName);
	PWChar  FASTCALL findextw(PCWChar lpFileName);
	PChar   FASTCALL findnamea(PCChar lpFileName);
	PWChar  FASTCALL findnamew(PCWChar lpFileName, SizeT DEF_VAL(Length, -1));
	PWChar           StrFindCharW(PCWChar lpString, WChar CharMatch);
	PWChar           StrFindLastCharW(PCWChar lpString, WChar CharMatch);
	PWChar           PeekLineW(PVoid pBuffer, PVoid pEndOfBuffer, PVoid pOutBuffer, PSizeT pcbOutBuffer);

	inline PTChar StrCopy(LPVoid DestinationString, LPCVoid SourceString)
	{
		return sizeof(*(PTChar)SourceString) == sizeof(Char) ? (PTChar)StrCopyA((PChar)DestinationString, (PCChar)SourceString) : (PTChar)StrCopyW((PWChar)DestinationString, (PCWChar)SourceString);
	}

	inline PTChar findext(LPVoid lpFileName)
	{
		return sizeof(*(PTChar)lpFileName) == sizeof(Char) ? (PTChar)findexta((PCChar)lpFileName) : (PTChar)findextw((PCWChar)lpFileName);
	}

	inline PTChar findname(PCTChar lpFileName)
	{
		return sizeof(*(PTChar)lpFileName) == 1 ? (PTChar)findnamea((PCChar)lpFileName) : (PTChar)findnamew((PCWChar)lpFileName, ULONG_PTR_MAX);
	}

	inline PChar FASTCALL rmexta(PChar pszPath)
	{
		*findexta(pszPath) = 0;
		return pszPath;
	}

	inline PWChar FASTCALL rmextw(PWChar pszPath)
	{
		*findextw(pszPath) = 0;
		return pszPath;
	}

	inline PTChar FASTCALL rmext(PTChar pszPath)
	{
		if (sizeof(*pszPath) == sizeof(Char))
			return (PTChar)rmexta((PChar)pszPath);
		else
			return (PTChar)rmextw((PWChar)pszPath);
	}

	inline Void FASTCALL chext(Char *szFileName, Char *pExt)
	{
		StrCopyA(findexta(szFileName), pExt);
	}

	inline Void FASTCALL chextw(WChar *szFileName, WChar *pExt)
	{
		StrCopyW(findextw(szFileName), pExt);
	}

	inline PChar FASTCALL rmname(PChar pszPath)
	{
		*findnamea(pszPath) = 0;
		return pszPath;
	}

	inline PWChar FASTCALL rmnamew(PWChar pszPath)
	{
		*findnamew(pszPath, ULONG_PTR_MAX) = 0;
		return pszPath;
	}

	inline Long_Ptr FASTCALL StrLength(PCTChar pString)
	{
		if (sizeof(TChar) == sizeof(Char))
			return StrLengthA((PCChar)pString);
		else
			return StrLengthW((PCWChar)pString);
	}

	enum
	{
		StrCmp_Keep,
		StrCmp_ToLower,
		StrCmp_ToUpper,
	};

	Long_Ptr FASTCALL StrNICompareA(PCChar pString1, PCChar pString2, SizeT LengthToCompare, LongPtr DEF_VAL(CaseConvertTo, StrCmp_Keep));

	inline Long_Ptr FASTCALL StrICompareA(PCChar pString1, PCChar pString2, LongPtr DEF_VAL(CaseConvertTo, StrCmp_Keep))
	{
		return StrNICompareA(pString1, pString2, (SizeT)~0ull, CaseConvertTo);
	}

	Long_Ptr FASTCALL StrNICompareW(PCWChar pString1, PCWChar pString2, SizeT LengthToCompare, LongPtr DEF_VAL(CaseConvertTo, StrCmp_Keep));

	inline Long_Ptr FASTCALL StrICompareW(PCWChar pString1, PCWChar pString2, LongPtr DEF_VAL(CaseConvertTo, StrCmp_Keep))
	{
		return StrNICompareW(pString1, pString2, (SizeT)-1, CaseConvertTo);
	}

	inline Long_Ptr FASTCALL StrNICompare(PCTChar pString1, PCTChar pString2, SizeT LengthToCompare, LongPtr DEF_VAL(CaseConvertTo, StrCmp_Keep))
	{
		if (sizeof(*pString1) == sizeof(Char))
		{
			return StrNICompareA((PCChar)pString1, (PCChar)pString2, LengthToCompare, CaseConvertTo);
		}
		else if (sizeof(*pString1) == sizeof(WChar))
		{
			return StrNICompareW((PCWChar)pString1, (PCWChar)pString2, LengthToCompare, CaseConvertTo);
		}

		return 0;
	}

	inline Long_Ptr FASTCALL StrICompare(PCTChar pString1, PCTChar pString2)
	{
		return StrNICompare(pString1, pString2, (SizeT)-1, StrCmp_Keep);
	}

	inline Long_Ptr FASTCALL StrCompareA(PCChar pString1, PCChar pString2)
	{
		return StrNCompareA(pString1, pString2, (SizeT)-1);
	}

	Long_Ptr FASTCALL StrNCompareW(PCWChar pString1, PCWChar pString2, SizeT LengthToCompare);

	inline Long_Ptr FASTCALL StrCompareW(PCWChar pString1, PCWChar pString2)
	{
		return StrNCompareW(pString1, pString2, (SizeT)-1);
	}

	inline Long_Ptr FASTCALL StrNCompare(PCTChar pString1, PCTChar pString2, SizeT LengthToCompare)
	{
		if (sizeof(*pString1) == sizeof(Char))
		{
			return StrNCompareA((PCChar)pString1, (PCChar)pString2, LengthToCompare);
		}
		else if (sizeof(*pString1) == sizeof(WChar))
		{
			return StrNCompareW((PCWChar)pString1, (PCWChar)pString2, LengthToCompare);
		}

		return 0;
	}

	inline Long_Ptr FASTCALL StrCompare(PCTChar pString1, PCTChar pString2)
	{
		return StrNCompare(pString1, pString2, (SizeT)-1);
	}

	inline PChar SubStrA(const Char *_Src, const Char *_Sub)
	{
		return (Char *)KMP(_Src, StrLengthA(_Src), _Sub, StrLengthA(_Sub));
	}

	inline PWChar SubStrW(const WChar *_Src, const WChar *_Sub)
	{
		return (PWChar)KMP(_Src, StrLengthW(_Src) * sizeof(WChar), _Sub, StrLengthW(_Sub) * sizeof(WChar));
	}



	Int32 StringToInt32A(PCChar pszString);
	Int32 StringToInt32W(PCWChar pszString);

	inline Int32 StringToInt32(PCTChar pszString)
	{
		if (sizeof(*pszString) == sizeof(Char))
			return StringToInt32A((PChar)pszString);
		else
			return StringToInt32W((PWChar)pszString);
	}

	Int32 StringToInt32HexW(PCWChar pszString);
	Int64 StringToInt64HexW(PCWChar pszString);
	Int64 StringToInt64A(PChar pszString);
	Int64 StringToInt64W(PCWChar pszString);

	inline Int64 StringToInt64(PTChar pszString)
	{
		if (sizeof(TChar) == sizeof(Char))
			return StringToInt64A((PChar)pszString);
		else if (sizeof(TChar) == sizeof(WChar))
			return StringToInt64W((PWChar)pszString);

		return 0;
	}

	Bool IsShiftJISChar(SizeT uChar);
	Bool IsShiftJISString(PCChar pString, SizeT Length);

	inline int GetFormatedSize(PCWSTR Format, ...)
	{
		return _vscwprintf(Format, (va_list)((PVOID *)&Format + 1));
	}

	Int FormatStringA(PChar  pszBuffer, PCChar  pszFormat, ...);
	Int FormatStringW(PWChar pszBuffer, PCWChar pszFormat, ...);
	Int FormatStringvA(PChar  pszBuffer, PCChar  pszFormat, va_list args);
	Int FormatStringvW(PWChar pszBuffer, PCWChar pszFormat, va_list args);
	Int FormatStringvnA(PChar  pszBuffer, UInt    cchLimitIn, PCChar  pszFormat, va_list args);
	Int FormatStringvnW(PWChar pszBuffer, UInt    cchLimitIn, PCWChar pszFormat, va_list args);

	// reactos\dll\win32\shlwapi\wsprintf.c

#define FMTSTR_FLAG_LEFTALIGN   0x00000001  /* Align output on the left ('-' prefix) */
#define FMTSTR_FLAG_PREFIX_HEX  0x00000002  /* Prefix hex with 0x ('#' prefix) */
#define FMTSTR_FLAG_ZEROPAD     0x00000004  /* Pad with zeros ('0' prefix) */
#define FMTSTR_FLAG_LONG        0x00000008  /* Long arg ('l' prefix) */
#define FMTSTR_FLAG_SHORT       0x00000010  /* Short arg ('h' prefix) */
#define FMTSTR_FLAG_UPPER_HEX   0x00000020  /* Upper-case hex ('X' specifier) */
#define FMTSTR_FLAG_WIDE        0x00000040  /* Wide arg ('w' prefix) */
#define FMTSTR_FLAG_FORCESIGNED 0x00000080  /* Force signed ('+' prefix) */
#define FMTSTR_FLAG_I64         0x00000100  /* 64 bit version ("%I64" prefix) */

	typedef enum
	{
		FMTSTR_FORMAT_UNKNOWN,
		FMTSTR_FORMAT_CHAR,
		FMTSTR_FORMAT_WCHAR,
		FMTSTR_FORMAT_STRING,
		FMTSTR_FORMAT_WSTRING,
		FMTSTR_FORMAT_SIGNED,
		FMTSTR_FORMAT_UNSIGNED,
		FMTSTR_FORMAT_HEXA,
		FMTSTR_FORMAT_FLOAT,

#if MY_OS_WIN32
		FMTSTR_FORMAT_BINARY,
#endif
	} FMTSTR_TYPE;

	typedef struct
	{
		UInt        flags;
		UInt        width;
		UInt        precision;
		FMTSTR_TYPE type;
	} FMTSTR_FORMAT;

	typedef union
	{
		WChar   wchar_view;
		Char    char_view;
		PCChar  lpcstr_view;
		PCWChar lpcwstr_view;
		Int     int_view;
		Int64   int64_view;
	} FMTSTR_DATA;

	Bool
		StrMatchExpression(
		IN PWChar   Expression,
		IN PWChar   Name,
		IN Bool     DEF_VAL(IgnoreCase, TRUE),
		IN PWChar   DEF_VAL(UpcaseTable, NULL) OPTIONAL
		);

	_ML_C_TAIL_

#if CPP_DEFINED

#endif // CPP_DEFINED

#pragma warning(default:4127)

#endif // _STRINGHELPER_H_4eabe4cb_a327_45e5_9b83_14061dceb3c6

#ifndef _NTIFS1_

		NATIVE_API
		NTSTATUS
		NTAPI
		RtlValidateUnicodeString(
		IN  ULONG Flags RESERVED,
		IN  PCUNICODE_STRING String
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlCreateUnicodeString(
		OUT PUNICODE_STRING DestinationString,
		IN  PCWSTR          SourceString
		);

	NATIVE_API
		VOID
		NTAPI
		RtlFreeAnsiString(
		PANSI_STRING AnsiString
		);

	NATIVE_API
		VOID
		NTAPI
		RtlFreeUnicodeString(
		PUNICODE_STRING UnicodeString
		);

	NATIVE_API
		VOID
		NTAPI
		RtlCopyUnicodeString(
		PUNICODE_STRING DestinationString,
		PCUNICODE_STRING SourceString
		);

#define RTL_DUPLICATE_UNICODE_STRING_NULL_TERMINATE             (0x00000001)
#define RTL_DUPLICATE_UNICODE_STRING_ALLOCATE_NULL_STRING       (0x00000002)
#define RTL_DUPSTR_ADD_NULL                                     RTL_DUPLICATE_UNICODE_STRING_NULL_TERMINATE
#define RTL_DUPSTR_ALLOC_NULL                                   RTL_DUPLICATE_UNICODE_STRING_ALLOCATE_NULL_STRING

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlDuplicateUnicodeString(
		ULONG               Flags,
		PCUNICODE_STRING    SourceUnicodeString,
		PUNICODE_STRING     DestinationUnicodeString
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlEqualUnicodeString(
		IN  PCUNICODE_STRING    String1,
		IN  PCUNICODE_STRING    String2,
		IN  BOOLEAN             CaseInSensitive
		);

	NATIVE_API
		LONG
		NTAPI
		RtlCompareUnicodeString(
		PCUNICODE_STRING    String1,
		PCUNICODE_STRING    String2,
		BOOLEAN             CaseInSensitive
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUpcaseUnicodeString(
		IN OUT  PUNICODE_STRING     DestinationString,
		IN      PCUNICODE_STRING    SourceString,
		IN      BOOLEAN             AllocateDestinationString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlDowncaseUnicodeString(
		IN OUT  PUNICODE_STRING     DestinationString,
		IN      PCUNICODE_STRING    SourceString,
		IN      BOOLEAN             AllocateDestinationString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlAppendUnicodeToString(
		IN OUT  PUNICODE_STRING Destination,
		IN      PCWSTR          Source
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlAppendUnicodeStringToString(
		IN OUT  PUNICODE_STRING     Destination,
		IN      PCUNICODE_STRING    Source
		);

	NATIVE_API
		PWSTR
		NTAPI
		RtlFindUnicodeSubstring(
		IN PUNICODE_STRING Source,
		IN PUNICODE_STRING Substring
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlMultiAppendUnicodeStringBuffer(
		IN OUT  PUNICODE_STRING Destination,
		IN      ULONG_PTR       NumberOfStringBuffer,
		IN      PWSTR*          StringBuffers
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlStringFromGUID(
		IN  REFGUID Guid,
		OUT PUNICODE_STRING GuidString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlIntegerToUnicodeString(
		IN      ULONG           Value,
		IN      ULONG           Base OPTIONAL,
		IN OUT  PUNICODE_STRING String
		);


#if !ML_KERNEL_MODE

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlGUIDFromString(
		IN  PUNICODE_STRING GuidString,
		OUT REFGUID Guid
		);

#define HASH_STRING_ALGORITHM_DEFAULT   (0u)
#define HASH_STRING_ALGORITHM_X65599    (1u)
#define HASH_STRING_ALGORITHM_INVALID   (~0ull)

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlHashUnicodeString(
		IN  PCUNICODE_STRING    String,
		IN  BOOLEAN             CaseInSensitive,
		IN  ULONG               HashAlgorithm,
		OUT PULONG              HashValue
		);

	NATIVE_API
		VOID
		NTAPI
		RtlInitAnsiString(
		IN OUT  PANSI_STRING    DestinationString,
		IN      LPCSTR          SourceString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlInitAnsiStringEx(
		IN OUT  PANSI_STRING    DestinationString,
		IN      LPCSTR          SourceString
		);

	NATIVE_API
		VOID
		NTAPI
		RtlInitUnicodeString(
		IN OUT  PUNICODE_STRING DestinationString,
		IN      LPCWSTR         SourceString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlInitUnicodeStringEx(
		IN OUT  PUNICODE_STRING DestinationString,
		IN      LPCWSTR         SourceString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlAnsiStringToUnicodeString(
		IN OUT  PUNICODE_STRING DestinationString,
		IN      PANSI_STRING    SourceString,
		IN      BOOLEAN         AllocateDestinationString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUnicodeStringToAnsiString(
		IN OUT  PANSI_STRING    DestinationString,
		IN      PUNICODE_STRING SourceString,
		IN      BOOLEAN         AllocateDestinationString
		);

	NATIVE_API
		VOID
		NTAPI
		RtlRunEncodeUnicodeString(
		IN OUT  PUCHAR          Seed,
		IN      PUNICODE_STRING String
		);

	NATIVE_API
		VOID
		NTAPI
		RtlRunDecodeUnicodeString(
		IN UCHAR            Seed,
		IN PUNICODE_STRING  String
		);


	NATIVE_API ULONG   NlsAnsiCodePage;
	NATIVE_API BOOLEAN NlsMbCodePageTag;

	FORCEINLINE
		VOID
		RtlInitEmptyAnsiString(
		OUT PANSI_STRING    AnsiString,
		IN  PCSTR           Buffer,
		IN  ULONG_PTR       BufferSize
		)
	{
		AnsiString->Length = 0;
		AnsiString->MaximumLength = (USHORT)BufferSize;
		AnsiString->Buffer = (PSTR)Buffer;
	}

	FORCEINLINE
		VOID
		RtlInitEmptyUnicodeString(
		OUT PUNICODE_STRING UnicodeString,
		IN  PCWSTR          Buffer,
		IN  ULONG_PTR       BufferSize
		)
	{
		UnicodeString->Length = 0;
		UnicodeString->MaximumLength = (USHORT)BufferSize;
		UnicodeString->Buffer = (PWSTR)Buffer;
	}

#endif // ML_KERNEL_MODE

#endif // _NTIFS_

#if CPP_DEFINED

	EXTCPP
		template<typename StringType>
	inline
		VOID
		RtlInitEmptyString(
		OUT StringType*     String,
		IN  PCWSTR          Buffer = nullptr,
		IN  ULONG_PTR       BufferSize = 0
		)
	{
		String->Length = 0;
		String->MaximumLength = (USHORT)BufferSize;
		String->Buffer = (PWSTR)Buffer;
	}

#endif // cpp

	inline
		NTSTATUS
		RtlSetUnicodeString(
		PUNICODE_STRING UnicodeString,
		PCWSTR          String,
		ULONG_PTR       DEF_VAL(Length, -1)
		)
	{
		if (UnicodeString == nullptr)
			return STATUS_INVALID_PARAMETER;

		if (String == nullptr)
		{
			RtlFreeUnicodeString(UnicodeString);
			return STATUS_SUCCESS;
		}

		if (UnicodeString->Buffer == nullptr)
		{
			return RtlCreateUnicodeString(UnicodeString, String) ? STATUS_SUCCESS : STATUS_NO_MEMORY;
		}

		if (String == nullptr)
		{
			UnicodeString->Buffer[0] = 0;
			UnicodeString->Length = 0;

			return STATUS_SUCCESS;
		}

		if (Length == -1)
			Length = StrLengthW(String) * sizeof(WCHAR);

		if (Length < UnicodeString->MaximumLength)
		{
			UnicodeString->Length = (USHORT)Length;
			CopyMemory(UnicodeString->Buffer, String, Length);
			UnicodeString->Buffer[Length / sizeof(WCHAR)] = 0;

			return STATUS_SUCCESS;
		}

		RtlFreeUnicodeString(UnicodeString);
		return RtlCreateUnicodeString(UnicodeString, String) ? STATUS_SUCCESS : STATUS_NO_MEMORY;
	}

#endif // _NTSTRING_H_9bfab99e_9722_48ad_9a23_53edcb64be76_
#ifndef _NTSYNC_H_a657b25f_ed76_4374_b4b4_c0281e592892_
#define _NTSYNC_H_a657b25f_ed76_4374_b4b4_c0281e592892_


#ifndef EVENT_QUERY_STATE
#define EVENT_QUERY_STATE       0x0001
#endif // EVENT_QUERY_STATE

#ifndef EVENT_MODIFY_STATE
#define EVENT_MODIFY_STATE       0x0002
#endif // EVENT_MODIFY_STATE

	//
	// Event type
	//

	typedef enum _EVENT_INFORMATION_CLASS
	{
		EventBasicInformation,

	} EVENT_INFORMATION_CLASS;

	typedef struct _EVENT_BASIC_INFORMATION
	{
		EVENT_TYPE  EventType;
		LONG        EventState;
	} EVENT_BASIC_INFORMATION, *PEVENT_BASIC_INFORMATION;

	typedef enum _MUTANT_INFORMATION_CLASS
	{
		MutantBasicInformation,
		MutantOwnerInformation,

	} MUTANT_INFORMATION_CLASS;

	typedef struct _MUTANT_BASIC_INFORMATION
	{
		LONG    CurrentCount;
		BOOLEAN OwnedByCaller;
		BOOLEAN AbandonedState;

	} MUTANT_BASIC_INFORMATION, *PMUTANT_BASIC_INFORMATION;

	typedef struct _MUTANT_OWNER_INFORMATION
	{
		CLIENT_ID ClientId;
	} MUTANT_OWNER_INFORMATION, *PMUTANT_OWNER_INFORMATION;


	typedef enum _SEMAPHORE_INFORMATION_CLASS
	{
		SemaphoreBasicInformation
	} SEMAPHORE_INFORMATION_CLASS;

	typedef struct _SEMAPHORE_BASIC_INFORMATION
	{
		LONG CurrentCount;
		LONG MaximumCount;

	} SEMAPHORE_BASIC_INFORMATION, *PSEMAPHORE_BASIC_INFORMATION;

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateKeyedEvent(
		OUT PHANDLE             KeyedEventHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  ULONG               Reserved
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenKeyedEvent(
		OUT PHANDLE             KeyedEventHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReleaseKeyedEvent(
		IN HANDLE           KeyedEventHandle,
		IN PVOID            Key,
		IN BOOLEAN          Alertable,
		IN PLARGE_INTEGER   Timeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitForKeyedEvent(
		IN HANDLE           KeyedEventHandle,
		IN PVOID            Key,
		IN BOOLEAN          Alertable,
		IN PLARGE_INTEGER   Timeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenEvent(
		OUT PHANDLE             EventHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenEvent(
		OUT PHANDLE             EventHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateEvent(
		OUT PHANDLE             EventHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  EVENT_TYPE          EventType,
		IN  BOOLEAN             InitialState
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateEvent(
		OUT PHANDLE             EventHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  EVENT_TYPE          EventType,
		IN  BOOLEAN             InitialState
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetEvent(
		HANDLE  EventHandle,
		PLONG   PreviousState
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetEvent(
		HANDLE  EventHandle,
		PLONG   PreviousState
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetEventBoostPriority(
		IN  HANDLE EventHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtClearEvent(
		IN  HANDLE EventHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtResetEvent(
		IN  HANDLE EventHandle,
		OUT PLONG PreviousState OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtPulseEvent(
		IN  HANDLE EventHandle,
		OUT PLONG PreviousState OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryEvent(
		IN  HANDLE                  EventHandle,
		IN  EVENT_INFORMATION_CLASS EventInformationClass,
		OUT PVOID                   EventInformation,
		IN  ULONG                   EventInformationLength,
		OUT PULONG                  ReturnLength OPTIONAL
		);

#define EVENT_PAIR_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE)

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateEventPair(
		OUT PHANDLE             EventPairHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwCreateEventPair(
		OUT PHANDLE             EventPairHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenEventPair(
		OUT PHANDLE             EventPairHandle,
		IN ACCESS_MASK          DesiredAccess,
		IN POBJECT_ATTRIBUTES   ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenEventPair(
		OUT PHANDLE             EventPairHandle,
		IN ACCESS_MASK          DesiredAccess,
		IN POBJECT_ATTRIBUTES   ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetLowEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetLowEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetHighEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetHighEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitLowEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwWaitLowEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitHighEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwWaitHighEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetLowWaitHighEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetLowWaitHighEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetHighWaitLowEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwSetHighWaitLowEventPair(
		IN HANDLE EventPairHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateMutant(
		OUT PHANDLE             MutantHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  BOOLEAN             InitialOwner
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenMutant(
		OUT PHANDLE             MutantHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReleaseMutant(
		IN  HANDLE  MutantHandle,
		OUT PLONG   PreviousCount OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryMutant(
		IN  HANDLE                      MutantHandle,
		IN  MUTANT_INFORMATION_CLASS    MutantInformationClass,
		OUT PVOID                       MutantInformation,
		IN  ULONG                       MutantInformationLength,
		OUT PULONG                      ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateSemaphore(
		OUT PHANDLE             SemaphoreHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  LONG                InitialCount,
		IN  LONG                MaximumCount
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenSemaphore(
		OUT PHANDLE             SemaphoreHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtReleaseSemaphore(
		IN  HANDLE  SemaphoreHandle,
		IN  LONG    ReleaseCount,
		OUT PLONG   PreviousCount OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQuerySemaphore(
		IN  HANDLE                      SemaphoreHandle,
		IN  SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,
		OUT PVOID                       SemaphoreInformation,
		IN  ULONG                       SemaphoreInformationLength,
		OUT PULONG                      ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDelayExecution(
		IN BOOLEAN          Alertable,
		IN PLARGE_INTEGER   Interval
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwDelayExecution(
		IN BOOLEAN          Alertable,
		IN PLARGE_INTEGER   Interval
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitForSingleObject(
		IN HANDLE         Handle,
		IN BOOLEAN        Alertable,
		IN PLARGE_INTEGER Timeout OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwWaitForSingleObject(
		IN HANDLE         Handle,
		IN BOOLEAN        Alertable,
		IN PLARGE_INTEGER Timeout OPTIONAL
		);

	typedef enum _OBJECT_WAIT_TYPE
	{
		WaitAllObject,
		WaitAnyObject

	} OBJECT_WAIT_TYPE, *POBJECT_WAIT_TYPE;

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitForMultipleObjects(
		IN ULONG            ObjectCount,
		IN PHANDLE          ObjectsArray,
		IN OBJECT_WAIT_TYPE WaitType,
		IN BOOLEAN          Alertable,
		IN PLARGE_INTEGER   TimeOut OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtWaitForMultipleObjects32(
		IN ULONG            ObjectCount,
		IN PHANDLE          ObjectsArray,
		IN OBJECT_WAIT_TYPE WaitType,
		IN BOOLEAN          Alertable,
		IN PLARGE_INTEGER   TimeOut OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtTestAlert(
		VOID
		);

#if !ML_KERNEL_MODE

	NATIVE_API
		VOID
		NTAPI
		RtlInitializeCriticalSectionAndSpinCount(
		LPCRITICAL_SECTION  CriticalSection,
		ULONG               SpinCount
		);

	NATIVE_API
		VOID
		NTAPI
		RtlDeleteCriticalSection(
		LPCRITICAL_SECTION CriticalSection
		);

	NATIVE_API
		VOID
		NTAPI
		RtlEnterCriticalSection(
		LPCRITICAL_SECTION CriticalSection
		);

	NATIVE_API
		VOID
		NTAPI
		RtlLeaveCriticalSection(
		LPCRITICAL_SECTION CriticalSection
		);

#endif // !ML_KERNEL_MODE

#endif // _NTSYNC_H_a657b25f_ed76_4374_b4b4_c0281e592892_
#ifndef _NTTIMER_H_5e54d33a_0623_48d6_be4c_a11f0207d94a_
#define _NTTIMER_H_5e54d33a_0623_48d6_be4c_a11f0207d94a_


	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryTimerResolution(
		OUT PULONG MaximumTime,
		OUT PULONG MinimumTime,
		OUT PULONG CurrentTime
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetTimerResolution(
		IN  ULONG   DesiredResolution,
		IN  BOOLEAN SetResolution,
		OUT PULONG  CurrentResolution
		);

	/*++

	DesiredAccess
	Access mask for TimerHandle. Can be set of (from <WinNT.h>):

	TIMER_QUERY_STATE
	TIMER_MODIFY_STATE
	TIMER_ALL_ACCESS

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateTimer(
		OUT PHANDLE             TimerHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes OPTIONAL,
		IN  TIMER_TYPE          TimerType
		);

	typedef
		VOID
		(NTAPI
		*PTIMER_APC_ROUTINE)(
		IN PVOID    TimerContext,
		IN ULONG    TimerLowValue,
		IN LONG     TimerHighValue
		);


	/*++

	TimerHandle
	HANDLE to Timer Object opened with TIMER_MODIFY_STATE access.

	DueTime
	Time when timer should be set, in 100ns units. If it is negative value, it means relative time.

	TimerApcRoutine
	User's APC routine, defined as follows:

	TimerContext
	Optional parameter to TimerApcRoutine.

	ResumeTimer
	If set, Power Management restores system to normal mode when timer is signaled.

	Period
	If zero, timer is set only once. Else will be set periodic in time intervals defined in Period value (in 100ms units).

	PreviousState
	Optional pointer to value receiving state of Timer Object before NtSetTimer call.

	--*/

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetTimer(
		IN  HANDLE              TimerHandle,
		IN  PLARGE_INTEGER      DueTime,
		IN  PTIMER_APC_ROUTINE  TimerApcRoutine OPTIONAL,
		IN  PVOID               TimerContext OPTIONAL,
		IN  BOOLEAN             ResumeTimer,
		IN  LONG                Period OPTIONAL,
		OUT PBOOLEAN            PreviousState OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryTimer(
		IN  HANDLE                  TimerHandle,
		IN  TIMER_INFORMATION_CLASS TimerInformationClass,
		OUT PVOID                   TimerInformation,
		IN  ULONG                   TimerInformationLength,
		OUT PULONG                  ReturnLength OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCancelTimer(
		IN  HANDLE      TimerHandle,
		OUT PBOOLEAN    CurrentState OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCreateTimer(
		HANDLE                  TimerQueue,
		PHANDLE                 NewTimer,
		WAITORTIMERCALLBACKFUNC Callback,
		PVOID                   Parameter,
		ULONG                   DueTime,
		ULONG                   Period,
		ULONG                   Flags
		);

#endif // _NTTIMER_H_5e54d33a_0623_48d6_be4c_a11f0207d94a_
#ifndef _NTTOKEN_H_f4dd851c_2e83_4d40_9dbf_e2adf1753014_
#define _NTTOKEN_H_f4dd851c_2e83_4d40_9dbf_e2adf1753014_


#if ML_KERNEL_MODE

#if !defined(_NTIFS_)

	/*
	typedef enum _TOKEN_ELEVATION_TYPE {
	TokenElevationTypeDefault = 1,
	TokenElevationTypeFull,
	TokenElevationTypeLimited,
	} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;
	*/

	typedef enum _TOKEN_INFORMATION_CLASS
	{
		TokenUser = 1,
		TokenGroups = 2,
		TokenPrivileges = 3,
		TokenOwner = 4,
		TokenPrimaryGroup = 5,
		TokenDefaultDacl = 6,
		TokenSource = 7,
		TokenType = 8,
		TokenImpersonationLevel = 9,
		TokenStatistics = 10,
		TokenRestrictedSids = 11,
		TokenSessionId = 12,
		TokenGroupsAndPrivileges = 13,
		TokenSessionReference = 14,
		TokenSandBoxInert = 15,
		TokenAuditPolicy = 16,
		TokenOrigin = 17,
		TokenElevationType = 18,
		TokenLinkedToken = 19,
		TokenElevation = 20,
		TokenHasRestrictions = 21,
		TokenAccessInformation = 22,
		TokenVirtualizationAllowed = 23,
		TokenVirtualizationEnabled = 24,
		TokenIntegrityLevel = 25,
		TokenUIAccess = 26,
		TokenMandatoryPolicy = 27,
		TokenLogonSid = 28,
		TokenIsAppContainer = 29,
		TokenCapabilities = 30,
		TokenAppContainerSid = 31,
		TokenAppContainerNumber = 32,
		TokenUserClaimAttributes = 33,
		TokenDeviceClaimAttributes = 34,
		TokenRestrictedUserClaimAttributes = 35,
		TokenRestrictedDeviceClaimAttributes = 36,
		TokenDeviceGroups = 37,
		TokenRestrictedDeviceGroups = 38,
		MaxTokenInfoClass = 39,

	} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;

#endif // _NTIFS_

#else // r3

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlAdjustPrivilege(
		ULONG       Privilege,
		BOOLEAN     Enable,
		BOOLEAN     CurrentThread,
		PBOOLEAN    Enabled
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlEqualSid(
		IN PSID Sid1,
		IN PSID Sid2
		);

#endif // ML_KERNEL_MODE

	NATIVE_API
		NTSTATUS
		NTAPI
		NtCreateToken(
		OUT PHANDLE                 TokenHandle,
		IN  ACCESS_MASK             DesiredAccess,
		IN  POBJECT_ATTRIBUTES      ObjectAttributes OPTIONAL,
		IN  TOKEN_TYPE              TokenType,
		IN  PLUID                   AuthenticationId,
		IN  PLARGE_INTEGER          ExpirationTime,
		IN  PTOKEN_USER             User,
		IN  PTOKEN_GROUPS           Groups,
		IN  PTOKEN_PRIVILEGES       Privileges,
		IN  PTOKEN_OWNER            Owner OPTIONAL,
		IN  PTOKEN_PRIMARY_GROUP    PrimaryGroup,
		IN  PTOKEN_DEFAULT_DACL     DefaultDacl OPTIONAL,
		IN  PTOKEN_SOURCE           TokenSource
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenProcessToken(
		IN  HANDLE  ProcessHandle,
		IN  ULONG   DesiredAccess,
		OUT PHANDLE TokenHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenProcessToken(
		IN  HANDLE  ProcessHandle,
		IN  ULONG   DesiredAccess,
		OUT PHANDLE TokenHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwOpenProcessToken(
		IN  HANDLE  ProcessHandle,
		IN  ULONG   DesiredAccess,
		OUT PHANDLE TokenHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtOpenThreadToken(
		IN  HANDLE      ThreadHandle,
		IN  ACCESS_MASK DesiredAccess,
		IN  BOOLEAN     OpenAsSelf,
		OUT PHANDLE     TokenHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtDuplicateToken(
		IN  HANDLE              ExistingTokenHandle,
		IN  ACCESS_MASK         DesiredAccess,
		IN  POBJECT_ATTRIBUTES  ObjectAttributes,
		IN  BOOLEAN             EffectiveOnly,
		IN  TOKEN_TYPE          TokenType,
		OUT PHANDLE             NewTokenHandle
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryInformationToken(
		IN  HANDLE                  TokenHandle,
		IN  TOKEN_INFORMATION_CLASS TokenInformationClass,
		IN  PVOID                   TokenInformation,
		IN  ULONG                   TokenInformationLength,
		OUT PULONG                  ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetInformationToken(
		IN  HANDLE TokenHandle,
		IN  TOKEN_INFORMATION_CLASS TokenInformationClass,
		IN  PVOID TokenInformation,
		IN  ULONG TokenInformationLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtAdjustPrivilegesToken(
		IN  HANDLE              TokenHandle,
		IN  BOOLEAN             DisableAllPrivileges,
		IN  PTOKEN_PRIVILEGES   NewState OPTIONAL,
		IN  ULONG               BufferLength,
		OUT PTOKEN_PRIVILEGES   PreviousState,
		OUT PULONG              ReturnLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		ZwAdjustPrivilegesToken(
		IN  HANDLE              TokenHandle,
		IN  BOOLEAN             DisableAllPrivileges,
		IN  PTOKEN_PRIVILEGES   NewState OPTIONAL,
		IN  ULONG               BufferLength,
		OUT PTOKEN_PRIVILEGES   PreviousState,
		OUT PULONG              ReturnLength
		);

#endif // _NTTOKEN_H_f4dd851c_2e83_4d40_9dbf_e2adf1753014_
#ifndef _NTUSER_H_4670045a_2124_41ce_9a20_68327cef99f9_
#define _NTUSER_H_4670045a_2124_41ce_9a20_68327cef99f9_


#define WIN32K_API NATIVE_API

#if ML_KERNEL_MODE

	DECLARE_HANDLE(HWND);

#endif // r0

#if !ML_KERNEL_MODE

	/************************************************************************
	user32 undoc api
	************************************************************************/

#define RST_DONTATTACHQUEUE     0x00000001
#define RST_DONTJOURNALATTACH   0x00000002

	WIN32K_API
		VOID
		NTAPI
		RegisterSystemThread(
		ULONG Flags,
		ULONG Reserve       // must be zero
		);

#define SNDMSG_FLAG_ANSICALL    0x00000001

	inline
		LRESULT
		NTAPI
		SendMessageWorker(
		HWND    Window,
		UINT    Message,
		WPARAM  wParam,
		LPARAM  lParam,
		ULONG   Flags
		)
	{
		return 0;
	}

	inline
		HWND
		NTAPI
		NtUserCreateWindowEx_Win7(
		ULONG                   ExStyle,    // 0x80000000 == CreateWindowExA
		PLARGE_UNICODE_STRING   ClassName,
		PLARGE_UNICODE_STRING   ClassVersion,
		PLARGE_UNICODE_STRING   WindowName,
		ULONG                   Style,
		LONG                    X,
		LONG                    Y,
		LONG                    Width,
		LONG                    Height,
		HWND                    ParentWnd,
		HMENU                   Menu,
		PVOID                   Instance,
		LPVOID                  Param,
		ULONG                   ShowMode,
		ULONG                   Unknown
		)
	{
		return 0;
	}

	inline
		HWND
		NTAPI
		NtUserCreateWindowEx_Win8(
		ULONG                   ExStyle,    // 0x80000000 == CreateWindowExA
		PLARGE_UNICODE_STRING   ClassName,
		PLARGE_UNICODE_STRING   ClassVersion,
		PLARGE_UNICODE_STRING   WindowName,
		ULONG                   Style,
		LONG                    X,
		LONG                    Y,
		LONG                    Width,
		LONG                    Height,
		HWND                    ParentWnd,
		HMENU                   Menu,
		PVOID                   Instance,
		LPVOID                  Param,
		ULONG                   ShowMode,
		ULONG                   Unknown,
		ULONG                   Unknown2
		)
	{
		return 0;
	}

	inline
		LRESULT
		NTAPI
		NtUserMessageCall(
		IN HWND         hWnd,
		IN UINT         Message,
		IN WPARAM       wParam,
		IN LPARAM       lParam,
		IN ULONG_PTR    xParam,
		IN DWORD        xpfnProc,
		IN BOOL         Ansi
		)
	{
		return 0;
	}

	inline
		BOOL
		NTAPI
		NtUserDefSetText(
		HWND                    hWnd,
		PLARGE_UNICODE_STRING   Text
		)
	{
		return 0;
	}

#endif // !ML_KERNEL_MODE

	typedef enum _WINDOWINFOCLASS
	{
		WindowProcess = 0,
		WindowThread = 2,
		WindowIsHung = 5,

	} WINDOWINFOCLASS;

	WIN32K_API
		HANDLE
		NTAPI
		NtUserQueryWindow(
		IN HWND             hWnd,
		IN WINDOWINFOCLASS  WindowInfo
		);

#endif // _NTUSER_H_4670045a_2124_41ce_9a20_68327cef99f9_
#ifndef _NTRTL_H_0fd28a55_9a32_4533_8006_a0469dd77ef2_
#define _NTRTL_H_0fd28a55_9a32_4533_8006_a0469dd77ef2_


	typedef struct _RTL_PROCESS_MODULE_INFORMATION_EX
	{
		/* 0x000 */ USHORT                              NextOffset;
		/* 0x004 */ RTL_PROCESS_MODULE_INFORMATION      BaseInfo;
		/* 0x120 */ ULONG                               ImageChecksum;
		/* 0x124 */ ULONG                               TimeDateStamp;
		/* 0x128 */ PVOID                               DefaultBase;

	} RTL_PROCESS_MODULE_INFORMATION_EX, *PRTL_PROCESS_MODULE_INFORMATION_EX;

	typedef struct _RTL_PROCESS_BACKTRACE_INFORMATION
	{
		/* 0x000 */ PCHAR                               SymbolicBackTrace;
		/* 0x004 */ ULONG                               TraceCount;
		/* 0x008 */ USHORT                              Index;
		/* 0x00A */ USHORT                              Depth;
		/* 0x00C */ PVOID                               BackTrace[32];

	} RTL_PROCESS_BACKTRACE_INFORMATION, *PRTL_PROCESS_BACKTRACE_INFORMATION;

	typedef struct _RTL_PROCESS_BACKTRACES
	{
		/* 0x000 */ ULONG                               CommittedMemory;
		/* 0x004 */ ULONG                               ReservedMemory;
		/* 0x008 */ ULONG                               NumberOfBackTraceLookups;
		/* 0x00C */ ULONG                               NumberOfBackTraces;
		/* 0x010 */ RTL_PROCESS_BACKTRACE_INFORMATION   BackTraces[1];

	} RTL_PROCESS_BACKTRACES, *PRTL_PROCESS_BACKTRACES;

	typedef struct _RTL_HEAP_TAG
	{
		/* 0x000 */ ULONG                               NumberOfAllocations;
		/* 0x004 */ ULONG                               NumberOfFrees;
		/* 0x008 */ ULONG_PTR                           BytesAllocated;
		/* 0x00C */ USHORT                              TagIndex;
		/* 0x00E */ USHORT                              CreatorBackTraceIndex;
		/* 0x010 */ WCHAR                               TagName[24];

	} RTL_HEAP_TAG, *PRTL_HEAP_TAG;

	typedef struct _RTL_HEAP_ENTRY
	{
		/* 0x000 */ ULONG_PTR                           Size;
		/* 0x004 */ USHORT                              Flags;
		/* 0x006 */ USHORT                              AllocatorBackTraceIndex;

		union
		{
			struct
			{
				/* 0x008 */ ULONG_PTR                           Settable;
				/* 0x00C */ ULONG                               Tag;
			} s1;

			struct
			{
				/* 0x008 */ ULONG_PTR                           CommittedSize;
				/* 0x00C */ PVOID                               FirstBlock;
			} s2;
		} u;

	} RTL_HEAP_ENTRY, *PRTL_HEAP_ENTRY;

	typedef struct _RTL_HEAP_INFORMATION
	{
		/* 0x000 */ PVOID                               BaseAddress;
		/* 0x004 */ ULONG                               Flags;
		/* 0x008 */ USHORT                              EntryOverhead;
		/* 0x00A */ USHORT                              CreatorBackTraceIndex;
		/* 0x00C */ ULONG_PTR                           BytesAllocated;
		/* 0x010 */ ULONG_PTR                           BytesCommitted;
		/* 0x014 */ ULONG                               NumberOfTags;
		/* 0x018 */ ULONG                               NumberOfEntries;
		/* 0x01C */ ULONG                               NumberOfPseudoTags;
		/* 0x020 */ ULONG                               PseudoTagGranularity;
		/* 0x024 */ ULONG                               Reserved[5];
		/* 0x038 */ PRTL_HEAP_TAG                       Tags;
		/* 0x03C */ PRTL_HEAP_ENTRY                     Entries;

	} RTL_HEAP_INFORMATION, *PRTL_HEAP_INFORMATION;

	typedef struct _RTL_PROCESS_HEAPS
	{
		/* 0x000 */ ULONG                               NumberOfHeaps;
		/* 0x004 */ RTL_HEAP_INFORMATION                Heaps[1];

	} RTL_PROCESS_HEAPS, *PRTL_PROCESS_HEAPS;

	typedef struct _RTL_PROCESS_LOCK_INFORMATION
	{
		/* 0x000 */ PVOID                               Address;
		/* 0x004 */ USHORT                              Type;
		/* 0x006 */ USHORT                              CreatorBackTraceIndex;
		/* 0x008 */ PVOID                               OwningThread;   // from the thread's ClientId->UniqueThread
		/* 0x00C */ LONG                                LockCount;
		/* 0x010 */ ULONG                               ContentionCount;
		/* 0x014 */ ULONG                               EntryCount;

		//
		// The following fields are only valid for Type == RTL_CRITSECT_TYPE
		//

		/* 0x018 */ LONG                                RecursionCount;

		//
		// The following fields are only valid for Type == RTL_RESOURCE_TYPE
		//

		/* 0x01C */ ULONG                               NumberOfWaitingShared;
		/* 0x020 */ ULONG                               NumberOfWaitingExclusive;

	} RTL_PROCESS_LOCK_INFORMATION, *PRTL_PROCESS_LOCK_INFORMATION;

	typedef struct _RTL_PROCESS_LOCKS
	{
		/* 0x000 */ ULONG                               NumberOfLocks;
		/* 0x004 */ RTL_PROCESS_LOCK_INFORMATION        Locks[1];

	} RTL_PROCESS_LOCKS, *PRTL_PROCESS_LOCKS;

	typedef struct _RTL_PROCESS_VERIFIER_OPTIONS
	{
		/* 0x000 */ ULONG                               SizeStruct;
		/* 0x004 */ ULONG                               Option;
		/* 0x008 */ UCHAR                               OptionData[1];

	} RTL_PROCESS_VERIFIER_OPTIONS, *PRTL_PROCESS_VERIFIER_OPTIONS;

	typedef struct _RTL_DEBUG_INFORMATION
	{
		/* 0x000 */ PVOID                               SectionHandleClient;
		/* 0x004 */ PVOID                               ViewBaseClient;
		/* 0x008 */ PVOID                               ViewBaseTarget;
		/* 0x00C */ ULONG_PTR                           ViewBaseDelta;
		/* 0x010 */ PVOID                               EventPairClient;
		/* 0x014 */ PVOID                               EventPairTarget;
		/* 0x018 */ PVOID                               TargetProcessId;
		/* 0x01C */ PVOID                               TargetThreadHandle;
		/* 0x020 */ ULONG                               Flags;
		/* 0x024 */ ULONG_PTR                           OffsetFree;
		/* 0x028 */ ULONG_PTR                           CommitSize;
		/* 0x02C */ ULONG_PTR                           ViewSize;
		union
		{
			/* 0x030 */     PRTL_PROCESS_MODULES                Modules;
			/* 0x030 */     PRTL_PROCESS_MODULE_INFORMATION_EX  ModulesEx;
		};

		/* 0x034 */ PRTL_PROCESS_BACKTRACES             BackTraces;
		/* 0x038 */ PRTL_PROCESS_HEAPS                  Heaps;
		/* 0x03C */ PRTL_PROCESS_LOCKS                  Locks;
		/* 0x040 */ PVOID                               SpecificHeap;
		/* 0x044 */ PVOID                               TargetProcessHandle;
		/* 0x048 */ PRTL_PROCESS_VERIFIER_OPTIONS       VerifierOptions;
		/* 0x04C */ PVOID                               ProcessHeap;
		/* 0x050 */ PVOID                               CriticalSectionHandle;
		/* 0x054 */ PVOID                               CriticalSectionOwnerThread;
		/* 0x058 */ PVOID                               Reserved[4];

	} RTL_DEBUG_INFORMATION, *PRTL_DEBUG_INFORMATION;

	NATIVE_API
		PRTL_DEBUG_INFORMATION
		NTAPI
		RtlCreateQueryDebugBuffer(
		IN  ULONG   MaximumCommit OPTIONAL,
		IN  BOOLEAN UseEventPair
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlDestroyQueryDebugBuffer(
		IN  PRTL_DEBUG_INFORMATION Buffer
		);

	NATIVE_API
		PVOID
		NTAPI
		RtlCommitDebugInfo(
		IN OUT  PRTL_DEBUG_INFORMATION Buffer,
		IN      ULONG_PTR Size
		);

	NATIVE_API
		VOID
		NTAPI
		RtlDeCommitDebugInfo(
		IN OUT  PRTL_DEBUG_INFORMATION Buffer,
		IN      PVOID p,
		IN      ULONG_PTR Size
		);

#define RTL_QUERY_PROCESS_MODULES           0x00000001
#define RTL_QUERY_PROCESS_BACKTRACES        0x00000002
#define RTL_QUERY_PROCESS_HEAP_SUMMARY      0x00000004
#define RTL_QUERY_PROCESS_HEAP_TAGS         0x00000008
#define RTL_QUERY_PROCESS_HEAP_ENTRIES      0x00000010
#define RTL_QUERY_PROCESS_LOCKS             0x00000020
#define RTL_QUERY_PROCESS_MODULES32         0x00000040
#define RTL_QUERY_PROCESS_VERIFIER_OPTIONS  0x00000080 // rev
#define RTL_QUERY_PROCESS_MODULESEX         0x00000100 // rev
#define RTL_QUERY_PROCESS_HEAP_ENTRIES_EX   0x00000200 // ?
#define RTL_QUERY_PROCESS_CS_OWNER          0x00000400 // rev
#define RTL_QUERY_PROCESS_NONINVASIVE       0x80000000

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlQueryProcessDebugInformation(
		IN      ULONG_PTR               UniqueProcessId,
		IN      ULONG                   Flags,
		IN OUT  PRTL_DEBUG_INFORMATION  Buffer
		);

#if ML_USER_MODE

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlQueryInformationActiveActivationContext(
		ACTIVATION_CONTEXT_INFO_CLASS   InfoClass,
		PVOID                           Buffer,
		ULONG_PTR                       BufferSize OPTIONAL,
		PULONG_PTR                      ReturendLength OPTIONAL
		);

	typedef struct _TIME_FIELDS {
		SHORT Year;        // range [1601...]
		SHORT Month;       // range [1..12]
		SHORT Day;         // range [1..31]
		SHORT Hour;        // range [0..23]
		SHORT Minute;      // range [0..59]
		SHORT Second;      // range [0..59]
		SHORT Milliseconds;// range [0..999]
		SHORT Weekday;     // range [0..6] == [Sunday..Saturday]
	} TIME_FIELDS, *PTIME_FIELDS;

#endif // r3

	typedef struct _RTL_TIME_ZONE_INFORMATION {
		LONG        Bias;
		WCHAR       StandardName[32];
		TIME_FIELDS StandardStart;
		LONG        StandardBias;
		WCHAR       DaylightName[32];
		TIME_FIELDS DaylightStart;
		LONG        DaylightBias;
	} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION;

	NATIVE_API
		PIMAGE_NT_HEADERS
		NTAPI
		RtlImageNtHeader(
		PVOID Base
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlImageNtHeaderEx(
		IN  ULONG               Flags,
		IN  PVOID               Base,
		IN  ULONG64             Size,
		OUT PIMAGE_NT_HEADERS*  OutHeaders
		);

#define INITIAL_CRC32   ULONG_PTR_MAX

	NATIVE_API
		ULONG
		NTAPI
		RtlComputeCrc32(
		IN ULONG32  PartialCrc,
		IN PVOID    Buffer,
		IN ULONG    Length
		);

	NATIVE_API
		VOID
		NTAPI
		RtlAcquirePebLock(
		VOID
		);

	NATIVE_API
		VOID
		NTAPI
		RtlReleasePebLock(
		VOID
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlSetEnvironmentVar(
		IN PWSTR*       Environment OPTIONAL,
		IN  PWSTR       Name,
		IN  ULONG_PTR   NameLength,
		IN  PWSTR       Value,
		IN  ULONG_PTR   ValueLength
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlSetEnvironmentVariable(
		IN  PVOID*          Environment OPTIONAL,
		IN  PUNICODE_STRING Name,
		IN  PUNICODE_STRING Value
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlQueryEnvironmentVariable(
		IN  PVOID       Environment OPTIONAL,
		IN  PWSTR       Name,
		IN  ULONG_PTR   NameLength,
		OUT PWSTR       Value,
		IN  ULONG_PTR   ValueLength,
		OUT PULONG_PTR  ReturnLength
		);

#define RTL_DOS_SEARCH_PATH_FLAG_APPLY_ISOLATION_REDIRECTION 0x00000001
#define RTL_DOS_SEARCH_PATH_FLAG_DISALLOW_DOT_RELATIVE_PATH_SEARCH 0x00000002
#define RTL_DOS_SEARCH_PATH_FLAG_APPLY_DEFAULT_EXTENSION_WHEN_NOT_RELATIVE_PATH_EVEN_IF_FILE_HAS_EXTENSION 0x00000004

#define RTL_DOS_SEARCH_PATH_FLAG_ALL    (RTL_DOS_SEARCH_PATH_FLAG_APPLY_ISOLATION_REDIRECTION | RTL_DOS_SEARCH_PATH_FLAG_DISALLOW_DOT_RELATIVE_PATH_SEARCH | RTL_DOS_SEARCH_PATH_FLAG_APPLY_DEFAULT_EXTENSION_WHEN_NOT_RELATIVE_PATH_EVEN_IF_FILE_HAS_EXTENSION)

	NATIVE_API
		ULONG
		NTAPI
		RtlDosSearchPath_U(
		IN  PWSTR   Path,
		IN  PWSTR   FileName,
		IN  PWSTR   Extension OPTIONAL,
		IN  ULONG   BufferLength,
		OUT PWSTR   Buffer,
		OUT PWSTR*  FilePart OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlDosSearchPath_Ustr(
		IN  ULONG               Flags,
		IN  PUNICODE_STRING     Path,
		IN  PUNICODE_STRING     FileName,
		IN  PUNICODE_STRING     DefaultExtension OPTIONAL,
		OUT PUNICODE_STRING     StaticString OPTIONAL,
		OUT PUNICODE_STRING     DynamicString OPTIONAL,
		OUT PCUNICODE_STRING*   FullFileNameOut OPTIONAL,
		OUT PULONG_PTR          FilePartPrefixCch OPTIONAL,
		OUT PULONG_PTR          BytesRequired OPTIONAL
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlDoesFileExists_U(
		IN PWSTR FileName
		);


#if ML_USER_MODE

	// Resources

	typedef struct _RTL_RESOURCE
	{
		RTL_CRITICAL_SECTION CriticalSection;

		HANDLE  SharedSemaphore;
		ULONG   NumberOfWaitingShared;
		HANDLE  ExclusiveSemaphore;
		ULONG   NumberOfWaitingExclusive;

		LONG    NumberOfActive; // negative: exclusive acquire; zero: not acquired; positive: shared acquire(s)
		HANDLE  ExclusiveOwnerThread;

		ULONG   Flags; // RTL_RESOURCE_FLAG_*

		PRTL_RESOURCE_DEBUG DebugInfo;

	} RTL_RESOURCE, *PRTL_RESOURCE;

#define RTL_RESOURCE_FLAG_LONG_TERM ((ULONG)0x00000001)

	NATIVE_API
		VOID
		NTAPI
		RtlInitializeResource(
		OUT PRTL_RESOURCE Resource
		);

	NATIVE_API
		VOID
		NTAPI
		RtlDeleteResource(
		IN OUT PRTL_RESOURCE Resource
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlAcquireResourceShared(
		IN OUT  PRTL_RESOURCE Resource,
		IN      BOOLEAN Wait
		);

	NATIVE_API
		BOOLEAN
		NTAPI
		RtlAcquireResourceExclusive(
		IN OUT  PRTL_RESOURCE Resource,
		IN      BOOLEAN Wait
		);

	NATIVE_API
		VOID
		NTAPI
		RtlReleaseResource(
		IN OUT PRTL_RESOURCE Resource
		);

	NATIVE_API
		VOID
		NTAPI
		RtlConvertSharedToExclusive(
		IN OUT PRTL_RESOURCE Resource
		);

	NATIVE_API
		VOID
		NTAPI
		RtlConvertExclusiveToShared(
		IN OUT PRTL_RESOURCE Resource
		);

#endif // r3

	NATIVE_API
		USHORT
		NTAPI
		RtlCaptureStackBackTrace(
		IN  ULONG   FramesToSkip,
		IN  ULONG   FramesToCapture,
		OUT PVOID*  BackTrace,
		OUT PULONG  BackTraceHash OPTIONAL
		);

#endif // _NTRTL_H_0fd28a55_9a32_4533_8006_a0469dd77ef2_
#ifndef _NTNLS_H_66774c20_dc28_4a7e_9714_c1f39fdb5d5f_
#define _NTNLS_H_66774c20_dc28_4a7e_9714_c1f39fdb5d5f_

#include <ntnls.h>

	NATIVE_API
		VOID
		NTAPI
		RtlInitNlsTables(
		IN  PUSHORT         AnsiNlsBase,
		IN  PUSHORT         OemNlsBase,
		IN  PUSHORT         LanguageNlsBase,
		OUT PNLSTABLEINFO   TableInfo
		);

	NATIVE_API
		VOID
		NTAPI
		RtlResetRtlTranslations(
		IN PNLSTABLEINFO TableInfo
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtInitializeNlsFiles(
		OUT PVOID*          BaseAddress,
		OUT PLCID           DefaultLocaleId,
		OUT PLARGE_INTEGER  DefaultCasingTableSize
		);

	NTSTATUS
		NTAPI
		NtGetNlsSectionPtr(
		IN  ULONG   SectionType,
		IN  ULONG   SectionData,
		IN  PVOID   ContextData,
		OUT PVOID*  SectionPointer,
		OUT PULONG  SectionSize
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryDefaultLocale(
		IN  BOOLEAN UserProfile,
		OUT PLCID   DefaultLocaleId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetDefaultLocale(
		IN  BOOLEAN UserProfile,
		IN  LCID    DefaultLocaleId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryDefaultUILanguage(
		OUT LANGID *DefaultUILanguageId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtSetDefaultUILanguage(
		IN  LANGID DefaultUILanguageId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		NtQueryInstallUILanguage(
		OUT LANGID *InstallUILanguageId
		);



#if defined(_INC_SDKDDKVER) && _WIN32_WINNT_WIN7 >= 0x600

#include <ntnls.h>

	NATIVE_API
		VOID
		NTAPI
		RtlInitCodePageTable(
		IN  PUSHORT         TableBase,
		OUT PCPTABLEINFO    CodePageTable
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlCustomCPToUnicodeN(
		IN  PCPTABLEINFO    CPTableInfo,
		OUT PWSTR           UnicodeString,
		IN  ULONG           MaxBytesInUnicodeString,
		OUT PULONG          BytesInUnicodeString OPTIONAL,
		IN  PCSTR           CustomCPString,
		IN  ULONG           BytesInCustomCPString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUnicodeToCustomCPN(
		IN  PCPTABLEINFO    CPTableInfo,
		OUT PCHAR           CustomCPString,
		IN  ULONG           BytesInCustomCPString,
		OUT PULONG          BytesInMultiByteString OPTIONAL,
		IN  PCWSTR          UnicodeString,
		IN  ULONG           BytesInUnicodeString
		);

#endif // SDK_VER

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlMultiByteToUnicodeN(
		PWSTR   UnicodeString,
		ULONG   MaxBytesInUnicodeString,
		PULONG  BytesInUnicodeString OPTIONAL,
		PCSTR   MultiByteString,
		ULONG   BytesInMultiByteString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUnicodeToMultiByteSize(
		PULONG  BytesInMultiByteString,
		PCWSTR  UnicodeString,
		ULONG   BytesInUnicodeString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUnicodeToMultiByteN(
		OUT PSTR    MultiByteString,
		IN  ULONG   MaxBytesInMultiByteString,
		OUT PULONG  BytesInMultiByteString OPTIONAL,
		IN  PCWSTR  UnicodeString,
		IN  ULONG   BytesInUnicodeString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlMultiByteToUnicodeSize(
		OUT PULONG  BytesInUnicodeString,
		IN  PCSTR   MultiByteString,
		IN  ULONG   BytesInMultiByteString
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUnicodeToUTF8N(
		OUT PSTR    UTF8StringDestination,
		IN  ULONG   UTF8StringMaxByteCount,
		OUT PULONG  UTF8StringActualByteCount,
		IN  PCWSTR  UnicodeStringSource,
		IN  ULONG   UnicodeStringByteCount
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		RtlUTF8ToUnicodeN(
		OUT PWSTR   UnicodeStringDestination,
		IN  ULONG   UnicodeStringMaxByteCount,
		OUT PULONG  UnicodeStringActualByteCount,
		IN  PCSTR   UTF8StringSource,
		IN  ULONG   UTF8StringByteCount
		);

	NTSYSAPI
		NTSTATUS
		NTAPI
		RtlUnicodeToOemN(
		OUT PSTR    OemString,
		IN  ULONG   MaxBytesInOemString,
		OUT PULONG  BytesInOemString OPTIONAL,
		IN  PCWSTR  UnicodeString,
		IN  ULONG   BytesInUnicodeString
		);

#endif // _NTNLS_H_66774c20_dc28_4a7e_9714_c1f39fdb5d5f_
#ifndef _NTGDI_H_5cbb7a71_7f51_4a8a_bb90_038b762c3ed7_
#define _NTGDI_H_5cbb7a71_7f51_4a8a_bb90_038b762c3ed7_


	_ML_C_HEAD_

#if ML_KERNEL_MODE

		DECLARE_HANDLE(HDC);
	DECLARE_HANDLE(HFONT);

	typedef struct tagPOINT
	{
		LONG  x;
		LONG  y;

	} POINT, *PPOINT, *LPPOINT;

	typedef struct _GLYPHMETRICS {
		UINT    gmBlackBoxX;
		UINT    gmBlackBoxY;
		POINT   gmptGlyphOrigin;
		short   gmCellIncX;
		short   gmCellIncY;
	} GLYPHMETRICS, *LPGLYPHMETRICS;

	typedef struct _FIXED {
#ifndef _MAC
		WORD    fract;
		short   value;
#else
		short   value;
		WORD    fract;
#endif
	} FIXED;

	typedef struct _MAT2 {
		FIXED  eM11;
		FIXED  eM12;
		FIXED  eM21;
		FIXED  eM22;
	} MAT2, *LPMAT2;

	typedef struct ENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;

#endif // r0


	inline
		ULONG
		NTAPI
		NtGdiGetGlyphOutline(
		IN  HDC             hDc,
		IN  WCHAR           UnicodeChar,
		IN  ULONG           Format,
		OUT LPGLYPHMETRICS  GlyphMetrics,
		IN  ULONG           BufferSize,
		OUT PVOID           Buffer,
		IN  LPMAT2          Mat2,
		IN  BOOL            IgnoreRotation
		)
	{
		return 0;
	}

	inline
		HFONT
		NTAPI
		NtGdiHfontCreate(
		IN  PENUMLOGFONTEXDVW   EnumLogFont,
		IN  ULONG               SizeOfEnumLogFont,
		IN  LONG                LogFontType,
		IN  LONG                Unknown,
		IN  PVOID               FreeListLocalFont
		)
	{
		return 0;
	}


#if ML_USER_MODE

	typedef struct
	{
		ULONG SizeOfSelf;
		ULONG Unknown1;
		ULONG Unknown2;
		ULONG FontHandle;
		ULONG FontCount;
		ULONG Unknown5;

	} FONT_REALIZATION_INFO, *PFONT_REALIZATION_INFO;

	NATIVE_API
		BOOL
		NTAPI
		GetFontRealizationInfo(
		HDC DC,
		PFONT_REALIZATION_INFO RealizationInfo
		);

	typedef struct
	{
		ULONG Reserved[4];
		WCHAR FontFile[MAX_NTPATH];

	} FONT_FILE_INFO, *PFONT_FILE_INFO;

	NATIVE_API
		BOOL
		NTAPI
		GetFontFileInfo(
		ULONG           FontHandle,
		ULONG           FontIndex,
		PFONT_FILE_INFO FontFileInfo,
		ULONG           InfoLength,
		PULONG          ReturnedLength
		);

#endif // r3

	_ML_C_TAIL_

#endif // _NTGDI_H_5cbb7a71_7f51_4a8a_bb90_038b762c3ed7_
#ifndef _NTPO_H_87cbac49_8d82_445e_8ac6_19ad5037eeb4_
#define _NTPO_H_87cbac49_8d82_445e_8ac6_19ad5037eeb4_


#if ML_KERNEL_MODE

#define ES_SYSTEM_REQUIRED      ((ULONG)0x00000001)
#define ES_DISPLAY_REQUIRED     ((ULONG)0x00000002)
#define ES_USER_PRESENT         ((ULONG)0x00000004)
#define ES_AWAYMODE_REQUIRED    ((ULONG)0x00000004)
#define ES_CONTINUOUS           ((ULONG)0x80000000)

		typedef ULONG EXECUTION_STATE;

#endif // r0

	NTSTATUS
		NTAPI
		NtSetThreadExecutionState(
		IN  EXECUTION_STATE     Flags,
		OUT EXECUTION_STATE*    PreviousFlags
		);

#endif // _NTPO_H_87cbac49_8d82_445e_8ac6_19ad5037eeb4_
	// Font Management Services

#ifndef _FMS_H_d46bc672_243a_4917_83c6_abbbbf435bb2_
#define _FMS_H_d46bc672_243a_4917_83c6_abbbbf435bb2_


#if ML_USER_MODE

	DECLARE_HANDLE(FMS_ENUMERATOR);

	typedef FMS_ENUMERATOR *PFMS_ENUMERATOR;


	ML_NAMESPACE_BEGIN(FmsFilterType);

	enum
	{
		FaceName = 0x02,
		CharSet = 0x20,
	};

	ML_NAMESPACE_END_(FmsFilterType);

	typedef struct
	{
		ULONG   Unknown1;
		ULONG   FilterType;

		union
		{
			WCHAR   FaceName[1000];
			BYTE    Charset;
		};

	} FMS_FILTER_DATA, *PFMS_FILTER_DATA;

	typedef struct
	{
		TEXTMETRICW TextMetric;
		ULONG       Unknown[10];

	} FMS_TEXTMETRIC, *PFMS_TEXTMETRIC;

	ML_NAMESPACE_BEGIN(FmsFontStyle);

	enum
	{
		Latin1 = 0,
		Latin2 = 1,
		Cyrillic = 2,
		Thai = 3,
		Jisjapan = 4,
		Chinesesimp = 5,
		Latin2_2 = 6,
	};

	ML_NAMESPACE_END_(FmsFontStyle);

	ML_NAMESPACE_BEGIN(FmsPropertyType);

	enum
	{
		FontTypeName = 0x00,
		FontStyle = 0x01,
		FaceNameLocale = 0x02,
		FaceNameAnsi = 0x03,
		FullNameLocale = 0x04,
		FullNameAnsi = 0x05,
		FontWeightName = 0x06,
		FontStyleNameLocale = 0x09,
		FontStyleNameAnsi = 0x0A,
		Company = 0x13,
		FontFileName = 0x17,
		FontDirectory = 0x18,
		ScriptName = 0x1F,
		FullDescription = 0x16,
		SymbolInfo = 0x25,

		PropertyMax = 0x25,
	};

	ML_NAMESPACE_END_(FmsPropertyType);


	ML_NAMESPACE_BEGIN(FmsInitializeFlags);

	enum
	{
		NoSimulations = 0x00000001,
		NoVertFonts = 0x00000004,
	};

	ML_NAMESPACE_END_(FmsInitializeFlags);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsInitializeEnumerator(
		IN  PFMS_ENUMERATOR Enumerator,
		IN  ULONG           Flags = FmsInitializeFlags::NoSimulations | FmsInitializeFlags::NoVertFonts
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsResetEnumerator(
		IN FMS_ENUMERATOR Enumerator
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsFreeEnumerator(
		IN OUT PFMS_ENUMERATOR Enumerator
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsSetDefaultFilter(
		IN  FMS_ENUMERATOR Enumerator
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsSetFilter(
		IN  FMS_ENUMERATOR      Enumerator,
		IN  PFMS_FILTER_DATA    FilterData,
		IN  ULONG               NumberOfFilterData
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsAddFilter(
		IN  FMS_ENUMERATOR      Enumerator,
		IN  PFMS_FILTER_DATA    FilterData,
		IN  ULONG               NumberOfFilterData
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsGetFilteredPropertyList(
		IN      FMS_ENUMERATOR  Enumerator,
		IN      ULONG           PropertyType,
		OUT     PULONG          NumberofProperty,
		IN OUT  PULONG          PropertySize,
		OUT     PVOID           Property    OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsGetFilteredFontList(
		IN  FMS_ENUMERATOR  Enumerator,
		OUT PULONG          NumberOfFonts,
		OUT PULONG          FontIdList OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsGetBestMatchInFamily(
		IN  FMS_ENUMERATOR  Enumerator,
		IN  ULONG           ReservedZero,
		IN  PCWSTR          FaceName,
		OUT PULONG          FontId
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsGetGDILogFont(
		IN  FMS_ENUMERATOR      Enumerator,
		IN  ULONG               FontId,
		IN  BOOLEAN             WhatTrue,
		OUT LPENUMLOGFONTEXW    EnumLogFontEx,
		OUT PFMS_TEXTMETRIC     TextMetric OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsGetGdiLogicalFont(
		IN  FMS_ENUMERATOR      Enumerator,
		IN  ULONG               FontId,
		IN  BOOLEAN             WhatTrue,
		OUT LPENUMLOGFONTEXW    EnumLogFontEx,
		OUT PFMS_TEXTMETRIC     FmsTextMetric  OPTIONAL,
		OUT PULONG              SomeBuffer  OPTIONAL
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsMapGdiLogicalFont(
		IN  FMS_ENUMERATOR      Enumerator,
		IN  ULONG               FontId,
		OUT LPENUMLOGFONTEXW    EnumLogFontEx
		);

	NATIVE_API
		NTSTATUS
		NTAPI
		FmsGetFontProperty(
		IN      FMS_ENUMERATOR  Enumerator,
		IN      ULONG           FontId,
		IN      ULONG           PropertyType,
		IN OUT  PULONG          PropertySize,
		IN OUT  PVOID           PropertyBuffer
		);

#endif // r3

#endif // _FMS_H_d46bc672_243a_4917_83c6_abbbbf435bb2_

	_ML_C_TAIL_


#endif // _NATIVEAPI_H_536f1070_45de_44d7_9e53_6c5db2ff00d3
#ifndef _UNDOCUMENTEDAPI_H_b221130a_bdd5_4b40_9da0_d44c29e1d279
#define _UNDOCUMENTEDAPI_H_b221130a_bdd5_4b40_9da0_d44c29e1d279

#pragma INCLUDE_LIB(undoc_k32.lib)

#if !MY_NT_DDK


		_ML_C_HEAD_

		EXTC_IMPORT HANDLE WINAPI GetConsoleInputWaitHandle();

	EXTC_IMPORT
		BOOL
		WINAPI
		CreateProcessInternalA(
		HANDLE                  Token,
		LPCSTR                  ApplicationName,
		LPSTR                   CommandLine,
		LPSECURITY_ATTRIBUTES   ProcessAttributes,
		LPSECURITY_ATTRIBUTES   ThreadAttributes,
		BOOL                    InheritHandles,
		DWORD                   CreationFlags,
		LPVOID                  Environment,
		LPCSTR                  CurrentDirectory,
		LPSTARTUPINFOA          StartupInfo,
		LPPROCESS_INFORMATION   ProcessInformation,
		PHANDLE                 NewToken
		);


	typedef struct
	{
		HANDLE                  Token;
		PCWSTR                  ApplicationName;
		PCWSTR                  CommandLine;
		LPSECURITY_ATTRIBUTES   ProcessAttributes;
		LPSECURITY_ATTRIBUTES   ThreadAttributes;
		BOOL                    InheritHandles;
		DWORD                   CreationFlags;
		LPVOID                  Environment;
		PCWSTR                  CurrentDirectory;
		LPSTARTUPINFOW          StartupInfo;
		LPPROCESS_INFORMATION   ProcessInformation;
		PHANDLE                 NewToken;

	} CREATE_PROCESS_INTERNAL_PARAM, *PCREATE_PROCESS_INTERNAL_PARAM;

	typedef BOOL(WINAPI *CreateProcessInternal2Routine)(CREATE_PROCESS_INTERNAL_PARAM Parameter);


	EXTC_IMPORT
		BOOL
		WINAPI
		CreateProcessInternalW(
		HANDLE                  Token,
		PCWSTR                  ApplicationName,
		PWSTR                   CommandLine,
		LPSECURITY_ATTRIBUTES   ProcessAttributes,
		LPSECURITY_ATTRIBUTES   ThreadAttributes,
		BOOL                    InheritHandles,
		DWORD                   CreationFlags,
		LPVOID                  Environment,
		PCWSTR                  CurrentDirectory,
		LPSTARTUPINFOW          StartupInfo,
		LPPROCESS_INFORMATION   ProcessInformation,
		PHANDLE                 NewToken
		);

	EXTC_IMPORT
		INT
		WINAPI
		MessageBoxTimeoutA(
		IN HWND     hWnd,
		IN LPCSTR   Text,
		IN LPCSTR   Caption,
		IN UINT     Type,
		IN WORD     LanguageId,
		IN DWORD    Milliseconds
		);

	EXTC_IMPORT
		INT
		STDCALL
		MessageBoxTimeoutW(
		IN HWND     hWnd,
		IN LPCWSTR  Text,
		IN LPCWSTR  Caption,
		IN UINT     Type,
		IN WORD     anguageId,
		IN DWORD    Milliseconds
		);

#if MY_UNICODE_ENABLE
#define MessageBoxTimeout MessageBoxTimeoutW
#else
#define MessageBoxTimeout MessageBoxTimeoutA
#endif

	_ML_C_TAIL_

#endif // MY_NT_DDK

#endif // _UNDOCUMENTEDAPI_H_b221130a_bdd5_4b40_9da0_d44c29e1d279

		_ML_C_HEAD_


		/************************************************************************
		strings
		************************************************************************/

		NTSTATUS
		FASTCALL
		Nt_AnsiToUnicode(
		PWSTR       UnicodeBuffer,
		ULONG_PTR   BufferCount,
		PCSTR       AnsiString,
		LONG_PTR    DEF_VAL(AnsiLength, -1),
		PULONG_PTR  DEF_VAL(BytesInUnicode, NULL)
		);

	NTSTATUS
		Nt_UnicodeToAnsi(
		PCHAR       AnsiBuffer,
		ULONG_PTR   BufferCount,
		LPCWSTR     UnicodeString,
		LONG_PTR    DEF_VAL(UnicodeLength, -1),
		PULONG_PTR  DEF_VAL(BytesInAnsi, NULL)
		);

	NTSTATUS
		Nt_AnsiToUnicodeString(
		PUNICODE_STRING Unicode,
		PCHAR           AnsiString,
		LONG_PTR        DEF_VAL(AnsiLength, -1),
		BOOL            DEF_VAL(AllocateDestinationString, TRUE)
		);

	NTSTATUS
		Nt_UnicodeToAnsiString(
		PANSI_STRING    Ansi,
		LPCWSTR         UnicodeString,
		LONG_PTR        DEF_VAL(UnicodeLength, -1),
		BOOL            DEF_VAL(AllocateDestinationString, TRUE)
		);

	BOOL Nt_IsPathExists(LPCWSTR pszPath);

	PLDR_MODULE
		Nt_FindLdrModuleByName(
		PUNICODE_STRING ModuleName
		);

	PLDR_MODULE
		Nt_FindLdrModuleByHandle(
		PVOID BaseAddress
		);

	PTEB_ACTIVE_FRAME
		Nt_FindThreadFrameByContext(
		ULONG_PTR Context
		);

	ForceInline
		ANSI_STRING
		CharToAnsiString(
		PSTR  Buffer,
		ULONG Length
		)
	{
		ANSI_STRING Ansi;

		Ansi.Buffer = Buffer;
		Ansi.Length = (USHORT)(Length * sizeof(*Buffer));
		Ansi.MaximumLength = Ansi.Length;

		return Ansi;
	}

	ForceInline
		UNICODE_STRING
		WCharToUnicodeString(
		PWSTR Buffer,
		ULONG Length
		)
	{
		UNICODE_STRING Unicode;

		Unicode.Buffer = Buffer;
		Unicode.Length = (USHORT)(Length * sizeof(*Buffer));
		Unicode.MaximumLength = Unicode.Length;

		return Unicode;
	}

	ForceInline
		UNICODE_STRING64
		WCharToUnicodeString64(
		PWSTR Buffer,
		ULONG Length
		)
	{
		UNICODE_STRING64 Unicode;

		Unicode.Dummy = NULL;
		Unicode.Buffer = Buffer;
		Unicode.Length = (USHORT)(Length * sizeof(*Buffer));
		Unicode.MaximumLength = Unicode.Length;

		return Unicode;
	}

#pragma warning(disable:4238)

#define EMPTYUS         WCharToUnicodeString((PWSTR)NULL, 0)
#define USTR(_str)      WCharToUnicodeString(_str, CONST_STRLEN((_str)))
#define IUSTR(x)        {CONST_STRLEN(x) * sizeof(x[0]), CONST_STRLEN(x) * sizeof(x[0]), x}
#define VUSTR(_str)      ((*(volatile UNICODE_STRING *)&WCharToUnicodeString(_str, CONST_STRLEN((_str)))))
#define PUSTR(_str)     (PUNICODE_STRING)&VUSTR(_str)
#define USTR64(_str)    WCharToUnicodeString64(_str, CONST_STRLEN((_str)))
#define ASTR(_str)      CharToAnsiString(_str, CONST_STRLEN((_str)))

#define WCS2US          USTR
#define CS2AS           ASTR

	inline PLARGE_INTEGER FormatTimeOut(PLARGE_INTEGER TimeOut, ULONG Milliseconds)
	{
		if (Milliseconds == INFINITE)
		{
			//TimeOut->LowPart = 0;
			//TimeOut->HighPart = 0x80000000;
			TimeOut->QuadPart = DELAY_QUAD_INFINITE;
		}
		else
		{
			TimeOut->QuadPart = DELAY_ONE_MILLISECOND * (LONG64)Milliseconds;
		}

		return TimeOut;
	}

	unsigned __int64 __readfsqword(unsigned long Offset);

	inline ULONG_PTR ReadFsPtr(ULONG_PTR Offset)
	{
#if ML_AMD64
		return (ULONG_PTR)__readgsqword((ULONG)Offset);
#else // x86
		return (ULONG_PTR)__readfsdword(Offset);
#endif
	}

#pragma warning(disable:4733)

	inline VOID WriteFsPtr(ULONG_PTR Offset, ULONG_PTR Data)
	{
#if ML_AMD64
		__writegsqword((ULONG)Offset, Data);
#else // x86
		__writefsdword(Offset, Data);
#endif
	}

#pragma warning(default:4733)

#define TEB_OFFSET FIELD_OFFSET(TEB_BASE, NtTib.Self)
#define PEB_OFFSET FIELD_OFFSET(TEB_BASE, ProcessEnvironmentBlock)

	ForceInline PTEB_BASE Nt_CurrentTeb()
	{
#if ML_AMD64
		return (PTEB_BASE)ReadFsPtr(TEB_OFFSET);
#else

#ifdef NtCurrentTeb
		return (PTEB_BASE)NtCurrentTeb();
#else
		return (PTEB_BASE)ReadFsPtr(TEB_OFFSET);
#endif // no macro

#endif
	}

#if ML_KERNEL_MODE
	inline
#else
	ForceInline
#endif
		PPEB_BASE Nt_CurrentPeb()
	{

#if ML_KERNEL_MODE

		NTSTATUS    Status;
		PROCESS_BASIC_INFORMATION BasicInfo;

		Status = ZwQueryInformationProcess(NtCurrentProcess(), ProcessBasicInformation, &BasicInfo, sizeof(BasicInfo), NULL);
		if (!NT_SUCCESS(Status))
			return NULL;

		return (PPEB_BASE)BasicInfo.PebBaseAddress;

#else // r3

		return (PPEB_BASE)(ULONG_PTR)ReadFsPtr(PEB_OFFSET);

#endif // rx
	}

	ForceInline HANDLE RtlGetProcessHeap()
	{
		return Nt_CurrentTeb()->ProcessEnvironmentBlock->ProcessHeap;
	}

	ForceInline PUSHORT Nt_GetDefaultCodePageBase()
	{
		return Nt_CurrentPeb()->AnsiCodePageData;
	}

	inline PLDR_MODULE GetKernel32Ldr()
	{
		LDR_MODULE *Ldr, *FirstLdr;

		Ldr = FIELD_BASE(Nt_CurrentPeb()->Ldr->InInitializationOrderModuleList.Flink, LDR_MODULE, InInitializationOrderLinks);
		FirstLdr = Ldr;

		do
		{
			Ldr = FIELD_BASE(Ldr->InInitializationOrderLinks.Flink, LDR_MODULE, InInitializationOrderLinks);
			if (Ldr->BaseDllName.Buffer == NULL)
				continue;

			if (CHAR_UPPER4W(*(PULONG64)(Ldr->BaseDllName.Buffer + 0)) != TAG4W('KERN') ||
				CHAR_UPPER4W(*(PULONG64)(Ldr->BaseDllName.Buffer + 4)) != CHAR_UPPER4W(TAG4W('EL32')) ||
				Ldr->BaseDllName.Buffer[8] != '.')
			{
				continue;
			}

			return Ldr;

		} while (FirstLdr != Ldr);

		return NULL;
	}

	inline PVOID GetKernel32Handle()
	{
		return GetKernel32Ldr()->DllBase;
	}

	ForceInline PLDR_MODULE GetNtdllLdrModule()
	{
		return FIELD_BASE(Nt_CurrentPeb()->Ldr->InInitializationOrderModuleList.Flink, LDR_MODULE, InInitializationOrderLinks);
	}

	ForceInline PVOID GetNtdllHandle()
	{
		return GetNtdllLdrModule()->DllBase;
	}

	inline HANDLE Nt_GetCurrentDirectoryHandle()
	{
		return Nt_CurrentPeb()->ProcessParameters->CurrentDirectory.Handle;
	}

	/************************************************************************
	common file io
	************************************************************************/

	NTSTATUS
		Nt_DeleteFile(
		PCWSTR FileName
		);

	/************************************************************************
	common path
	************************************************************************/

	ULONG_PTR
		Nt_QueryDosDevice(
		PCWSTR      DeviceName,
		PWSTR       TargetPath,
		ULONG_PTR   PathSize
		);


	/************************************************************************
	common query api
	************************************************************************/

#define FOR_EACH_PROCESS_INFO(_Info) for (ULONG_PTR NextOffset = ULONG_PTR_MAX; NextOffset != 0; NextOffset = (_Info)->NextEntryOffset, (_Info) = PtrAdd((_Info), NextOffset))
#define FOR_EACH_PROCESS_THREAD(_Process, _Thread) for (ULONG_PTR ThreadCount = (((_Thread) = (_Process)->Threads), (_Process)->NumberOfThreads); ThreadCount; ++(_Thread), --ThreadCount)

	POBJECT_TYPES_INFORMATION       QuerySystemObjectTypes();
	PSYSTEM_HANDLE_INFORMATION_EX   QuerySystemHandles();

	BOOL ReleaseSystemInformation(PVOID Processes);

	HANDLE QueryCsrssProcessId(ULONG_PTR DEF_VAL(Session, 1));

	/************************************************************************
	common callback
	************************************************************************/

	typedef
		VOID
		(NTAPI
		*PCREATE_PROCESS_NOTIFY)(
		PVOID       Context,
		ULONG_PTR   ProcessId,
		BOOL        Create
		);

	/************************************************************************
	common process
	************************************************************************/

	NTSTATUS
		Nt_GetProcessUserName(
		PUNICODE_STRING UserName,
		HANDLE          DEF_VAL(Process, NtCurrentProcess())
		);

	/************************************************************************
	common token
	************************************************************************/

	NTSTATUS
		Nt_GetTokenInfo(
		HANDLE                  TokenHandle,
		TOKEN_INFORMATION_CLASS TokenInformationClass,
		PVOID                   Information,
		PULONG_PTR              DEF_VAL(Size, NULL)
		);

	VOID
		ReleaseTokenInfo(
		PVOID TokenInfo
		);

	NTSTATUS
		Nt_SetProcessThreadToken(
		HANDLE Process,
		HANDLE Thread,
		HANDLE Token
		);

	ULONG_PTR
		Nt_GetSessionId(
		HANDLE DEF_VAL(Process, NtCurrentProcess())
		);

	NTSTATUS
		Nt_AdjustPrivilege(
		ULONG_PTR   Privilege,
		BOOL        DEF_VAL(Enable, TRUE),
		BOOL        DEF_VAL(CurrentThread, FALSE)
		);

#if ML_KERNEL_MODE

	PLDR_MODULE
		LookupPsLoadedModuleList(
		PLDR_MODULE LdrModule,
		PVOID       CallDriverEntry
		);

	NTSTATUS
		QuerySystemModuleByHandle(
		PVOID                           ImageBase,
		PRTL_PROCESS_MODULE_INFORMATION Module
		);

	NTSTATUS
		QueryModuleNameByHandle(
		PVOID           ImageBase,
		PUNICODE_STRING ModuleName
		);

	NTSTATUS
		Nt_WaitForDebugEvent(
		PDBGUI_WAIT_STATE_CHANGE WaitState,
		ULONG Timeout,
		HANDLE DebugObject
		);

	NTSTATUS
		KiQueueUserApc(
		PETHREAD            Thread,
		PKNORMAL_ROUTINE    ApcRoutine,
		PVOID               DEF_VAL(ApcRoutineContext, NULL),
		PVOID               DEF_VAL(Argument1, NULL),
		PVOID               DEF_VAL(Argument2, NULL)
		);

#else   // r3

	/************************************************************************
	user mode
	************************************************************************/

	/************************************************************************
	debug api
	************************************************************************/

	NTSTATUS Nt_DebugActiveProcess(ULONG_PTR ProcessId);
	NTSTATUS Nt_DebugActiveProcessStop(ULONG_PTR ProcessId);

	NTSTATUS
		Nt_WaitForDebugEvent(
		PDBGUI_WAIT_STATE_CHANGE WaitState,
		ULONG Timeout,
		HANDLE DEF_VAL(DebugObject, DbgUiGetThreadDebugObject())
		);


	/************************************************************************
	process api
	************************************************************************/

	BOOL
		Nt_IsWow64Process(
		HANDLE DEF_VAL(Process, NtCurrentProcess())
		);

	ULONG Nt_GetErrorMode();
	ULONG Nt_SetErrorMode(ULONG Mode);

	/************************************************************************
	memory
	************************************************************************/

	NTSTATUS
		Nt_ProtectMemory(
		HANDLE      ProcessHandle,
		PVOID       BaseAddress,
		ULONG_PTR   Size,
		ULONG       NewProtect,
		PULONG      OldProtect
		);

	NTSTATUS
		Nt_ReadMemory(
		HANDLE      ProcessHandle,
		PVOID       BaseAddress,
		PVOID       Buffer,
		ULONG_PTR   Size,
		PULONG_PTR  DEF_VAL(BytesRead, NULL)
		);

	NTSTATUS
		Nt_WriteMemory(
		HANDLE      ProcessHandle,
		PVOID       BaseAddress,
		PVOID       Buffer,
		ULONG_PTR   Size,
		PULONG_PTR  DEF_VAL(BytesWritten, NULL)
		);

	NTSTATUS
		Nt_WriteProtectMemory(
		HANDLE      ProcessHandle,
		PVOID       BaseAddress,
		PVOID       Buffer,
		ULONG_PTR   Size,
		PULONG_PTR  DEF_VAL(BytesWritten, NULL)
		);


	/************************************************************************
	file io
	************************************************************************/

	NTSTATUS
		Nt_MoveFile(
		PCWSTR ExistingFileName,
		PCWSTR NewFileName
		);


	NTSTATUS
		Nt_CopyFile(
		PCWSTR  ExistingFileName,
		PCWSTR  NewFileName,
		BOOL    DEF_VAL(FailIfExists, FALSE)
		);

	ULONG_PTR
		Nt_GetDosPathFromNtDeviceName(
		PWSTR           DosPath,
		ULONG_PTR       DosPathLength,
		PUNICODE_STRING NtDeviceName
		);

	NTSTATUS
		Nt_GetDosLetterFromVolumeDeviceName(
		PUNICODE_STRING DosLetter,
		PUNICODE_STRING NtDeviceName
		);

	NTSTATUS
		Nt_GetDosPathFromHandle(
		PUNICODE_STRING DosPath,
		HANDLE          FileHandle
		);

	NTSTATUS
		Nt_NtPathNameToDosPathName(
		PUNICODE_STRING DosPath,
		PUNICODE_STRING NtPath
		);

	ULONG
		Nt_GetFileAttributes(
		LPCWSTR FileName
		);

	PVOID
		Nt_GetModuleHandle(
		LPCWSTR lpModuleName
		);

	ULONG_PTR
		Nt_GetModulePath(
		PVOID       ModuleBase,
		PWSTR       Path,
		ULONG_PTR   BufferCount
		);

	ULONG_PTR
		Nt_GetModuleFileName(
		PVOID       ModuleBase,
		LPWSTR      lpFilename,
		ULONG_PTR   nSize
		);

	BOOL Nt_SetExeDirectoryAsCurrent();

	BOOL
		Nt_FindNextFile(
		HANDLE              FindFileHandle,
		PWIN32_FIND_DATAW   FindFileData
		);

	BOOL
		Nt_FindClose(
		HANDLE FindFileHandle
		);

	HANDLE
		Nt_FindFirstFile(
		LPCWSTR             FileName,
		PWIN32_FIND_DATAW   FindFileData
		);

	/************************************************************************
	registry api
	************************************************************************/

	NTSTATUS
		Nt_OpenPredefinedKeyHandle(
		PHANDLE     KeyHandle,
		HKEY        PredefinedKey,
		ACCESS_MASK DEF_VAL(DesiredAccess, KEY_ALL_ACCESS)
		);

	NTSTATUS
		Nt_RegGetValue(
		HANDLE                      hKey,
		PCWSTR                      SubKey,
		PCWSTR                      ValueName,
		KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
		PVOID                       KeyValueInformation,
		ULONG                       Length,
		PULONG                      DEF_VAL(ResultLength, NULL),
		ULONG                       DEF_VAL(Flags, 0)
		);

	NTSTATUS
		Nt_RegSetValue(
		HANDLE  hKey,
		PCWSTR  SubKey,
		PCWSTR  ValueName,
		ULONG   ValueType,
		LPCVOID ValueData,
		DWORD   ValueDataLength
		);

	NTSTATUS
		Nt_RegDeleteValue(
		HANDLE  hKey,
		PCWSTR  SubKey,
		PCWSTR  ValueName
		);


	/************************************************************************
	dll api
	************************************************************************/

	PVOID
		Nt_LoadLibrary(
		PWSTR ModuleFileName
		);

	PVOID
		FASTCALL
		Nt_GetProcAddress(
		PVOID ModuleBase,
		PCSTR ProcedureName
		);

	/************************************************************************
	process api
	************************************************************************/

#define INJECT_THREAD_SUSPENDED     (1u << 0)
#define INJECT_ISSUE_REMOTE_BREAKIN (1u << 1)
#define INJECT_POINT_TO_SHELL_CODE  (1u << 2)
#define INJECT_ISSUE_BREAKIN        (1u << 3)
#define INJECT_PREALLOC_BUFFER      (1u << 4)
#define INJECT_DONT_CHANGE_IP       (1u << 5)
#define INJECT_ISSUE_BREAKIN_ONLY   (1u << 6)

	NTSTATUS
		InjectDllToRemoteProcess(
		HANDLE          ProcessHandle,
		HANDLE          ThreadHandle,
		PUNICODE_STRING DllFullPath,
		ULONG_PTR       Flags,
		PVOID*          DEF_VAL(InjectBuffer, NULL),
		ULONG_PTR       DEF_VAL(Timeout, 500)
		);

	NTSTATUS
		Nt_CreateProcess(
		HANDLE                  Token,
		PCWSTR                  ApplicationName,
		PWSTR                   DEF_VAL(CommandLine, NULL),
		PCWSTR                  DEF_VAL(CurrentDirectory, NULL),
		ULONG                   DEF_VAL(CreationFlags, 0),
		LPSTARTUPINFOW          DEF_VAL(StartupInfo, NULL),
		LPPROCESS_INFORMATION   DEF_VAL(ProcessInformation, NULL),
		LPSECURITY_ATTRIBUTES   DEF_VAL(ProcessAttributes, NULL),
		LPSECURITY_ATTRIBUTES   DEF_VAL(ThreadAttributes, NULL),
		PVOID                   DEF_VAL(Environment, NULL)
		);

	NTSTATUS
		Nt_CreateProcess2(
		CreateProcessInternal2Routine   Routine,
		HANDLE                          Token,
		PCWSTR                          ApplicationName,
		PWSTR                           DEF_VAL(CommandLine, NULL),
		PCWSTR                          DEF_VAL(CurrentDirectory, NULL),
		ULONG                           DEF_VAL(CreationFlags, 0),
		LPSTARTUPINFOW                  DEF_VAL(StartupInfo, NULL),
		LPPROCESS_INFORMATION           DEF_VAL(ProcessInformation, NULL),
		LPSECURITY_ATTRIBUTES           DEF_VAL(ProcessAttributes, NULL),
		LPSECURITY_ATTRIBUTES           DEF_VAL(ThreadAttributes, NULL),
		PVOID                           DEF_VAL(Environment, NULL)
		);

	ULONG
		Nt_WaitForSingleObjectEx(
		IN HANDLE hHandle,
		IN ULONG  Milliseconds,
		IN BOOL   bAlertable
		);

	VOID MessageBoxErrorW(HWND hWnd, NTSTATUS Status, LPWSTR lpCaption, UINT uType);
	VOID PrintError(NTSTATUS Status);
	VOID Nt_Sleep(ULONG_PTR Milliseconds, BOOL DEF_VAL(Alertable, FALSE));
	BOOL Nt_TerminateThread(IN HANDLE hThread, IN ULONG dwExitCode);

	ForceInline PWCHAR Nt_GetCommandLine()
	{
		return Nt_CurrentPeb()->ProcessParameters->CommandLine.Buffer;
	}

	ForceInline PVOID Nt_GetExeModuleHandle()
	{
		return (PVOID)Nt_CurrentPeb()->ImageBaseAddress;
	}

	ForceInline ULONG_PTR Nt_GetCurrentProcessId()
	{
		return (ULONG_PTR)Nt_CurrentTeb()->ClientId.UniqueProcess;
	}

	ForceInline ULONG_PTR Nt_GetCurrentThreadId()
	{
		return (ULONG_PTR)Nt_CurrentTeb()->ClientId.UniqueThread;
	}

	ULONG
		Nt_GetSystemDirectory64(
		PWSTR Buffer,
		ULONG BufferCount
		);

	ULONG
		Nt_GetWindowsDirectory(
		PWSTR Buffer,
		ULONG BufferCount
		);

	ULONG
		Nt_GetSystemDirectory(
		PWSTR Buffer,
		ULONG BufferCount
		);

	ULONG
		Nt_GetExeDirectory(
		PWSTR Path,
		ULONG BufferCount
		);

	inline
		ULONG
		Nt_GetCurrentDirectory(
		ULONG BufferCount,
		PWSTR Buffer
		)
	{
		return RtlGetCurrentDirectory_U(BufferCount * sizeof(WCHAR), Buffer) / sizeof(WCHAR);
	}

	inline
		BOOL
		Nt_SetCurrentDirectory(
		PCWSTR PathName
		)
	{
		UNICODE_STRING Path;

		RtlInitUnicodeString(&Path, PathName);
		return NT_SUCCESS(RtlSetCurrentDirectory_U(&Path));
	}

	VOID
		Nt_ExitProcess(
		ULONG ExitCode
		);

	inline
		VOID
		SetLastNTError(
		NTSTATUS Status
		)
	{
		RtlSetLastWin32ErrorAndNtStatusFromNtStatus(Status);
	}

	ForceInline
		VOID
		BaseSetLastNTError(
		NTSTATUS Status
		)
	{
		SetLastNTError(Status);
	}

	NTSTATUS
		Nt_CreateThread(
		PVOID                   StartAddress,
		PVOID                   DEF_VAL(StartParameter, NULL),
		BOOL                    DEF_VAL(CreateSuspended, FALSE),
		HANDLE                  DEF_VAL(ProcessHandle, NtCurrentProcess()),
		PHANDLE                 DEF_VAL(ThreadHandle, NULL),
		PCLIENT_ID              DEF_VAL(ClientID, NULL),
		ULONG                   DEF_VAL(StackZeroBits, 0),
		ULONG                   DEF_VAL(StackReserved, 0),
		ULONG                   DEF_VAL(StackCommit, 0),
		PSECURITY_DESCRIPTOR    DEF_VAL(SecurityDescriptor, NULL)
		);

	NTSTATUS
		Nt_SetThreadPriority(
		HANDLE  ThreadHandle,
		LONG    Priority
		);

	VOID
		InitializeListHead(
		PLIST_ENTRY ListHead
		);

	BOOL
		IsListEmpty(
		LIST_ENTRY *ListHead
		);

	BOOL
		RemoveEntryList(
		PLIST_ENTRY Entry
		);

	PLIST_ENTRY
		RemoveHeadList(
		PLIST_ENTRY ListHead
		);

	PLIST_ENTRY
		RemoveTailList(
		PLIST_ENTRY ListHead
		);

	VOID
		InsertTailList(
		PLIST_ENTRY ListHead,
		PLIST_ENTRY Entry
		);

	VOID
		InsertHeadList(
		PLIST_ENTRY ListHead,
		PLIST_ENTRY Entry
		);

	VOID
		AppendTailList(
		PLIST_ENTRY ListHead,
		PLIST_ENTRY ListToAppend
		);

	PSINGLE_LIST_ENTRY
		PopEntryList(
		PSINGLE_LIST_ENTRY ListHead
		);

	VOID
		PushEntryList(
		PSINGLE_LIST_ENTRY ListHead,
		PSINGLE_LIST_ENTRY Entry
		);

	PLIST_ENTRY
		ExInterlockedInsertHeadList(
		PLIST_ENTRY         ListHead,
		PLIST_ENTRY         Entry,
		PCRITICAL_SECTION   Lock
		);

	PLIST_ENTRY
		ExInterlockedInsertTailList(
		PLIST_ENTRY         ListHead,
		PLIST_ENTRY         Entry,
		PCRITICAL_SECTION   Lock
		);

	PLIST_ENTRY
		ExInterlockedRemoveHeadList(
		PLIST_ENTRY         ListHead,
		PCRITICAL_SECTION   Lock
		);

	PSINGLE_LIST_ENTRY
		ExInterlockedPopEntryList(
		PSINGLE_LIST_ENTRY  ListHead,
		PCRITICAL_SECTION   Lock
		);

	PSINGLE_LIST_ENTRY
		ExInterlockedPushEntryList(
		PSINGLE_LIST_ENTRY  ListHead,
		PSINGLE_LIST_ENTRY  Entry,
		PCRITICAL_SECTION   Lock
		);

	VOID
		Nt_InitializeSListHead(
		PSLIST_HEADER SListHead
		);

#endif  // MY_NT_DDK

	_ML_C_TAIL_

#endif // _NATIVEAPIHELPER_H_146120be_f089_49ef_bfd3_82c455e90ba3
#ifndef _MEMORYALLOCATOR_H_bdd5f64b_fcd1_41d9_8f33_e4eeae67f3c8
#define _MEMORYALLOCATOR_H_bdd5f64b_fcd1_41d9_8f33_e4eeae67f3c8


#if CPP_DEFINED

#include <new>

#define MM_NOT_FREE     0x80000000

	class NOVTABLE MemoryAllocator
	{
	protected:

#if ML_KERNEL_MODE

	public:
		static const ULONG m_kMemTag = TAG4('MLKN');

#else

		HANDLE       m_hHeap;
		static HANDLE       m_hHeapGlobal;
		static ULONG_PTR    m_ObjectCount;

#endif  // MY_NT_DDK

	protected:

#if !ML_KERNEL_MODE

		NoInline static HANDLE CreateGlobalHeapInternal(DWORD flOptions = 0, SIZE_T dwInitialSize = 0, SIZE_T dwMaximumSize = 0)
		{
			if (m_hHeapGlobal == NULL)
				m_hHeapGlobal = CreateHeapInternal(flOptions, dwInitialSize, dwMaximumSize);

			return m_hHeapGlobal;
		}

		ForceInline static ULONG_PTR AddRef()
		{
			return ++m_ObjectCount;
			//return Interlocked_Increment((PLong)&m_ObjectCount);
		}

		ForceInline static ULONG_PTR Release()
		{
			return --m_ObjectCount;
			//return Interlocked_Decrement((PLong)&m_ObjectCount);
		}

		NoInline Bool DestroyGlobal()
		{
			if (m_hHeap == NULL)
				return False;

			return DestroyGlobalHeap();
		}

		ForceInline Bool IsHeapPrivate()
		{
			return m_hHeap != NULL && m_hHeap != m_hHeapGlobal;
		}

#endif  // MY_NT_DDK

	public:
		NoInline MemoryAllocator(HANDLE hHeap = NULL)
		{
#if ML_KERNEL_MODE
			UNREFERENCED_PARAMETER(hHeap);
#else
			if (hHeap != NULL)
			{
				//            m_hHeapPrivate = hHeap;
			}
			else
			{
				if (AddRef() == 1)
				{
					hHeap = CreateGlobalHeapInternal();
					if (hHeap == NULL)
						Release();
				}
				else
				{
					hHeap = m_hHeapGlobal;
				}

				//            m_hHeapPrivate = NULL;
			}

			m_hHeap = hHeap;

#endif  // MY_NT_DDK
		}

		MemoryAllocator(const MemoryAllocator &mem)
		{
			*this = mem;
		}

		NoInline ~MemoryAllocator()
		{
#if !ML_KERNEL_MODE

			if (IsHeapPrivate())
			{
				if (IsNotProcessHeap())
					DestroyHeapInternal(m_hHeap);
			}
			else
			{
				DestroyGlobal();
			}

#endif  // MY_NT_DDK
		}

#if !ML_KERNEL_MODE

		HANDLE GetHeap() const
		{
			return m_hHeap;
		}

		static HANDLE CreateGlobalHeap(ULONG Options = 0)
		{
			HANDLE hHeap = CreateGlobalHeapInternal(Options);
			if (hHeap != NULL)
				AddRef();
			return hHeap;
		}

		static Bool DestroyGlobalHeap()
		{
			if (m_hHeapGlobal != NULL && Release() == 0)
			{
				if (DestroyHeapInternal(m_hHeapGlobal))
				{
					m_hHeapGlobal = NULL;
					return True;
				}
			}

			return False;
		}

		static HANDLE GetGlobalHeap()
		{
			if (m_hHeapGlobal == NULL)
				m_hHeapGlobal = MemoryAllocator::CreateGlobalHeap();

			return m_hHeapGlobal;
		}

		static PVOID GetAddressOfGlobalHeap()
		{
			return &m_hHeapGlobal;
		}

		static PVOID AllocateMemory(ULONG_PTR Size, ULONG Flags = 0)
		{
			return AllocateHeapInternal(GetGlobalHeap(), Flags, Size);
		}

		static PVOID ReAllocateMemory(PVOID Memory, ULONG_PTR Size, ULONG Flags = 0)
		{
			PVOID Block = ReAllocateHeapInternal(GetGlobalHeap(), Flags, Memory, Size);

			if (Block == NULL && Memory != NULL)
			{
				FreeMemory(Memory);
			}

			return Block;
		}

		static BOOL FreeMemory(PVOID Memory, ULONG Flags = 0)
		{
			return FreeHeapInternal(GetGlobalHeap(), Flags, Memory);
		}

		HANDLE CreateHeap(DWORD flOptions = 0, SIZE_T dwInitialSize = 0, SIZE_T dwMaximumSize = 0)
		{
			if (IsHeapPrivate())
				DestroyHeapInternal(m_hHeap);
			else
				DestroyGlobal();

			m_hHeap = CreateHeapInternal(flOptions, dwInitialSize, dwMaximumSize);

			return m_hHeap;
		}

		Bool DestroyHeap()
		{
			Bool Result = True;

			if (IsHeapPrivate() && IsNotProcessHeap())
			{
				Result = DestroyHeapInternal(m_hHeap);
				if (Result)
					m_hHeap = NULL;
			}

			return Result;
		}

#else // r0

		static POOL_TYPE GetGlobalHeap()
		{
			return NonPagedPool;
		}

		static PVOID AllocateMemory(ULONG_PTR Size, POOL_TYPE PoolType = NonPagedPool, ULONG Tag = m_kMemTag)
		{
			return AllocateHeapInternal(Size, PoolType, Tag);
		}

		static BOOL FreeMemory(PVOID Memory, ULONG Tag = m_kMemTag)
		{
			return FreeHeapInternal(Memory, Tag);
		}

#endif  // ML_KERNEL_MODE

#if ML_KERNEL_MODE

		PVoid Alloc(SizeT Size, POOL_TYPE PoolType = NonPagedPool, ULONG Tag = m_kMemTag)
		{
			return AllocateHeapInternal(Size, PoolType, Tag);
		}

		Bool Free(PVoid pBuffer, ULONG Tag = m_kMemTag)
		{
			return FreeHeapInternal(pBuffer, Tag);
		}

		Bool SafeFree(PVoid pBuffer, ULONG Tag = m_kMemTag)
		{
			LPVoid **pt = (LPVoid **)pBuffer;
			if (*pt == NULL)
				return False;

			FreeHeapInternal(*pt, Tag);
			*pt = NULL;

			return True;
		}

#else

		PVoid Alloc(SizeT Size, ULONG_PTR Flags = 0)
		{
			return AllocateHeapInternal(m_hHeap, Flags, Size);
		}

		PVoid ReAlloc(PVoid pBuffer, SizeT Size, ULONG_PTR Flags = 0)
		{
			PVoid pRealloc;

			if (pBuffer == NULL)
				return Alloc(Size, Flags);

			pRealloc = ReAllocateHeapInternal(m_hHeap, Flags, pBuffer, Size);
			if (!FLAG_ON(Flags, MM_NOT_FREE))
			{
				if (pRealloc == NULL)
				{
					Free(pBuffer);
				}
			}

			return pRealloc;
		}

		Bool Free(PVoid pBuffer, ULONG_PTR Flags = 0)
		{
			return pBuffer == NULL ? False : FreeHeapInternal(m_hHeap, Flags, pBuffer);
		}

		Bool SafeFree(LPVoid pBuffer, ULONG_PTR Flags = 0)
		{
			LPVoid **pt = (LPVoid **)pBuffer;
			if (*pt == NULL)
				return False;

			Bool Result = FreeHeapInternal(m_hHeap, Flags, *pt);
			if (Result)
				*pt = NULL;

			return Result;
		}

#endif

	private:

#if !ML_KERNEL_MODE

#if USE_NT_VER

		BOOL IsNotProcessHeap()
		{
			return m_hHeap != Nt_CurrentPeb()->ProcessHeap;
		}

		static HANDLE CreateHeapInternal(ULONG Flags = 0, SIZE_T CommitSize = 0, SIZE_T ReserveSize = 0)
		{
			if (Flags == 0)
				Flags = HEAP_GROWABLE;
			return RtlCreateHeap(Flags, NULL, ReserveSize, CommitSize, NULL, NULL);
		}

		static BOOL DestroyHeapInternal(HANDLE hHeap)
		{
			return !RtlDestroyHeap(hHeap);
		}

#else

		BOOL IsNotProcessHeap()
		{
			return m_hHeap != GetProcessHeap();
		}

		static HANDLE CreateHeapInternal(ULONG Flags = 0, SIZE_T CommitSize = 0, SIZE_T ReserveSize = 0)
		{
			return HeapCreate(Flags, CommitSize, ReserveSize);
		}

		static BOOL DestroyHeapInternal(HANDLE hHeap)
		{
			return HeapDestroy(hHeap);
		}

#endif

#endif  // MY_NT_DDK

		static LONG_PTR ModifyAllocCount(LONG_PTR Increment)
		{
			static LONG_PTR AllocCount;

			AllocCount += Increment;
			return AllocCount;
		}

#if ML_KERNEL_MODE

		static PVOID AllocateHeapInternal(SIZE_T Size, POOL_TYPE PoolType = NonPagedPool, ULONG Tag = m_kMemTag)
		{
			PVOID Memory = ExAllocatePoolWithTag(PoolType, Size, Tag);

#if ML_MEMORY_DEBUG

			ModifyAllocCount(Memory != nullptr);

#endif

			return Memory;
		}

		static BOOL FreeHeapInternal(PVOID Memory, ULONG Tag = m_kMemTag)
		{
			if (Memory == NULL)
				return TRUE;

#if ML_MEMORY_DEBUG

			ModifyAllocCount(-1);

#endif

			ExFreePoolWithTag(Memory, Tag);

			return TRUE;
		}

#elif USE_NT_VER

		static PVOID AllocateHeapInternal(HANDLE Heap, ULONG_PTR Flags, SIZE_T Size)
		{
			PVOID Memory = RtlAllocateHeap(Heap, (ULONG)Flags, Size);

#if ML_MEMORY_DEBUG

			ModifyAllocCount(Memory != nullptr);

#endif

			return Memory;
		}

		static PVOID ReAllocateHeapInternal(HANDLE Heap, ULONG_PTR Flags, PVOID Memory, SIZE_T Size)
		{
			return Memory == NULL ? AllocateHeapInternal(Heap, Flags, Size) : RtlReAllocateHeap(Heap, (ULONG)Flags, Memory, Size);
		}

		static BOOL FreeHeapInternal(HANDLE Heap, ULONG_PTR Flags, PVOID Memory)
		{
			if (Memory == NULL)
				return TRUE;

#if ML_MEMORY_DEBUG

			ModifyAllocCount(-1);

#endif

			return RtlFreeHeap(Heap, (ULONG)Flags, Memory);
		}

#elif 0
		static PVOID AllocateHeapInternal(HANDLE hHeap, ULONG Flags, SIZE_T Size)
		{
			return HeapAlloc(hHeap, Flags, Size);
		}

		static PVOID ReAllocateHeapInternal(HANDLE hHeap, ULONG Flags, PVOID pvMemory, SIZE_T Size)
		{
			return pvMemory == NULL ? AllocateHeapInternal(hHeap, Flags, Size) : HeapReAlloc(hHeap, Flags, pvMemory, Size);
		}

		static BOOL FreeHeapInternal(HANDLE hHeap, ULONG Flags, PVOID pvMemory)
		{
			if (pvMemory == NULL)
				return TRUE;

			return HeapFree(hHeap, Flags, pvMemory);
		}

#endif  // MY_NT_DDK
	};

#if !ML_KERNEL_MODE

	DECL_SELECTANY HANDLE       MemoryAllocator::m_hHeapGlobal = NULL;
	DECL_SELECTANY ULONG_PTR    MemoryAllocator::m_ObjectCount = 0;

#endif // ML_KERNEL_MODE

	// typedef MemoryAllocator CMem;

#if ML_KERNEL_MODE

	template<class Object, POOL_TYPE PoolType = NonPagedPool>
	class FixedMemoryBlock
	{
	protected:
		union
		{
			NPAGED_LOOKASIDE_LIST   NonPaged;
			PAGED_LOOKASIDE_LIST    Paged;
		} LookasideList;

	public:
		static const ULONG_PTR BlockSize = sizeof(Object);

	public:
		NTSTATUS Initialize(
			PALLOCATE_FUNCTION  Allocate = NULL,
			PFREE_FUNCTION      Free = NULL,
			ULONG               Flags = 0,
			ULONG               Tag = MemoryAllocator::m_kMemTag,
			USHORT              Depth = 0
			)
		{
			switch (PoolType)
			{
			case NonPagedPool:
				ExInitializeNPagedLookasideList(&LookasideList.NonPaged, Allocate, Free, Flags, BlockSize, Tag, Depth);
				break;

			case PagedPool:
				ExInitializePagedLookasideList(&LookasideList.Paged, Allocate, Free, Flags, BlockSize, Tag, Depth);
				break;

			default:
				return STATUS_INVALID_PARAMETER;
			}

			return STATUS_SUCCESS;
		}

		NTSTATUS UnInitialize()
		{
			switch (PoolType)
			{
			case NonPagedPool:
				ExDeleteNPagedLookasideList(&LookasideList.NonPaged);
				break;

			case PagedPool:
				ExDeletePagedLookasideList(&LookasideList.Paged);
				break;
			}

			return STATUS_SUCCESS;
		}

		Object* Allocate()
		{
			PVOID Block;

			switch (PoolType)
			{
			case NonPagedPool:
				Block = ExAllocateFromNPagedLookasideList(&LookasideList.NonPaged);
				break;

			case PagedPool:
				Block = ExAllocateFromPagedLookasideList(&LookasideList.Paged);
				break;

			default:
				Block = NULL;
				break;
			}

			if (Block != NULL)
				new (Block)Object;

			return (Object *)Block;
		}

		VOID Free(PVOID Block)
		{
			if (Block == NULL)
				return;

			switch (PoolType)
			{
			case NonPagedPool:
				((Object *)Block)->~Object();
				ExFreeToNPagedLookasideList(&LookasideList.NonPaged, Block);
				break;

			case PagedPool:
				((Object *)Block)->~Object();
				ExFreeToPagedLookasideList(&LookasideList.Paged, Block);
				break;
			}
		}
	};

#endif // r0

#endif // CPP_DEFINED

	_ML_C_HEAD_

		BOOL
		FreeMemoryP(
		PVOID Memory,
		ULONG DEF_VAL(Flags, 0)
		);

#if ML_KERNEL_MODE

	PVOID
		AllocateMemoryP(
		ULONG_PTR Size,
		POOL_TYPE DEF_VAL(PoolType, NonPagedPool)
		);

	PVOID
		AllocateMemory(
		ULONG_PTR Size,
		POOL_TYPE DEF_VAL(PoolType, NonPagedPool)
		);

	BOOL
		FreeMemory(
		PVOID Memory,
		ULONG Flags = 0
		);

#else // user mode

	PVOID
		AllocateMemoryP(
		ULONG_PTR   Size,
		ULONG       DEF_VAL(Flags, 0)
		);

	PVOID
		ReAllocateMemoryP(
		PVOID       Memory,
		ULONG_PTR   Size,
		ULONG       DEF_VAL(Flags, 0)
		);

	PVOID
		AllocateMemory(
		ULONG_PTR   Size,
		ULONG       DEF_VAL(Flags, 0)
		);

	PVOID
		ReAllocateMemory(
		PVOID       Memory,
		ULONG_PTR   Size,
		ULONG       DEF_VAL(Flags, 0)
		);

	BOOL
		FreeMemory(
		PVOID Memory,
		ULONG DEF_VAL(Flags, 0)
		);

	PVOID
		AllocateVirtualMemory(
		ULONG_PTR   Size,
		ULONG       DEF_VAL(Protect, PAGE_EXECUTE_READWRITE),
		HANDLE      DEF_VAL(ProcessHandle, NtCurrentProcess())
		);

	BOOL
		FreeVirtualMemory(
		PVOID   Memory,
		HANDLE  DEF_VAL(ProcessHandle, NtCurrentProcess())
		);

#endif // ML_KERNEL_MODE

	_ML_C_TAIL_

#endif // _MEMORYALLOCATOR_H_bdd5f64b_fcd1_41d9_8f33_e4eeae67f3c8

#pragma warning(disable:4127)

		_ML_C_HEAD_

		/************************************************************************
		misc
		************************************************************************/

		ForceInline ULONG HashAPI(PCChar pszName)
	{
		ULONG Hash = 0;

		while (*(PByte)pszName)
		{
			Hash = _rotl(Hash, 0x0D) ^ *(PByte)pszName++;
		}

		return Hash;
	}

	ForceInline ULONG HashAPILower(PCChar pszName)
	{
		ULONG Hash = 0;

		while (*(PByte)pszName)
		{
			BYTE ch = *(PByte)pszName++;
			Hash = _rotl(Hash, 0x0D) ^ CHAR_LOWER(ch);
		}

		return Hash;
	}

	ForceInline ULONG HashAPI2(PCChar pszName)
	{
		ULONG Hash = 0;

		while (*(PByte)pszName)
		{
			Hash = _rotr(Hash, 9) + (ULONG)(*pszName++) + 0x9E370001;
		}

		return Hash;
	}

	ForceInline ULONG HashAPIUpper(PCChar pszName)
	{
		ULONG ch, Hash = 0;

		while (*(PByte)pszName)
		{
			ch = *(PByte)pszName++;
			Hash = _rotl(Hash, 0x0D) ^ CHAR_UPPER(ch);
		}

		return Hash;
	}

	ForceInline ULONG HashAPI2Upper(PCChar pszName)
	{
		ULONG ch, Hash = 0;

		while (*(PByte)pszName)
		{
			ch = *(PByte)pszName++;
			Hash = _rotr(Hash, 9) + CHAR_UPPER(ch) + 0x9E370001;
		}

		return Hash;
	}

	inline ULONG HashUnicodeUpper(PCWSTR Unicode, ULONG DEF_VAL(Hash, 0))
	{
		WCHAR ch;

		do
		{
			ch = *Unicode++;
			Hash = Hash * 0x1003F + CHAR_UPPER(ch);
		} while (ch != 0);

		return Hash;
	}

	inline ULONG HashUnicodeLower(PCWSTR Unicode, ULONG DEF_VAL(Hash, 0))
	{
		ULONG ch;

		ch = *Unicode++;

		while (ch)
		{
			Hash = Hash * 0x1003F + CHAR_LOWER(ch);
			ch = *Unicode++;
		}

		return Hash;
	}

	inline ULONG HashAnsiLower(PCSTR Ansi, ULONG DEF_VAL(Hash, 0))
	{
		ULONG ch;

		ch = *(PByte)Ansi++;

		while (ch)
		{
			Hash = Hash * 0x1003F + CHAR_LOWER(ch);
			ch = *(PByte)Ansi++;
		}

		return Hash;
	}

#if CPP_DEFINED

	EXTCPP
		template<class StrType>
	inline ULONG_PTR HashStringLowerT(StrType *String, ULONG_PTR Hash = 0)
	{
		StrType ch;

		ch = *String++;

		while (ch)
		{
			Hash = Hash * 0x1003F + CHAR_LOWER(ch);
			ch = *String++;
		}

		return Hash;
	}

	EXTCPP
		template<class StrType>
	inline ULONG_PTR HashStringT(StrType *String, ULONG_PTR Hash = 0)
	{
		StrType ch = *String++;

		while (ch)
		{
			Hash = Hash * 0x1003F + ch;

			switch (sizeof(ch))
			{
			case sizeof(CHAR) :
				*(PCHAR)&ch = *String++;
				break;

			case sizeof(WCHAR) :
				*(PWSTR)&ch = *String++;
			}
		}

		return Hash;
	}

#endif // CPP_DEFINED

#if ML_KERNEL_MODE

	NTSTATUS
		ProbeForReadSafe(
		PVOID   Address,
		SIZE_T  Length,
		ULONG   Alignment
		);

	NTSTATUS
		ProbeForWriteSafe(
		PVOID   Address,
		SIZE_T  Length,
		ULONG   Alignment
		);

	NTSTATUS
		MmProbeAndLockPagesSafe(
		PMDL            MemoryDescriptorList,
		KPROCESSOR_MODE AccessMode,
		LOCK_OPERATION  Operation
		);

#else   // else if !MY_NT_DDK

	/************************************************************************
	user mode
	************************************************************************/

	NTSTATUS CreateMiniDump(PEXCEPTION_POINTERS ExceptionPointers);

	/************************************************************************
	directory
	************************************************************************/

	BOOL    IsPathExistsW(LPCWSTR Path);
	BOOL    IsPathExistsA(LPCSTR Path);
	BOOL    CreateDirectoryRecursiveA(LPCSTR PathName);
	BOOL    CreateDirectoryRecursiveW(LPCWSTR PathName);
	ULONG   GetExeDirectoryW(LPWSTR Path, ULONG BufferCount);
	ULONG   GetExeDirectoryA(LPSTR Path, ULONG BufferCount);


	enum
	{
		EDF_SUBDIR = 0x00000001,
		EDF_BEFORE = 0x00000002,
		EDF_AFTER = 0x00000004,
		EDF_PROCDIR = 0x00000008,
	};

	typedef
		LONG
		(STDCALL *EnumDirectoryFilesCallBackRoutine)(
		PVOID               Buffer,
		PWIN32_FIND_DATAW   FindData,
		ULONG_PTR           Context
		);

#define EnumFilesM(Buffer, FindData, Context) [] (PVOID Buffer, PWIN32_FIND_DATAW FindData, ULONG_PTR Context) -> LONG

	typedef EnumDirectoryFilesCallBackRoutine FEnumDirectoryFilesCallBack;

	typedef struct
	{
		ULONG                               Flags;
		HANDLE                              hHeap;
		PVOID                               lpBuffer;
		PVOID                               lpOutBuffer;
		LPCWSTR                             pszFilter;
		ULONG                               ElemSize;
		LARGE_INTEGER                       ElemCount;
		LARGE_INTEGER                       MaxCount;
		EnumDirectoryFilesCallBackRoutine   CallBack;
		ULONG_PTR                           Context;
		WIN32_FIND_DATAW                    wfd;
		WCHAR                               SymbolicLinkPath[MAX_NTPATH];
	} ENUM_DIRECTORY_INFO;

	BOOL EnumDirectoryFilesWorker(LPWSTR lpPath, ENUM_DIRECTORY_INFO *pFindInfo);
	BOOL EnumDirectoryFilesFree(PVOID lpBuffer);

	BOOL
		EnumDirectoryFiles(
		PVOID                              *lpFilesBuffer,
		LPCWSTR                             pszFilter,
		ULONG                               ElemSize,
		LPCWSTR                             pszPath,
		PLARGE_INTEGER                      pElemCount,
		EnumDirectoryFilesCallBackRoutine   CallBack,
		ULONG_PTR                           Context,
		ULONG                               Flags = 0
		);

	/************************************************************************
	command line
	************************************************************************/

	typedef struct
	{
		int newmode;
	} __my_startupinfo;

	EXTC_IMPORT void CDECL __getmainargs(int *argc, char ***argv, char ***envp, int, __my_startupinfo *);
	EXTC_IMPORT void CDECL __wgetmainargs(int *argc, wchar_t ***argv, wchar_t ***envp, int, __my_startupinfo *);

#ifndef UNICODE
#define getmainargs __getmainargs
#else
#define getmainargs __wgetmainargs
#endif /* UNICODE */

	/*
	argret = __wgetmainargs(&argc, &argv, &envp,
	_dowildcard, &startinfo);
	#else
	argret = __getmainargs(&argc, &argv, &envp,
	_dowildcard, &startinfo);
	*/

#if USE_NT_VER

#define getargsW(pargc, pargv) (*(pargv)) = CmdLineToArgvW(Nt_GetCommandLine(), (pargc))

#else // !USE_NT_VER

#define getargsA(pargc, pargv) \
						            { \
                Char **__envp__;int __dowildcard = 0;__my_startupinfo _my_startupinfo;\
                *(pargc) = 0; \
                __getmainargs((int *)(pargc), (pargv), (&__envp__), __dowildcard, &_my_startupinfo); \
						            }

#define getargsW(pargc, pargv) \
						            { \
                WChar **__envp__;int __dowildcard = 0;__my_startupinfo _my_startupinfo; \
                *(pargc) = 0; \
                __wgetmainargs((int *)(pargc), (pargv), (&__envp__), __dowildcard, &_my_startupinfo); \
						            }

#endif  // USE_NT_VER

#if MY_UNICODE_ENABLE
#define getargs getargsW
#else
#define getargs getargsA
#endif

#if defined(_MT) && !defined(_DLL)
#undef getargs
#undef getargsA
#undef getargsW
#define getargs(a, b)
#define getargsA getargs
#define getargsW getargs
#endif

	LONG_PTR    FASTCALL CmdLineToArgvWorkerA(LPSTR pszCmdLine, LPSTR *pArgv, PLONG_PTR pCmdLineLength);
	PSTR*       FASTCALL CmdLineToArgvA(LPSTR pszCmdLine, PLONG_PTR pArgc);
	LONG_PTR    FASTCALL CmdLineToArgvWorkerW(LPWSTR pszCmdLine, LPWSTR *pArgv, PLONG_PTR pCmdLineLength);
	PWSTR*      FASTCALL CmdLineToArgvW(LPWSTR pszCmdLine, PLONG_PTR pArgc);

	inline VOID ReleaseArgv(PVOID Argv)
	{
		FreeMemory(Argv, 0);
	}

	ForceInline PTChar* FASTCALL CmdLineToArgv(PTChar pszCmdLine, PLONG_PTR pArgc)
	{
		if (sizeof(*pszCmdLine) == sizeof(Char))
			return (PTChar *)CmdLineToArgvA((LPSTR)pszCmdLine, pArgc);
		else
			return (PTChar *)CmdLineToArgvW((LPWSTR)pszCmdLine, pArgc);
	}

#endif  // MY_NT_DDK

	_ML_C_TAIL_

#pragma warning(default:4127)

#endif // _APIHELPER_H_ff88b0e9_19eb_4ea3_8c2c_99541c492e06
#ifndef _CONSOLE_H_82cc62c0_f9e1_426c_836e_059a18d387e9
#define _CONSOLE_H_82cc62c0_f9e1_426c_836e_059a18d387e9


#if !defined(FILE_DEVICE_CONSOLE)
#define FILE_DEVICE_CONSOLE             0x00000050
#endif

		_ML_C_HEAD_

		CHAR        ConsoleReadChar();
	VOID        ClearConsoleScreen();
	VOID        PauseConsole(PCWSTR DEF_VAL(PauseText, nullptr));
	ULONG_PTR   PrintConsoleA(PCSTR Format, ...);
	ULONG_PTR   PrintConsoleW(PCWSTR Format, ...);
	ULONG_PTR   PrintConsole(PCWSTR Format, ...);

	_ML_C_TAIL_

#endif // _CONSOLE_H_82cc62c0_f9e1_426c_836e_059a18d387e9
		//#include "Hook.h"
#ifndef _IMAGE_H_e93dede9_b8fd_4157_ae1a_b888658c3ce8
#define _IMAGE_H_e93dede9_b8fd_4157_ae1a_b888658c3ce8


#if MY_OS_WIN32

#if !ML_AMD64
#pragma INCLUDE_LIB(ucidec.lib)
#endif

		EXTC_IMPORT int STDCALL UCIDecode(const void *src, int srclen, void** dst, int* stride, int* w, int* h, int* bpp);
	EXTC_IMPORT int STDCALL UCIFree(void* p);

#endif

#if CPP_DEFINED

#if MY_OS_WIN32

#define RGBA_GetRValue(color) ((Byte)((color) >> 0))
#define RGBA_GetGValue(color) ((Byte)((color) >> 8))
#define RGBA_GetBValue(color) ((Byte)((color) >> 16))
#define RGBA_GetAValue(color) ((Byte)((color) >> 24))
#define RGBA(r, g, b, a) (UInt32)(((u32)(u8)(r)) | (((u32)(u8)(g) << 8)) | (((u32)(u8)(b) << 16)) | (((u32)(u8)(a) << 24)))

#endif // MY_OS_WIN32

#pragma pack(push, 1)

	typedef struct
	{
		UInt16 Tag;                   // 0x00
		UInt32 FileSize;             // 0x02
		UInt32 Reserve;              // 0x06
		UInt32 RawOffset;            // 0x0A
		struct
		{
			UInt32 InfoHeaderSize;   // 0x0E
			Int32  Width;            // 0x12
			Int32  Height;           // 0x16
			UInt16 Layer;             // 0x1A
			UInt16 Bit;               // 0x1C
			UInt32 Compressed;       // 0x1E
			UInt32 SizeImage;        // 0x22
			Int32  XPelsPerMeter;     // 0x26
			Int32  YPelsPerMeter;     // 0x2A
			UInt32 ClrUsed;          // 0x2E
			UInt32 ClrImportant;     // 0x32
		} Info;
	} IMAGE_BITMAP_HEADER, *PIMAGE_BITMAP_HEADER;

	enum
	{
		TgaImageRga = 2,
	};

	typedef struct
	{
		UChar  ID;
		UChar  PaletteType;
		UChar  ImageType;
		UInt16 PaletteEntry;
		UInt16 PaletteLength;
		UChar  PaletteBitCount;
		UInt16 OriginX;
		UInt16 OriginY;
		UInt16 Width;
		UInt16 Height;
		UChar  PixelDepth;
		UChar  ImageDescription;

	} IMAGE_TGA_HEADER, *PIMAGE_TGA_HEADER;

	typedef struct
	{
		union
		{
			PVoid lpBuffer;
			PByte  pbBuffer;
		};
		Int32   Width;
		Int32   Height;
		Int32   BitsPerPixel;
		Int32   Stride;
		PVoid   ExtraInfo;
		UInt32  ExtraInfoSize;

	} UCI_INFO;

#define UCI_META_INFO_MAGIC TAG4('META')

	typedef struct
	{
		UInt32 Magic;   // TAG4('META')
		UInt32 cbSize;
		Int32  Width;
		Int32  Height;
		Int32  BitsPerPixel;
	} UCI_META_INFO;

	typedef struct
	{
		UCHAR   Width;
		UCHAR   Height;
		UCHAR   NumberOfColorInPalette;
		UCHAR   Reserve;

		union
		{
			struct
			{
				USHORT  Planes;
				USHORT  BitsPerPixel;
			} Ico;

			struct
			{
				USHORT  X;
				USHORT  Y;
			} Cur;
		};

		ULONG ImageSize;
		ULONG ImageOffset;

	} IMAGE_ICO_IMAGE_ENTRY, *PIMAGE_ICO_IMAGE_ENTRY;

	typedef struct
	{
		USHORT Reserve;
		USHORT FileType;   // 1
		USHORT NumberOfImage;

		IMAGE_ICO_IMAGE_ENTRY   Entry[1];

	} IMAGE_ICO_HEADER, *PIMAGE_ICO_HEADER;

#pragma pack(pop)

	ForceInline Long GetBitmapStride(Long Width, Long BitsPerPixel)
	{
		return (Width * BitsPerPixel / 8 + 3) & ~3;
	}

	inline
		Bool
		FASTCALL
		InitBitmapHeader(
		IMAGE_BITMAP_HEADER*Header,
		Int32               Width,
		Int32               Height,
		Int32               BitsPerPixel,
		PLongPtr            Stride
		)
	{
		UInt32 LocalStride, PaletteSize;

		if (Header == NULL)
			return False;

		ZeroMemory(Header, sizeof(*Header));

		PaletteSize = BitsPerPixel == 8 ? 256 * 4 : 0;

		Header->RawOffset = sizeof(*Header) + PaletteSize;
		Header->Info.Height = Height;
		Header->Info.Width = Width;
		Header->Tag = TAG2('BM');
		Header->Info.InfoHeaderSize = sizeof(Header->Info);
		Header->Info.Layer = 1;
		Header->Info.Bit = (UInt16)BitsPerPixel;
		//    pHeader->Info.dwClrUsed = 1;
		LocalStride = (Width * BitsPerPixel / 8 + 3) & ~3;
		if (Stride)
			*Stride = LocalStride;

		Header->FileSize = Height * LocalStride + sizeof(*Header) + PaletteSize;

		return True;
	}

#if MY_OS_WIN32

	inline PVoid SkipUCIStream(PVoid Data, Int32 DataSize, PUInt32 ExtraInfoSize)
	{
		PByte Buffer = (PByte)Data;
		UInt32 StreamCount;

		switch (*(PUInt32)Buffer)
		{
		case TAG4('UCI3'):
		case TAG4('UCI '):
		case TAG4('UCI@'): StreamCount = 1; break;
		case TAG4('UCI4'):
		case TAG4('UCI!'):
		case TAG4('UCIA'): StreamCount = 2; break;
		case TAG4('UCIT'): StreamCount = 3; break;
		case TAG4('UCIQ'): StreamCount = 4; break;
		default: return NULL;
		}

		Buffer += 0xC;
		DataSize -= 0xC;
		while (StreamCount--)
		{
			UInt32 Size = *(PUInt32)Buffer + 4;
			Buffer += Size;
			DataSize -= Size;
		}

		if (DataSize <= 0)
		{
			if (ExtraInfoSize)
				*ExtraInfoSize = 0;
			return NULL;
		}

		if (ExtraInfoSize)
			*ExtraInfoSize = DataSize;

		return Buffer;
	}

	inline Int32 UCIDecodeEx(PVoid Data, Int32 DataSize, UCI_INFO *UCIInfo, Bool GetExtraInfo)
	{
		Int32 ret;

		if (UCIInfo == NULL)
			return -1;

		ret = UCIDecode(Data, DataSize, &UCIInfo->lpBuffer, &UCIInfo->Stride, &UCIInfo->Width, &UCIInfo->Height, &UCIInfo->BitsPerPixel);
		if (ret < 0)
			return ret;

		if (GetExtraInfo)
		{
			UCIInfo->ExtraInfo = SkipUCIStream(Data, DataSize, &UCIInfo->ExtraInfoSize);
		}
		else
		{
			UCIInfo->ExtraInfo = NULL;
			UCIInfo->ExtraInfoSize = 0;
		}

		return ret;
	}

	inline Void UCIFreeEx(UCI_INFO *UCIInfo)
	{
		if (UCIInfo == NULL)
			return;

		UCIFree(UCIInfo->lpBuffer);
	}

#endif // MY_OS_WIN32

	inline
		UInt32
		ConvertRawTo8Bit(
		UCI_INFO   *UciInfo,
		Int32       Width,
		Int32       Height,
		Int32       BitsPerPixel,
		PVoid       pvBuffer,
		UInt32      BufferSize
		)
	{
		PByte pbSrc, pbDest;
		LongPtr BytesPerPixel, Stride;
		IMAGE_BITMAP_HEADER *pBmp;

		UNREFERENCED_PARAMETER(Width);
		UNREFERENCED_PARAMETER(Height);
		UNREFERENCED_PARAMETER(BitsPerPixel);

		if (BufferSize < sizeof(*pBmp))
			return 0;

		pBmp = (IMAGE_BITMAP_HEADER *)pvBuffer;
		InitBitmapHeader(pBmp, Width, Height, BitsPerPixel, &Stride);
		if (pBmp->FileSize > BufferSize)
			return 0;

		pbDest = (PByte)(pBmp + 1);
		for (ULong Color = 0, Count = 256; Count; Color += 0x00010101, --Count)
		{
			*(PULong)pbDest = Color;
			pbDest += 4;
		}

		BytesPerPixel = UciInfo->BitsPerPixel / 8;
		pbSrc = UciInfo->pbBuffer + (UciInfo->Height - 1) * UciInfo->Stride;
		pbDest = (PByte)pBmp + pBmp->RawOffset;
		for (ULong Height = UciInfo->Height;;)
		{
			PByte p1, p2;

			p1 = pbSrc;
			p2 = pbDest;
			for (ULong Width = UciInfo->Width;;)
			{
				ULong R, G, B, Color = *(PULong)p1;

				// Y = 0.299R + 0.587G + 0.114B

				/************************************************************************
				full range´òËãÓÃÕâ¸ö³£ÓÃµÄ¾ØÕó²ÎÊý, JPEGÓ¦Ò²ÓÃµÄÊÇÕâ¸ö°É

				Y = 0.11448 * B + 0.58661 * G + 0.29891 * R
				U = 0.50000 * B - 0.33126 * G - 0.16874 * R + 128
				V =-0.08131 * B - 0.41869 * G + 0.50000 * R + 128

				ÓÅ»¯ºóµÄ¹«Ê½ÈçÏÂ:

				Y = (120041*B + 615105*G + 313430*R + 0x007FFFF) >> 20
				U = (524288*B - 347351*G - 176937*R + 0x807FFFF) >> 20
				V = (-85260*B - 439028*G + 524288*R + 0x807FFFF) >> 20
				************************************************************************/

				R = RGBA_GetRValue(Color);
				G = RGBA_GetGValue(Color);
				B = RGBA_GetBValue(Color);
				*p2 = (BYTE)((R * 313430 + G * 615105 + B * 120041 + 0x007FFFF) >> 20);
				++p2;
				p1 += BytesPerPixel;

				if (--Width == 0)
					break;
			}

			pbSrc -= UciInfo->Stride;
			pbDest += Stride;

			if (--Height == 0)
				break;
		}

		return pBmp->FileSize;
	}

	inline
		UInt32
		ConvertRawTo24Or32(
		UCI_INFO   *pUciInfo,
		Int32       Width,
		Int32       Height,
		Int32       BitsPerPixel,
		PVoid       pvBuffer,
		UInt32      BufferSize
		)
	{
		PByte pbSrc, pbDest;
		LongPtr Stride;
		IMAGE_BITMAP_HEADER *pBmp;

		if (BufferSize < sizeof(*pBmp))
			return 0;

		pBmp = (IMAGE_BITMAP_HEADER *)pvBuffer;
		InitBitmapHeader(pBmp, Width, Height, BitsPerPixel, &Stride);
		if (pBmp->FileSize > BufferSize)
			return 0;

		pbSrc = pUciInfo->pbBuffer;
		pbDest = (PByte)pBmp;
		pbDest += (Height - 1) * Stride + sizeof(*pBmp);

		for (ULong Height = pUciInfo->Height; Height; --Height)
		{
			CopyMemory(pbDest, pbSrc, Stride);
			pbDest -= Stride;
			pbSrc += pUciInfo->Stride;
		}

		return pBmp->FileSize;
	}

	inline
		UInt32
		ConvertRawToBitMap(
		UCI_INFO   *pUciInfo,
		UInt32      Width,
		UInt32      Height,
		UInt32      BitsPerPixel,
		PVoid       pvBuffer,
		UInt32      BufferSize
		)
	{
		if (BitsPerPixel == 8)
		{
			return ConvertRawTo8Bit(pUciInfo, Width, Height, BitsPerPixel, pvBuffer, BufferSize);
		}
		else
		{
			switch (BitsPerPixel)
			{
			case 24:
			case 32:
				return ConvertRawTo24Or32(pUciInfo, Width, Height, BitsPerPixel, pvBuffer, BufferSize);
			}
		}

		return 0;
	}

	// #pragma warning(default:4201)

#endif // CPP_DEFINED

#endif // _IMAGE_H_e93dede9_b8fd_4157_ae1a_b888658c3ce8
#ifndef _AUDIO_H_ccdfbab6_9f02_4da2_b7df_d81114391052
#define _AUDIO_H_ccdfbab6_9f02_4da2_b7df_d81114391052


	_ML_C_HEAD_

		typedef struct
	{
		UInt32 RIFF;                    // TAG4('RIFF')
		UInt32 Size;
		UInt32 WAVE;                    // TAG4('WAVE')
		UInt32 fmt;                     // TAG4('fmt ')
		UInt32 FormatLength;
		UInt16 FormatTag;
		UInt16 Channels;
		UInt32 SamplesPerSec;
		UInt32 AvgBytesPerSec;
		UInt16 BlockAlign;
		UInt16 BitsPerSample;
		UInt32 data;                    // TAG4('data')
		UInt32 DataSize;

	} AUDIO_WAVE_HEADER, *PAUDIO_WAVE_HEADER;

#if CPP_DEFINED

#include <MMSystem.h>

	inline
		Bool
		FASTCALL
		InitWaveHeader(
		AUDIO_WAVE_HEADER  *Header,
		const WAVEFORMATEX *WaveFormat,
		UInt32              WaveLength
		)
	{
		if (Header == NULL || WaveFormat == NULL)
			return False;

		Header->RIFF = TAG4('RIFF');
		Header->fmt = TAG4('fmt ');
		Header->WAVE = TAG4('WAVE');
		Header->data = TAG4('data');
		Header->FormatLength = 16;

		Header->FormatTag = WaveFormat->wFormatTag;
		Header->Channels = WaveFormat->nChannels;
		Header->SamplesPerSec = WaveFormat->nSamplesPerSec;
		Header->AvgBytesPerSec = WaveFormat->nAvgBytesPerSec;
		Header->BlockAlign = WaveFormat->nBlockAlign;
		Header->BitsPerSample = WaveFormat->wBitsPerSample;
		Header->DataSize = WaveLength;
		Header->Size = WaveLength + sizeof(*Header) - 8;

		return True;
	}

#endif // CPP_DEFINED

	EXTCPP
		inline
		Bool
		FASTCALL
		InitWaveHeader(
		AUDIO_WAVE_HEADER  *Header,
		UInt16              Channels,
		UInt32              SampleRate,
		UInt16              BitsPerSample,
		UInt32              WaveLength
		)
	{
		if (Header == NULL)
			return False;

		Header->RIFF = TAG4('RIFF');
		Header->fmt = TAG4('fmt ');
		Header->WAVE = TAG4('WAVE');
		Header->data = TAG4('data');
		Header->FormatTag = WAVE_FORMAT_PCM;
		Header->FormatLength = 16;
		Header->Channels = Channels;
		Header->BitsPerSample = BitsPerSample;
		Header->BlockAlign = Header->Channels * BitsPerSample / 8;
		Header->SamplesPerSec = SampleRate;
		Header->AvgBytesPerSec = Header->BlockAlign * Header->SamplesPerSec;
		Header->DataSize = WaveLength;
		Header->Size = WaveLength + sizeof(*Header) - 8;

		return True;
	}

#if MY_OS_WIN32

#if !ML_AMD64
#pragma INCLUDE_LIB(ucadec.lib)
#endif

	EXTC_IMPORT int STDCALL UCADecode(const void *src, int srclen, void** dst, int* dstlen);
	EXTC_IMPORT int STDCALL UCADecode2(const void *src, int srclen, void** dst, int* dstlen, int sample);
	EXTC_IMPORT int STDCALL UCAFree(void* p);

#endif // MY_OS_WIN32

	_ML_C_TAIL_

#endif // _AUDIO_H_ccdfbab6_9f02_4da2_b7df_d81114391052
#ifndef _COMPRESSION_H_65414ec9_55d6_4212_9ce3_9b53394b394a
#define _COMPRESSION_H_65414ec9_55d6_4212_9ce3_9b53394b394a


		_ML_C_HEAD_

		Bool
		FASTCALL
		UCL_NRV2E_Compress(
		PVoid   Input,
		ULong   InputSize,
		PVoid   Output,
		PULong  OutputSize,
		Long    DEF_VAL(Level, 10)
		);

	Bool
		FASTCALL
		UCL_NRV2E_Decompress(
		PVoid   Input,
		ULong   InputSize,
		PVoid   Output,
		PULong  OutputSize
		);

	ULong_Ptr
		FASTCALL
		UCL_NRV2E_DecompressASMFast32(
		PVoid Input,
		PVoid Output
		);

	_ML_C_TAIL_

#endif // _COMPRESSION_H_65414ec9_55d6_4212_9ce3_9b53394b394a
#ifndef _APPHELP_H_982410c2_a553_457c_990e_c996cff3e025
#define _APPHELP_H_982410c2_a553_457c_990e_c996cff3e025


#pragma INCLUDE_LIB(undoc_apphelp.lib)

		_ML_C_HEAD_

#define SDBGMEF_IGNORE_ENVIRONMENT  1

#define SDB_DATABASE_MAIN           0x80000000
#define SDB_DATABASE_SHIM           0x00010000
#define SDB_DATABASE_MSI            0x00020000
#define SDB_DATABASE_DRIVERS        0x00040000
#define SDB_DATABASE_DETAILS        0x00080000
#define SDB_DATABASE_SP_DETAILS     0x00100000
#define SDB_DATABASE_RESOURCE       0x00200000
#define SDB_DATABASE_TYPE_MASK      0xF02F0000

#define SDB_DATABASE_MAIN_SHIM              (SDB_DATABASE_SHIM          | SDB_DATABASE_MSI | SDB_DATABASE_MAIN)
#define SDB_DATABASE_MAIN_MSI               (SDB_DATABASE_MSI           | SDB_DATABASE_MAIN)
#define SDB_DATABASE_MAIN_DRIVERS           (SDB_DATABASE_DRIVERS       | SDB_DATABASE_MAIN)
#define SDB_DATABASE_MAIN_DETAILS           (SDB_DATABASE_DETAILS       | SDB_DATABASE_MAIN)
#define SDB_DATABASE_MAIN_SP_DETAILS        (SDB_DATABASE_SP_DETAILS    | SDB_DATABASE_MAIN)
#define SDB_DATABASE_MAIN_RESOURCE          (SDB_DATABASE_RESOURCE      | SDB_DATABASE_MAIN)

#define SDB_TAG_TYPE_NULL       0x1000
#define SDB_TAG_TYPE_BYTE       0x2000
#define SDB_TAG_TYPE_WORD       0x3000
#define SDB_TAG_TYPE_DWORD      0x4000
#define SDB_TAG_TYPE_QWORD      0x5000
#define SDB_TAG_TYPE_STRINGREF  0x6000
#define SDB_TAG_TYPE_LIST       0x7000
#define SDB_TAG_TYPE_STRING     0x8000
#define SDB_TAG_TYPE_BINARY     0x9000

		// It seems that this type is "masked"
#define SDB_TAG_TYPE_MASK       0xF000

		// http://msdn2.microsoft.com/en-us/library/bb432487

#define SDB_TAG_DATABASE                    (0x0001 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_LIBRARY                     (0x0002 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_INEXCLUDE                   (0x0003 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_SHIM                        (0x0004 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_PATCH                       (0x0005 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_APP                         (0x0006 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_EXE                         (0x0007 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_MATCHING_FILE               (0x0008 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_SHIM_REF                    (0x0009 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_PATCH_REF                   (0x000A | SDB_TAG_TYPE_LIST)
#define SDB_TAG_LAYER                       (0x000B | SDB_TAG_TYPE_LIST)
#define SDB_TAG_FILE                        (0x000C | SDB_TAG_TYPE_LIST)
#define SDB_TAG_APPHELP                     (0x000D | SDB_TAG_TYPE_LIST)
#define SDB_TAG_LINK                        (0x000E | SDB_TAG_TYPE_LIST)
#define SDB_TAG_DATA                        (0x000F | SDB_TAG_TYPE_LIST)
#define SDB_TAG_MSI_TRANSFORM               (0x0010 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_MSI_TRANSFORM_REF           (0x0011 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_MSI_PACKAGE                 (0x0012 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_FLAG                        (0x0013 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_MSI_CUSTOM_ACTION           (0x0014 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_FLAG_REF                    (0x0015 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_ACTION                      (0x0016 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_LOOKUP                      (0x0017 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_STRINGTABLE                 (0x0801 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_INDEXES                     (0x0802 | SDB_TAG_TYPE_LIST)
#define SDB_TAG_INDEX                       (0x0803 | SDB_TAG_TYPE_LIST)

#define SDB_TAG_NAME                        (0x0001 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_DESCRIPTION                 (0x0002 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_MODULE                      (0x0003 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_API                         (0x0004 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_VENDOR                      (0x0005 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_APP_NAME                    (0x0006 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_COMMAND_LINE                (0x0008 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_COMPANY_NAME                (0x0009 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_DLLFILE                     (0x000A | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_WILDCARD_NAME               (0x000B | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_PRODUCT_NAME                (0x0010 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_PRODUCT_VERSION             (0x0011 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_FILE_DESCRIPTION            (0x0012 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_FILE_VERSION                (0x0013 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_ORIGINAL_FILENAME           (0x0014 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_INTERNAL_NAME               (0x0015 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_LEGAL_COPYRIGHT             (0x0016 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_16BIT_DESCRIPTION           (0x0017 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_APPHELP_DETAILS             (0x0018 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_LINK_URL                    (0x0019 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_LINK_TEXT                   (0x001A | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_APPHELP_TITLE               (0x001B | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_APPHELP_CONTACT             (0x001C | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_SXS_MANIFEST                (0x001D | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_DATA_STRING                 (0x001E | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_MSI_TRANSFORM_FILE          (0x001F | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_16BIT_MODULE_NAME           (0x0020 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_LAYER_DISPLAYNAME           (0x0021 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_COMPILER_VERSION            (0x0022 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_ACTION_TYPE                 (0x0023 | SDB_TAG_TYPE_STRINGREF)
#define SDB_TAG_EXPORT_NAME                 (0x0024 | SDB_TAG_TYPE_STRINGREF)

#define SDB_TAG_SIZE                        (0x0001 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_OFFSET                      (0x0002 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_CHECKSUM                    (0x0003 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_SHIM_TAGID                  (0x0004 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PATCH_TAGID                 (0x0005 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_MODULE_TYPE                 (0x0006 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VERDATEHI                   (0x0007 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VERDATELO                   (0x0008 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VERFILEOS                   (0x0009 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VERFILETYPE                 (0x000A | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PE_CHECKSUM                 (0x000B | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PREVOSMAJORVER              (0x000C | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PREVOSMINORVER              (0x000D | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PREVOSPLATFORMID            (0x000E | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PREVOSBUILDNO               (0x000F | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PROBLEMSEVERITY             (0x0010 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_LANGID                      (0x0011 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VER_LANGUAGE                (0x0012 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_ENGINE                      (0x0014 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_HTMLHELPID                  (0x0015 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_INDEX_FLAGS                 (0x0016 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_FLAGS                       (0x0017 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_DATA_VALUETYPE              (0x0018 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_DATA_DWORD                  (0x0019 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_LAYER_TAGID                 (0x001A | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_MSI_TRANSFORM_TAGID         (0x001B | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_LINKER_VERSION              (0x001C | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_LINK_DATE                   (0x001D | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_UPTO_LINK_DATE              (0x001E | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_OS_SERVICE_PACK             (0x001F | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_FLAG_TAGID                  (0x0020 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_RUNTIME_PLATFORM            (0x0021 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_OS_SKU                      (0x0022 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_OS_PLATFORM                 (0x0023 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_APP_NAME_RC_ID              (0x0024 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VENDOR_NAME_RC_ID           (0x0025 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_SUMMARY_MSG_RC_ID           (0x0026 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_VISTA_SKU                   (0x0027 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_DESCRIPTION_RC_ID           (0x0028 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_PARAMETER1_RC_ID            (0x0029 | SDB_TAG_TYPE_DWORD)
#define SDB_TAG_TAGID                       (0x0801 | SDB_TAG_TYPE_DWORD)

#define SDB_TAG_STRINGTABLE_ITEM            (0x0801 | SDB_TAG_TYPE_STRING)

#define SDB_TAG_INCLUDE                     (0x0001 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_GENERAL                     (0x0002 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_MATCH_LOGIC_NOT             (0x0003 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_APPLY_ALL_SHIMS             (0x0004 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_USE_SERVICE_PACK_FILES      (0x0005 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_MITIGATION_OS               (0x0006 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_BLOCK_UPGRADE               (0x0007 | SDB_TAG_TYPE_NULL)
#define SDB_TAG_INCLUDEEXCLUDEDLL           (0x0008 | SDB_TAG_TYPE_NULL)

#define SDB_TAG_TIME                        (0x0001 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_BIN_FILE_VERSION            (0x0002 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_BIN_PRODUCT_VERSION         (0x0003 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_MODTIME                     (0x0004 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_MASK_KERNEL            (0x0005 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_UPTO_BIN_PRODUCT_VERSION    (0x0006 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_DATA_QWORD                  (0x0007 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_MASK_USER              (0x0008 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAGS_NTVDM1                (0x0009 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAGS_NTVDM2                (0x000A | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAGS_NTVDM3                (0x000B | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_MASK_SHELL             (0x000C | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_UPTO_BIN_FILE_VERSION       (0x000D | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_MASK_FUSION            (0x000E | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_PROCESSPARAM           (0x000F | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_LUA                    (0x0010 | SDB_TAG_TYPE_QWORD)
#define SDB_TAG_FLAG_INSTALL                (0x0011 | SDB_TAG_TYPE_QWORD)

#define SDB_TAG_PATCH_BITS                  (0x0002 | SDB_TAG_TYPE_BINARY)
#define SDB_TAG_FILE_BITS                   (0x0003 | SDB_TAG_TYPE_BINARY)
#define SDB_TAG_EXE_ID                      (0x0004 | SDB_TAG_TYPE_BINARY)
#define SDB_TAG_DATA_BITS                   (0x0005 | SDB_TAG_TYPE_BINARY)
#define SDB_TAG_MSI_PACKAGE_ID              (0x0006 | SDB_TAG_TYPE_BINARY)
#define SDB_TAG_DATABASE_ID                 (0x0007 | SDB_TAG_TYPE_BINARY)
#define SDB_TAG_INDEX_BITS                  (0x0801 | SDB_TAG_TYPE_BINARY)

#define SDB_TAG_MATCH_MODE                  (0x0001 | SDB_TAG_TYPE_WORD)
#define SDB_TAG_TAG                         (0x0801 | SDB_TAG_TYPE_WORD)
#define SDB_TAG_INDEX_TAG                   (0x0802 | SDB_TAG_TYPE_WORD)
#define SDB_TAG_INDEX_KEY                   (0x0803 | SDB_TAG_TYPE_WORD)

		typedef enum
	{
		DOS_PATH,
		NT_PATH,

	} PATH_TYPE;


#define SDB_TAGID_NULL (0)
#define SDB_TAGID_ROOT (0)

	typedef ULONG TAGID;

	typedef ULONG TAGREF, INDEXID, TAG;
	typedef PVOID HSDB;

#pragma pack(1)

	typedef struct tagAPPHELP_DATA
	{
		ULONG  Flags;
		ULONG  Severity;
		ULONG  HTMLHelpID;
		LPWSTR AppName;
		TAGREF Exe;
		LPWSTR URL;
		LPWSTR Link;
		LPWSTR AppTitle;
		LPWSTR Contact;
		LPWSTR Details;
		ULONG  Data;
		BOOL   SPEntry;

	} APPHELP_DATA, *PAPPHELP_DATA;

	typedef struct tagATTRINFO
	{
		TAG   AttrID;
		ULONG Flags;

		union
		{
			ULONGLONG   Attr64;
			ULONG       Attr32;
			PWCHAR      AttrString;
		};
	} ATTRINFO, *PATTRINFO;

	typedef struct _FIND_INFO
	{
		TAGID     tiIndex;
		TAGID     tiCurrent;
		TAGID     tiEndIndex;
		TAG       tName;
		ULONG     dwIndexRec;
		ULONG     dwFlags;
		ULONGLONG ullKey;
		union
		{
			LPCWSTR szName;
			ULONG   dwName;
			GUID    *pguidName;
		};
	} FIND_INFO, *PFIND_INFO;

#define SDB_MAX_EXES    16
#define SDB_MAX_LAYERS  8
#define SDB_MAX_SDBS    16

	// Flags

#define SHIMREG_DISABLE_SHIM    (0x00000001u)
#define SHIMREG_DISABLE_APPHELP (0x00000002u)
#define SHIMREG_APPHELP_NOUI    (0x00000004u)
#define SHIMREG_APPHELP_CANCEL  (0x10000000u)
#define SHIMREG_DISABLE_SXS     (0x00000010u)
#define SHIMREG_DISABLE_LAYER   (0x00000020u)
#define SHIMREG_DISABLE_DRIVER  (0x00000040u)

	typedef struct tagSDBQUERYRESULT
	{
		TAGREF atrExes[SDB_MAX_EXES];
		ULONG  adwExeFlags[SDB_MAX_EXES];
		TAGREF atrLayers[SDB_MAX_LAYERS];
		ULONG  dwLayerFlags;
		TAGREF trApphelp;
		ULONG  dwExeCount;
		ULONG  dwLayerCount;
		GUID   guidID;
		ULONG  dwFlags;
		ULONG  dwCustomSDBMap;
		GUID   rgGuidDB[SDB_MAX_SDBS];
	} SDBQUERYRESULT, *PSDBQUERYRESULT;

	typedef struct      // 0x1E8, win7 ultimate SP1 x86
	{
		HANDLE  DataBaseFileHandle;
		PVOID   MappedBase;
		ULONG   Unknown;
		ULONG   FileSize;
		BYTE    DataBaseId[0x14];

		HANDLE  SectionHandle;  // 0x1B8

	} DB, *PDB;

	typedef struct
	{
		ULONG   Flags;
		GUID    Guid;
	} SDB_DATABASE_INFORMATION, *PSDB_DATABASE_INFORMATION;

#pragma pack()

	EXTC_IMPORT BOOL WINAPI BaseFlushAppcompatCache();

	EXTC_IMPORT
		VOID
		WINAPI
		SdbCloseDatabase(
		IN  PDB Db
		);

	EXTC_IMPORT
		VOID
		WINAPI
		SdbCloseDatabaseWrite(
		IN  PDB Db
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbCommitIndexes(
		IN  PDB Db
		);

	EXTC_IMPORT
		PDB
		WINAPI
		SdbCreateDatabase(
		IN  PCWSTR      DataBase,
		IN  PATH_TYPE   Type
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbDeclareIndex(
		IN  PDB pdb,
		IN  TAG tWhich,
		IN  TAG tKey,
		IN  ULONG dwEntries,
		IN  BOOL bUniqueKey,
		OUT INDEXID *piiIndex
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbBeginWriteListTag(
		IN PDB      Db,
		IN TAGID    ListTag
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbEndWriteListTag(
		IN OUT  PDB     Db,
		IN      TAGID   ListTag
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbFindFirstDWORDIndexedTag(
		IN  PDB pdb,
		IN  TAG tWhich,
		IN  TAG tKey,
		IN  ULONG dwName,
		OUT FIND_INFO *pFindInfo
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbFindFirstTag(
		IN  PDB pdb,
		IN  TAGID tiParent,
		IN  TAG tTag
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbFindFirstNamedTag(
		IN  PDB     Db,
		IN  TAGID   TagId,
		IN  TAGID   Parent,
		IN  TAG     Tag
		);

	EXTC_IMPORT
		TAGREF
		WINAPI
		SdbFindFirstTagRef(
		IN  PDB     Db,
		IN  TAGREF  TagRef,
		IN  TAG     Tag
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbFindNextTag(
		IN  PDB pdb,
		IN  TAGID tiParent,
		IN  TAGID tiPrev
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbFormatAttribute(
		IN  PATTRINFO pAttrInfo,
		OUT LPWSTR pchBuffer,
		IN  ULONG dwBufferSize
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbFreeFileAttributes(
		IN  PATTRINFO pFileAttributes
		);

	EXTC_IMPORT
		VOID
		WINAPI
		SdbGetAppPatchDir(
		IN  HSDB hSDB OPTIONAL,
		OUT LPWSTR szAppPatchPath,
		IN  ULONG cchSize
		);

	EXTC_IMPORT
		PVOID
		WINAPI
		SdbGetBinaryTagData(
		IN  PDB     Db,
		IN  TAGID   Which
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbGetDatabaseID(
		IN  PDB     Db,
		OUT GUID   *Guid
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbGetDatabaseGUID(
		IN  PDB     Db,
		OUT GUID   *Guid
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbGetDatabaseInformation(
		IN  PDB                         Db,
		OUT PSDB_DATABASE_INFORMATION   DatabaseInformation
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbGetFileAttributes(
		IN  LPCWSTR lpwszFileName,
		OUT PATTRINFO *ppAttrInfo,
		OUT LPDWORD lpdwAttrCount
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbGetFirstChild(
		IN  PDB     Db,
		IN  TAGID   ParentTagId
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbGetIndex(
		IN  PDB pdb,
		IN  TAG tWhich,
		IN  TAG tKey,
		OUT LPDWORD lpdwFlags OPTIONAL
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbGetMatchingExe(
		IN  HSDB    hSDB OPTIONAL,
		IN  LPCWSTR szPath,
		IN  LPCWSTR szModuleName OPTIONAL,
		IN  LPCWSTR pszEnvironment OPTIONAL,
		IN  ULONG dwFlags,
		OUT PSDBQUERYRESULT pQueryResult
		);

	EXTC_IMPORT
		TAGID
		WINAPI
		SdbGetNextChild(
		IN  PDB pdb,
		IN  TAGID tiParent,
		IN  TAGID tiPrev
		);

	EXTC_IMPORT
		PWSTR
		WINAPI
		SdbGetStringTagPtr(
		IN  PDB pdb,
		IN  TAGID WhichTagId
		);

	EXTC_IMPORT
		TAG
		WINAPI
		SdbGetTagFromTagID(
		IN  PDB pdb,
		IN  TAGID tiWhich
		);

	EXTC_IMPORT
		HSDB
		WINAPI
		SdbInitDatabase(
		IN  ULONG   Flags,
		IN  PCWSTR  DatabasePath
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbIsStandardDatabase(
		IN  GUID GuidDB
		);

	EXTC_IMPORT
		ULONGLONG
		WINAPI
		SdbMakeIndexKeyFromString(
		IN  LPCWSTR pwszKey
		);

	EXTC_IMPORT
		PDB
		WINAPI
		SdbOpenApphelpDetailsDatabase(
		IN OUT  LPCWSTR pwsDetailsDatabasePath
		);

	EXTC_IMPORT
		HMODULE
		WINAPI
		SdbOpenApphelpResourceFile(
		IN  LPCWSTR pwszACResourceFile OPTIONAL
		);

	EXTC_IMPORT
		PDB
		WINAPI
		SdbOpenDatabase(
		IN  LPCWSTR pwszPath,
		IN  PATH_TYPE eType
		);

	EXTC_IMPORT
		ULONG
		WINAPI
		SdbQueryDataExTagID(
		IN      PDB pdb,
		IN      TAGID tiExe,
		IN      LPCWSTR lpszDataName OPTIONAL,
		OUT     LPDWORD lpdwDataType OPTIONAL,
		OUT     LPVOID lpBuffer OPTIONAL,
		IN OUT  LPDWORD lpcbBufferSize OPTIONAL,
		OUT     TAGID *ptiData OPTIONAL
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbReadApphelpDetailsData(
		IN  PDB pdb,
		OUT PAPPHELP_DATA pData
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbReadBinaryTag(
		IN  PDB     Db,
		IN  TAGID   WhichTagId,
		OUT PBYTE   Buffer,
		IN  ULONG   BufferSize
		);

	EXTC_IMPORT
		ULONG
		WINAPI
		SdbReadDWORDTag(
		IN  PDB pdb,
		IN  TAGID tiWhich,
		IN  ULONG dwDefault
		);

	EXTC_IMPORT
		ULONGLONG
		WINAPI
		SdbReadQWORDTag(
		IN  PDB pdb,
		IN  TAGID tiWhich,
		IN  ULONGLONG qwDefault
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbReadStringTag(
		IN  PDB pdb,
		IN  TAGID tiWhich,
		OUT LPWSTR pwszBuffer,
		IN  ULONG cchBufferSize
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbRegisterDatabaseEx(
		IN  LPCWSTR pszDatabasePath,
		IN  ULONG dwDatabaseType,
		IN  PULONGLONG pTimeStamp OPTIONAL
		);

	EXTC_IMPORT
		VOID
		WINAPI
		SdbReleaseDatabase(
		IN  HSDB hSDB
		);

	EXTC_IMPORT
		VOID
		WINAPI
		SdbReleaseMatchingExe(
		IN  HSDB hSDB,
		IN  TAGREF trExe
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbStartIndexing(
		IN  PDB pdb,
		IN  INDEXID iiWhich
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbStopIndexing(
		IN  PDB pdb,
		IN  INDEXID WhichIndexId
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbTagIDToTagRef(
		IN  HSDB    hSDB,
		IN  PDB     Db,
		IN  TAGID   TagId,
		OUT TAGREF *TagRef
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbTagRefToTagID(
		IN  HSDB    hSDB,
		IN  TAGREF  WhichTagRef,
		OUT PDB    *Db,
		OUT TAGID  *WhichTagId
		);

	EXTC_IMPORT
		LPCWSTR
		WINAPI
		SdbTagToString(
		IN  TAG tag
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbUnregisterDatabase(
		IN  GUID *pguidDB
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteBinaryTag(
		IN  PDB     Db,
		IN  TAG     Tag,
		IN  PVOID   Buffer,
		IN  ULONG   Size
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteBinaryTagFromFile(
		IN  PDB     Db,
		IN  TAG     Tag,
		IN  PCWSTR  FileName
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteDWORDTag(
		IN  PDB     Db,
		IN  TAG     Tag,
		IN  ULONG   Data
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteNULLTag(
		IN  PDB Db,
		IN  TAG Tag
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteQWORDTag(
		IN  PDB     Db,
		IN  TAG     Tag,
		IN  ULONG64 Data
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteStringTag(
		IN  PDB     Db,
		IN  TAG     Tag,
		IN  PCWSTR  Data
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		SdbWriteWORDTag(
		IN  PDB     Db,
		IN  TAG     Tag,
		IN  USHORT  Data
		);

	EXTC_IMPORT
		BOOL
		WINAPI
		ShimFlushCache(
		IN OUT  HWND hwnd,
		IN OUT  HINSTANCE hInstance,
		IN OUT  LPCSTR lpszCmdLine,
		IN      int nCmdShow
		);

	_ML_C_TAIL_

#endif // _APPHELP_H_982410c2_a553_457c_990e_c996cff3e025

#ifndef _PEIMAGE_H_52a4aaa3_0a38_4bb7_9a33_3072037589e2
#define _PEIMAGE_H_52a4aaa3_0a38_4bb7_9a33_3072037589e2


		_ML_C_HEAD_

#define IMAGE_INVALID_ORDINAL   ((ULONG_PTR)(~0ull))

#define IMAGE_INVALID_RVA       ((ULONG_PTR)(~0ui64))
#define IMAGE_INVALID_VA        ((PVOID)(~0ui64))
#define IMAGE_INVALID_OFFSET    IMAGE_INVALID_RVA
#define IMAGE_MINIMUM_ADDRESS   (ULONG_PTR)0x10000

#define IMAGE_NTHEADERS(_ImageBase) ((PIMAGE_NT_HEADERS)PtrAdd((_ImageBase), (_ImageBase)->e_lfanew))

#define IMAGE_SECTION_BASE(_Section)    ((_Section)->VirtualAddress)
#define IMAGE_SECTION_SIZE(_Section)    ((_Section)->Misc.VirtualSize)
#define IMAGE_SECTION_TAIL(_Section)    (IMAGE_SECTION_BASE(_Section) + IMAGE_SECTION_SIZE(_Section))
#define IMAGE_SECTION_TAIL_ALIGN(_Section, _SectionAlignment) ROUND_UP(IMAGE_SECTION_TAIL(_Section), _SectionAlignment)

	enum
	{
		IMAGE_VALID_EXPORT_ADDRESS_TABLE = 0x00000001,
		IMAGE_VALID_IMPORT_ADDRESS_TABLE = 0x00000002,
		IMAGE_VALID_RESOURCE = 0x00000004,
		IMAGE_VALID_RELOC = 0x00000008,
	};

	PVOID
		GetImageBaseAddress(
		PVOID ImageAddress
		);

	BOOL
		ValidateDataDirectory(
		PIMAGE_DATA_DIRECTORY   DataDirectory,
		ULONG_PTR               SizeOfImage
		);

	BOOL
		IsValidImage(
		PVOID       ImageBase,
		ULONG_PTR   DEF_VAL(Flags, 0)
		);

#if !defined(_MY_STATIC_LIB_)

	EXTC IMAGE_DOS_HEADER __ImageBase;

#endif // _MY_STATIC_LIB_


#pragma pack(push, 1)

	typedef struct
	{
		BYTE    Width;          // Width, in pixels, of the image
		BYTE    Height;         // Height, in pixels, of the image
		BYTE    ColorCount;     // Number of colors in image (0 if >=8bpp)
		BYTE    Reserved;       // Reserved
		WORD    Planes;         // Color Planes
		WORD    BitCount;       // Bits per pixel
		DWORD   BytesInRes;     // how many bytes in this resource?
		WORD    ID;             // the ID

	} GROUP_ICON_ENTRY, *PGROUP_ICON_ENTRY;

	typedef struct
	{
		WORD                Reserved;   // Reserved (must be 0)
		WORD                Type;       // Resource type (1 for icons)
		WORD                Count;      // How many images?
		GROUP_ICON_ENTRY    Entries[1]; // The entries for each image

	} GROUP_ICON, *PGROUP_ICON;

#pragma pack(pop)

	typedef struct _RELOCATE_ADDRESS_INFO
	{
		PVOID AddressToRelocate;
		PVOID NewAddress;
		BOOL(*CanRelocate)(struct _RELOCATE_ADDRESS_INFO *Address, PVOID PointerToAddress);
		PVOID Context;

	} RELOCATE_ADDRESS_INFO, *PRELOCATE_ADDRESS_INFO;

	NTSTATUS
		RelocateAddress(
		PLDR_MODULE             ImageModule,
		PRELOCATE_ADDRESS_INFO  Addresses,
		ULONG                   Count
		);

	ULONG_PTR
		IATLookupRoutineRVAByEntry(
		PVOID ImageBase,
		PVOID RoutineEntry
		);

	PVOID
		IATLookupRoutineByEntryNoFix(
		PVOID ImageBase,
		PVOID RoutineEntry
		);

	ULONG_PTR
		IATLookupRoutineRVAByHashNoFix(
		PVOID       ImageBase,
		ULONG_PTR   Hash
		);

	PVOID
		EATLookupRoutineByHashNoFix(
		PVOID       ImageBase,
		ULONG_PTR   Hash
		);

	PSTR
		EATLookupNameByHashNoFix(
		PVOID       ImageBase,
		ULONG_PTR   Hash
		);

	PSTR
		EATLookupNameByNameNoFix(
		PVOID   ImageBase,
		PSTR    Name
		);

	PVOID
		FASTCALL
		EATLookupRoutineByHashPNoFix(
		PVOID       ImageBase,
		ULONG_PTR   RoutineEntry
		);

	/************************************************************************
	x64 ver
	************************************************************************/
	PVOID
		EATLookupRoutineByHashNoFix64(
		PVOID       ImageBase,
		ULONG_PTR   Hash
		);

	PVOID
		EATLookupRoutineByHashPNoFix64(
		PVOID       ImageBase,
		ULONG_PTR   RoutineEntry
		);

	inline PVOID IATLookupRoutineByEntry(PVOID ImageBase, PVOID RoutineEntry)
	{
		return IATLookupRoutineByEntryNoFix(GetImageBaseAddress(ImageBase), RoutineEntry);
	}

	inline ULONG_PTR IATLookupRoutineRVAByEntry(PVOID ImageBase, PVOID RoutineEntry)
	{
		ImageBase = GetImageBaseAddress(ImageBase);
		if (ImageBase == nullptr)
			return IMAGE_INVALID_RVA;

		RoutineEntry = IATLookupRoutineByEntryNoFix(ImageBase, RoutineEntry);
		if (RoutineEntry == nullptr)
			return IMAGE_INVALID_RVA;

		return (ULONG_PTR)RoutineEntry - (ULONG_PTR)(ImageBase);
	}

	inline PVOID IATLookupRoutineByHash(PVOID ImageBase, ULONG_PTR Hash)
	{
		ImageBase = GetImageBaseAddress(ImageBase);
		if (ImageBase == nullptr)
			return nullptr;

		Hash = IATLookupRoutineRVAByHashNoFix(ImageBase, Hash);

		return Hash == IMAGE_INVALID_RVA ? (PVOID)Hash : PtrAdd(ImageBase, Hash);
	}

#define LOAD_MEM_DLL_INFO_MAGIC  TAG4('LMDI')

#define LMD_REMOVE_PE_HEADER        0x00000001
#define LMD_REMOVE_IAT              0x00000002
#define LMD_REMOVE_EAT              0x00000004
#define LMD_REMOVE_RES              0x00000008
#define LMD_IGNORE_IAT_DLL_MISSING  0x00000010
#define LMD_MAPPED_DLL              0x10000000

	NTSTATUS
		LoadDllFromMemory(
		PVOID           DllBuffer,
		ULONG           DllBufferSize,
		PUNICODE_STRING ModuleFileName,
		PVOID*          ModuleHandle = nullptr,
		ULONG           Flags = 0
		);

	NTSTATUS
		UnmapDllSection(
		PVOID BaseAddress
		);

	_ML_C_TAIL_


#if CPP_DEFINED

		PVOID LookupImportTable(PVOID ImageBase, PCSTR DllName, PCSTR RoutineName);
	PVOID LookupImportTable(PVOID ImageBase, PCSTR DllName, ULONG Hash);

	PVOID LookupExportTable(PVOID ImageBase, ULONG Hash);
	PVOID LookupExportTable(PVOID ImageBase, PCSTR RoutineName);

	inline PIMAGE_NT_HEADERS ImageNtHeadersFast(PVOID ImageBase, PULONG_PTR NtHeadersVersion = nullptr)
	{
		PIMAGE_NT_HEADERS32 NtHeaders32;

		NtHeaders32 = (PIMAGE_NT_HEADERS32)PtrAdd(ImageBase, ((PIMAGE_DOS_HEADER)ImageBase)->e_lfanew);

		if (NtHeadersVersion != nullptr) switch (NtHeaders32->OptionalHeader.Magic)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			*NtHeadersVersion = NtHeaders32->OptionalHeader.Magic;
			break;

		default:
			return nullptr;
		}

		return (PIMAGE_NT_HEADERS)NtHeaders32;
	}

	inline PIMAGE_NT_HEADERS ImageNtHeaders(PVOID ImageBase, PULONG_PTR NtHeadersVersion = nullptr)
	{
		if (!IsValidImage(ImageBase))
			return nullptr;

		return ImageNtHeadersFast(ImageBase, NtHeadersVersion);
	}

	inline ULONG_PTR ImageGetSizeOfImage(PVOID ImageBase)
	{
		ULONG_PTR Version;
		PIMAGE_NT_HEADERS NtHeaders;

		NtHeaders = ImageNtHeaders(ImageBase, &Version);

		switch (Version)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			return ((PIMAGE_NT_HEADERS32)NtHeaders)->OptionalHeader.SizeOfImage;

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			return ((PIMAGE_NT_HEADERS32)NtHeaders)->OptionalHeader.SizeOfImage;
		}

		return 0;
	}

	typedef
		NTSTATUS
		(*WalkRelocTableCallback)(
		PVOID                           ImageBase,
		PIMAGE_BASE_RELOCATION2         RelocationEntry,
		PIMAGE_RELOCATION_ADDRESS_ENTRY Offset,
		PVOID                           Context
		);

#define WalkRelocCallbackM(ImageBase, RelocationEntry, Offset, Context) [&] (PVOID ImageBase, PIMAGE_BASE_RELOCATION2 RelocationEntry, PIMAGE_RELOCATION_ADDRESS_ENTRY Offset, PVOID Context) -> NTSTATUS

	template<class CallbackRoutine>
	inline NTSTATUS WalkRelocTableT(PVOID ImageBase, CallbackRoutine Callback, PVOID Context = nullptr)
	{
		PIMAGE_DOS_HEADER           DosHeader;
		PIMAGE_NT_HEADERS32         NtHeaders32;
		PIMAGE_NT_HEADERS64         NtHeaders64;
		PIMAGE_DATA_DIRECTORY       RelocDirectory;
		PIMAGE_BASE_RELOCATION2     Relocation, RelocationEnd;
		ULONG_PTR                   SizeOfImage;

		DosHeader = (PIMAGE_DOS_HEADER)ImageBase;
		NtHeaders32 = (PIMAGE_NT_HEADERS32)PtrAdd(DosHeader, DosHeader->e_lfanew);
		NtHeaders64 = nullptr;

		switch (NtHeaders32->OptionalHeader.Magic)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			SizeOfImage = NtHeaders32->OptionalHeader.SizeOfImage;
			RelocDirectory = &NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];
			break;

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			NtHeaders64 = (PIMAGE_NT_HEADERS64)NtHeaders32;
			SizeOfImage = NtHeaders64->OptionalHeader.SizeOfImage;
			RelocDirectory = &NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];
			break;

		default:
			return STATUS_INVALID_IMAGE_FORMAT;
		}

		if (!ValidateDataDirectory(RelocDirectory, NtHeaders32->OptionalHeader.SizeOfImage))
			return STATUS_INVALID_IMAGE_FORMAT;

		Relocation = (PIMAGE_BASE_RELOCATION2)PtrAdd(ImageBase, RelocDirectory->VirtualAddress);
		RelocationEnd = PtrAdd(Relocation, RelocDirectory->Size);

		while (Relocation < RelocationEnd)
		{
			ULONG_PTR   SizeOfBlock;
			PVOID       RelocateBase;
			NTSTATUS    Status;
			PIMAGE_RELOCATION_ADDRESS_ENTRY TypeOffset;

			TypeOffset = Relocation->TypeOffset;
			SizeOfBlock = Relocation->SizeOfBlock;
			RelocateBase = PtrAdd(ImageBase, Relocation->VirtualAddress);

			if (SizeOfBlock < sizeof(*Relocation) - sizeof(Relocation->TypeOffset) ||
				SizeOfBlock >= SizeOfImage ||
				PtrAnd(RelocateBase, 0xFFF) != 0)
			{
				return STATUS_ILLEGAL_DLL_RELOCATION;
			}

			SizeOfBlock -= sizeof(*Relocation) - sizeof(Relocation->TypeOffset);

			for (; SizeOfBlock > 0; ++TypeOffset, SizeOfBlock -= sizeof(*TypeOffset))
			{
				Status = Callback(ImageBase, Relocation, TypeOffset, Context);
				if (!NT_SUCCESS(Status))
					return Status;
			}

			Relocation = PtrAdd(Relocation, Relocation->SizeOfBlock);
		}

		return STATUS_SUCCESS;
	}

	ForceInline NTSTATUS WalkRelocTableInternal(PVOID ImageBase, WalkRelocTableCallback Callback, PVOID Context)
	{
		return WalkRelocTableT(ImageBase, Callback, Context);
	}

	template<class CallbackRoutine, class CallbackContext>
	ForceInline NTSTATUS WalkRelocTable(PVOID ImageBase, CallbackRoutine Callback, CallbackContext Context)
	{
		return WalkRelocTableInternal(ImageBase, (WalkRelocTableCallback)Callback, (PVOID)Context);
	}

	typedef struct
	{
		PVOID                       ImageBase;
		PIMAGE_IMPORT_DESCRIPTOR    ImportDescriptor;

		union
		{
			PIMAGE_THUNK_DATA       ThunkData;
			PIMAGE_THUNK_DATA32     ThunkData32;
			PIMAGE_THUNK_DATA64     ThunkData64;
		};

		PCSTR                       DllName;
		PCSTR                       FunctionName;
		ULONG_PTR                   Ordinal;
		PVOID                       Context;

	} WALK_IMPORT_TABLE_DATA, *PWALK_IMPORT_TABLE_DATA;

	typedef NTSTATUS(*WalkImportTableCallback)(PWALK_IMPORT_TABLE_DATA Data);

#define WalkIATCallbackM(Data) [&] (PWALK_IMPORT_TABLE_DATA Data) -> NTSTATUS

	typedef struct
	{
		PVOID                       ImageBase;
		PIMAGE_IMPORT_DESCRIPTOR    ImportDescriptor;
		PVOID                       EndOfImage;
		PVOID                       EndOfTable;
		ULONG_PTR                   SizeOfImage;
		ULONG_PTR                   SizeOfTable;
		ULONG_PTR                   NtHeadersVersion;

	} WALK_IMPORT_TABLE_INTERNAL_DATA, *PWALK_IMPORT_TABLE_INTERNAL_DATA;

	template<class CallbackRoutine, class CallbackContext, class PIMAGE_THUNK_DATA_TYPE>
	inline NTSTATUS WalkImportTableInternal(PWALK_IMPORT_TABLE_INTERNAL_DATA InternalData, CallbackRoutine Callback, CallbackContext Context)
	{
		NTSTATUS                    Status;
		PIMAGE_THUNK_DATA_TYPE      OriginalThunk, FirstThunk;
		PIMAGE_IMPORT_DESCRIPTOR    ImportDescriptor;

		ImportDescriptor = InternalData->ImportDescriptor;

		for (; ImportDescriptor->Name != NULL && ImportDescriptor->FirstThunk != NULL; ++ImportDescriptor)
		{
			LONG_PTR DllName;

			if (ImportDescriptor->FirstThunk > InternalData->SizeOfImage)
				continue;

			if (*(PULONG_PTR)PtrAdd(InternalData->ImageBase, ImportDescriptor->FirstThunk) == NULL)
				continue;

			OriginalThunk = (PIMAGE_THUNK_DATA_TYPE)InternalData->ImageBase;
			if (ImportDescriptor->OriginalFirstThunk != NULL)
			{
				OriginalThunk = PtrAdd(OriginalThunk, ImportDescriptor->OriginalFirstThunk);
			}
			else
			{
				OriginalThunk = PtrAdd(OriginalThunk, ImportDescriptor->FirstThunk);
			}

			if (OriginalThunk >= InternalData->EndOfImage)
				continue;

			DllName = PtrAdd((LONG_PTR)InternalData->ImageBase, ImportDescriptor->Name);
			if ((PVOID)DllName >= InternalData->EndOfImage)
				continue;

			FirstThunk = (PIMAGE_THUNK_DATA_TYPE)PtrAdd(InternalData->ImageBase, ImportDescriptor->FirstThunk);
			while (OriginalThunk->u1.AddressOfData != NULL)
			{
				LONG_PTR    FunctionName;
				ULONG_PTR   Ordinal;

				FunctionName = (LONG_PTR)OriginalThunk->u1.AddressOfData;
				if (FunctionName < 0)
				{
					Ordinal = (USHORT)FunctionName;
					FunctionName = NULL;
				}
				else
				{
					Ordinal = IMAGE_INVALID_ORDINAL;
					FunctionName += (LONG_PTR)PtrAdd(InternalData->ImageBase, 2);
				}

				WALK_IMPORT_TABLE_DATA Data;

				Data.ImageBase = InternalData->ImageBase;
				Data.ImportDescriptor = ImportDescriptor;
				Data.ThunkData = (PIMAGE_THUNK_DATA)FirstThunk;
				Data.DllName = (PCSTR)DllName;
				Data.Ordinal = Ordinal;
				Data.FunctionName = (PCSTR)FunctionName;
				Data.Context = (PVOID)(ULONG_PTR)Context;

				Status = Callback(&Data);
				if (Status == STATUS_VALIDATE_CONTINUE)
					break;

				FAIL_RETURN(Status);

				++OriginalThunk;
				++FirstThunk;
			}
		}

		return STATUS_SUCCESS;
	}

	template<class CallbackRoutine, class CallbackContext>
	inline NTSTATUS WalkImportTableT(PVOID ImageBase, CallbackRoutine Callback, CallbackContext Context = nullptr)
	{
		ULONG_PTR                   NtHeadersVersion;
		NTSTATUS                    Status;
		PIMAGE_NT_HEADERS32         NtHeaders32;
		PIMAGE_NT_HEADERS64         NtHeaders64;

		WALK_IMPORT_TABLE_INTERNAL_DATA InternalData;

		if (!IsValidImage(ImageBase, IMAGE_VALID_IMPORT_ADDRESS_TABLE))
			return STATUS_INVALID_IMAGE_FORMAT;

		NtHeaders32 = (PIMAGE_NT_HEADERS32)ImageNtHeaders(ImageBase, &NtHeadersVersion);
		NtHeaders64 = (PIMAGE_NT_HEADERS64)NtHeaders32;

		InternalData.ImageBase = ImageBase;
		InternalData.ImportDescriptor = nullptr;

		switch (NtHeadersVersion)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			InternalData.ImportDescriptor = PtrAdd(InternalData.ImportDescriptor, NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
			InternalData.SizeOfTable = NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size;
			InternalData.SizeOfImage = NtHeaders32->OptionalHeader.SizeOfImage;
			break;

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			InternalData.ImportDescriptor = PtrAdd(InternalData.ImportDescriptor, NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);
			InternalData.SizeOfTable = NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].Size;
			InternalData.SizeOfImage = NtHeaders64->OptionalHeader.SizeOfImage;
			break;

		default:
			return STATUS_INVALID_IMAGE_FORMAT;
		}

		InternalData.ImportDescriptor = PtrAdd(InternalData.ImportDescriptor, ImageBase);
		InternalData.EndOfImage = PtrAdd(ImageBase, InternalData.SizeOfImage);
		InternalData.EndOfTable = PtrAdd(InternalData.ImportDescriptor, InternalData.SizeOfTable);

		switch (NtHeadersVersion)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			return WalkImportTableInternal<CallbackRoutine, CallbackContext, PIMAGE_THUNK_DATA32>(&InternalData, Callback, Context);

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			return WalkImportTableInternal<CallbackRoutine, CallbackContext, PIMAGE_THUNK_DATA64>(&InternalData, Callback, Context);
		}

		return STATUS_INVALID_IMAGE_FORMAT;
	}

	typedef struct
	{
		PVOID       ImageBase;
		PULONG      AddressOfFunction;
		PCSTR       DllName;
		ULONG_PTR   Ordinal;
		PCSTR       FunctionName;
		PVOID       Context;
		BOOL        IsForward;

	} WALK_EXPORT_TABLE_DATA, *PWALK_EXPORT_TABLE_DATA;

	typedef NTSTATUS(*WalkExportTableCallback)(PWALK_EXPORT_TABLE_DATA Data);

#define WalkEATCallbackM(Data) [&] (PWALK_EXPORT_TABLE_DATA Data) -> NTSTATUS

	template<class CallbackRoutine, class CallbackContext>
	inline NTSTATUS WalkExportTableT(PVOID ImageBase, CallbackRoutine Callback, CallbackContext Context = nullptr)
	{
		PCSTR                       DllName;
		ULONG_PTR                   Ordinal, OrdinalBase, SizeOfTable, SizeOfImage, NtHeadersVersion;
		NTSTATUS                    Status;
		PIMAGE_NT_HEADERS32         NtHeaders32;
		PIMAGE_NT_HEADERS64         NtHeaders64;
		PIMAGE_EXPORT_DIRECTORY     ExportDirectory;
		ULONG_PTR                   NumberOfNames, NumberOfFunctions, NumberOfOrdinals, MaskSize;
		PULONG                      AddressOfFuntions;
		PULONG                      WalkedMask;
		PUSHORT                     AddressOfNameOrdinals;
		PCSTR                      *AddressOfNames;
		PVOID                       EndOfImage, EndOfTable;

		if (!IsValidImage(ImageBase, IMAGE_VALID_EXPORT_ADDRESS_TABLE))
			return STATUS_INVALID_IMAGE_FORMAT;

		NtHeaders32 = (PIMAGE_NT_HEADERS32)ImageNtHeaders(ImageBase, &NtHeadersVersion);
		NtHeaders64 = (PIMAGE_NT_HEADERS64)NtHeaders32;
		if (NtHeaders32 == nullptr)
			return STATUS_INVALID_IMAGE_FORMAT;

		ExportDirectory = nullptr;
		ExportDirectory = PtrAdd(ExportDirectory, ImageBase);

		switch (NtHeadersVersion)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			ExportDirectory = PtrAdd(ExportDirectory, NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
			SizeOfTable = NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size;
			SizeOfImage = NtHeaders32->OptionalHeader.SizeOfImage;
			break;

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			ExportDirectory = PtrAdd(ExportDirectory, NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
			SizeOfTable = NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size;
			SizeOfImage = NtHeaders64->OptionalHeader.SizeOfImage;
			break;

		default:
			return STATUS_INVALID_IMAGE_FORMAT;
		}

		EndOfTable = PtrAdd(ExportDirectory, SizeOfTable);
		EndOfImage = PtrAdd(ImageBase, SizeOfImage);
		NumberOfNames = ExportDirectory->NumberOfNames;
		NumberOfFunctions = ExportDirectory->NumberOfFunctions;
		NumberOfOrdinals = NumberOfFunctions - NumberOfNames;
		AddressOfFuntions = PtrAdd((PULONG)ImageBase, ExportDirectory->AddressOfFunctions);
		AddressOfNames = PtrAdd((PCSTR *)ImageBase, ExportDirectory->AddressOfNames);
		AddressOfNameOrdinals = PtrAdd((PUSHORT)ImageBase, ExportDirectory->AddressOfNameOrdinals);
		DllName = (PCSTR)ImageBase + ExportDirectory->Name;

		if (AddressOfFuntions >= EndOfImage)
		{
			return STATUS_INVALID_IMAGE_WIN_32;
		}

		AddressOfNames = AddressOfNames >= EndOfImage ? nullptr : AddressOfNames;
		AddressOfNameOrdinals = AddressOfNameOrdinals >= EndOfImage ? nullptr : AddressOfNameOrdinals;

		OrdinalBase = ExportDirectory->Base;

		MaskSize = ROUND_UP((NumberOfFunctions + OrdinalBase + 1), bitsof(*WalkedMask)) / bitsof(*WalkedMask);
		MaskSize = MaskSize * sizeof(*WalkedMask);
		WalkedMask = (PULONG)AllocStack(MaskSize);
		if (WalkedMask == nullptr)
			return STATUS_NO_MEMORY;

		ZeroMemory(WalkedMask, MaskSize);

		if (AddressOfNameOrdinals != nullptr && AddressOfNames != nullptr)
			for (; NumberOfNames; ++AddressOfNames, ++AddressOfNameOrdinals, --NumberOfNames)
			{
				PCSTR       FunctionName;
				ULONG_PTR   Index, Mask;
				PULONG      Function;

				FunctionName = PtrAdd((PCSTR)ImageBase, *AddressOfNames);
				Ordinal = *AddressOfNameOrdinals;

				if (Ordinal >= NumberOfFunctions)
					continue;

				Function = AddressOfFuntions + *AddressOfNameOrdinals;
				if (*Function >= SizeOfImage || *Function == NULL)
					continue;

				Ordinal += OrdinalBase;

				Index = Ordinal / bitsof(*WalkedMask);
				Mask = (ULONG_PTR)(1 << ((Ordinal + 1) % bitsof(*WalkedMask) - 1));
				WalkedMask[Index] |= Mask;

				WALK_EXPORT_TABLE_DATA Data;

				Data.ImageBase = ImageBase;
				Data.AddressOfFunction = Function;
				Data.DllName = DllName;
				Data.Ordinal = Ordinal;
				Data.FunctionName = FunctionName;
				Data.Context = (PVOID)(ULONG_PTR)Context;
				Data.IsForward = PtrAdd(ImageBase, *Function) >= ExportDirectory && PtrAdd(ImageBase, *Function) < EndOfTable;

				Status = Callback(&Data);
				if (!NT_SUCCESS(Status))
				{
					//FreeMemory(WalkedMask);
					return Status;
				}
			}

		Ordinal = OrdinalBase;

		for (; NumberOfFunctions; ++AddressOfFuntions, ++Ordinal, --NumberOfFunctions)
		{
			if (FLAG_ON(WalkedMask[Ordinal / bitsof(*WalkedMask)], 1 << ((Ordinal + 1) % bitsof(*WalkedMask) - 1)))
			{
				continue;
			}

			if (*AddressOfFuntions == NULL)
				continue;

			WALK_EXPORT_TABLE_DATA Data;

			Data.ImageBase = ImageBase;
			Data.AddressOfFunction = AddressOfFuntions;
			Data.DllName = DllName;
			Data.Ordinal = Ordinal;
			Data.FunctionName = nullptr;
			Data.Context = (PVOID)(ULONG_PTR)Context;
			Data.IsForward = PtrAdd(ImageBase, *AddressOfFuntions) >= ExportDirectory && PtrAdd(ImageBase, *AddressOfFuntions) < EndOfTable;

			Status = Callback(&Data);
			if (!NT_SUCCESS(Status))
			{
				//FreeMemory(WalkedMask);
				return Status;
			}
		}

		//FreeMemory(WalkedMask);
		return STATUS_SUCCESS;
	}

	ForceInline NTSTATUS WalkExportTableInternal(PVOID ImageBase, WalkExportTableCallback Callback, PVOID Context)
	{
		return WalkExportTableT(ImageBase, Callback, Context);
	}

	template<class CallbackRoutine, class CallbackContext>
	ForceInline NTSTATUS WalkExportTable(PVOID ImageBase, CallbackRoutine Callback, CallbackContext Context)
	{
		return WalkExportTableInternal(ImageBase, (WalkExportTableCallback)Callback, (PVOID)Context);
	}

#define WalkDITCallbackM(Data) [&] (PWALK_IMPORT_TABLE_DATA Data) -> NTSTATUS

	template<class CallbackRoutine, class CallbackContext>
	inline NTSTATUS WalkDelayImportT(PVOID ImageBase, CallbackRoutine Callback, CallbackContext Context = nullptr)
	{
		ULONG_PTR                   NtHeadersVersion;
		NTSTATUS                    Status;
		PIMAGE_NT_HEADERS32         NtHeaders32;
		PIMAGE_NT_HEADERS64         NtHeaders64;

		WALK_IMPORT_TABLE_INTERNAL_DATA InternalData;

		if (!IsValidImage(ImageBase, IMAGE_VALID_IMPORT_ADDRESS_TABLE))
			return STATUS_INVALID_IMAGE_FORMAT;

		NtHeaders32 = (PIMAGE_NT_HEADERS32)ImageNtHeaders(ImageBase, &NtHeadersVersion);
		NtHeaders64 = (PIMAGE_NT_HEADERS64)NtHeaders32;

		InternalData.ImageBase = ImageBase;
		InternalData.ImportDescriptor = nullptr;

		switch (NtHeadersVersion)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			InternalData.ImportDescriptor = PtrAdd(InternalData.ImportDescriptor, NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].VirtualAddress);
			InternalData.SizeOfTable = NtHeaders32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].Size;
			InternalData.SizeOfImage = NtHeaders32->OptionalHeader.SizeOfImage;
			break;

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			InternalData.ImportDescriptor = PtrAdd(InternalData.ImportDescriptor, NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].VirtualAddress);
			InternalData.SizeOfTable = NtHeaders64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT].Size;
			InternalData.SizeOfImage = NtHeaders64->OptionalHeader.SizeOfImage;
			break;

		default:
			return STATUS_INVALID_IMAGE_FORMAT;
		}

		InternalData.ImportDescriptor = PtrAdd(InternalData.ImportDescriptor, ImageBase);
		InternalData.EndOfImage = PtrAdd(ImageBase, InternalData.SizeOfImage);
		InternalData.EndOfTable = PtrAdd(InternalData.ImportDescriptor, InternalData.SizeOfTable);

		switch (NtHeadersVersion)
		{
		case IMAGE_NT_OPTIONAL_HDR32_MAGIC:
			return WalkImportTableInternal<CallbackRoutine, CallbackContext, PIMAGE_THUNK_DATA32>(&InternalData, Callback, Context);

		case IMAGE_NT_OPTIONAL_HDR64_MAGIC:
			return WalkImportTableInternal<CallbackRoutine, CallbackContext, PIMAGE_THUNK_DATA64>(&InternalData, Callback, Context);
		}

		return STATUS_INVALID_IMAGE_FORMAT;
	}

#define WalkOpCodeM(Buffer, OpLength, Ret) \
            [&] (PBYTE Buffer, ULONG_PTR OpLength, PVOID &Ret) -> NTSTATUS

	template<typename T>
	PVOID WalkOpCode64T(PVOID Buffer, LONG_PTR Size, T Callback)
	{
		PVOID ret = nullptr;

		PBYTE _Buffer = (PBYTE)Buffer;

		for (; Size > 0;)
		{
			ULONG_PTR Length;

			Length = GetOpCodeSize64(_Buffer);

			if (NT_SUCCESS(Callback(_Buffer, Length, ret)))
				break;

			_Buffer += Length;
			Size -= Length;
		}

		return ret;
	}

	template<typename T>
	PVOID WalkOpCodeT(PVOID Buffer, LONG_PTR Size, T Callback)
	{
		PVOID ret = nullptr;

		PBYTE _Buffer = (PBYTE)Buffer;

		for (; Size > 0;)
		{
			ULONG_PTR Length;

			Length = GetOpCodeSize(_Buffer);

			if (NT_SUCCESS(Callback(_Buffer, Length, ret)))
				break;

			_Buffer += Length;
			Size -= Length;
		}

		return ret;
	}

#endif // cpp

#endif // _PEIMAGE_H_52a4aaa3_0a38_4bb7_9a33_3072037589e2
#ifndef _FILEIO_H_322e14b1_8a90_410b_bea8_1b39baddbd22
#define _FILEIO_H_322e14b1_8a90_410b_bea8_1b39baddbd22


	//#include "MyLibrary.h"

#if ML_USER_MODE


	_ML_C_HEAD_

		inline Long fsize(FILE *fp)
	{
		fseek(fp, 0, SEEK_CUR);
		return _filelength(_fileno(fp));
	}

	inline Int64 fsize64(FILE *fp)
	{
		fseek(fp, 0, SEEK_CUR);
		return _filelengthi64(_fileno(fp));
	}

	inline Int64 my_fseek64(FILE *fp, Int64 offset, Int origin)
	{
		Int64 ret;

		ret = fseek(fp, 0, SEEK_CUR);
		ret = _lseeki64(_fileno(fp), offset, origin);

		return ret == -1 ? 1 : 0;
	}

	inline Int64 my_ftell64(FILE *fp)
	{
		int ret;
		fpos_t pos;

		ret = fseek(fp, 0, SEEK_CUR);
		ret = fgetpos(fp, &pos);

		return ret ? ret : pos;
	}

	_ML_C_TAIL_

#endif // ring3


#if CPP_DEFINED

#define NFD_NOT_RESOLVE_PATH    (0x00000001u)
#define NFD_EXPAND_ENVVAR       (0x00000002u)

		/************************************************************************
		file disk
		************************************************************************/
	class NtFileDisk
	{
	protected:
		HANDLE          m_FileHandle;
		LARGE_INTEGER   m_FileSize, m_Position;

	public:
		ForceInline NtFileDisk();
		ForceInline NtFileDisk(const NtFileDisk &file);
		ForceInline operator HANDLE() const;
		NtFileDisk& operator=(const NtFileDisk &file);
		NtFileDisk& operator=(HANDLE Handle);

		~NtFileDisk()
		{
			Close();
		}

	protected:
		static
			NTSTATUS
			CreateFileInternal(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags,
			ULONG_PTR   ShareMode,
			ULONG_PTR   Access,
			ULONG_PTR   CreationDisposition,
			ULONG_PTR   Attributes,
			ULONG_PTR   CreateOptions = 0
			);

		static
			NTSTATUS
			CreateFileInternalWithFullPath(
			PHANDLE         FileHandle,
			PUNICODE_STRING FileName,
			ULONG_PTR           Flags,
			ULONG_PTR           ShareMode,
			ULONG_PTR           Access,
			ULONG_PTR           CreationDisposition,
			ULONG_PTR           Attributes,
			ULONG_PTR           CreateOptions = 0
			);

		static
			NTSTATUS
			GetSizeInternal(
			HANDLE          FileHandle,
			PLARGE_INTEGER  FileSize
			);

		static
			NTSTATUS
			SeekInternal(
			HANDLE          FileHandle,
			LARGE_INTEGER   Offset,
			ULONG_PTR       MoveMethod,
			PLARGE_INTEGER  NewPosition = nullptr
			);

		static
			NTSTATUS
			ReadInternal(
			HANDLE          FileHandle,
			PVOID           Buffer,
			ULONG_PTR           Size,
			PLARGE_INTEGER  pBytesRead = nullptr,
			PLARGE_INTEGER  Offset = nullptr
			);

		static
			NTSTATUS
			WriteInternal(
			HANDLE          FileHandle,
			PVOID           Buffer,
			ULONG_PTR           Size,
			PLARGE_INTEGER  pBytesWritten = nullptr,
			PLARGE_INTEGER  Offset = nullptr
			);

		static
			NTSTATUS
			DeleteInternal(
			HANDLE FileHandle
			);

		static
			NTSTATUS
			SetEndOfFileInternal(
			HANDLE FileHandle,
			LARGE_INTEGER EndPosition
			);

		static
			NTSTATUS
			QuerySymbolicTargetInternal(
			HANDLE                  FileHandle,
			PREPARSE_DATA_BUFFER    ReparseBuffer,
			ULONG_PTR               BufferSize,
			PULONG_PTR              BytesReturned = nullptr
			);

		static
			NTSTATUS
			QuerySymbolicTargetInternal(
			HANDLE      FileHandle,
			PWSTR       PrintNameBuffer,
			PULONG_PTR  PrintNameBufferCount,
			PWSTR       SubstituteNameBuffer = nullptr,
			PULONG_PTR  SubstituteNameBufferCount = nullptr
			);

	public:
		NTSTATUS Close();

		NTSTATUS
			Open(
			PCSTR       FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			NTSTATUS        Status;
			UNICODE_STRING  FileNameU;
			ANSI_STRING     FileNameA;

			RtlInitAnsiString(&FileNameA, FileName);
			RtlAnsiStringToUnicodeString(&FileNameU, &FileNameA, TRUE);

			Status = Open(FileNameU.Buffer, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);

			RtlFreeUnicodeString(&FileNameU);

			return Status;
		}

		ForceInline
			NTSTATUS
			Open(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			return Create(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			NTSTATUS
			CreateIfNotExist(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ | GENERIC_WRITE,
			ULONG_PTR   CreationDisposition = FILE_OPEN_IF,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			return Create(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		NTSTATUS
			Modify(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ | GENERIC_WRITE,
			ULONG_PTR   CreationDisposition = FILE_OPEN_IF,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			return Create(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		NoInline
			NTSTATUS
			Append(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ | GENERIC_WRITE,
			ULONG_PTR   CreationDisposition = FILE_OPEN_IF,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			NTSTATUS Status;

			Status = Create(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);

			if (NT_SUCCESS(Status))
				Status = Seek(0ll, FILE_END);

			return Status;
		}

		NTSTATUS
			Create(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_WRITE,
			ULONG_PTR   CreationDisposition = FILE_OVERWRITE_IF,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			);

		ForceInline
			NTSTATUS
			OpenDirectory(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIRECTORY,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_DIRECTORY_FILE
			)
		{
			return CreateDirectory(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			NTSTATUS
			CreateDirectory(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE,
			ULONG_PTR   Access = GENERIC_ALL,
			ULONG_PTR   CreationDisposition = FILE_CREATE,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIRECTORY,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_DIRECTORY_FILE
			)
		{
			Close();
			return CreateFileInternal(
				&m_FileHandle,
				FileName,
				Flags,
				ShareMode,
				Access,
				CreationDisposition,
				Attributes,
				CreateOptions
				);
		}

		NTSTATUS
			OpenVolume(
			ULONG_PTR   Drive,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_NON_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT
			)
		{
			WCHAR Volume[0x10];

			Volume[0] = '\\';
			Volume[1] = '\\';
			Volume[2] = '.';
			Volume[3] = '\\';
			Volume[4] = (WCHAR)Drive;
			Volume[5] = ':';
			Volume[6] = 0;

			return OpenDirectory(Volume, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		NTSTATUS
			OpenDevice(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = FILE_READ_ATTRIBUTES | SYNCHRONIZE,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			);

		NTSTATUS
			DeviceIoControl(
			ULONG_PTR   IoControlCode,
			PVOID       InputBuffer,
			ULONG_PTR   InputBufferLength,
			PVOID       OutputBuffer,
			ULONG_PTR   OutputBufferLength,
			PULONG_PTR  BytesReturned = nullptr
			);

		ForceInline
			NTSTATUS
			OpenSymbolicLink(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_OPEN_REPARSE_POINT | FILE_SYNCHRONOUS_IO_NONALERT
			)
		{
			return CreateSymbolicLink(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			NTSTATUS
			CreateSymbolicLink(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE,
			ULONG_PTR   Access = GENERIC_ALL,
			ULONG_PTR   CreationDisposition = FILE_CREATE,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_OPEN_REPARSE_POINT | FILE_SYNCHRONOUS_IO_NONALERT
			)
		{
			Close();

			return CreateFileInternal(
				&m_FileHandle,
				FileName,
				Flags,
				ShareMode,
				Access,
				CreationDisposition,
				Attributes,
				CreateOptions
				);
		}

		ForceInline
			NTSTATUS
			QuerySymbolicTarget(
			PREPARSE_DATA_BUFFER    ReparseBuffer,
			ULONG_PTR               BufferSize,
			PULONG_PTR              BytesReturned = nullptr
			)
		{
			return QuerySymbolicTargetInternal(
				m_FileHandle,
				ReparseBuffer,
				BufferSize,
				BytesReturned
				);
		}

		ForceInline
			NTSTATUS
			QuerySymbolicTarget(
			PWSTR                   PrintNameBuffer,
			PULONG_PTR              PrintNameBufferCount,
			PWSTR                   SubstituteNameBuffer = nullptr,
			PULONG_PTR              SubstituteNameBufferCount = nullptr
			)
		{
			return QuerySymbolicTargetInternal(
				m_FileHandle,
				PrintNameBuffer,
				PrintNameBufferCount,
				SubstituteNameBuffer,
				SubstituteNameBufferCount
				);
		}

		NTSTATUS
			GetSize(
			PLARGE_INTEGER FileSize
			);

		NTSTATUS
			GetPosition(
			PLARGE_INTEGER Position
			);

		ForceInline
			NTSTATUS
			Seek(
			LONG64          Offset,
			ULONG_PTR       MoveMethod = FILE_BEGIN,
			PLARGE_INTEGER  NewPosition = nullptr
			)
		{
			LARGE_INTEGER NewOffset;

			NewOffset.QuadPart = Offset;
			return Seek(NewOffset, MoveMethod, NewPosition);
		}

		NTSTATUS
			Seek(
			LARGE_INTEGER   Offset,
			ULONG_PTR       MoveMethod = FILE_BEGIN,
			PLARGE_INTEGER  NewPosition = nullptr
			);

		NTSTATUS
			Read(
			PVOID           Buffer,
			ULONG_PTR       Size = 0,
			PLARGE_INTEGER  BytesRead = nullptr
			);

		NTSTATUS
			Write(
			PVOID           Buffer,
			ULONG_PTR       Size,
			PLARGE_INTEGER  BytesWritten = nullptr
			);

		NTSTATUS
			Print(
			PLARGE_INTEGER  BytesWritten,
			PWSTR           Format,
			...
			);

		NTSTATUS
			Print(
			PLARGE_INTEGER  BytesWritten,
			PSTR            Format,
			...
			);

		NTSTATUS
			MapView(
			PVOID*  BaseAddress,
			HANDLE  ProcessHandle = NtCurrentProcess()
			);

		NTSTATUS
			UnMapView(
			PVOID   BaseAddress,
			HANDLE  ProcessHandle = NtCurrentProcess()
			);

		NTSTATUS SetEndOfFile();
		NTSTATUS SetEndOfFile(LARGE_INTEGER EndPosition);

		NTSTATUS SetEndOfFile(ULONG64 EndPosition)
		{
			LARGE_INTEGER LargeEndPosition;
			LargeEndPosition.QuadPart = EndPosition;
			return SetEndOfFile(LargeEndPosition);
		}

		NTSTATUS Delete()
		{
			return DeleteInternal(m_FileHandle);
		}

		ULONG_PTR GetSize32()
		{
			return (ULONG_PTR)GetSize64();
		}

		ULONG_PTR GetCurrentPos()
		{
			return (ULONG_PTR)GetCurrentPos64();
		}

		ULONG64 GetCurrentPos64()
		{
			return m_Position.QuadPart;
		}

		NTSTATUS Rewind()
		{
			return Seek(0ll, FILE_BEGIN);
		}

		HANDLE GetHandle() const
		{
			return m_FileHandle;
		}

		LONG64 GetSize64()
		{
			return m_FileSize.QuadPart;
		}

		/************************************************************************
		static ver
		************************************************************************/

		ForceInline
			static
			NTSTATUS
			Close(
			HANDLE FileHandle
			)
		{
#if ML_KERNEL_MODE
			return ZwClose(FileHandle);
#else
			return NtClose(FileHandle);
#endif
		}

		ForceInline
			static
			NTSTATUS
			Open(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			return Create(FileHandle, FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			static
			NTSTATUS
			Create(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_WRITE,
			ULONG_PTR   CreationDisposition = FILE_OVERWRITE_IF,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			return CreateFileInternal(FileHandle, FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			static
			NTSTATUS
			CreateDirectory(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE,
			ULONG_PTR   Access = GENERIC_ALL,
			ULONG_PTR   CreationDisposition = FILE_CREATE,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIRECTORY,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_DIRECTORY_FILE
			)
		{
			return Create(
				FileHandle,
				FileName,
				Flags,
				ShareMode,
				Access,
				CreationDisposition,
				Attributes,
				CreateOptions
				);
		}

		ForceInline
			static
			NTSTATUS
			OpenDirectory(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL | FILE_ATTRIBUTE_DIRECTORY,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_DIRECTORY_FILE
			)
		{
			return CreateDirectory(FileHandle, FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			static
			NTSTATUS
			OpenVolume(
			PHANDLE     FileHandle,
			ULONG_PTR   Drive,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_NON_DIRECTORY_FILE | FILE_SYNCHRONOUS_IO_NONALERT
			)
		{
			WCHAR Volume[0x10];

			Volume[0] = '\\';
			Volume[1] = '\\';
			Volume[2] = '.';
			Volume[3] = '\\';
			Volume[4] = (WCHAR)Drive;
			Volume[5] = ':';
			Volume[6] = 0;

			return OpenDirectory(FileHandle, Volume, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		static
			NTSTATUS
			OpenDevice(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = FILE_READ_ATTRIBUTES | SYNCHRONIZE,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT
			)
		{
			NTSTATUS        Status;
			UNICODE_STRING  DeviceName;

			RtlInitUnicodeString(&DeviceName, FileName);
			Status = CreateFileInternalWithFullPath(FileHandle, &DeviceName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
			return Status;
		}

		ForceInline
			static
			NTSTATUS
			OpenSymbolicLink(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_OPEN_REPARSE_POINT | FILE_SYNCHRONOUS_IO_NONALERT
			)
		{
			return CreateSymbolicLink(FileHandle, FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
		}

		ForceInline
			static
			NTSTATUS
			CreateSymbolicLink(
			PHANDLE     FileHandle,
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ | FILE_SHARE_WRITE,
			ULONG_PTR   Access = GENERIC_ALL,
			ULONG_PTR   CreationDisposition = FILE_CREATE,
			ULONG_PTR   Attributes = 0,
			ULONG_PTR   CreateOptions = FILE_OPEN_FOR_BACKUP_INTENT | FILE_OPEN_REPARSE_POINT | FILE_SYNCHRONOUS_IO_NONALERT
			)
		{
			return CreateFileInternal(
				FileHandle,
				FileName,
				Flags,
				ShareMode,
				Access,
				CreationDisposition,
				Attributes,
				CreateOptions
				);
		}

		ForceInline
			static
			NTSTATUS
			QuerySymbolicTarget(
			HANDLE                  FileHandle,
			PREPARSE_DATA_BUFFER    ReparseBuffer,
			ULONG_PTR               BufferSize,
			PULONG_PTR              BytesReturned = nullptr
			)
		{
			return QuerySymbolicTargetInternal(
				FileHandle,
				ReparseBuffer,
				BufferSize,
				BytesReturned
				);
		}

		ForceInline
			static
			NTSTATUS
			QuerySymbolicTarget(
			HANDLE                  FileHandle,
			PWSTR                   PrintNameBuffer,
			PULONG_PTR              PrintNameBufferCount,
			PWSTR                   SubstituteNameBuffer = nullptr,
			PULONG_PTR              SubstituteNameBufferCount = nullptr
			)
		{
			return QuerySymbolicTargetInternal(
				FileHandle,
				PrintNameBuffer,
				PrintNameBufferCount,
				SubstituteNameBuffer,
				SubstituteNameBufferCount
				);
		}

		ForceInline
			static
			NTSTATUS
			GetSize(
			HANDLE          FileHandle,
			PLARGE_INTEGER  FileSize
			)
		{
			return GetSizeInternal(FileHandle, FileSize);
		}

		ForceInline
			static
			NTSTATUS
			Read(
			HANDLE          FileHandle,
			PVOID           Buffer,
			ULONG_PTR       Size,
			PLARGE_INTEGER  BytesRead = nullptr,
			PLARGE_INTEGER  Offset = nullptr
			)
		{
			return ReadInternal(FileHandle, Buffer, Size, BytesRead, Offset);
		}

		ForceInline
			static
			NTSTATUS
			Write(
			HANDLE          FileHandle,
			PVOID           Buffer,
			ULONG_PTR       Size,
			PLARGE_INTEGER  BytesWritten = nullptr,
			PLARGE_INTEGER  Offset = nullptr
			)
		{
			return WriteInternal(FileHandle, Buffer, Size, BytesWritten, Offset);
		}

		ForceInline
			static
			NTSTATUS
			Seek(
			HANDLE          FileHandle,
			LONG64          Offset,
			ULONG_PTR       MoveMethod = FILE_BEGIN,
			PLARGE_INTEGER  NewPosition = nullptr
			)
		{
			LARGE_INTEGER NewOffset;

			NewOffset.QuadPart = Offset;
			return Seek(FileHandle, NewOffset, MoveMethod, NewPosition);
		}

		ForceInline
			static
			NTSTATUS
			Seek(
			HANDLE          FileHandle,
			LARGE_INTEGER   Offset,
			ULONG_PTR       MoveMethod = FILE_BEGIN,
			PLARGE_INTEGER  NewPosition = nullptr
			)
		{
			return SeekInternal(FileHandle, Offset, MoveMethod, NewPosition);
		}

		ForceInline
			static
			NTSTATUS
			SetEndOfFile(
			HANDLE FileHandle
			);

		ForceInline
			static
			NTSTATUS
			Delete(
			HANDLE FileHandle
			)
		{
			return DeleteInternal(FileHandle);
		}

		static
			NTSTATUS
			QueryFullNtPath(
			PCWSTR          FileName,
			PUNICODE_STRING NtFilePath,
			ULONG_PTR       Flags = 0
			);

#if ML_USER_MODE

		static
			HANDLE
			SimulateCreateFile(
			PCWSTR lpFileName,
			ULONG dwDesiredAccess,
			ULONG dwShareMode,
			LPSECURITY_ATTRIBUTES lpSecurityAttributes,
			ULONG dwCreationDisposition,
			ULONG dwFlagsAndAttributes,
			HANDLE hTemplateFile
			)
		{
			OBJECT_ATTRIBUTES ObjectAttributes;
			IO_STATUS_BLOCK IoStatusBlock;
			UNICODE_STRING NtPathU;
			HANDLE FileHandle;
			NTSTATUS Status;
			ULONG FileAttributes, Flags = 0;
			PVOID EaBuffer = nullptr;
			ULONG EaLength = 0;

			if (lpFileName == nullptr || lpFileName[0] == 0)
			{
				SetLastNTError(STATUS_OBJECT_PATH_NOT_FOUND);
				return INVALID_HANDLE_VALUE;
			}

			/* validate & translate the creation disposition */
			switch (dwCreationDisposition)
			{
			case CREATE_NEW:
				dwCreationDisposition = FILE_CREATE;
				break;

			case CREATE_ALWAYS:
				dwCreationDisposition = FILE_OVERWRITE_IF;
				break;

			case OPEN_EXISTING:
				dwCreationDisposition = FILE_OPEN;
				break;

			case OPEN_ALWAYS:
				dwCreationDisposition = FILE_OPEN_IF;
				break;

			case TRUNCATE_EXISTING:
				dwCreationDisposition = FILE_OVERWRITE;
				break;

			default:
				SetLastNTError(STATUS_INVALID_PARAMETER);
				return (INVALID_HANDLE_VALUE);
			}

			/* check for console input/output */
#if 0
			if (0 == _wcsicmp(L"CONOUT$", lpFileName)
				|| 0 == _wcsicmp(L"CONIN$", lpFileName))
			{
				return OpenConsoleW(lpFileName,
					dwDesiredAccess,
					lpSecurityAttributes ? lpSecurityAttributes->bInheritHandle : FALSE,
					FILE_SHARE_READ | FILE_SHARE_WRITE);
			}
#endif
			/* validate & translate the flags */

			/* translate the flags that need no validation */
			if (!(dwFlagsAndAttributes & FILE_FLAG_OVERLAPPED))
			{
				/* yes, nonalert is correct! apc's are not delivered
				while waiting for file io to complete */
				Flags |= FILE_SYNCHRONOUS_IO_NONALERT;
			}

			if (dwFlagsAndAttributes & FILE_FLAG_WRITE_THROUGH)
				Flags |= FILE_WRITE_THROUGH;

			if (dwFlagsAndAttributes & FILE_FLAG_NO_BUFFERING)
				Flags |= FILE_NO_INTERMEDIATE_BUFFERING;

			if (dwFlagsAndAttributes & FILE_FLAG_RANDOM_ACCESS)
				Flags |= FILE_RANDOM_ACCESS;

			if (dwFlagsAndAttributes & FILE_FLAG_SEQUENTIAL_SCAN)
				Flags |= FILE_SEQUENTIAL_ONLY;

			if (dwFlagsAndAttributes & FILE_FLAG_DELETE_ON_CLOSE)
				Flags |= FILE_DELETE_ON_CLOSE;

			if (dwFlagsAndAttributes & FILE_FLAG_BACKUP_SEMANTICS)
			{
				if (dwDesiredAccess & GENERIC_ALL)
					Flags |= FILE_OPEN_FOR_BACKUP_INTENT | FILE_OPEN_REMOTE_INSTANCE;
				else
				{
					if (dwDesiredAccess & GENERIC_READ)
						Flags |= FILE_OPEN_FOR_BACKUP_INTENT;

					if (dwDesiredAccess & GENERIC_WRITE)
						Flags |= FILE_OPEN_REMOTE_INSTANCE;
				}
			}
			else
				Flags |= FILE_NON_DIRECTORY_FILE;

			if (dwFlagsAndAttributes & FILE_FLAG_OPEN_REPARSE_POINT)
				Flags |= FILE_OPEN_REPARSE_POINT;

			if (dwFlagsAndAttributes & FILE_FLAG_OPEN_NO_RECALL)
				Flags |= FILE_OPEN_NO_RECALL;

			FileAttributes = (dwFlagsAndAttributes & (FILE_ATTRIBUTE_VALID_FLAGS & ~FILE_ATTRIBUTE_DIRECTORY));

			/* handle may allways be waited on and querying attributes are allways allowed */
			dwDesiredAccess |= SYNCHRONIZE | FILE_READ_ATTRIBUTES;

			/* FILE_FLAG_POSIX_SEMANTICS is handled later */

			/* validate & translate the filename */
			if (!RtlDosPathNameToNtPathName_U(
				lpFileName,
				&NtPathU,
				nullptr,
				nullptr))
			{
				RtlSetLastWin32Error(ERROR_PATH_NOT_FOUND);
				return INVALID_HANDLE_VALUE;
			}

			if (hTemplateFile != nullptr)
			{
				FILE_EA_INFORMATION EaInformation;

				/* try to get the size of the extended attributes, if we fail just continue
				creating the file without copying the attributes! */
				Status = ZwQueryInformationFile(
					hTemplateFile,
					&IoStatusBlock,
					&EaInformation,
					sizeof(FILE_EA_INFORMATION),
					FileEaInformation
					);
				if (NT_SUCCESS(Status) && (EaInformation.EaSize != 0))
				{
					/* there's extended attributes to read, let's give it a try */
					/*
					EaBuffer = RtlAllocateHeap(RtlGetProcessHeap(),
					0,
					EaInformation.EaSize);
					*/
					EaBuffer = AllocStack(EaInformation.EaSize);
					Status = ZwQueryEaFile(hTemplateFile,
						&IoStatusBlock,
						EaBuffer,
						EaInformation.EaSize,
						FALSE,
						nullptr,
						0,
						nullptr,
						TRUE
						);

					if (NT_SUCCESS(Status))
					{
						/* we successfully read the extended attributes, break the loop
						and continue */
						EaLength = EaInformation.EaSize;
					}
				}
			}

			/* build the object attributes */
			InitializeObjectAttributes(&ObjectAttributes, &NtPathU, 0, nullptr, nullptr);

			if (lpSecurityAttributes)
			{
				if (lpSecurityAttributes->bInheritHandle)
					ObjectAttributes.Attributes |= OBJ_INHERIT;

				ObjectAttributes.SecurityDescriptor = lpSecurityAttributes->lpSecurityDescriptor;
			}

			if (!(dwFlagsAndAttributes & FILE_FLAG_POSIX_SEMANTICS))
				ObjectAttributes.Attributes |= OBJ_CASE_INSENSITIVE;

			/* perform the call */
			Status = ZwCreateFile(&FileHandle,
				dwDesiredAccess,
				&ObjectAttributes,
				&IoStatusBlock,
				nullptr,
				FileAttributes,
				dwShareMode,
				dwCreationDisposition,
				Flags,
				EaBuffer,
				EaLength
				);

			RtlFreeUnicodeString(&NtPathU);

#if 0
			/* free the extended attributes buffer if allocated */
			if (EaBuffer != NULL)
			{
				RtlFreeHeap(RtlGetProcessHeap(), 0, EaBuffer);
			}
#endif

			/* error */
			if (!NT_SUCCESS(Status))
			{
				/* In the case file creation was rejected due to CREATE_NEW flag
				* was specified and file with that name already exists, correct
				* last error is ERROR_FILE_EXISTS and not ERROR_ALREADY_EXISTS.
				* Note: RtlNtStatusToDosError is not the subject to blame here.
				*/
				if (Status == STATUS_OBJECT_NAME_COLLISION &&
					dwCreationDisposition == FILE_CREATE)
				{
					RtlSetLastWin32Error(ERROR_FILE_EXISTS);
				}
				else
				{
					SetLastNTError(Status);
				}

				return INVALID_HANDLE_VALUE;
			}

			/*
			create with OPEN_ALWAYS (FILE_OPEN_IF) returns info = FILE_OPENED or FILE_CREATED
			create with CREATE_ALWAYS (FILE_OVERWRITE_IF) returns info = FILE_OVERWRITTEN or FILE_CREATED
			*/
			if (dwCreationDisposition == FILE_OPEN_IF)
			{
				RtlSetLastWin32Error(IoStatusBlock.Information == FILE_OPENED ? ERROR_ALREADY_EXISTS : 0);
			}
			else if (dwCreationDisposition == FILE_OVERWRITE_IF)
			{
				RtlSetLastWin32Error(IoStatusBlock.Information == FILE_OVERWRITTEN ? ERROR_ALREADY_EXISTS : 0);
			}

			return FileHandle;
		}

#endif // r3

	};

#if !ML_KERNEL_MODE

	/************************************************************************
	memory file
	************************************************************************/
	class NtFileMemory
	{
	protected:
		PVOID           m_BufferBase, m_BufferCurrent, m_BufferEnd;
		LARGE_INTEGER   m_FileSize;
		MemoryAllocator m_Memory;

	public:
		NtFileMemory()
		{
			m_BufferBase = nullptr;
			m_BufferCurrent = nullptr;
			m_BufferEnd = nullptr;
		}

		~NtFileMemory()
		{
			Close();
		}

		NTSTATUS Close()
		{
			return ReleaseAll();
		}

		NTSTATUS Open(
			PCWSTR      FileName,
			ULONG_PTR   Flags = 0,
			ULONG_PTR   ShareMode = FILE_SHARE_READ,
			ULONG_PTR   Access = GENERIC_READ,
			ULONG_PTR   CreationDisposition = FILE_OPEN,
			ULONG_PTR   Attributes = FILE_ATTRIBUTE_NORMAL,
			ULONG_PTR   CreateOptions = 0
			)
		{
			NtFileDisk  File;
			PVOID       Buffer;
			ULONG_PTR   Size;
			NTSTATUS    Status;

			ReleaseAll();

			Status = File.Open(FileName, Flags, ShareMode, Access, CreationDisposition, Attributes, CreateOptions);
			FAIL_RETURN(Status);

			Size = File.GetSize32();
			m_BufferBase = m_Memory.Alloc(ROUND_UP(Size + sizeof(ULONG_PTR), 16));
			if (m_BufferBase == nullptr)
				return STATUS_NO_MEMORY;

			Status = File.Read(m_BufferBase, Size);
			if (NT_FAILED(Status))
			{
				ReleaseAll();
				return Status;
			}

			*(PULONG)PtrAdd(m_BufferBase, Size) = 0;

			m_FileSize.QuadPart = Size;
			m_BufferCurrent = m_BufferBase;
			m_BufferEnd = PtrAdd(m_BufferCurrent, Size);

			return Status;
		}

		NTSTATUS Open(PVOID Buffer, ULONG_PTR Size)
		{
			ReleaseAll();

			m_BufferBase = m_Memory.Alloc(ROUND_UP(Size + sizeof(ULONG_PTR), 16));
			if (m_BufferBase == nullptr)
				return STATUS_NO_MEMORY;

			CopyMemory(m_BufferBase, Buffer, Size);

			*(PULONG)PtrAdd(m_BufferBase, Size) = 0;

			m_FileSize.QuadPart = Size;
			m_BufferCurrent = m_BufferBase;
			m_BufferEnd = PtrAdd(m_BufferCurrent, Size);

			return STATUS_SUCCESS;
		}

		NTSTATUS GetPosition(PLARGE_INTEGER Position)
		{
			if (Position == nullptr)
				return STATUS_INVALID_PARAMETER;

			Position->QuadPart = PtrOffset(m_BufferCurrent, m_BufferBase);

			return STATUS_SUCCESS;
		}

		ULONG_PTR GetPosition32()
		{
			return PtrOffset(m_BufferCurrent, m_BufferBase);
		}

		ULONG_PTR GetSize32()
		{
			return (ULONG_PTR)GetSize64();
		}

		LONG64 GetSize64()
		{
			return m_FileSize.QuadPart;
		}

		PVOID GetBuffer()
		{
			return m_BufferCurrent;
		}

		operator PVOID()
		{
			return this->GetBuffer();
		}

		operator ULONG_PTR()
		{
			return (ULONG_PTR)this->GetSize64();
		}

		inline
			NTSTATUS
			Seek(
			LONG64          Offset,
			ULONG_PTR       MoveMethod = FILE_BEGIN,
			PLARGE_INTEGER  NewPosition = nullptr
			)
		{
			LARGE_INTEGER NewOffset;

			NewOffset.QuadPart = Offset;
			return Seek(NewOffset, MoveMethod, NewPosition);
		}

		NoInline
			NTSTATUS
			Seek(
			LARGE_INTEGER   Offset,
			ULONG_PTR       MoveMethod = FILE_BEGIN,
			PLARGE_INTEGER  NewPosition = nullptr
			)
		{
			LARGE_INTEGER NewOffset;

			NewOffset.QuadPart = PtrOffset(m_BufferCurrent, m_BufferBase);

			switch (MoveMethod)
			{
			case FILE_CURRENT:
				NewOffset.QuadPart += Offset.QuadPart;
				break;

			case FILE_END:
				NewOffset.QuadPart = m_FileSize.QuadPart + Offset.QuadPart;
				break;

			case FILE_BEGIN:
				NewOffset.QuadPart = Offset.QuadPart;
				break;

			default:
				return STATUS_INVALID_PARAMETER_2;
			}

			if (NewOffset.QuadPart < 0)
				return STATUS_INVALID_PARAMETER_1;

			if (NewOffset.QuadPart > m_FileSize.QuadPart)
			{
				PVOID BufferBase;

				BufferBase = m_Memory.ReAlloc(m_BufferBase, (SizeT)NewOffset.QuadPart, HEAP_ZERO_MEMORY);
				if (BufferBase == nullptr)
					return STATUS_NO_MEMORY;

				m_FileSize.QuadPart = NewOffset.QuadPart;
				m_BufferBase = BufferBase;
				m_BufferEnd = PtrAdd(BufferBase, m_FileSize.QuadPart);
			}

			m_BufferCurrent = PtrAdd(m_BufferBase, NewOffset.QuadPart);

			if (NewPosition != nullptr)
				NewPosition->QuadPart = NewOffset.QuadPart;

			return STATUS_SUCCESS;
		}

		NoInline
			NTSTATUS
			Read(
			PVOID           Buffer,
			ULONG_PTR       Size,
			PLARGE_INTEGER  BytesRead = nullptr
			)
		{
			ULONG_PTR SizeRemain;

			SizeRemain = PtrOffset(m_BufferEnd, m_BufferCurrent);
			Size = ML_MIN(Size, SizeRemain);

			if (Size == 0)
				return STATUS_END_OF_FILE;

			if (Buffer == nullptr)
			{
				if (BytesRead != nullptr)
				{
					BytesRead->QuadPart = SizeRemain;
					return STATUS_SUCCESS;
				}

				return STATUS_INVALID_PARAMETER_1;
			}

			CopyMemory(Buffer, m_BufferCurrent, Size);

			if (BytesRead != nullptr)
				BytesRead->QuadPart = Size;

			m_BufferCurrent = PtrAdd(m_BufferCurrent, Size);

			return STATUS_SUCCESS;
		}

		NTSTATUS
			Write(
			PVOID           Buffer,
			ULONG_PTR       Size,
			PLARGE_INTEGER  pBytesWritten = nullptr
			);

	protected:
		NTSTATUS ReleaseAll()
		{
			m_Memory.SafeFree(&m_BufferBase);
			m_BufferCurrent = nullptr;
			m_BufferEnd = nullptr;

			return STATUS_SUCCESS;
		}
	};

#endif // ML_KERNEL_MODE

#endif // CPP_DEFINED


#endif // _FILEIO_H_322e14b1_8a90_410b_bea8_1b39baddbd22
#ifndef _LDASM_H_6c4dff54_0f1d_4946_b50c_f9b96c5ade1e_
#define _LDASM_H_6c4dff54_0f1d_4946_b50c_f9b96c5ade1e_


	ULONG_PTR FASTCALL LdeGetOpCodeSize32(PVOID Code, PVOID DEF_VAL(*OpCodePtr, NULL));
	ULONG_PTR FASTCALL LdeGetOpCodeSize64(PVOID Code, PVOID DEF_VAL(*OpCodePtr, NULL));
	ULONG_PTR FASTCALL SizeOfProc(PVOID Proc);
	BOOL FASTCALL IsRelativeCmd(PBYTE OpCode);

#endif // _LDASM_H_6c4dff54_0f1d_4946_b50c_f9b96c5ade1e_

#if ML_SUPPORT_LAMBDA

#ifndef _DBGHELPER_H_c22865c1_aa1b_40d7_bf83_d86a2ffcc7d4_
#define _DBGHELPER_H_c22865c1_aa1b_40d7_bf83_d86a2ffcc7d4_

	//#include "Hook.h"

	NTSTATUS EnableHeapCorruptionHelper();
	NTSTATUS DisableHeapCorruptionHelper();

#endif // _DBGHELPER_H_c22865c1_aa1b_40d7_bf83_d86a2ffcc7d4_

#endif // ML_SUPPORT_LAMBDA

	// class

#if CPP_DEFINED


	ML_NAMESPACE

#ifndef _TRAITS_H_0c85514c_9b05_4eaf_a9ae_8e46a810207c_
#define _TRAITS_H_0c85514c_9b05_4eaf_a9ae_8e46a810207c_

		template<typename T>
	struct TypeTraits
	{
		typedef T           VALUE_TYPE;
		typedef T&          REF_TYPE;
		typedef const T&    CONST_REF_TYPE;
		VALUE_TYPE          value;
	};

	template<typename T>
	struct TypeTraits<T&>
	{
		typedef T           VALUE_TYPE;
		typedef T&          REF_TYPE;
		typedef const T&    CONST_REF_TYPE;
		VALUE_TYPE          value;
	};

	template<typename T>
	struct TypeTraits<const T&>
	{
		typedef T           VALUE_TYPE;
		typedef T&          REF_TYPE;
		typedef const T&    CONST_REF_TYPE;
		VALUE_TYPE          value;
	};

	template<>
	struct TypeTraits<VOID>
	{
		typedef VOID VALUE_TYPE;
		typedef VOID REF_TYPE;
		typedef VOID CONST_REF_TYPE;
	};

#endif // _TRAITS_H_0c85514c_9b05_4eaf_a9ae_8e46a810207c_
#ifndef _OBJECT_H_fde9e5ea_50a7_46b2_aa60_bbe6492bedd4_
#define _OBJECT_H_fde9e5ea_50a7_46b2_aa60_bbe6492bedd4_


	class ObjectBase
	{
		;
	};

	class Object : public ObjectBase
	{
	public:
		virtual ~Object() = 0 {}
	};

#endif // _OBJECT_H_fde9e5ea_50a7_46b2_aa60_bbe6492bedd4_
#ifndef _POLICY_H_96a491a5_e296_46ff_8503_d35bff2cb7bb_
#define _POLICY_H_96a491a5_e296_46ff_8503_d35bff2cb7bb_


#endif // _POLICY_H_96a491a5_e296_46ff_8503_d35bff2cb7bb_
#ifndef _POINTER_H_6fac0398_48bd_494d_b268_63d42c5b7dc9_
#define _POINTER_H_6fac0398_48bd_494d_b268_63d42c5b7dc9_


	template<typename PtrBase, typename PointerType>
	class PointerImpl
	{
	protected:
		PULongPtr   RefCount;
		PointerType Reference;

	protected:
		ULongPtr AddRef()
		{
			return RefCount != NULL ? ++*RefCount : 0;
		}

		ULongPtr Release()
		{
			return ((PtrBase *)this)->ReleaseWorker();
		}

		ULongPtr ReleaseWorker()
		{
			if (RefCount == NULL)
				return 0;

			ULongPtr RefCount = --*this->RefCount;

			if (RefCount == 0)
			{
				delete this->RefCount;

				((PtrBase *)this)->ReleasePointer();

				RefCount = NULL;
				Reference = NULL;
			}

			return RefCount;
		}

		void ReleasePointer()
		{
			delete Reference;
		}

	public:
		PointerImpl()
		{
			RefCount = NULL;
			Reference = NULL;
		}

		PointerImpl(PointerType Ptr)
		{
			(*this) = Ptr;
		}

		PointerImpl(const PointerImpl<PtrBase, PointerType>& Ptr)
		{
			(*this) = Ptr;
		}

		~PointerImpl()
		{
			Release();
		}

		PtrBase& operator=(PointerType Ptr)
		{
			if (Ptr == Reference)
				return *((PtrBase *)this);

			Release();

			if (Ptr == NULL)
			{
				RefCount = NULL;
				Reference = NULL;
			}
			else
			{
				RefCount = new ULongPtr(1);
				Reference = Ptr;
			}

			return *((PtrBase *)this);
		}

		PtrBase& operator=(const PtrBase& Ptr)
		{
			if (this == &Ptr)
				return *((PtrBase *)this);

			Release();

			RefCount = Ptr.RefCount;
			Reference = Ptr.Reference;

			AddRef();

			return *((PtrBase *)this);
		}

		Bool operator== (const PointerType Ptr) const
		{
			return Reference == Ptr;
		}

		operator void*() const
		{
			return Reference;
		}

		Bool operator!= (const PointerType Ptr) const
		{
			return Reference != Ptr;
		}

		Bool operator> (const PointerType Ptr) const
		{
			return Reference > Ptr;
		}

		Bool operator< (const PointerType Ptr) const
		{
			return Reference < Ptr;
		}

		Bool operator>= (const PointerType Ptr) const
		{
			return Reference >= Ptr;
		}

		Bool operator<= (const PointerType Ptr) const
		{
			return Reference <= Ptr;
		}

		Bool operator!() const
		{
			return Reference != NULL;
		}

		operator bool() const
		{
			return Reference != NULL;
		}

		PointerType operator-> () const
		{
			return Reference;
		}
	};

	template<typename PointerType>
	class Pointer : public PointerImpl<Pointer<PointerType>, PointerType>
	{
	public:
		const TYPE_OF(*((PointerType)0))& operator[](Int Index) const
		{
			return Reference[Index];
		}

		Pointer<PointerType>& operator=(PointerType Ptr)
		{
			return __super::operator=(Ptr);
		}

		Pointer<PointerType>& operator=(const Pointer<PointerType>& Ptr)
		{
			return __super::operator=(Ptr);
		}
	};

#if ML_USER_MODE

#endif // r3

#endif // _POINTER_H_6fac0398_48bd_494d_b268_63d42c5b7dc9_
#ifndef _SAFEWINTYPES_H_1bcf869c_5f0d_4e2b_9b04_212129cd7897_
#define _SAFEWINTYPES_H_1bcf869c_5f0d_4e2b_9b04_212129cd7897_


	template<>
	class Pointer<HANDLE> : public PointerImpl<Pointer<HANDLE>, HANDLE>
	{
		friend class PointerImpl<Pointer<HANDLE>, HANDLE>;

		void ReleasePointer()
		{
			switch ((ULONG_PTR)Reference)
			{
			case (ULONG_PTR)NtCurrentProcess():
			case (ULONG_PTR)NtCurrentThread():
				return;
			}

			ZwClose(Reference);
		}

	public:
		Pointer<HANDLE>& operator=(HANDLE Ptr)
		{
			return __super::operator=(Ptr);
		}

		Pointer<HANDLE>& operator=(const Pointer<HANDLE>& Ptr)
		{
			return __super::operator=(Ptr);
		}
	};

	typedef Pointer<HANDLE> Handle;

#if ML_USER_MODE

	class FindHandle : public PointerImpl<FindHandle, HANDLE>
	{
		friend class PointerImpl<FindHandle, HANDLE>;

		void ReleasePointer()
		{
			FindClose(Reference);
		}

	public:
		FindHandle& operator=(HANDLE Ptr)
		{
			return __super::operator=(Ptr);
		}

		FindHandle& operator=(const FindHandle& Ptr)
		{
			return __super::operator=(Ptr);
		}
	};

#endif // r3

#endif // _SAFEWINTYPES_H_1bcf869c_5f0d_4e2b_9b04_212129cd7897_
#ifndef _FUNCTION_H_a0ede8da_ec11_4122_bf7f_3b39ea104800_
#define _FUNCTION_H_a0ede8da_ec11_4122_bf7f_3b39ea104800_


	template<typename T> class Function;

#pragma warning(push)
#pragma warning(disable:4510 4610)

	template<typename T> class Function : public Function<TYPE_OF(&T::operator())> {};

#pragma warning(pop)

#pragma push_macro("DEFINE_FUNCTION_CLASS")

#undef DEFINE_FUNCTION_CLASS
#define DEFINE_FUNCTION_CLASS(call_convention)\
    template<typename R, typename... ARGS> \
    class Function<R call_convention(ARGS...)> \
						    { \
    public: \
        typedef Function<R call_convention(ARGS...)> SELF_TYPE; \
        typedef R RET_TYPE; \
        static const ULONG_PTR NumberOfArguments = sizeof...(ARGS); \
        typedef R (FUNCTION_TYPE)(ARGS...); \
\
        class Invoker \
						        { \
            ULONG_PTR RefCount; \
        public: \
            Invoker() : RefCount(1) {} \
            virtual ~Invoker() {} \
            virtual R Invoke(ARGS...) = 0; \
\
            void AddRef() \
						            { \
                ++this->RefCount; \
						            } \
\
            void Release() \
						            { \
                if (--this->RefCount == 0) \
                    delete this; \
						            } \
\
						        }; \
\
        template<typename F> \
        class FunctionInvoker : public Invoker \
						        { \
        protected: \
            F func; \
\
        public: \
            FunctionInvoker(const F& function) : func(function) \
						            { \
						            } \
\
            R Invoke(ARGS... args) \
						            { \
                return func(args...); \
						            } \
						        }; \
\
        Invoker *invoker; \
\
        NoInline Function(const SELF_TYPE &func) \
						        { \
            this->invoker = func.invoker; \
            this->invoker->AddRef(); \
						        } \
\
        template<typename F> \
        NoInline Function(const F &func) \
						        { \
            this->invoker = new FunctionInvoker<F>(func); \
						        } \
\
        template<typename F> \
        SELF_TYPE& operator=(const F &func) \
						        { \
            this->~Function(); \
            this->invoker = new FunctionInvoker<F>(func); \
            return *this; \
						        } \
\
        NoInline ~Function() \
						        { \
            if (invoker != nullptr) \
                invoker->Release(); \
						        } \
\
        R operator()(ARGS... args) \
						        { \
            return this->invoker->Invoke(args...); \
						        } \
						    }

#define DEFINE_FUNCTION_POINTER_CLASS(call_convention)\
    template<typename R, typename... ARGS> \
    class Function<R (call_convention*)(ARGS...)> \
						    { \
    public: \
        typedef Function<R call_convention(ARGS...)> SELF_TYPE; \
        typedef R RET_TYPE; \
        static const ULONG_PTR NumberOfArguments = sizeof...(ARGS); \
        typedef R (FUNCTION_TYPE)(ARGS...); \
\
        class Invoker \
						        { \
            ULONG_PTR RefCount; \
        public: \
            Invoker() : RefCount(1) {} \
            virtual ~Invoker() {} \
            virtual R Invoke(ARGS...) = 0; \
\
            void AddRef() \
						            { \
                ++this->RefCount; \
						            } \
\
            void Release() \
						            { \
                if (--this->RefCount == 0) \
                    delete this; \
						            } \
\
						        }; \
\
        template<typename F> \
        class FunctionInvoker : public Invoker \
						        { \
        protected: \
            F func; \
\
        public: \
            FunctionInvoker(const F& function) : func(function) \
						            { \
						            } \
\
            R Invoke(ARGS... args) \
						            { \
                return func(args...); \
						            } \
						        }; \
\
        Invoker *invoker; \
\
        NoInline Function(const SELF_TYPE &func) \
						        { \
            this->invoker = func.invoker; \
            this->invoker->AddRef(); \
						        } \
\
        template<typename F> \
        NoInline Function(const F &func) \
						        { \
            this->invoker = new FunctionInvoker<F>(func); \
						        } \
\
        template<typename F> \
        SELF_TYPE& operator=(const F &func) \
						        { \
            this->~Function(); \
            this->invoker = new FunctionInvoker<F>(func); \
            return *this; \
						        } \
\
        NoInline ~Function() \
						        { \
            if (invoker != nullptr) \
                invoker->Release(); \
						        } \
\
        R operator()(ARGS... args) \
						        { \
            return this->invoker->Invoke(args...); \
						        } \
						    };

#define DEFINE_CLASS_METHOD_CLASS(...) \
    template<typename CLASS, typename R, typename... ARGS> \
    class Function<R(__VA_ARGS__ CLASS::*)(const CLASS&, ARGS...)> \
						    { \
    public: \
        typedef Function<R __VA_ARGS__(const CLASS&, ARGS...)> SELF_TYPE; \
        typedef R RET_TYPE; \
        static const ULONG_PTR NumberOfArguments = sizeof...(ARGS); \
        typedef R (FUNCTION_TYPE)(const CLASS&, ARGS...); \
\
        class Invoker \
						        { \
            ULONG_PTR RefCount; \
        public: \
            Invoker() : RefCount(1) {} \
            virtual ~Invoker() {} \
            virtual R Invoke(const CLASS&, ARGS...) = 0; \
\
            void AddRef() \
						            { \
                ++this->RefCount; \
						            } \
\
            void Release() \
						            { \
                if (--this->RefCount == 0) \
                    delete this; \
						            } \
\
						        }; \
\
        template<typename F> \
        class FunctionInvoker : public Invoker \
						        { \
        protected: \
            F func; \
\
        public: \
            FunctionInvoker(const F& function) : func(function) \
						            { \
						            } \
\
            R Invoke(const CLASS& thiz, ARGS... args) \
						            { \
                return func(thiz, args...); \
						            } \
						        }; \
\
        Invoker *invoker; \
\
        NoInline Function(const SELF_TYPE &func) \
						        { \
            this->invoker = func.invoker; \
            this->invoker->AddRef(); \
						        } \
\
        template<typename F> \
        NoInline Function(const F &func) \
						        { \
            this->invoker = new FunctionInvoker<F>(func); \
						        } \
\
        template<typename F> \
        SELF_TYPE& operator=(const F &func) \
						        { \
            this->~Function(); \
            this->invoker = new FunctionInvoker<F>(func); \
            return *this; \
						        } \
\
        NoInline ~Function() \
						        { \
            if (invoker != nullptr) \
                invoker->Release(); \
						        } \
\
        R operator()(const CLASS& thiz, ARGS... args) \
						        { \
            return this->invoker->Invoke(thiz, args...); \
						        } \
						    };


#define DEFINE_LAMBDA_CLASS(...) \
    template<typename CLASS, typename R, typename... ARGS> \
    class Function<R(__VA_ARGS__ CLASS::*)(ARGS...) const> \
						    { \
    public: \
        typedef Function<R __VA_ARGS__(ARGS...)> SELF_TYPE; \
        typedef R RET_TYPE; \
        static const ULONG_PTR NumberOfArguments = sizeof...(ARGS); \
        typedef R (FUNCTION_TYPE)(ARGS...); \
\
        class Invoker \
						        { \
            ULONG_PTR RefCount; \
        public: \
            Invoker() : RefCount(1) {} \
            virtual ~Invoker() {} \
            virtual R Invoke(ARGS...) = 0; \
\
            void AddRef() \
						            { \
                ++this->RefCount; \
						            } \
\
            void Release() \
						            { \
                if (--this->RefCount == 0) \
                    delete this; \
						            } \
\
						        }; \
\
        template<typename F> \
        class FunctionInvoker : public Invoker \
						        { \
        protected: \
            F func; \
\
        public: \
            FunctionInvoker(const F& function) : func(function) \
						            { \
						            } \
\
            R Invoke(ARGS... args) \
						            { \
                return func(args...); \
						            } \
						        }; \
\
        Invoker *invoker; \
\
        NoInline Function(const SELF_TYPE &func) \
						        { \
            this->invoker = func.invoker; \
            this->invoker->AddRef(); \
						        } \
\
        template<typename F> \
        NoInline Function(const F &func) \
						        { \
            this->invoker = new FunctionInvoker<F>(func); \
						        } \
\
        template<typename F> \
        SELF_TYPE& operator=(const F &func) \
						        { \
            this->~Function(); \
            this->invoker = new FunctionInvoker<F>(func); \
            return *this; \
						        } \
\
        NoInline ~Function() \
						        { \
            if (invoker != nullptr) \
                invoker->Release(); \
						        } \
\
        R operator()(ARGS... args) \
						        { \
            return this->invoker->Invoke(args...); \
						        } \
						    };


#if ML_X86

	DEFINE_FUNCTION_CLASS(__stdcall);
	DEFINE_FUNCTION_CLASS(__cdecl);

	DEFINE_FUNCTION_POINTER_CLASS(__stdcall);
	DEFINE_FUNCTION_POINTER_CLASS(__cdecl);

	// DEFINE_CLASS_METHOD_CLASS(__stdcall);
	// DEFINE_CLASS_METHOD_CLASS(__cdecl);
	// DEFINE_CLASS_METHOD_CLASS();

	DEFINE_LAMBDA_CLASS(__stdcall);
	DEFINE_LAMBDA_CLASS(__cdecl);
	DEFINE_LAMBDA_CLASS();

#if !CPP_CLI_DEFINED

	DEFINE_FUNCTION_CLASS(__fastcall);
	DEFINE_FUNCTION_POINTER_CLASS(__fastcall);

	// DEFINE_CLASS_METHOD_CLASS(__fastcall);
	DEFINE_LAMBDA_CLASS(__fastcall);

#endif // c++/cli

#elif ML_AMD64

	DEFINE_FUNCTION_CLASS(__cdecl);
	DEFINE_FUNCTION_POINTER_CLASS(__cdecl);

	// DEFINE_CLASS_METHOD_CLASS(__cdecl);
	DEFINE_LAMBDA_CLASS(__cdecl);

#endif

#pragma pop_macro("DEFINE_FUNCTION_CLASS")

#endif // _FUNCTION_H_a0ede8da_ec11_4122_bf7f_3b39ea104800_

#ifndef _VECTOR_HPP_
#define _VECTOR_HPP_


#if CPP_DEFINED

	_ML_CPP_HEAD_

		//--------------------------------------------------------------------------------------
		// A growable array
		//--------------------------------------------------------------------------------------

#pragma warning(push)
#pragma warning(disable:4324)

		// #define FOR_EACH_VEC(_Var, _MlGrowableArray) (_Var) = (_MlGrowableArray).GetData(); for (ULONG_PTR _VecItemCount = (_MlGrowableArray).GetSize(); _VecItemCount != 0; ++(_Var), --_VecItemCount)
#define FOR_EACH_VEC(_Var, _MlGrowableArray) FOR_EACH(_Var, (_MlGrowableArray).GetData(), (_MlGrowableArray).GetSize())
#define FOR_EACH_VEC_REVERSE(_Var, _MlGrowableArray) FOR_EACH_REVERSE(_Var, (_MlGrowableArray).GetData(), (_MlGrowableArray).GetSize())

		template<typename TYPE>
	class GrowableArray
	{
	public:
		static const ULONG_PTR kInvalidIndex = ULONG_PTR_MAX;

	protected:
		TYPE* m_Data;       // the actual array of data
		ULONG_PTR m_Size;       // # of elements (upperBound - 1)
		ULONG_PTR m_MaxSize;    // max allocated
		ULONG_PTR PadFor16;

		typedef const TYPE&             CONST_TYPE_REF;
		typedef TYPE&                   TYPE_REF;
		typedef GrowableArray<TYPE>&    SELF_TYPE_REF;

	public:
		GrowableArray()
		{
			m_Data = nullptr;
			m_Size = 0;
			m_MaxSize = 0;
		}

		GrowableArray(const GrowableArray<TYPE>& a)
		{
			m_Data = nullptr;
			m_Size = 0;
			m_MaxSize = 0;

			*this = a;
		}

		GrowableArray(const TYPE* buf, ULONG_PTR Length)
		{
			m_Data = nullptr;
			m_Size = 0;
			m_MaxSize = 0;

			this->SetData(buf, Length);
		}

		NTSTATUS SetData(const TYPE* buf, ULONG_PTR Length)
		{
			FAIL_RETURN(this->SetSize(Length));

			CopyMemory(this->GetData(), buf, Length * sizeof(TYPE));
			this->UpdateDataCount(Length);

			return STATUS_SUCCESS;
		}

		~GrowableArray()
		{
			RemoveAll();
		}

		CONST_TYPE_REF operator[](ULONG_PTR Index) const
		{
			return GetAt(Index);
		}

		TYPE_REF operator[](ULONG_PTR Index)
		{
			return GetAt(Index);
		}

		SELF_TYPE_REF operator<<(CONST_TYPE_REF Value)
		{
			this->Add(Value);
			return *this;
		}

		SELF_TYPE_REF operator=(const GrowableArray<TYPE>& a)
		{
			if (this == &a)
				return *this;

			RemoveAll();

			TYPE *Data = a.GetData();

			for (ULONG_PTR Count = a.GetSize(); Count != 0; --Count)
				Add(*Data++);

			return *this;
		}

		ULONG_PTR Increment()
		{
			return ++m_Size;
		}

		ULONG_PTR Decrement()
		{
			return --m_Size;
		}

		ULONG_PTR UpdateDataCount(ULONG_PTR Count)
		{
			m_Size = Count;
			return Count;
		}

		NTSTATUS SetSize(ULONG_PTR NewMaxSize)
		{
			ULONG_PTR OldSize = GetSize();

			if (OldSize > NewMaxSize)
			{
				if (m_Data != nullptr)
				{
					// Removing elements. Call dtor.

					TYPE *Data = GetData() + NewMaxSize;

					for (ULONG_PTR Count = OldSize - NewMaxSize; Count != 0; --Count)
					{
						(*Data).~TYPE();
						++Data;
					}
				}
			}

			// Adjust buffer.  Note that there's no need to check for error
			// since if it happens, nOldSize == nNewMaxSize will be true.)
			NTSTATUS Status = SetSizeInternal(NewMaxSize);

			if (OldSize < NewMaxSize)
			{
				if (m_Data != nullptr)
				{
					// Adding elements. Call ctor.

					TYPE *Data = GetData() + OldSize;

					for (ULONG_PTR Count = NewMaxSize - OldSize; Count != 0; --Count)
					{
						new (Data)TYPE;
						++Data;
					}
				}
			}

			return Status;
		}

		NoInline NTSTATUS Add(CONST_TYPE_REF Value)
		{
			TYPE*       Data;
			NTSTATUS    Status;
			ULONG_PTR   NewSize;

			//NewSize = _InterlockedIncrementPtr(&m_Size);
			NewSize = ++m_Size;

			Status = SetSizeInternal(NewSize);
			if (!NT_SUCCESS(Status))
			{
				//_InterlockedDecrementPtr(&m_Size);
				--m_Size;
				return Status;
			}

			Data = &m_Data[NewSize - 1];

			// Construct the new element
			new (Data)TYPE;

			// Assign
			*Data = Value;

			return STATUS_SUCCESS;
		}

		NoInline NTSTATUS Insert(ULONG_PTR Index, CONST_TYPE_REF Value)
		{
			TYPE*    Data;
			NTSTATUS Status;

			// Validate index
			if (Index > m_Size)
			{
				return STATUS_INVALID_PARAMETER;
			}

			// Prepare the buffer
			Status = SetSizeInternal(m_Size + 1);
			if (!NT_SUCCESS(Status))
				return Status;

			Data = GetData() + Index;

			// Shift the array
			RtlMoveMemory(Data + 1, Data, sizeof(*Data) * (m_Size - Index));

			// Construct the new element
			new (Data)TYPE;

			// Set the value and increase the size
			*Data = Value;
			++m_Size;

			return STATUS_SUCCESS;
		}

		NTSTATUS SetAt(ULONG_PTR Index, CONST_TYPE_REF Value)
		{
			// Validate arguments
			if (Index < 0 || Index >= m_Size)
				return STATUS_INVALID_PARAMETER;

			m_Data[Index] = Value;
			return STATUS_SUCCESS;
		}

		TYPE_REF GetLast() const
		{
			return m_Data[m_Size - 1];
		}

		TYPE_REF GetAt(ULONG_PTR Index) const
		{
			return m_Data[Index];
		}

		TYPE* GetAtPtr(ULONG_PTR Index) const
		{
			return m_Data == nullptr ? nullptr : Index > m_Size ? nullptr : &m_Data[Index];
		}

		ULONG_PTR GetSize() const
		{
			return m_Size;
		}

		TYPE* GetData() const
		{
			return m_Data;
		}

		BOOL Contains(CONST_TYPE_REF Value)
		{
			return (kInvalidIndex != IndexOf(Value));
		}

		ULONG_PTR IndexOf(CONST_TYPE_REF Value)
		{
			return IndexOf(Value, 0, m_Size);
		}

		ULONG_PTR IndexOf(CONST_TYPE_REF Value, ULONG_PTR Start)
		{
			return IndexOf(Value, Start, m_Size - Start);
		}

		NoInline ULONG_PTR IndexOf(CONST_TYPE_REF Value, ULONG_PTR Start, ULONG_PTR NumberOfElements)
		{
			TYPE *Data;

			// Validate arguments
			if (Start >= m_Size || Start + NumberOfElements > m_Size)
				return kInvalidIndex;

			Data = GetData() + Start;

			// Search
			for (ULONG_PTR Count = NumberOfElements - Start; Count != 0; ++Data, --Count)
			{
				if (*Data == Value)
					return Data - GetData();
			}

			// Not found
			return kInvalidIndex;
		}

		ULONG_PTR LastIndexOf(CONST_TYPE_REF Value)
		{
			return LastIndexOf(Value, m_Size - 1, m_Size);
		}

		ULONG_PTR LastIndexOf(CONST_TYPE_REF Value, ULONG_PTR Index)
		{
			return LastIndexOf(Value, Index, Index + 1);
		}

		ULONG_PTR LastIndexOf(CONST_TYPE_REF Value, ULONG_PTR End, ULONG_PTR NumberOfElements)
		{
			// Validate arguments
			if (End < 0 || End >= m_nSize || End < NumberOfElements)
			{
				return kInvalidIndex;
			}

			// Search
			TYPE *Data = GetData() + End;

			for (ULONG_PTR Count = End - NumberOfElements; Count != 0; --Data, --Count)
			{
				if (*Data == Value)
					return Data - GetData();
			}

			// Not found
			return kInvalidIndex;
		}

		NoInline NTSTATUS Remove(ULONG_PTR Index)
		{
			TYPE *Data;

			if (Index >= m_Size)
				return STATUS_INVALID_PARAMETER;

			// Destruct the element to be removed
			Data = GetData() + Index;
			(*Data).~TYPE();

			// Compact the array and decrease the size
			RtlMoveMemory(Data, Data + 1, sizeof(*Data) * (m_Size - (Index + 1)));
			--m_Size;

			return STATUS_SUCCESS;
		}

		NoInline void RemoveAll()
		{
			SetSize(0);
		}

		NoInline void Reset()
		{
			SetSize(0);
			//        m_Size = 0;
		}

		TYPE* begin() const
		{
			return GetData();
		}

		TYPE* end() const
		{
			return GetData() + GetSize();
		}

	protected:
		NTSTATUS SetSizeInternal(ULONG_PTR NewMaxSize)  // This version doesn't call ctor or dtor.
		{
			if ((NewMaxSize > ULONG_PTR_MAX / sizeof(TYPE)))
				return STATUS_INVALID_PARAMETER;

			if (NewMaxSize == 0)
			{
				// Shrink to 0 size & cleanup
				FreeMemoryP(m_Data);
				m_Data = nullptr;

				m_MaxSize = 0;
				m_Size = 0;
			}
			else if (m_Data == nullptr || NewMaxSize > m_MaxSize)
			{
				// Grow array
				ULONG_PTR GrowBy = (m_MaxSize == 0) ? 16 : m_MaxSize;

				// Limit nGrowBy to keep m_nMaxSize less than INT_MAX
				if ((ULONG64)m_MaxSize + GrowBy > ULONG_PTR_MAX)
					GrowBy = ULONG_PTR_MAX - m_MaxSize;

				NewMaxSize = ML_MAX(NewMaxSize, m_MaxSize + GrowBy);

				// Verify that (nNewMaxSize * sizeof(TYPE)) is not greater than UINT_MAX or the realloc will overrun
				//            if (sizeof(TYPE) > ULONG_MAX / NewMaxSize)
				//                return STATUS_INVALID_PARAMETER;

#if ML_KERNEL_MODE

				TYPE* DataNew = (TYPE *)AllocateMemoryP(NewMaxSize * sizeof(*DataNew));

				if (DataNew == nullptr)
					return STATUS_NO_MEMORY;

				if (DataNew != nullptr && m_Data != nullptr)
				{
					CopyMemory(DataNew, m_Data, m_MaxSize * sizeof(*DataNew));
					FreeMemoryP(m_Data);
				}

#else // r3
				TYPE* DataNew = (TYPE *)ReAllocateMemoryP(m_Data, NewMaxSize * sizeof(*DataNew));
#endif // r

				if (DataNew == nullptr)
					return STATUS_NO_MEMORY;

				m_Data = DataNew;
				m_MaxSize = NewMaxSize;
			}

			return STATUS_SUCCESS;
		}
	};

#pragma warning(pop)


	_ML_CPP_TAIL_

#endif // CPP_DEFIEND

#endif /* _VECTOR_HPP_ */
#ifndef _MLSTRING_H_252d9413_55ca_4d44_976f_c0dcecd5afd4_
#define _MLSTRING_H_252d9413_55ca_4d44_976f_c0dcecd5afd4_

#define STRING_DEBUG 0
#define USE_TEMPLATE 1

#pragma warning(push)
#pragma warning(disable:4172)

		template<typename STRING_LENGTH_TYPE = USHORT, typename LARGE_LENGTH_TYPE = ULONG>
	class StringImplementT
	{
	protected:

		typedef typename STRING_LENGTH_TYPE STRING_LENGTH_TYPE;
		typedef typename LARGE_LENGTH_TYPE  LARGE_LENGTH_TYPE;

		typedef WCHAR           STRING_CHAR_TYPE;
		typedef PWSTR           STRING_POINTER_TYPE;
		typedef PCWSTR          STRING_CONST_POINTER_TYPE;

#if USE_TEMPLATE


		typedef struct STRING_TYPE
		{
			STRING_LENGTH_TYPE  Length;
			STRING_LENGTH_TYPE  MaximumLength;
			STRING_POINTER_TYPE Buffer;

		} STRING_TYPE, *PSTRING_TYPE;

		typedef const STRING_TYPE* PCSTRING_TYPE;


#else

		typedef UNICODE_STRING      STRING_TYPE;
		typedef PUNICODE_STRING     PSTRING_TYPE;
		typedef PCUNICODE_STRING    PCSTRING_TYPE;

#endif

		static const LARGE_LENGTH_TYPE  kMaxNumberValue = (LARGE_LENGTH_TYPE)-1ll;
		static const LARGE_LENGTH_TYPE  kCharSize = sizeof(STRING_CHAR_TYPE);
		static const LARGE_LENGTH_TYPE  kMaxLength = ((LARGE_LENGTH_TYPE)1 << bitsof(STRING_LENGTH_TYPE)) - 1 - kCharSize;

	public:
		static const LARGE_LENGTH_TYPE  kInvalidIndex = kMaxNumberValue;

	protected:

#if USE_TEMPLATE
		template<typename, typename>
#endif

		friend class StringT;

	protected:

		STRING_TYPE         String;
		STRING_CHAR_TYPE    Buffer[4];

	protected:
		StringImplementT()
		{
			Reset();
		}

		VOID Reset()
		{
			RtlInitEmptyString(&this->String);
		}

		operator PCSTRING_TYPE()
		{
			return &this->String;
		}

		operator PSTRING_TYPE()
		{
			return &this->String;
		}

		LONG Compare(StringImplementT *Impl, BOOL CaseInSensitive = FALSE)
		{
			return Compare(*Impl, CaseInSensitive);
		}

		LONG Compare(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count, BOOL CaseInSensitive = FALSE)
		{
			STRING_TYPE String;

			String.Buffer = (STRING_POINTER_TYPE)Str;
			String.Length = (STRING_LENGTH_TYPE)CountToLength(Count);
			String.MaximumLength = String.Length;

			return Compare(&String, CaseInSensitive);
		}

		LONG Compare(PCSTRING_TYPE Str, BOOL CaseInSensitive = FALSE)
		{
			UNICODE_STRING Str1, Str2;

			Str1.Length = (USHORT)GetLength();
			Str1.MaximumLength = (USHORT)Str1.Length;
			Str1.Buffer = GetBuffer();

			Str2.Length = (USHORT)Str->Length;
			Str2.MaximumLength = (USHORT)Str->MaximumLength;
			Str2.Buffer = Str->Buffer;

			return RtlCompareUnicodeString(&Str1, &Str2, (BOOLEAN)CaseInSensitive);
		}

		NoInline NTSTATUS Concat(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count)
		{
			FAIL_RETURN(VerifyBufferLength(GetCount() + Count));
			CopyString(Str, Count, TRUE);
			return STATUS_SUCCESS;
		}

		NoInline NTSTATUS CopyFrom(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count)
		{
			FAIL_RETURN(VerifyBufferLength(Count));
			CopyString(Str, Count, FALSE);
			return STATUS_SUCCESS;
		}

		LARGE_LENGTH_TYPE FormatCountV(STRING_CONST_POINTER_TYPE Format, va_list Arguments)
		{
			return _vscwprintf(Format, Arguments);
		}

		LARGE_LENGTH_TYPE FormatV(STRING_CONST_POINTER_TYPE Format, va_list Arguments)
		{
			LARGE_LENGTH_TYPE Count;

			Count = _vsnwprintf(GetBuffer(), (size_t)LengthToCount(GetMaxLength()), Format, Arguments);
			this->String.Length = (STRING_LENGTH_TYPE)CountToLength(Count);

			return Count;
		}

		LARGE_LENGTH_TYPE GetLength()
		{
			return this->String.Length;
		}

		VOID SetLength(LARGE_LENGTH_TYPE Length)
		{
			this->String.Length = ML_MIN(this->String.Length, Length);
		}

		LARGE_LENGTH_TYPE GetMaxLength()
		{
			return this->String.MaximumLength;
		}

		LARGE_LENGTH_TYPE GetCount()
		{
			return GetLength() / kCharSize;
		}

		STRING_POINTER_TYPE GetBuffer()
		{
			return this->String.Buffer;
		}

		NoInline LARGE_LENGTH_TYPE IndexOf(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE StartIndex = 0)
		{
			if (StartIndex >= GetCount())
				return kInvalidIndex;

			STRING_CONST_POINTER_TYPE Begin, End, Found;

			Begin = GetBuffer();
			End = PtrAdd(GetBuffer(), GetLength());

			if (Str[0] != 0)
			{
				Found = (STRING_CONST_POINTER_TYPE)KMP(Begin + StartIndex, StrLengthW(Begin + StartIndex), Str, StrLengthW(Str));
			}
			else
			{
				Found = Begin + StartIndex;
				while (Found <= End && Found[0] != 0)
					++Found;

				Found = Found < End ? Found : nullptr;
			}

			return Found == nullptr ? kInvalidIndex : Found - Begin;
		}

		BOOL IsNullOrEmpty()
		{
			return GetCount() == 0;
		}

		LARGE_LENGTH_TYPE LastIndexOf(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE StartIndex = 0)
		{
			if (StartIndex >= GetCount())
				return kInvalidIndex;

			STRING_CONST_POINTER_TYPE Begin, End, Found, Prev;

			Begin = GetBuffer();
			End = PtrAdd(GetBuffer(), GetLength());

			Prev = nullptr;
			Begin += StartIndex;
			while (Begin < End)
			{
				Found = (STRING_CONST_POINTER_TYPE)KMP(Begin, StrLengthW(Begin), Str, StrLengthW(Str));
				if (Found == nullptr)
					break;

				Prev = Found;
				Begin = Found + 1;
			}

			return Prev == nullptr ? kInvalidIndex : Prev - GetBuffer();
		}

		BOOL MatchExpression(PCSTRING_TYPE Expression, BOOL IgnoreCase)
		{
			UNICODE_STRING Expr, Name;

			Expr.Length = Expression->Length;
			Expr.MaximumLength = Expr.Length;
			Expr.Buffer = Expression->Buffer;

			Name.Length = GetLength();
			Name.MaximumLength = Name.Length;
			Name.Buffer = GetBuffer();

			return Rtl::IsNameInExpression(&Expr, &Name, IgnoreCase);
		}

		VOID ToLower()
		{
			StringLowerW(GetBuffer(), GetCount());
		}

		VOID ToUpper()
		{
			StringUpperW(GetBuffer(), GetCount());
		}


		/************************************************************************
		internal
		************************************************************************/

		NTSTATUS VerifyBufferLength(LARGE_LENGTH_TYPE Count)
		{
			LARGE_LENGTH_TYPE Length;

			Length = CountToLength(Count);

			if (Length > kMaxLength)
				return STATUS_NAME_TOO_LONG;

			if (Length >= this->String.MaximumLength)
				return STATUS_BUFFER_TOO_SMALL;

			return STATUS_SUCCESS;
		}

		NoInline VOID CopyString(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count, BOOL Concat)
		{
			LARGE_LENGTH_TYPE Length;

			if (!Concat)
			{
				this->String.Length = 0;
				AddNull();
			}

			if (Count == 0)
				return;

			Length = CountToLength(Count);
			CopyMemory(GetBuffer() + GetCount(), Str, Length);
			this->String.Length += (STRING_LENGTH_TYPE)Length;
			AddNull();
		}

		VOID SetBuffer(STRING_POINTER_TYPE Buffer, LARGE_LENGTH_TYPE MaximumLength)
		{
			this->String.Buffer = Buffer;
			this->String.Length = 0;
			this->String.MaximumLength = (STRING_LENGTH_TYPE)MaximumLength;

			GetBuffer()[0] = 0;
		}

		VOID AddNull()
		{
			*PtrAdd(GetBuffer(), GetLength()) = 0;
		}

		VOID CopyBuffer(StringImplementT *Impl)
		{
			CopyString(Impl->GetBuffer(), Impl->GetCount(), FALSE);
		}


		static ForceInline LARGE_LENGTH_TYPE CountToLength(LARGE_LENGTH_TYPE Count)
		{
			return Count * kCharSize;
		}

		static ForceInline LARGE_LENGTH_TYPE CountToLengthAddNull(LARGE_LENGTH_TYPE Count)
		{
			return Count * kCharSize + kCharSize;
		}

		static ForceInline LARGE_LENGTH_TYPE LengthToCount(LARGE_LENGTH_TYPE Length)
		{
			return Length / kCharSize;
		}

		static LARGE_LENGTH_TYPE GetStringCount(STRING_CONST_POINTER_TYPE Str)
		{
			return StrLengthW(Str);
		}

		static VOID InitString(PSTRING_TYPE String, STRING_CONST_POINTER_TYPE Buffer, LARGE_LENGTH_TYPE Count = kMaxNumberValue)
		{
			if (Count == kMaxNumberValue)
				Count = GetStringCount(Buffer);

			String->Buffer = (STRING_POINTER_TYPE)Buffer;
			String->Length = CountToLength(Count);
			String->MaximumLength = String->Length;
		}
	};


	//typedef StringImplementT<> StringImplement;

#if USE_TEMPLATE
	template<typename STRING_LENGTH_TYPE = USHORT, typename LARGE_LENGTH_TYPE = ULONG>
#endif

	class StringT
	{
	public:

		typedef GrowableArray<StringT>  StringArray;
		typedef GrowableArray<BYTE>     ByteArray;

		enum
		{
			WithBOM = 1 << 0,
		};

		class AnsiString : public ByteArray
		{
		public:
			operator bool() const
			{
				return this->GetSize() != 0;
			}

			operator PCSTR() const
			{
				return (PCSTR)this->GetData();
			}

			operator PSTR() const
			{
				return (PSTR)this->GetData();
			}

			operator PVOID() const
			{
				return (PVOID)this->GetData();
			}

			operator LPCVOID() const
			{
				return (LPCVOID)this->GetData();
			}

			operator LPCBYTE() const
			{
				return (LPCBYTE)this->GetData();
			}

			operator PBYTE() const
			{
				return (PBYTE)this->GetData();
			}
		};

	protected:

#if USE_TEMPLATE
		typedef StringImplementT<STRING_LENGTH_TYPE, LARGE_LENGTH_TYPE> StringImplement;
#else
		typedef StringImplementT<> StringImplement;
#endif

		typedef typename StringImplement::STRING_LENGTH_TYPE             STRING_LENGTH_TYPE;
		typedef typename StringImplement::LARGE_LENGTH_TYPE              LARGE_LENGTH_TYPE;

		typedef typename StringImplement::STRING_CHAR_TYPE               STRING_CHAR_TYPE;
		typedef typename StringImplement::STRING_TYPE                    STRING_TYPE;
		typedef typename StringImplement::PSTRING_TYPE                   PSTRING_TYPE;
		typedef typename StringImplement::PCSTRING_TYPE                  PCSTRING_TYPE;
		typedef typename StringImplement::STRING_POINTER_TYPE            STRING_POINTER_TYPE;
		typedef typename StringImplement::STRING_CONST_POINTER_TYPE      STRING_CONST_POINTER_TYPE;

		static const LARGE_LENGTH_TYPE  kMaxNumberValue = StringImplement::kMaxNumberValue;
		static const LARGE_LENGTH_TYPE  kMaxLength = StringImplement::kMaxLength;
		static const LARGE_LENGTH_TYPE  kCharSize = StringImplement::kCharSize;
		static const ULONG_PTR          kStringImplSize = sizeof(StringImplement) - FIELD_SIZE(StringImplement, Buffer);

		typename StringImplement::STRING_POINTER_TYPE Buffer;

	public:
		static const LARGE_LENGTH_TYPE  kInvalidIndex = StringImplement::kInvalidIndex;

	public:
		StringT()
		{
			Reset();
			*this = L"";
		}

		StringT(const StringT& Str)
		{
			Reset();
			*this = Str;
		}

		StringT(STRING_CONST_POINTER_TYPE Str)
		{
			Reset();
			*this = Str;
		}

		StringT(STRING_CONST_POINTER_TYPE Str, ULONG_PTR InitLength)
		{
			Reset();
			CopyFrom(Str, InitLength);
		}

		StringT(const UNICODE_STRING &Str)
		{
			Reset();
			*this = Str;
		}

		StringT(STRING_CHAR_TYPE Chr)
		{
			STRING_CHAR_TYPE Buffer[2];

			Reset();

			Buffer[0] = Chr;
			Buffer[1] = 0;

			*this = Buffer;
		}

		NoInline ~StringT()
		{
			ReleaseBuffer();

#if STRING_DEBUG
			this->Buffer = (STRING_POINTER_TYPE)~0x112233;
#endif

		}

		LARGE_LENGTH_TYPE GetCount() const
		{
			return GetImplement()->GetCount();
		}

		LARGE_LENGTH_TYPE GetSize() const
		{
			return GetImplement()->GetLength();
		}

		STRING_POINTER_TYPE GetBuffer() const
		{
			return GetImplement()->GetBuffer();
		}

		operator STRING_POINTER_TYPE() const
		{
			return GetBuffer();
		}

		operator STRING_CONST_POINTER_TYPE() const
		{
			return GetBuffer();
		}
		/*
		operator PSTRING_TYPE()
		{
		return GetImplement()->operator PSTRING_TYPE();
		}

		operator PCSTRING_TYPE() const
		{
		return GetImplement()->operator PCSTRING_TYPE();
		}
		*/
		operator UNICODE_STRING() const
		{
			UNICODE_STRING str;
			StringImplement *Impl = GetImplement();

			if (Impl->GetLength() > (TYPE_OF(str.Length)) - 1)
			{
				RtlInitEmptyString(&str);
				return str;
			}

			str.Length = (USHORT)Impl->GetLength();
			str.MaximumLength = str.Length;
			str.Buffer = Impl->GetBuffer();

			return str;
		}

		ForceInline operator PCUNICODE_STRING() const
		{
			return (PCUNICODE_STRING)&((UNICODE_STRING)(*this));
		}

		ForceInline operator PUNICODE_STRING() const
		{
			return &((UNICODE_STRING)(*this));
		}

		operator bool() const
		{
			return this->GetCount() != 0;
		}

		bool operator!() const
		{
			return this->GetCount() == 0;
		}

		NoInline StringT& operator=(STRING_CONST_POINTER_TYPE Str)
		{
			CopyFrom(Str);
			return *this;
		}

		NoInline StringT& operator=(const StringT& Str)
		{
			if (this == &Str)
				return *this;

			CopyFrom(Str.Buffer, Str.GetCount());

			return *this;
		}

		NoInline StringT& operator=(PCUNICODE_STRING Str)
		{
			CopyFrom(Str->Buffer, Str->Length / sizeof(Str->Buffer[0]));
			return *this;
		}

		StringT& operator=(const UNICODE_STRING &Str)
		{
			return operator=(&Str);
		}

		NoInline BOOL operator!=(STRING_CONST_POINTER_TYPE Str) const
		{
			return Compare(Str) != 0;
		}

		NoInline BOOL operator!=(const StringT& Str) const
		{
			return Compare(Str.GetBuffer(), Str.GetCount()) != 0;
		}

		NoInline BOOL operator==(STRING_CONST_POINTER_TYPE Str) const
		{
			return Compare(Str) == 0;
		}

		NoInline BOOL operator==(const StringT& Str) const
		{
			return Compare(Str.GetBuffer(), Str.GetCount()) == 0;
		}

		NoInline StringT operator+(STRING_CONST_POINTER_TYPE Str) const
		{
			return StringT(*this).Concat(Str);
		}

		NoInline StringT operator+(const StringT& Str) const
		{
			return StringT(*this).Concat(Str);
		}

		NoInline StringT& operator+=(STRING_CHAR_TYPE Chr)
		{
			STRING_CHAR_TYPE Buffer[2];

			Buffer[0] = Chr;
			Buffer[1] = 0;

			return Concat(Buffer, 1);
		}

		NoInline StringT& operator+=(STRING_CONST_POINTER_TYPE Str)
		{
			return Concat(Str);
		}

		NoInline StringT& operator+=(const StringT& Str)
		{
			return Concat(Str);
		}

		NoInline StringT& operator+=(const UNICODE_STRING& Str)
		{
			return Concat(Str.Buffer, Str.Length / sizeof(Str.Buffer[0]));
		}

		STRING_CHAR_TYPE& operator[](INT Index) const
		{
			return GetBuffer()[Index < 0 ? GetCount() + Index : Index];
		}

		STRING_CONST_POINTER_TYPE begin()
		{
			return &(*this)[0];
		}

		STRING_CONST_POINTER_TYPE end()
		{
			return &(*this)[-1] + 1;
		}

		NoInline NTSTATUS Assign(LARGE_LENGTH_TYPE Count)
		{
			return ResizeBuffer(Count);
		}

		LONG Compare(STRING_CONST_POINTER_TYPE Str, BOOL CaseInSensitive = FALSE) const
		{
			return GetImplement()->Compare(Str, StringImplement::GetStringCount(Str), CaseInSensitive);
		}

		LONG Compare(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count, BOOL CaseInSensitive = FALSE) const
		{
			return GetImplement()->Compare(Str, Count, CaseInSensitive);
		}

		StringT& Concat(STRING_CONST_POINTER_TYPE Str)
		{
			return Concat(Str, StringImplement::GetStringCount(Str));
		}

		StringT& Concat(const StringT& Str)
		{
			StringImplement *Impl = Str.GetImplement();
			return Concat(Impl->GetBuffer(), Impl->GetCount());
		}

		StringT& Concat(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count)
		{
			NTSTATUS Status;

			Status = ResizeBuffer(GetCount() + Count);
			if (NT_FAILED(Status))
				return *this;

			GetImplement()->Concat(Str, Count);

			return *this;
		}

		NTSTATUS CopyFrom(STRING_CONST_POINTER_TYPE Str)
		{
			return CopyFrom(Str, StringImplement::GetStringCount(Str));
		}

		NoInline NTSTATUS CopyFrom(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE Count)
		{
			NTSTATUS Status;

			Status = ResizeBuffer(Count);
			FAIL_RETURN(Status);

			return GetImplement()->CopyFrom(Str, Count);
		}

		NoInline StringT Copy() const
		{
			return StringT(*this);
		}

		NoInline static StringT Format(STRING_CONST_POINTER_TYPE format, ...)
		{
			va_list Arguments;
			va_start(Arguments, format);
			return FormatV(format, Arguments);
		}

		NoInline static StringT FormatV(STRING_CONST_POINTER_TYPE Format, va_list Arguments)
		{
			NTSTATUS    Status;
			StringT      NewString;

			Status = NewString.ResizeBuffer(NewString.GetImplement()->FormatCountV(Format, Arguments));
			if (NT_FAILED(Status))
				return NewString;

			NewString.GetImplement()->FormatV(Format, Arguments);
			return NewString;
		}

		NoInline LARGE_LENGTH_TYPE IndexOf(STRING_CHAR_TYPE Chr, LARGE_LENGTH_TYPE StartIndex = 0) const
		{
			STRING_CHAR_TYPE Buffer[2];

			Buffer[0] = Chr;
			Buffer[1] = 0;

			return IndexOf(Buffer, StartIndex);
		}

		NoInline LARGE_LENGTH_TYPE IndexOf(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE StartIndex = 0) const
		{
			return GetImplement()->IndexOf(Str, StartIndex);
		}

		NoInline BOOL IsNullOrEmpty() const
		{
			return GetImplement() == nullptr ? TRUE : GetImplement()->IsNullOrEmpty();
		}

		NoInline LARGE_LENGTH_TYPE LastIndexOf(STRING_CHAR_TYPE Chr, LARGE_LENGTH_TYPE StartIndex = 0) const
		{
			STRING_CHAR_TYPE Buffer[2];

			Buffer[0] = Chr;
			Buffer[1] = 0;

			return LastIndexOf(Buffer, StartIndex);
		}

		NoInline LARGE_LENGTH_TYPE LastIndexOf(STRING_CONST_POINTER_TYPE Str, LARGE_LENGTH_TYPE StartIndex = 0) const
		{
			return GetImplement()->LastIndexOf(Str, StartIndex);
		}

		NoInline BOOL MatchExpression(STRING_CONST_POINTER_TYPE Expression, BOOL IgnoreCase = TRUE) const
		{
			STRING_TYPE Expr;
			StringImplement::InitString(&Expr, Expression);
			return GetImplement()->MatchExpression(&Expr, IgnoreCase);
		}

		NoInline BOOL MatchExpression(const UNICODE_STRING& Expression, BOOL IgnoreCase = TRUE) const
		{
			STRING_TYPE Expr;
			Expr.Length = Expression.Length;
			Expr.MaximumLength = Expression.MaximumLength;
			Expr.Buffer = Expression.Buffer;
			return GetImplement()->MatchExpression(&Expr, IgnoreCase);
		}

		NoInline BOOL MatchExpression(StringT Expression, BOOL IgnoreCase = TRUE) const
		{
			return GetImplement()->MatchExpression(&Expression.GetImplement()->String, IgnoreCase);
		}

		NoInline StringT PadLeft(LARGE_LENGTH_TYPE TotalWidth, STRING_CHAR_TYPE PaddingChar = ' ') const
		{
			NTSTATUS            Status;
			StringT              Padded = *this;
			LARGE_LENGTH_TYPE   LengthToPad;

			if (TotalWidth <= Padded.GetCount())
				return Padded;

			LengthToPad = TotalWidth - Padded.GetCount();
			Status = Padded.ResizeBuffer(TotalWidth);
			if (NT_FAILED(Status))
				return Padded;

			Padded = L"";

			for (; LengthToPad; --LengthToPad)
				Padded += PaddingChar;

			Padded += *this;

			return Padded;
		}

		NoInline StringT PadRight(LARGE_LENGTH_TYPE TotalWidth, STRING_CHAR_TYPE PaddingChar = ' ') const
		{
			NTSTATUS            Status;
			StringT             Padded = *this;
			LARGE_LENGTH_TYPE   LengthToPad;

			if (TotalWidth <= Padded.GetCount())
				return Padded;

			LengthToPad = TotalWidth - Padded.GetCount();
			Status = Padded.ResizeBuffer(TotalWidth);
			if (NT_FAILED(Status))
				return Padded;

			for (; LengthToPad; --LengthToPad)
				Padded += PaddingChar;

			return Padded;
		}

		NoInline StringT Remove(LARGE_LENGTH_TYPE StartIndex, LARGE_LENGTH_TYPE Count = kMaxNumberValue) const
		{
			NTSTATUS            Status;
			StringT              NewString;
			StringImplement*    Impl;
			LARGE_LENGTH_TYPE   TailLength;

			if (StartIndex >= GetCount() || StartIndex == 0)
				return NewString;

			if (Count == kMaxNumberValue || StartIndex + Count >= GetCount())
				Count = GetCount() - StartIndex;

			TailLength = GetCount() - (StartIndex + Count);

			Status = NewString.ResizeBuffer(StartIndex + TailLength);
			if (NT_FAILED(Status))
				return NewString;

			Impl = NewString.GetImplement();
			Impl->CopyFrom(GetBuffer(), StartIndex);
			Impl->Concat(GetBuffer() + StartIndex + Count, TailLength);

			return NewString;
		}

		NoInline StringT Replace(const StringT& OldValue, const StringT& NewValue) const
		{
			return ReplaceWorker(OldValue, OldValue.GetCount(), NewValue, NewValue.GetCount());
		}

		NoInline StringT Replace(STRING_CONST_POINTER_TYPE OldValue, STRING_CONST_POINTER_TYPE NewValue) const
		{
			return ReplaceWorker(OldValue, StringImplement::GetStringCount(OldValue), NewValue, StringImplement::GetStringCount(NewValue));
		}

		NoInline StringT Replace(STRING_CHAR_TYPE OldValue, STRING_CHAR_TYPE NewValue) const
		{
			STRING_CHAR_TYPE Old[2], New[2];

			Old[0] = OldValue;
			Old[1] = 0;
			New[0] = NewValue;
			New[1] = 0;

			return ReplaceWorker(Old, 1, New, 1);
		}

		StringArray SplitLines(STRING_CONST_POINTER_TYPE Separator = L"\n") const
		{
			return Replace(L"\r\n", L"\n").Replace(L"\r", L"\n").Split(Separator);
		}

		StringArray Split(const STRING_CHAR_TYPE Separator, LARGE_LENGTH_TYPE MaxSplit = kMaxNumberValue) const
		{
			STRING_CHAR_TYPE Buffer[2];

			Buffer[0] = Separator;
			Buffer[1] = 0;

			return SplitWorker(Buffer, 1, MaxSplit);
		}

		NoInline StringArray Split(STRING_CONST_POINTER_TYPE Separator, LARGE_LENGTH_TYPE MaxSplit = kMaxNumberValue) const
		{
			return SplitWorker(Separator, StringImplement::GetStringCount(Separator), MaxSplit);
		}

		StringT Join(const StringArray& Values) const
		{
			return Join(*this, Values);
		}

		NoInline static StringT Join(const StringT& Separator, const StringArray& Values)
		{
			StringT Str;
			StringImplement* Impl;

			for (auto &value : Values)
			{
				Str += value + Separator;
			}

			Impl = Str.GetImplement();
			Impl->SetLength(Impl->GetLength() - Separator.GetSize());
			Impl->AddNull();

			return Str;
		}

		NoInline BOOL StartsWith(STRING_CONST_POINTER_TYPE Starts, BOOL CaseInSensitive = FALSE) const
		{
			return StartsWithWorker(Starts, StringImplement::GetStringCount(Starts), CaseInSensitive);
		}

		NoInline BOOL StartsWith(const StringT& Starts, BOOL CaseInSensitive = FALSE) const
		{
			return &Starts == this ? TRUE : StartsWithWorker(Starts, Starts.GetCount(), CaseInSensitive);
		}

		NoInline BOOL EndsWith(STRING_CONST_POINTER_TYPE Ends, BOOL CaseInSensitive = FALSE) const
		{
			return EndsWithWorker(Ends, StringImplement::GetStringCount(Ends), CaseInSensitive);
		}

		NoInline BOOL EndsWith(StringT& Ends, BOOL CaseInSensitive = FALSE) const
		{
			return &Ends == this ? TRUE : EndsWithWorker(Ends, Ends.GetCount(), CaseInSensitive);
		}

		NoInline StringT SubString(LARGE_LENGTH_TYPE StartIndex, LARGE_LENGTH_TYPE Count = kMaxNumberValue) const
		{
			StringT NewString;

			if (StartIndex >= GetCount())
				return NewString;

			if (Count == kMaxNumberValue || StartIndex + Count >= GetCount())
				Count = GetCount() - StartIndex;

			NewString.CopyFrom(GetBuffer() + StartIndex, Count);

			return NewString;
		}

		NoInline StringT ToLower() const
		{
			StringT NewString = *this;
			NewString.GetImplement()->ToLower();
			return NewString;
		}

		NoInline StringT ToUpper() const
		{
			StringT NewString = *this;
			NewString.GetImplement()->ToUpper();
			return NewString;
		}

		NoInline StringT TrimEnd(StringT TrimChars) const
		{
			STRING_POINTER_TYPE Begin, End;

			Begin = GetBuffer();
			End = Begin + GetCount();

			while (End > Begin)
			{
				if (TrimChars.IndexOf(End[-1]) == kInvalidIndex)
					break;

				--End;
			}

			if (End <= Begin)
				return StringT();

			return SubString(0, End - Begin);
		}

		NoInline StringT TrimStart(StringT TrimChars) const
		{
			STRING_POINTER_TYPE Begin, End;

			Begin = GetBuffer();
			End = Begin + GetCount();

			while (Begin != End)
			{
				if (TrimChars.IndexOf(Begin[0]) == kInvalidIndex)
					break;

				++Begin;
			}

			if (Begin == End)
				return StringT();

			return SubString(Begin - GetBuffer());
		}

		StringT Strip() const
		{
			return Trim(L" \t");
		}

		NoInline StringT Trim(StringT TrimChars) const
		{
			return TrimStart(TrimChars).TrimEnd(TrimChars);
		}

		NoInline ULONG64 ToHex() const
		{
			return StringToInt64HexW(*this);
		}

		NoInline ULONG64 ToInteger() const
		{
			return StringToInt64W(*this);
		}

		AnsiString Encode(ULONG_PTR Encoding = CP_ACP, ULONG_PTR Flags = 0) const
		{
			return Encode(*this, Encoding, Flags);
		}

		NoInline static StringT Decode(LPCVOID Bytes, ULONG_PTR Length, ULONG_PTR Encoding)
		{
			NTSTATUS    Status;
			PWSTR       UnicodeString;
			ULONG       UnicodeStringActualByteCount;
			StringT     Str;

			if (Encoding == CP_UTF16_LE)
			{
				if (*(PWSTR)Bytes == BOM_UTF16_LE)
				{
					Bytes = (PWSTR)Bytes + 1;
					Length -= sizeof(WCHAR);
				}

				Str.CopyFrom((PWSTR)Bytes, Length / sizeof(WCHAR));
				return Str;
			}
			else if (Encoding == CP_UTF8)
			{

#if ML_SUPPORT_XP

				UnicodeStringActualByteCount = MultiByteToWideChar(CP_UTF8, 0, (PCSTR)Bytes, Length, nullptr, 0) / sizeof(WCHAR);
				Status = UnicodeStringActualByteCount == 0 ? NTSTATUS_FROM_WIN32(RtlGetLastWin32Error()) : STATUS_SUCCESS;

#else
				Status = RtlUTF8ToUnicodeN(nullptr, 0, &UnicodeStringActualByteCount, (PCSTR)Bytes, Length);
#endif

				if (NT_FAILED(Status))
					return L"";

				UnicodeString = (PWSTR)AllocateMemory(UnicodeStringActualByteCount);
				if (UnicodeString == nullptr)
					return Str;


#if ML_SUPPORT_XP

				UnicodeStringActualByteCount = MultiByteToWideChar(CP_UTF8, 0, (PCSTR)Bytes, Length, nullptr, 0) / sizeof(WCHAR);
				Status = UnicodeStringActualByteCount == 0 ? NTSTATUS_FROM_WIN32(RtlGetLastWin32Error()) : STATUS_SUCCESS;

#else
				Status = RtlUTF8ToUnicodeN(UnicodeString, UnicodeStringActualByteCount, &UnicodeStringActualByteCount, (PCSTR)Bytes, Length);
#endif

				if (NT_SUCCESS(Status))
					Str.CopyFrom(UnicodeString, UnicodeStringActualByteCount / sizeof(UnicodeString[0]));

				FreeMemory(UnicodeString);

				return Str;
			}

			switch (Encoding)
			{
			case CP_ACP:
				Encoding = CurrentPeb()->AnsiCodePageData[1];
				break;

			case CP_OEMCP:
				Encoding = CurrentPeb()->OemCodePageData[1];
				break;
			}

			NtFileMemory NlsFile;
			CPTABLEINFO CodePageTable;

			Status = InitCodePageTable(&CodePageTable, NlsFile, Encoding);
			if (NT_FAILED(Status))
				return Str;

			CustomCPToUnicodeSize(&CodePageTable, &UnicodeStringActualByteCount, (PSTR)Bytes, Length);

			UnicodeString = (PWSTR)AllocateMemory(UnicodeStringActualByteCount);
			if (UnicodeString == nullptr)
				return Str;

			Status = RtlCustomCPToUnicodeN(&CodePageTable, UnicodeString, UnicodeStringActualByteCount, &UnicodeStringActualByteCount, (PCSTR)Bytes, Length);
			if (NT_SUCCESS(Status))
				Str.CopyFrom(UnicodeString, UnicodeStringActualByteCount / sizeof(UnicodeString[0]));

			FreeMemory(UnicodeString);

			return Str;
		}

		NoInline static AnsiString Encode(const StringT& Str, ULONG_PTR Encoding = CP_ACP, ULONG_PTR Flags = 0)
		{
			NTSTATUS    Status;
			ULONG_PTR   Length;
			AnsiString  Array;

			//if (Encoding == CP_THREAD_ACP)
			//{
			//    WCHAR Buffer[8];
			//    GetLocaleInfoW(CurrentTeb()->CurrentLocale, LOCALE_IDEFAULTANSICODEPAGE, Buffer, countof(Buffer));

			//    Encoding = StringToInt32W(Buffer);
			//    if (Encoding == CurrentPeb()->AnsiCodePageData[1])
			//        Encoding = CP_ACP;
			//}

			if (Encoding == CP_UTF16_LE)
			{
				PWSTR Buffer;

				Length = (ULONG_PTR)Str.GetSize() + sizeof(WCHAR) * (1 + FLAG_ON(Flags, WithBOM));
				Status = Array.SetSize(Length);
				if (NT_FAILED(Status))
					return Array;

				Buffer = (PWSTR)Array.GetData();

				if (FLAG_ON(Flags, WithBOM))
				{
					Buffer[0] = BOM_UTF16_LE;
					++Buffer;
				}

				CopyMemory(Buffer, (PWSTR)Str, Str.GetSize());
				Buffer[Str.GetCount() + 1] = 0;

				Array.UpdateDataCount(Length);

				return Array;
			}
			else if (Encoding == CP_UTF8)
			{
				PSTR Buffer;
				ULONG UTF8StringActualByteCount;

#if ML_SUPPORT_XP

				UTF8StringActualByteCount = WideCharToMultiByte(CP_UTF8, 0, Str, Str.GetCount(), nullptr, 0, nullptr, nullptr);
				Status = UTF8StringActualByteCount == 0 ? NTSTATUS_FROM_WIN32(RtlGetLastWin32Error()) : STATUS_SUCCESS;

#else

				Status = RtlUnicodeToUTF8N(nullptr, 0, &UTF8StringActualByteCount, Str, (ULONG)Str.GetSize());
#endif

				if (NT_FAILED(Status))
					return Array;

				Length = UTF8StringActualByteCount + 1 + (FLAG_ON(Flags, WithBOM) ? 3 : 0);
				Status = Array.SetSize(Length);
				if (NT_FAILED(Status))
					return Array;

				Array.UpdateDataCount(Length);

				Buffer = (PSTR)Array.GetData();

				if (FLAG_ON(Flags, WithBOM))
				{
					*(PULONG)Buffer = BOM_UTF8;
					Buffer += 3;
					Length -= 3;
				}

#if ML_SUPPORT_XP

				UTF8StringActualByteCount = WideCharToMultiByte(CP_UTF8, 0, Str, Str.GetCount(), Buffer, Length, nullptr, nullptr);
				Status = UTF8StringActualByteCount == 0 ? NTSTATUS_FROM_WIN32(RtlGetLastWin32Error()) : STATUS_SUCCESS;

#else
				Status = RtlUnicodeToUTF8N(Buffer, Length, &UTF8StringActualByteCount, Str, (ULONG)Str.GetSize());
#endif

				if (NT_FAILED(Status))
				{
					Array.RemoveAll();
					return Array;
				}

				Buffer[UTF8StringActualByteCount] = 0;

				return Array;
			}
			else if (Encoding == CP_ACP)
			{
				PSTR Buffer;
				ULONG StringActualByteCount;

				Status = RtlUnicodeToMultiByteSize(&StringActualByteCount, Str, (ULONG)Str.GetSize());
				if (NT_FAILED(Status))
					return Array;

				Length = StringActualByteCount + 1;
				Status = Array.SetSize(Length);
				if (NT_FAILED(Status))
					return Array;

				Array.UpdateDataCount(Length);

				Buffer = (PSTR)Array.GetData();

				Status = RtlUnicodeToMultiByteN(Buffer, Length, &StringActualByteCount, Str, (ULONG)Str.GetSize());
				if (NT_FAILED(Status))
				{
					Array.RemoveAll();
					return Array;
				}

				Buffer[StringActualByteCount] = 0;

				return Array;
			}
			else if (Encoding == CP_OEMCP)
			{
				PSTR Buffer;
				ULONG StringActualByteCount;

				Status = RtlUnicodeToOemN(nullptr, 0, &StringActualByteCount, Str, (ULONG)Str.GetSize());
				if (NT_FAILED(Status))
					return Array;

				Length = StringActualByteCount + 1;
				Status = Array.SetSize(Length);
				if (NT_FAILED(Status))
					return Array;

				Array.UpdateDataCount(Length);

				Buffer = (PSTR)Array.GetData();

				Status = RtlUnicodeToOemN(Buffer, Length, &StringActualByteCount, Str, (ULONG)Str.GetSize());
				if (NT_FAILED(Status))
				{
					Array.RemoveAll();
					return Array;
				}

				Buffer[StringActualByteCount] = 0;

				return Array;
			}

			PSTR            Buffer;
			ULONG           BytesInMultiByteString;
			NtFileMemory    NlsFile;
			CPTABLEINFO     CodePageTable;

			Status = InitCodePageTable(&CodePageTable, NlsFile, Encoding);
			if (NT_FAILED(Status))
				return Array;

			UnicodeToCustomCPSize(&CodePageTable, &BytesInMultiByteString, Str, (ULONG)Str.GetSize());

			Status = Array.SetSize(BytesInMultiByteString);
			if (NT_FAILED(Status))
			{
				return Array;
			}

			Buffer = (PSTR)Array.GetData();
			Array.UpdateDataCount(BytesInMultiByteString);

			Status = RtlUnicodeToCustomCPN(&CodePageTable, Buffer, BytesInMultiByteString, &BytesInMultiByteString, Str, (ULONG)Str.GetSize());
			Array.Add(0);

			return Array;
		}

	protected:
		NoInline static NTSTATUS InitCodePageTable(PCPTABLEINFO CodePageTable, NtFileMemory &NlsFile, ULONG_PTR Encoding)
		{
			NTSTATUS    Status;
			StringT     NlsFileName;

			Status = GetNlsFile(NlsFileName, Encoding);
			FAIL_RETURN(Status);

			Status = NlsFile.Open(StringT(L"\\SystemRoot\\system32\\") + NlsFileName, NFD_NOT_RESOLVE_PATH);
			FAIL_RETURN(Status);

			RtlInitCodePageTable((PUSHORT)NlsFile.GetBuffer(), CodePageTable);

			return STATUS_SUCCESS;
		}

		NoInline
			static
			NTSTATUS
			CustomCPToUnicodeSize(
			PCPTABLEINFO    CustomCP,
			PULONG          BytesInUnicodeString,
			PCSTR           MultiByteString,
			ULONG           BytesInMultiByteString
			)
		{
			ULONG   cbUnicode = 0;
			PUSHORT NlsLeadByteInfo;

			if (CustomCP->DBCSCodePage)
			{
				NlsLeadByteInfo = CustomCP->DBCSOffsets;

				while (BytesInMultiByteString--)
				{
					if (NlsLeadByteInfo[*(PUCHAR)MultiByteString++])
					{
						if (BytesInMultiByteString == 0)
						{
							cbUnicode += sizeof(WCHAR);
							break;
						}
						else
						{
							BytesInMultiByteString--;
							MultiByteString++;
						}
					}

					cbUnicode += sizeof(WCHAR);
				}

				*BytesInUnicodeString = cbUnicode;
			}
			else
			{
				*BytesInUnicodeString = BytesInMultiByteString * sizeof(WCHAR);
			}

			return STATUS_SUCCESS;
		}

		NoInline
			static
			NTSTATUS
			UnicodeToCustomCPSize(
			PCPTABLEINFO    CustomCP,
			PULONG          BytesInMultiByteString,
			PCWSTR          UnicodeString,
			ULONG           BytesInUnicodeString
			)
		{
			ULONG cbMultiByte = 0;
			ULONG CharsInUnicodeString;
			PUSHORT NlsUnicodeToMbAnsiData;

			CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);

			if (CustomCP->DBCSCodePage)
			{
				USHORT MbChar;

				NlsUnicodeToMbAnsiData = (PUSHORT)CustomCP->WideCharTable;

				while (CharsInUnicodeString--)
				{
					MbChar = NlsUnicodeToMbAnsiData[*UnicodeString++];
					if (HIBYTE(MbChar) == 0)
					{
						cbMultiByte++;
					}
					else
					{
						cbMultiByte += 2;
					}
				}

				*BytesInMultiByteString = cbMultiByte;
			}
			else
			{
				*BytesInMultiByteString = CharsInUnicodeString;
			}

			return STATUS_SUCCESS;
		}

		NoInline static NTSTATUS GetNlsFile(StringT& NlsFile, ULONG NlsIndex, PCWSTR SubKey = L"System\\CurrentControlSet\\Control\\Nls\\CodePage")
		{
			BOOL        Success;
			WCHAR       NlsIndexBuffer[16];
			NTSTATUS    Status;
			PKEY_VALUE_PARTIAL_INFORMATION FileName;

			_snwprintf(NlsIndexBuffer, countof(NlsIndexBuffer), L"%d", NlsIndex);

			Status = GetKeyValue(HKEY_LOCAL_MACHINE, SubKey, NlsIndexBuffer, &FileName);
			FAIL_RETURN(Status);

			NlsFile.CopyFrom((PWSTR)FileName->Data, FileName->DataLength / sizeof(WCHAR));

			FreeKeyInfo(FileName);

			return STATUS_SUCCESS;
		}

		StringImplement* GetImplement() const
		{
			return this->Buffer == nullptr ? nullptr : FIELD_BASE(this->Buffer, StringImplement, Buffer);
		}

		VOID SetImplement(StringImplement *Impl)
		{
			this->Buffer = Impl->Buffer;
		}

		VOID Reset()
		{
			this->Buffer = nullptr;
		}

		NTSTATUS ReleaseImplement(StringImplement *Impl)
		{
			return FreeMemory(Impl) ? STATUS_SUCCESS : STATUS_UNSUCCESSFUL;
		}

		NTSTATUS ReleaseBuffer()
		{
			StringImplement* Impl = GetImplement();

			if (Impl != nullptr)
			{
				ReleaseImplement(Impl);
			}

			Reset();

			return STATUS_SUCCESS;
		}

		NTSTATUS AllocateBuffer(LARGE_LENGTH_TYPE Count)
		{
			return ResizeBuffer(Count);
		}

		NTSTATUS ResizeBuffer(LARGE_LENGTH_TYPE Count)
		{
			LARGE_LENGTH_TYPE   Length, MaxLength;
			STRING_TYPE         Buffer;
			StringImplement     *Impl, *OldImpl;

			Length = StringImplement::CountToLength(Count);
			if (Length > kMaxLength)
				return STATUS_NAME_TOO_LONG;

			OldImpl = GetImplement();

			LOOP_ONCE
			{
				if (OldImpl == nullptr)
				break;

				if (OldImpl->GetMaxLength() > Length)
					return STATUS_SUCCESS;
			}

			Length = StringImplement::CountToLengthAddNull(Count);
			MaxLength = ROUND_UP(Length * 3 / 2, kCharSize);
			Impl = (StringImplement *)AllocateMemory((ULONG_PTR)(kStringImplSize + MaxLength));
			if (Impl == nullptr)
				return STATUS_NO_MEMORY;

			Impl->SetBuffer(Impl->Buffer, MaxLength);

			if (OldImpl != nullptr)
			{
				Impl->CopyBuffer(OldImpl);
				ReleaseImplement(OldImpl);
			}

			SetImplement(Impl);

			return STATUS_SUCCESS;
		}

		StringT
			ReplaceWorker(
			STRING_CONST_POINTER_TYPE   OldValue,
			LARGE_LENGTH_TYPE           OldCount,
			STRING_CONST_POINTER_TYPE   NewValue,
			LARGE_LENGTH_TYPE           NewCount
			) const
		{
			StringT                     NewString;
			LARGE_LENGTH_TYPE           StartIndex, Sub;
			STRING_CONST_POINTER_TYPE   Base, Begin, End;
			StringImplement*            Impl;

			Impl = GetImplement();

			Base = GetBuffer();
			Begin = Base;
			End = Begin + GetCount();
			StartIndex = 0;

			while (Begin < End)
			{
				Sub = Impl->IndexOf(OldValue, StartIndex);
				if (Sub == kInvalidIndex)
					break;

				if (StartIndex != Sub)
					NewString.Concat(Base + StartIndex, Sub - StartIndex);

				NewString.Concat(NewValue, NewCount);

				StartIndex = Sub + OldCount;
				Begin = Base + StartIndex;
			}

			if (Begin < End)
				NewString.Concat(Begin, End - Begin);

			return NewString;
		}

		StringArray SplitWorker(STRING_CONST_POINTER_TYPE Separator, LARGE_LENGTH_TYPE Length, LARGE_LENGTH_TYPE MaxSplit) const
		{
			StringArray                 Array;
			LARGE_LENGTH_TYPE           StartIndex, Sep;
			STRING_CONST_POINTER_TYPE   Begin, End, Base;
			StringImplement*            Impl;

			Impl = GetImplement();

			Base = GetBuffer();
			Begin = Base;
			End = Begin + GetCount();
			StartIndex = 0;

			for (; MaxSplit; --MaxSplit)
			{
				Sep = Impl->IndexOf(Separator, StartIndex);
				if (Sep == kInvalidIndex)
					break;

				//if (Sep != StartIndex)
				{
					Array.Add(SubString(StartIndex, Sep - StartIndex));
				}
				//else
			{
				//Array.Add(L"");
			}

			StartIndex = Sep + Length;
			Begin = Base + StartIndex;
			}

			if (Begin < End)
			{
				Array.Add(SubString(Begin - Base));
			}

			return Array;
		}

		BOOL StartsWithWorker(STRING_CONST_POINTER_TYPE Starts, LARGE_LENGTH_TYPE Count, BOOL CaseInSensitive)
		{
			StringImplement* Impl;

			Impl = GetImplement();

			if (Count == 0 && Impl->GetCount() == 0)
				return TRUE;

			if (Count > Impl->GetCount())
				return FALSE;

			if (Count == Impl->GetCount())
				return Compare(Starts, Count, CaseInSensitive) == 0;

			return SubString(0, Count).Compare(Starts, Count, CaseInSensitive) == 0;
		}

		BOOL EndsWithWorker(STRING_CONST_POINTER_TYPE Ends, LARGE_LENGTH_TYPE Count, BOOL CaseInSensitive) const
		{
			StringImplement* Impl;

			Impl = GetImplement();

			if (Count == 0 && Impl->GetCount() == 0)
				return TRUE;

			if (Count > Impl->GetCount())
				return FALSE;

			if (Count == Impl->GetCount())
				return Compare(Ends, Count, CaseInSensitive) == 0;

			return SubString(Impl->GetCount() - Count).Compare(Ends, Count, CaseInSensitive) == 0;
		}

	private:
		static PVOID AllocateMemory(ULONG_PTR Size)
		{

#if STRING_DEBUG
			++DebugAllocCount;
#endif

			return AllocateMemoryP(Size);
		}

		static BOOL FreeMemory(PVOID Memory)
		{

#if STRING_DEBUG
			--DebugAllocCount;
			if (DebugAllocCount < 0)
				RtlRaiseException(0);
#endif

			return FreeMemoryP(Memory);
		}


#if STRING_DEBUG
		static LONG_PTR DebugAllocCount;
#endif
	};

#if STRING_DEBUG

	DECL_SELECTANY LONG_PTR StringT<>::DebugAllocCount = 0;

#endif

#if USE_TEMPLATE

	typedef StringT<ULONG, ULONG64> String;
	//typedef StringT<ULONG, ULONG64> LargeString;

#else

	typedef StringT String;

#endif

	typedef String::StringArray StringArray;
	typedef String::ByteArray ByteArray;

#define CONVERSION_BUFFER_LENGTH 128
#define MATRIX_CONVERSION_BUFFER_LENGTH 256;


	inline unsigned int MurmurHash32(const void * key, int len, unsigned int seed = 0xEE6B27EB)
	{
		// 'm' and 'r' are mixing constants generated offline.
		// They're not really 'magic', they just happen to work well.

		const unsigned int m = 0x5bd1e995;
		const int r = 24;

		// Initialize the hash to a 'random' value

		unsigned int h = seed ^ len;

		// Mix 4 bytes at a time into the hash

		const unsigned char * data = (const unsigned char *)key;

		while (len >= 4)
		{
			unsigned int k = *(unsigned int *)data;

			k *= m;
			k ^= k >> r;
			k *= m;

			h *= m;
			h ^= k;

			data += 4;
			len -= 4;
		}

		// Handle the last few bytes of the input array

		switch (len)
		{
		case 3: h ^= data[2] << 16;
		case 2: h ^= data[1] << 8;
		case 1: h ^= data[0];
			h *= m;
		};

		// Do a few final mixes of the hash to ensure the last few
		// bytes are well-incorporated.

		h ^= h >> 13;
		h *= m;
		h ^= h >> 15;

		return h;
	}

	/// Random access iterator.
	template <class T> struct RandomAccessIterator
	{
		/// Construct.
		RandomAccessIterator() :
			ptr_(0)
		{
		}

		/// Construct with an object pointer.
		explicit RandomAccessIterator(T* ptr) :
			ptr_(ptr)
		{
		}

		/// Point to the object.
		T* operator ->() const { return ptr_; }

		/// Dereference the object.
		T& operator *() const { return *ptr_; }

		/// Preincrement the pointer.
		RandomAccessIterator<T>& operator ++()
		{
			++ptr_;
			return *this;
		}

		/// Postincrement the pointer.
		RandomAccessIterator<T> operator ++(int)
		{
			RandomAccessIterator<T> it = *this;
			++ptr_;
			return it;
		}

		/// Predecrement the pointer.
		RandomAccessIterator<T>& operator --()
		{
			--ptr_;
			return *this;
		}

		/// Postdecrement the pointer.
		RandomAccessIterator<T> operator --(int)
		{
			RandomAccessIterator<T> it = *this;
			--ptr_;
			return it;
		}

		/// Add an offset to the pointer.
		RandomAccessIterator<T>& operator +=(int value)
		{
			ptr_ += value;
			return *this;
		}

		/// Subtract an offset from the pointer.
		RandomAccessIterator<T>& operator -=(int value)
		{
			ptr_ -= value;
			return *this;
		}

		/// Add an offset to the pointer.
		RandomAccessIterator<T> operator +(int value) const { return RandomAccessIterator<T>(ptr_ + value); }

		/// Subtract an offset from the pointer.
		RandomAccessIterator<T> operator -(int value) const { return RandomAccessIterator<T>(ptr_ - value); }

		/// Calculate offset to another iterator.
		int operator -(const RandomAccessIterator& rhs) const { return (int)(ptr_ - rhs.ptr_); }

		/// Test for equality with another iterator.
		bool operator ==(const RandomAccessIterator& rhs) const { return ptr_ == rhs.ptr_; }

		/// Test for inequality with another iterator.
		bool operator !=(const RandomAccessIterator& rhs) const { return ptr_ != rhs.ptr_; }

		/// Test for less than with another iterator.
		bool operator <(const RandomAccessIterator& rhs) const { return ptr_ < rhs.ptr_; }

		/// Test for greater than with another iterator.
		bool operator >(const RandomAccessIterator& rhs) const { return ptr_ > rhs.ptr_; }

		/// Test for less than or equal with another iterator.
		bool operator <=(const RandomAccessIterator& rhs) const { return ptr_ <= rhs.ptr_; }

		/// Test for greater than or equal with another iterator.
		bool operator >=(const RandomAccessIterator& rhs) const { return ptr_ >= rhs.ptr_; }

		/// Pointer.
		T* ptr_;
	};

	/// Random access const iterator.
	template <class T> struct RandomAccessConstIterator
	{
		/// Construct.
		RandomAccessConstIterator() :
			ptr_(0)
		{
		}

		/// Construct with an object pointer.
		explicit RandomAccessConstIterator(T* ptr) :
			ptr_(ptr)
		{
		}

		/// Construct from a non-const iterator.
		RandomAccessConstIterator(const RandomAccessIterator<T>& rhs) :
			ptr_(rhs.ptr_)
		{
		}

		/// Assign from a non-const iterator.
		RandomAccessConstIterator<T>& operator =(const RandomAccessIterator<T>& rhs)
		{
			ptr_ = rhs.ptr_;
			return *this;
		}

		/// Point to the object.
		const T* operator ->() const { return ptr_; }

		/// Dereference the object.
		const T& operator *() const { return *ptr_; }

		/// Preincrement the pointer.
		RandomAccessConstIterator<T>& operator ++()
		{
			++ptr_;
			return *this;
		}

		/// Postincrement the pointer.
		RandomAccessConstIterator<T> operator ++(int)
		{
			RandomAccessConstIterator<T> it = *this;
			++ptr_;
			return it;
		}

		/// Predecrement the pointer.
		RandomAccessConstIterator<T>& operator --()
		{
			--ptr_;
			return *this;
		}

		/// Postdecrement the pointer.
		RandomAccessConstIterator<T> operator --(int)
		{
			RandomAccessConstIterator<T> it = *this;
			--ptr_;
			return it;
		}

		/// Add an offset to the pointer.
		RandomAccessConstIterator<T>& operator +=(int value)
		{
			ptr_ += value;
			return *this;
		}

		/// Subtract an offset from the pointer.
		RandomAccessConstIterator<T>& operator -=(int value)
		{
			ptr_ -= value;
			return *this;
		}

		/// Add an offset to the pointer.
		RandomAccessConstIterator<T> operator +(int value) const { return RandomAccessConstIterator<T>(ptr_ + value); }

		/// Subtract an offset from the pointer.
		RandomAccessConstIterator<T> operator -(int value) const { return RandomAccessConstIterator<T>(ptr_ - value); }

		/// Calculate offset to another iterator.
		int operator -(const RandomAccessConstIterator& rhs) const { return (int)(ptr_ - rhs.ptr_); }

		/// Test for equality with another iterator.
		bool operator ==(const RandomAccessConstIterator& rhs) const { return ptr_ == rhs.ptr_; }

		/// Test for inequality with another iterator.
		bool operator !=(const RandomAccessConstIterator& rhs) const { return ptr_ != rhs.ptr_; }

		/// Test for less than with another iterator.
		bool operator <(const RandomAccessConstIterator& rhs) const { return ptr_ < rhs.ptr_; }

		/// Test for greater than with another iterator.
		bool operator >(const RandomAccessConstIterator& rhs) const { return ptr_ > rhs.ptr_; }

		/// Test for less than or equal with another iterator.
		bool operator <=(const RandomAccessConstIterator& rhs) const { return ptr_ <= rhs.ptr_; }

		/// Test for greater than or equal with another iterator.
		bool operator >=(const RandomAccessConstIterator& rhs) const { return ptr_ >= rhs.ptr_; }

		/// Pointer.
		T* ptr_;
	};

	/// Returns an iterator pointing to the first element in the range [first, last) that is not less than value.
	template <class TRandomAccessIterator, class T> ForceInline
		TRandomAccessIterator LowerBound(TRandomAccessIterator first, TRandomAccessIterator last, const T& value)
	{
		unsigned count = last - first;

		while (count > 0)
		{
			const unsigned step = count / 2;
			const TRandomAccessIterator it = first + step;
			if (*it < value)
			{
				first = it + 1;
				count -= step + 1;
			}
			else
			{
				count = step;
			}
		}
		return first;
	}

	/// Returns an iterator pointing to the first element in the range [first, last) that is greater than value.
	template <class TRandomAccessIterator, class T> ForceInline
		TRandomAccessIterator UpperBound(TRandomAccessIterator first, TRandomAccessIterator last, const T& value)
	{
		unsigned count = last - first;

		while (count > 0)
		{
			const unsigned step = count / 2;
			const TRandomAccessIterator it = first + step;
			if (!(value < *it))
			{
				first = it + 1;
				count -= step + 1;
			}
			else
			{
				count = step;
			};
		}
		return first;
	}

	class NarrowString
	{
	public:
		typedef RandomAccessIterator<char> Iterator;
		typedef RandomAccessConstIterator<char> ConstIterator;

		/// Construct empty.
		NarrowString() :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
		}

		/// Construct from another string.
		NarrowString(const NarrowString& str) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			*this = str;
		}

		/// Construct from a C string.
		NarrowString(const char* str) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			*this = str;
		}

		/// Construct from a C string.
		NarrowString(char* str) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			*this = (const char*)str;
		}

		/// Construct from a char array and length.
		NarrowString(const char* str, unsigned length) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			Resize(length);
			CopyChars(buffer_, str, length);
		}

		/// Construct from an integer.
		explicit NarrowString(int value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%d", value);
			*this = tempBuffer;
		}
		/// Construct from a short integer.
		explicit NarrowString(short value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%d", value);
			*this = tempBuffer;
		}
		/// Construct from a long integer.
		explicit NarrowString(long value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%ld", value);
			*this = tempBuffer;
		}
		/// Construct from a long long integer.
		explicit NarrowString(long long value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%lld", value);
			*this = tempBuffer;
		}

		/// Construct from an unsigned integer.
		explicit NarrowString(unsigned value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%u", value);
			*this = tempBuffer;
		}

		/// Construct from an unsigned short integer.
		explicit NarrowString(unsigned short value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%u", value);
			*this = tempBuffer;
		}
		/// Construct from an unsigned long integer.
		explicit NarrowString(unsigned long value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%lu", value);
			*this = tempBuffer;
		}

		/// Construct from an unsigned long long integer.
		explicit NarrowString(unsigned long long value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%llu", value);
			*this = tempBuffer;
		}

		/// Construct from a float.
		explicit NarrowString(float value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%g", value);
			*this = tempBuffer;
		}

		/// Construct from a double.
		explicit NarrowString(double value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			char tempBuffer[CONVERSION_BUFFER_LENGTH];
			FormatStringA(tempBuffer, "%.15g", value);
			*this = tempBuffer;
		}

		/// Construct from a bool.
		explicit NarrowString(bool value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			if (value)
				*this = "true";
			else
				*this = "false";
		}

		/// Construct from a character.
		explicit NarrowString(char value) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			Resize(1);
			buffer_[0] = value;
		}

		/// Construct from a character and fill length.
		explicit NarrowString(char value, unsigned length) :
			length_(0),
			capacity_(0),
			buffer_(nullptr)
		{
			Resize(length);
			for (unsigned i = 0; i < length; ++i)
				buffer_[i] = value;
		}

		/// Destruct.
		~NarrowString()
		{
			if (capacity_)
				FreeMemoryP(buffer_);
		}

		/// Assign a string.
		NarrowString& operator =(const NarrowString& rhs)
		{
			Resize(rhs.length_);
			CopyChars(buffer_, rhs.buffer_, rhs.length_);

			return *this;
		}

		/// Assign a C string.
		NarrowString& operator =(const char* rhs)
		{
			unsigned rhsLength = CStringLength(rhs);
			Resize(rhsLength);
			CopyChars(buffer_, rhs, rhsLength);

			return *this;
		}

		/// Add-assign a string.
		NarrowString& operator +=(const NarrowString& rhs)
		{
			unsigned oldLength = length_;
			Resize(length_ + rhs.length_);
			CopyChars(buffer_ + oldLength, rhs.buffer_, rhs.length_);

			return *this;
		}

		/// Add-assign a C string.
		NarrowString& operator +=(const char* rhs)
		{
			unsigned rhsLength = CStringLength(rhs);
			unsigned oldLength = length_;
			Resize(length_ + rhsLength);
			CopyChars(buffer_ + oldLength, rhs, rhsLength);

			return *this;
		}

		/// Add-assign a character.
		NarrowString& operator +=(char rhs)
		{
			unsigned oldLength = length_;
			Resize(length_ + 1);
			buffer_[oldLength] = rhs;

			return *this;
		}

		/// Add-assign (concatenate as string) an integer.
		NarrowString& operator +=(int rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a short integer.
		NarrowString& operator +=(short rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a long integer.
		NarrowString& operator +=(long rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a long long integer.
		NarrowString& operator +=(long long rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) an unsigned integer.
		NarrowString& operator +=(unsigned rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a short unsigned integer.
		NarrowString& operator +=(unsigned short rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a long unsigned integer.
		NarrowString& operator +=(unsigned long rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a long long unsigned integer.
		NarrowString& operator +=(unsigned long long rhs)
		{
			return *this += NarrowString(rhs);
		}

		/// Add-assign (concatenate as string) a float.
		NarrowString& operator +=(float rhs)
		{
			return *this += NarrowString(rhs);
		}
		/// Add-assign (concatenate as string) a bool.
		NarrowString& operator +=(bool rhs)
		{
			return *this += NarrowString(rhs);
		}


		/// Add a string.
		NarrowString operator +(const NarrowString& rhs) const
		{
			NarrowString ret;
			ret.Resize(length_ + rhs.length_);
			CopyChars(ret.buffer_, buffer_, length_);
			CopyChars(ret.buffer_ + length_, rhs.buffer_, rhs.length_);

			return ret;
		}

		/// Add a C string.
		NarrowString operator +(const char* rhs) const
		{
			unsigned rhsLength = CStringLength(rhs);
			NarrowString ret;
			ret.Resize(length_ + rhsLength);
			CopyChars(ret.buffer_, buffer_, length_);
			CopyChars(ret.buffer_ + length_, rhs, rhsLength);

			return ret;
		}

		ULONG ToHash()
		{
			return MurmurHash32(buffer_, length_);
		}

		/// Test for equality with another string.
		bool operator ==(const NarrowString& rhs) const { return StrCompareA(CString(), rhs.CString()) == 0; }

		/// Test for inequality with another string.
		bool operator !=(const NarrowString& rhs) const { return StrCompareA(CString(), rhs.CString()) != 0; }

		/// Test if string is less than another string.
		bool operator <(const NarrowString& rhs) const { return StrCompareA(CString(), rhs.CString()) < 0; }

		/// Test if string is greater than another string.
		bool operator >(const NarrowString& rhs) const { return StrCompareA(CString(), rhs.CString()) > 0; }

		/// Test for equality with a C string.
		bool operator ==(const char* rhs) const { return StrCompareA(CString(), rhs) == 0; }

		/// Test for inequality with a C string.
		bool operator !=(const char* rhs) const { return StrCompareA(CString(), rhs) != 0; }

		/// Test if string is less than a C string.
		bool operator <(const char* rhs) const { return StrCompareA(CString(), rhs) < 0; }

		/// Test if string is greater than a C string.
		bool operator >(const char* rhs) const { return StrCompareA(CString(), rhs) > 0; }

		/// Return char at index.
		char& operator [](unsigned index)
		{
			if (index > length_)
				index = length_;

			return buffer_[index];
		}

		/// Return const char at index.
		const char& operator [](unsigned index) const
		{
			if (index > length_)
				index = length_;

			return buffer_[index];
		}

		/// Return char at index.
		char& At(unsigned index)
		{
			if (index > length_)
				index = length_;

			return buffer_[index];
		}

		/// Return const char at index.
		const char& At(unsigned index) const
		{
			if (index > length_)
				index = length_;

			return buffer_[index];
		}

		/// Replace all occurrences of a character.
		void Replace(char replaceThis, char replaceWith, BOOL caseSensitive = TRUE)
		{
			if (caseSensitive)
			{
				for (unsigned i = 0; i < length_; ++i)
				{
					if (buffer_[i] == replaceThis)
						buffer_[i] = replaceWith;
				}
			}
			else
			{
				replaceThis = (char)tolower(replaceThis);
				for (unsigned i = 0; i < length_; ++i)
				{
					if (CHAR_LOWER(buffer_[i]) == replaceThis)
						buffer_[i] = replaceWith;
				}
			}
		}
		/// Replace all occurrences of a string.
		void Replace(const NarrowString& replaceThis, const NarrowString& replaceWith, BOOL caseSensitive = TRUE)
		{
			unsigned nextPos = 0;

			while (nextPos < length_)
			{
				unsigned pos = Find(replaceThis, nextPos, caseSensitive);
				if (pos == NPOS)
					break;
				Replace(pos, replaceThis.length_, replaceWith);
				nextPos = pos + replaceWith.length_;
			}
		}

		/// Replace a substring.
		void Replace(unsigned pos, unsigned length, const NarrowString& replaceWith)
		{
			if (pos + length > length_)
				return;

			Replace(pos, length, replaceWith.buffer_, replaceWith.length_);
		}

		/// Replace a substring with a C string.
		void Replace(unsigned pos, unsigned length, const char* replaceWith)
		{
			if (pos + length > length_)
				return;

			Replace(pos, length, replaceWith, CStringLength(replaceWith));
		}

		/// Replace a substring by iterators.
		Iterator Replace(const Iterator& start, const Iterator& end, const NarrowString& replaceWith)
		{
			unsigned pos = (unsigned)(start - Begin());
			if (pos >= length_)
				return End();
			unsigned length = (unsigned)(end - start);
			Replace(pos, length, replaceWith);

			return Begin() + pos;
		}

		/// Return a string with all occurrences of a character replaced.
		NarrowString Replaced(char replaceThis, char replaceWith, BOOL caseSensitive = TRUE) const
		{
			NarrowString ret(*this);
			ret.Replace(replaceThis, replaceWith, caseSensitive);
			return ret;
		}

		/// Return a string with all occurrences of a string replaced.
		NarrowString Replaced(const NarrowString& replaceThis, const NarrowString& replaceWith, BOOL caseSensitive = TRUE) const
		{
			NarrowString ret(*this);
			ret.Replace(replaceThis, replaceWith, caseSensitive);
			return ret;
		}

		/// Append a string.
		NarrowString& Append(const NarrowString& str)
		{
			return *this += str;
		}

		/// Append a C string.
		NarrowString& Append(const char* str)
		{
			return *this += str;
		}
		/// Append a character.
		NarrowString& Append(char c)
		{
			return *this += c;
		}

		/// Append characters.
		NarrowString& Append(const char* str, unsigned length)
		{
			if (str)
			{
				unsigned oldLength = length_;
				Resize(oldLength + length);
				CopyChars(&buffer_[oldLength], str, length);
			}
			return *this;
		}
		/// Insert a string.
		void Insert(unsigned pos, const NarrowString& str)
		{
			if (pos > length_)
				pos = length_;

			if (pos == length_)
				(*this) += str;
			else
				Replace(pos, 0, str);
		}
		/// Insert a character.
		void Insert(unsigned pos, char c)
		{
			if (pos > length_)
				pos = length_;

			if (pos == length_)
				(*this) += c;
			else
			{
				unsigned oldLength = length_;
				Resize(length_ + 1);
				MoveRange(pos + 1, pos, oldLength - pos);
				buffer_[pos] = c;
			}
		}

		/// Insert a string by iterator.
		Iterator Insert(const Iterator& dest, const NarrowString& str)
		{
			unsigned pos = (unsigned)(dest - Begin());
			if (pos > length_)
				pos = length_;
			Insert(pos, str);

			return Begin() + pos;
		}
		/// Insert a string partially by iterators.
		Iterator Insert(const Iterator& dest, const Iterator& start, const Iterator& end)
		{
			unsigned pos = (unsigned)(dest - Begin());
			if (pos > length_)
				pos = length_;
			unsigned length = (unsigned)(end - start);
			Replace(pos, 0, &(*start), length);

			return Begin() + pos;
		}
		/// Insert a character by iterator.
		Iterator Insert(const Iterator& dest, char c)
		{
			unsigned pos = (unsigned)(dest - Begin());
			if (pos > length_)
				pos = length_;
			Insert(pos, c);

			return Begin() + pos;
		}
		/// Erase a substring.
		void Erase(unsigned pos, unsigned length = 1)
		{
			Replace(pos, length, nullptr);
		}
		/// Erase a character by iterator.
		Iterator Erase(const Iterator& it)
		{
			unsigned pos = (unsigned)(it - Begin());
			if (pos >= length_)
				return End();
			Erase(pos);

			return Begin() + pos;
		}
		/// Erase a substring by iterators.
		Iterator Erase(const Iterator& start, const Iterator& end)
		{
			unsigned pos = (unsigned)(start - Begin());
			if (pos >= length_)
				return End();
			unsigned length = (unsigned)(end - start);
			Erase(pos, length);

			return Begin() + pos;
		}
		/// Resize the string.
		void Resize(unsigned newLength)
		{
			if (!capacity_)
			{
				// If zero length requested, do not allocate buffer yet
				if (!newLength)
					return;

				// Calculate initial capacity
				capacity_ = newLength + 1;
				if (capacity_ < MIN_CAPACITY)
					capacity_ = MIN_CAPACITY;

				buffer_ = (PSTR)AllocateMemoryP(capacity_);
			}
			else
			{
				if (newLength && capacity_ < newLength + 1)
				{
					// Increase the capacity with half each time it is exceeded
					while (capacity_ < newLength + 1)
						capacity_ += (capacity_ + 1) >> 1;

					char* newBuffer = (PSTR)AllocateMemoryP(capacity_);
					// Move the existing data to the new buffer, then delete the old buffer
					if (length_)
						CopyChars(newBuffer, buffer_, length_);
					FreeMemoryP(buffer_);

					buffer_ = newBuffer;
				}
			}

			buffer_[newLength] = 0;
			length_ = newLength;
		}
		/// Set new capacity.
		void Reserve(unsigned newCapacity)
		{
			if (newCapacity < length_ + 1)
				newCapacity = length_ + 1;
			if (newCapacity == capacity_)
				return;

			char* newBuffer = (PSTR)AllocateMemoryP(newCapacity);
			// Move the existing data to the new buffer, then delete the old buffer
			CopyChars(newBuffer, buffer_, length_ + 1);
			if (capacity_)
				FreeMemoryP(buffer_);

			capacity_ = newCapacity;
			buffer_ = newBuffer;
		}
		/// Reallocate so that no extra memory is used.
		void Compact()
		{
			if (capacity_)
				Reserve(length_ + 1);
		}

		/// Clear the string.
		void Clear()
		{
			Resize(0);
		}

		/// Return iterator to the beginning.
		Iterator Begin() { return Iterator(buffer_); }

		/// Return const iterator to the beginning.
		ConstIterator Begin() const { return ConstIterator(buffer_); }

		/// Return iterator to the end.
		Iterator End() { return Iterator(buffer_ + length_); }

		/// Return const iterator to the end.
		ConstIterator End() const { return ConstIterator(buffer_ + length_); }

		/// Return first char, or 0 if empty.
		char Front() const { return buffer_[0]; }

		/// Return last char, or 0 if empty.
		char Back() const { return length_ ? buffer_[length_ - 1] : buffer_[0]; }

		/// Return a substring from position to end.
		NarrowString Substring(unsigned pos) const
		{
			if (pos < length_)
			{
				NarrowString ret;
				ret.Resize(length_ - pos);
				CopyChars(ret.buffer_, buffer_ + pos, ret.length_);

				return ret;
			}
			else
				return NarrowString();
		}
		/// Return a substring with length from position.
		NarrowString Substring(unsigned pos, unsigned length) const
		{
			if (pos < length_)
			{
				NarrowString ret;
				if (pos + length > length_)
					length = length_ - pos;
				ret.Resize(length);
				CopyChars(ret.buffer_, buffer_ + pos, ret.length_);

				return ret;
			}
			else
				return NarrowString();
		}
		/// Return string with whitespace trimmed from the beginning and the end.
		NarrowString Trimmed() const
		{
			unsigned trimStart = 0;
			unsigned trimEnd = length_;

			while (trimStart < trimEnd)
			{
				char c = buffer_[trimStart];
				if (c != ' ' && c != 9)
					break;
				++trimStart;
			}
			while (trimEnd > trimStart)
			{
				char c = buffer_[trimEnd - 1];
				if (c != ' ' && c != 9)
					break;
				--trimEnd;
			}

			return Substring(trimStart, trimEnd - trimStart);
		}

		/// Return string in uppercase.
		NarrowString ToUpper() const
		{
			NarrowString ret(*this);
			for (unsigned i = 0; i < ret.length_; ++i)
				ret[i] = (char)CHAR_UPPER(buffer_[i]);

			return ret;
		}
		/// Return string in lowercase.
		NarrowString ToLower() const
		{
			NarrowString ret(*this);
			for (unsigned i = 0; i < ret.length_; ++i)
				ret[i] = (char)CHAR_LOWER(buffer_[i]);

			return ret;
		}
		/// Return substrings split by a separator char. By default don't return empty strings.
		GrowableArray<NarrowString> Split(char separator, BOOL keepEmptyStrings = FALSE) const
		{
			return Split(CString(), separator, keepEmptyStrings);
		}

		/// Join substrings with a 'glue' string.
		void Join(const GrowableArray<NarrowString>& subStrings, const NarrowString& glue)
		{
			*this = Joined(subStrings, glue);
		}

		/// Return index to the first occurrence of a string, or NPOS if not found.
		unsigned Find(const NarrowString& str, unsigned startPos = 0, BOOL caseSensitive = TRUE) const
		{
			if (!str.length_ || str.length_ > length_)
				return NPOS;

			char first = str.buffer_[0];
			if (!caseSensitive)
				first = (char)CHAR_LOWER(first);

			for (unsigned i = startPos; i <= length_ - str.length_; ++i)
			{
				char c = buffer_[i];
				if (!caseSensitive)
					c = (char)CHAR_LOWER(c);

				if (c == first)
				{
					unsigned skip = NPOS;
					bool found = true;
					for (unsigned j = 1; j < str.length_; ++j)
					{
						c = buffer_[i + j];
						char d = str.buffer_[j];
						if (!caseSensitive)
						{
							c = (char)CHAR_LOWER(c);
							d = (char)CHAR_LOWER(d);
						}

						if (skip == NPOS && c == first)
							skip = i + j - 1;

						if (c != d)
						{
							found = false;
							if (skip != NPOS)
								i = skip;
							break;
						}
					}
					if (found)
						return i;
				}
			}

			return NPOS;
		}
		/// Return index to the first occurrence of a character, or NPOS if not found.
		unsigned Find(char c, unsigned startPos = 0, BOOL caseSensitive = TRUE) const
		{
			if (caseSensitive)
			{
				for (unsigned i = startPos; i < length_; ++i)
				{
					if (buffer_[i] == c)
						return i;
				}
			}
			else
			{
				c = (char)CHAR_LOWER(c);
				for (unsigned i = startPos; i < length_; ++i)
				{
					if (CHAR_LOWER(buffer_[i]) == c)
						return i;
				}
			}

			return NPOS;
		}
		/// Return index to the last occurrence of a string, or NPOS if not found.
		unsigned FindLast(const NarrowString& str, unsigned startPos = NPOS, BOOL caseSensitive = TRUE) const
		{
			if (!str.length_ || str.length_ > length_)
				return NPOS;
			if (startPos > length_ - str.length_)
				startPos = length_ - str.length_;

			char first = str.buffer_[0];
			if (!caseSensitive)
				first = (char)CHAR_LOWER(first);

			for (unsigned i = startPos; i < length_; --i)
			{
				char c = buffer_[i];
				if (!caseSensitive)
					c = (char)CHAR_LOWER(c);

				if (c == first)
				{
					bool found = true;
					for (unsigned j = 1; j < str.length_; ++j)
					{
						c = buffer_[i + j];
						char d = str.buffer_[j];
						if (!caseSensitive)
						{
							c = (char)CHAR_LOWER(c);
							d = (char)CHAR_LOWER(d);
						}

						if (c != d)
						{
							found = false;
							break;
						}
					}
					if (found)
						return i;
				}
			}

			return NPOS;
		}

		/// Return index to the last occurrence of a character, or NPOS if not found.
		unsigned FindLast(char c, unsigned startPos = NPOS, BOOL caseSensitive = TRUE) const
		{
			if (startPos >= length_)
				startPos = length_ - 1;

			if (caseSensitive)
			{
				for (unsigned i = startPos; i < length_; --i)
				{
					if (buffer_[i] == c)
						return i;
				}
			}
			else
			{
				c = (char)CHAR_LOWER(c);
				for (unsigned i = startPos; i < length_; --i)
				{
					if (CHAR_LOWER(buffer_[i]) == c)
						return i;
				}
			}

			return NPOS;
		}
		/// Return whether starts with a string.
		bool StartsWith(const NarrowString& str, BOOL caseSensitive = TRUE) const
		{
			return Find(str, 0, caseSensitive) == 0;
		}

		/// Return whether ends with a string.
		bool EndsWith(const NarrowString& str, BOOL caseSensitive = TRUE) const
		{
			unsigned pos = FindLast(str, Length() - 1, caseSensitive);
			return pos != NPOS && pos == Length() - str.Length();
		}

		/// Return the C string.
		const char* CString() const { return buffer_; }

		/// Return length.
		unsigned Length() const { return length_; }

		/// Return buffer capacity.
		unsigned Capacity() const { return capacity_; }

		/// Return whether the string is empty.
		bool Empty() const { return length_ == 0; }

		/// Return comparison result with a string.
		int Compare(const NarrowString& str, BOOL caseSensitive = TRUE) const
		{
			return Compare(CString(), str.CString(), caseSensitive);
		}

		/// Return comparison result with a C string.
		int Compare(const char* str, BOOL caseSensitive = TRUE) const
		{
			return Compare(CString(), str, caseSensitive);
		}

		/// Return whether contains a specific occurrence of a string.
		BOOL Contains(const String& str, bool caseSensitive = true) const { return Find(str, 0, caseSensitive) != NPOS; }

		/// Return whether contains a specific character.
		BOOL Contains(char c, bool caseSensitive = true) const { return Find(c, 0, caseSensitive) != NPOS; }

		/// Return hash value for HashSet & HashMap.
		unsigned ToHash() const
		{
			unsigned hash = 0;
			const char* ptr = buffer_;
			while (*ptr)
			{
				hash = *ptr + (hash << 6) + (hash << 16) - hash;
				++ptr;
			}

			return hash;
		}

		/// Return substrings split by a separator char. By default don't return empty strings.
		static GrowableArray<NarrowString> Split(const char* str, char separator, BOOL keepEmptyStrings = FALSE)
		{
			GrowableArray<NarrowString> ret;
			const char* strEnd = str + NarrowString::CStringLength(str);

			for (const char* splitEnd = str; splitEnd != strEnd; ++splitEnd)
			{
				if (*splitEnd == separator)
				{
					const ptrdiff_t splitLen = splitEnd - str;
					if (splitLen > 0 || keepEmptyStrings)
						ret.Add(NarrowString(str, splitLen));
					str = splitEnd + 1;
				}
			}

			const ptrdiff_t splitLen = strEnd - str;
			if (splitLen > 0 || keepEmptyStrings)
				ret.Add(NarrowString(str, splitLen));

			return ret;
		}
		/// Return a string by joining substrings with a 'glue' string.
		static NarrowString Joined(const GrowableArray<NarrowString>& subStrings, const NarrowString& glue)
		{
			if (subStrings.GetSize() == 0)
				return NarrowString();

			NarrowString joinedString(subStrings[0]);
			for (unsigned i = 1; i < subStrings.GetSize(); ++i)
				joinedString.Append(glue).Append(subStrings[i]);

			return joinedString;
		}

		/// Return length of a C string.
		static unsigned CStringLength(const char* str) { return str ? (unsigned)StrLengthA(str) : 0; }

		/// Compare two C strings.
		static int Compare(const char* lhs, const char* rhs, BOOL caseSensitive)
		{
			if (!lhs || !rhs)
				return lhs ? 1 : (rhs ? -1 : 0);

			if (caseSensitive)
				return strcmp(lhs, rhs);
			else
			{
				for (;;)
				{
					char l = (char)CHAR_LOWER(*lhs);
					char r = (char)CHAR_LOWER(*rhs);
					if (!l || !r)
						return l ? 1 : (r ? -1 : 0);
					if (l < r)
						return -1;
					if (l > r)
						return 1;

					++lhs;
					++rhs;
				}
			}
		}

		/// Position for "not found."
		static const unsigned NPOS = 0xffffffff;
		/// Initial dynamic allocation size.
		static const unsigned MIN_CAPACITY = 8;
		/// Empty string.
		static const String EMPTY;

	private:
		/// Move a range of characters within the string.
		void MoveRange(unsigned dest, unsigned src, unsigned count)
		{
			if (count)
				RtlMoveMemory(buffer_ + dest, buffer_ + src, count);
		}

		/// Copy chars from one buffer to another.
		static void CopyChars(char* dest, const char* src, unsigned count)
		{
			if (count)
				RtlCopyMemory(dest, src, count);
		}

		/// Replace a substring with another substring.
		void Replace(unsigned pos, unsigned length, const char* srcStart, unsigned srcLength)
		{
			int delta = (int)srcLength - (int)length;

			if (pos + length < length_)
			{
				if (delta < 0)
				{
					MoveRange(pos + srcLength, pos + length, length_ - pos - length);
					Resize(length_ + delta);
				}
				if (delta > 0)
				{
					Resize(length_ + delta);
					MoveRange(pos + srcLength, pos + length, length_ - pos - length - delta);
				}
			}
			else
				Resize(length_ + delta);

			CopyChars(buffer_ + pos, srcStart, srcLength);
		}

		/// String length.
		unsigned length_;
		/// Capacity, zero if buffer not allocated.
		unsigned capacity_;
		/// String buffer, null if not allocated.
		char* buffer_;
	};

	/// Add a string to a C string.
	inline NarrowString operator +(const char* lhs, const NarrowString& rhs)
	{
		NarrowString ret(lhs);
		ret += rhs;
		return ret;
	}


	template <class T, class U> class Pair
	{
	public:
		/// Construct undefined.
		Pair()
		{
		}

		/// Construct with values.
		Pair(const T& first, const U& second) :
			first_(first),
			second_(second)
		{
		}

		/// Test for equality with another pair.
		bool operator ==(const Pair<T, U>& rhs) const { return first_ == rhs.first_ && second_ == rhs.second_; }

		/// Test for inequality with another pair.
		bool operator !=(const Pair<T, U>& rhs) const { return first_ != rhs.first_ || second_ != rhs.second_; }

		/// Test for less than with another pair.
		bool operator <(const Pair<T, U>& rhs) const
		{
			if (first_ < rhs.first_)
				return true;
			if (first_ != rhs.first_)
				return false;
			return second_ < rhs.second_;
		}

		/// Test for greater than with another pair.
		bool operator >(const Pair<T, U>& rhs) const
		{
			if (first_ > rhs.first_)
				return true;
			if (first_ != rhs.first_)
				return false;
			return second_ > rhs.second_;
		}

		/// Return hash value for HashSet & HashMap.
		unsigned ToHash() const { return (MakeHash(first_) & 0xffff) | (MakeHash(second_) << 16); }

		/// First value.
		T first_;
		/// Second value.
		U second_;
	};

	/// Construct a pair.
	template <class T, class U> Pair<T, U> MakePair(const T& first, const U& second)
	{
		return Pair<T, U>(first, second);
	}

	template <class T> T begin(Pair<T, T>& range) { return range.first_; }

	template <class T> T end(Pair<T, T>& range) { return range.second_; }

	template <class T> T begin(const Pair<T, T>& range) { return range.first_; }

	template <class T> T end(const Pair<T, T>& range) { return range.second_; }

	/// Hash set/map node base class.
	struct HashNodeBase
	{
		/// Construct.
		HashNodeBase() :
			down_(0),
			prev_(0),
			next_(0)
		{
		}

		/// Next node in the bucket.
		HashNodeBase* down_;
		/// Previous node.
		HashNodeBase* prev_;
		/// Next node.
		HashNodeBase* next_;
	};

	/// Hash set/map iterator base class.
	struct HashIteratorBase
	{
		/// Construct.
		HashIteratorBase() :
			ptr_(0)
		{
		}

		/// Construct with a node pointer.
		explicit HashIteratorBase(HashNodeBase* ptr) :
			ptr_(ptr)
		{
		}

		/// Test for equality with another iterator.
		bool operator ==(const HashIteratorBase& rhs) const { return ptr_ == rhs.ptr_; }

		/// Test for inequality with another iterator.
		bool operator !=(const HashIteratorBase& rhs) const { return ptr_ != rhs.ptr_; }

		/// Go to the next node.
		void GotoNext()
		{
			if (ptr_)
				ptr_ = ptr_->next_;
		}

		/// Go to the previous node.
		void GotoPrev()
		{
			if (ptr_)
				ptr_ = ptr_->prev_;
		}

		/// Node pointer.
		HashNodeBase* ptr_;
	};

	class HashBase
	{
	public:
		/// Initial amount of buckets.
		static const unsigned MIN_BUCKETS = 8;
		/// Maximum load factor.
		static const unsigned MAX_LOAD_FACTOR = 4;

		/// Construct.
		HashBase() :
			head_(0),
			tail_(0),
			ptrs_(0)
		{
		}

		/// Return number of elements.
		unsigned Size() const { return ptrs_ ? (reinterpret_cast<unsigned*>(ptrs_))[0] : 0; }

		/// Return number of buckets.
		unsigned NumBuckets() const { return ptrs_ ? (reinterpret_cast<unsigned*>(ptrs_))[1] : 0; }

		/// Return whether has no elements.
		bool Empty() const { return Size() == 0; }

	protected:
		/// Allocate bucket head pointers + room for size and bucket count variables.
		void AllocateBuckets(unsigned size, unsigned numBuckets)
		{
			if (ptrs_)
				FreeMemoryP(ptrs_);

			HashNodeBase** ptrs = (HashNodeBase**)AllocateMemoryP((numBuckets + 2) * sizeof(PVOID));
			unsigned* data = reinterpret_cast<unsigned*>(ptrs);
			data[0] = size;
			data[1] = numBuckets;
			ptrs_ = ptrs;

			ResetPtrs();
		}

		/// Reset bucket head pointers.
		void ResetPtrs()
		{
			// Reset bucket pointers
			if (!ptrs_)
				return;

			unsigned numBuckets = NumBuckets();
			HashNodeBase** ptrs = Ptrs();
			for (unsigned i = 0; i < numBuckets; ++i)
				ptrs[i] = 0;
		}

		/// Set new size.
		void SetSize(unsigned size) { if (ptrs_) (reinterpret_cast<unsigned*>(ptrs_))[0] = size; }

		/// Return bucket head pointers.
		HashNodeBase** Ptrs() const { return ptrs_ ? ptrs_ + 2 : 0; }

		/// List head node pointer.
		HashNodeBase* head_;
		/// List tail node pointer.
		HashNodeBase* tail_;
		/// Bucket head pointers.
		HashNodeBase** ptrs_;
	};


#define QUICKSORT_THRESHOLD 16

	/// Perform insertion sort on an array.
	template <class T> inline void InsertionSort(RandomAccessIterator<T> begin, RandomAccessIterator<T> end)
	{
		for (RandomAccessIterator<T> i = begin + 1; i < end; ++i)
		{
			T temp = *i;
			RandomAccessIterator<T> j = i;
			while (j > begin && temp < *(j - 1))
			{
				*j = *(j - 1);
				--j;
			}
			*j = temp;
		}
	}

	/// Perform insertion sort on an array using a compare function.
	template <class T, class U> inline void InsertionSort(RandomAccessIterator<T> begin, RandomAccessIterator<T> end, U compare)
	{
		for (RandomAccessIterator<T> i = begin + 1; i < end; ++i)
		{
			T temp = *i;
			RandomAccessIterator<T> j = i;
			while (j > begin && compare(temp, *(j - 1)))
			{
				*j = *(j - 1);
				--j;
			}
			*j = temp;
		}
	}

	/// Perform quick sort initial pass on an array. Does not sort fully.
	template <class T> inline void InitialQuickSort(RandomAccessIterator<T> begin, RandomAccessIterator<T> end)
	{
		while (end - begin > QUICKSORT_THRESHOLD)
		{
			// Choose the pivot by median
			RandomAccessIterator<T> pivot = begin + ((end - begin) / 2);
			if (*begin < *pivot && *(end - 1) < *begin)
				pivot = begin;
			else if (*(end - 1) < *pivot && *begin < *(end - 1))
				pivot = end - 1;

			// Partition and sort recursively
			RandomAccessIterator<T> i = begin - 1;
			RandomAccessIterator<T> j = end;
			T pivotValue = *pivot;
			for (;;)
			{
				while (pivotValue < *(--j));
				while (*(++i) < pivotValue);
				if (i < j)
					Swap(*i, *j);
				else
					break;
			}

			InitialQuickSort(begin, j + 1);
			begin = j + 1;
		}
	}

	/// Perform quick sort initial pass on an array using a compare function. Does not sort fully.
	template <class T, class U> inline void InitialQuickSort(RandomAccessIterator<T> begin, RandomAccessIterator<T> end, U compare)
	{
		while (end - begin > QUICKSORT_THRESHOLD)
		{
			// Choose the pivot by median
			RandomAccessIterator<T> pivot = begin + ((end - begin) / 2);
			if (compare(*begin, *pivot) && compare(*(end - 1), *begin))
				pivot = begin;
			else if (compare(*(end - 1), *pivot) && compare(*begin, *(end - 1)))
				pivot = end - 1;

			// Partition and sort recursively
			RandomAccessIterator<T> i = begin - 1;
			RandomAccessIterator<T> j = end;
			T pivotValue = *pivot;
			for (;;)
			{
				while (compare(pivotValue, *(--j)));
				while (compare(*(++i), pivotValue));
				if (i < j)
					Swap(*i, *j);
				else
					break;
			}

			InitialQuickSort(begin, j + 1, compare);
			begin = j + 1;
		}
	}

	/// Sort in ascending order using quicksort for initial passes, then an insertion sort to finalize.
	template <class T> inline void Sort(RandomAccessIterator<T> begin, RandomAccessIterator<T> end)
	{
		InitialQuickSort(begin, end);
		InsertionSort(begin, end);
	}

	/// Sort in ascending order using quicksort for initial passes, then an insertion sort to finalize, using a compare function.
	template <class T, class U> inline void Sort(RandomAccessIterator<T> begin, RandomAccessIterator<T> end, U compare)
	{
		InitialQuickSort(begin, end, compare);
		InsertionSort(begin, end, compare);
	}

	template <class T> unsigned MakeHash(const T& value)
	{
		return value.ToHash();
	}

	template <class T, class U> class HashMap : public HashBase
	{
	public:
		typedef T KeyType;
		typedef U ValueType;

		/// Hash map key-value pair with const key.
		class KeyValue
		{
		public:
			/// Construct with default key.
			KeyValue() :
				first_(T())
			{
			}

			/// Construct with key and value.
			KeyValue(const T& first, const U& second) :
				first_(first),
				second_(second)
			{
			}

			/// Copy-construct.
			KeyValue(const KeyValue& value) :
				first_(value.first_),
				second_(value.second_)
			{
			}

			/// Test for equality with another pair.
			bool operator ==(const KeyValue& rhs) const { return first_ == rhs.first_ && second_ == rhs.second_; }

			/// Test for inequality with another pair.
			bool operator !=(const KeyValue& rhs) const { return first_ != rhs.first_ || second_ != rhs.second_; }

			/// Key.
			const T first_;
			/// Value.
			U second_;

		private:
			/// Prevent assignment.
			KeyValue& operator =(const KeyValue& rhs);
		};

		/// Hash map node.
		struct Node : public HashNodeBase
		{
			/// Construct undefined.
			Node()
			{
			}

			/// Construct with key and value.
			Node(const T& key, const U& value) :
				pair_(key, value)
			{
			}

			/// Key-value pair.
			KeyValue pair_;

			/// Return next node.
			Node* Next() const { return static_cast<Node*>(next_); }

			/// Return previous node.
			Node* Prev() const { return static_cast<Node*>(prev_); }

			/// Return next node in the bucket.
			Node* Down() const { return static_cast<Node*>(down_); }
		};

		/// Hash map node iterator.
		struct Iterator : public HashIteratorBase
		{
			/// Construct.
			Iterator()
			{
			}

			/// Construct with a node pointer.
			Iterator(Node* ptr) :
				HashIteratorBase(ptr)
			{
			}

			/// Preincrement the pointer.
			Iterator& operator ++()
			{
				GotoNext();
				return *this;
			}

			/// Postincrement the pointer.
			Iterator operator ++(int)
			{
				Iterator it = *this;
				GotoNext();
				return it;
			}

			/// Predecrement the pointer.
			Iterator& operator --()
			{
				GotoPrev();
				return *this;
			}

			/// Postdecrement the pointer.
			Iterator operator --(int)
			{
				Iterator it = *this;
				GotoPrev();
				return it;
			}

			/// Point to the pair.
			KeyValue* operator ->() const { return &(static_cast<Node*>(ptr_))->pair_; }

			/// Dereference the pair.
			KeyValue& operator *() const { return (static_cast<Node*>(ptr_))->pair_; }
		};

		/// Hash map node const iterator.
		struct ConstIterator : public HashIteratorBase
		{
			/// Construct.
			ConstIterator()
			{
			}

			/// Construct with a node pointer.
			ConstIterator(Node* ptr) :
				HashIteratorBase(ptr)
			{
			}

			/// Construct from a non-const iterator.
			ConstIterator(const Iterator& rhs) :
				HashIteratorBase(rhs.ptr_)
			{
			}

			/// Assign from a non-const iterator.
			ConstIterator& operator =(const Iterator& rhs)
			{
				ptr_ = rhs.ptr_;
				return *this;
			}

			/// Preincrement the pointer.
			ConstIterator& operator ++()
			{
				GotoNext();
				return *this;
			}

			/// Postincrement the pointer.
			ConstIterator operator ++(int)
			{
				ConstIterator it = *this;
				GotoNext();
				return it;
			}

			/// Predecrement the pointer.
			ConstIterator& operator --()
			{
				GotoPrev();
				return *this;
			}

			/// Postdecrement the pointer.
			ConstIterator operator --(int)
			{
				ConstIterator it = *this;
				GotoPrev();
				return it;
			}

			/// Point to the pair.
			const KeyValue* operator ->() const { return &(static_cast<Node*>(ptr_))->pair_; }

			/// Dereference the pair.
			const KeyValue& operator *() const { return (static_cast<Node*>(ptr_))->pair_; }
		};

		/// Construct empty.
		HashMap()
		{
			// Reserve the tail node
			head_ = tail_ = ReserveNode();
		}

		/// Construct from another hash map.
		HashMap(const HashMap<T, U>& map)
		{
			// Reserve the tail node + initial capacity according to the map's size
			allocator_ = AllocatorInitialize((unsigned)sizeof(Node), map.Size() + 1);
			head_ = tail_ = ReserveNode();
			*this = map;
		}

		/// Destruct.
		~HashMap()
		{
			Clear();
			FreeNode(Tail());
			FreeMemoryP(ptrs_);
		}

		/// Assign a hash map.
		HashMap& operator =(const HashMap<T, U>& rhs)
		{
			// In case of self-assignment do nothing
			if (&rhs != this)
			{
				Clear();
				Insert(rhs);
			}
			return *this;
		}

		/// Add-assign a pair.
		HashMap& operator +=(const Pair<T, U>& rhs)
		{
			Insert(rhs);
			return *this;
		}

		/// Add-assign a hash map.
		HashMap& operator +=(const HashMap<T, U>& rhs)
		{
			Insert(rhs);
			return *this;
		}

		/// Test for equality with another hash map.
		bool operator ==(const HashMap<T, U>& rhs) const
		{
			if (rhs.Size() != Size())
				return false;

			ConstIterator i = Begin();
			while (i != End())
			{
				ConstIterator j = rhs.Find(i->first_);
				if (j == rhs.End() || j->second_ != i->second_)
					return false;
				++i;
			}

			return true;
		}

		/// Test for inequality with another hash map.
		bool operator !=(const HashMap<T, U>& rhs) const
		{
			if (rhs.Size() != Size())
				return true;

			ConstIterator i = Begin();
			while (i != End())
			{
				ConstIterator j = rhs.Find(i->first_);
				if (j == rhs.End() || j->second_ != i->second_)
					return true;
				++i;
			}

			return false;
		}

		/// Index the map. Create a new pair if key not found.
		U& operator [](const T& key)
		{
			if (!ptrs_)
				return InsertNode(key, U(), false)->pair_.second_;

			unsigned hashKey = Hash(key);

			Node* node = FindNode(key, hashKey);
			return node ? node->pair_.second_ : InsertNode(key, U(), false)->pair_.second_;
		}

		/// Index the map. Return null if key is not found, does not create a new pair.
		U* operator [](const T& key) const
		{
			if (!ptrs_)
				return 0;

			unsigned hashKey = Hash(key);

			Node* node = FindNode(key, hashKey);
			return node ? &node->pair_.second_ : 0;
		}

		/// Insert a pair. Return an iterator to it.
		Iterator Insert(const Pair<T, U>& pair)
		{
			return Iterator(InsertNode(pair.first_, pair.second_));
		}

		/// Insert a pair. Return iterator and set exists flag according to whether the key already existed.
		Iterator Insert(const Pair<T, U>& pair, bool& exists)
		{
			unsigned oldSize = Size();
			Iterator ret(InsertNode(pair.first_, pair.second_));
			exists = (Size() == oldSize);
			return ret;
		}

		/// Insert a map.
		void Insert(const HashMap<T, U>& map)
		{
			ConstIterator it = map.Begin();
			ConstIterator end = map.End();
			while (it != end)
			{
				InsertNode(it->first_, it->second_);
				++it;
			}
		}

		/// Insert a pair by iterator. Return iterator to the value.
		Iterator Insert(const ConstIterator& it) { return Iterator(InsertNode(it->first_, it->second_)); }

		/// Insert a range by iterators.
		void Insert(const ConstIterator& start, const ConstIterator& end)
		{
			ConstIterator it = start;
			while (it != end)
				InsertNode(*it++);
		}

		/// Erase a pair by key. Return true if was found.
		bool Erase(const T& key)
		{
			if (!ptrs_)
				return false;

			unsigned hashKey = Hash(key);

			Node* previous;
			Node* node = FindNode(key, hashKey, previous);
			if (!node)
				return false;

			if (previous)
				previous->down_ = node->down_;
			else
				Ptrs()[hashKey] = node->down_;

			EraseNode(node);
			return true;
		}

		/// Erase a pair by iterator. Return iterator to the next pair.
		Iterator Erase(const Iterator& it)
		{
			if (!ptrs_ || !it.ptr_)
				return End();

			Node* node = static_cast<Node*>(it.ptr_);
			Node* next = node->Next();

			unsigned hashKey = Hash(node->pair_.first_);

			Node* previous = 0;
			Node* current = static_cast<Node*>(Ptrs()[hashKey]);
			while (current && current != node)
			{
				previous = current;
				current = current->Down();
			}

			if (previous)
				previous->down_ = node->down_;
			else
				Ptrs()[hashKey] = node->down_;

			EraseNode(node);
			return Iterator(next);
		}

		/// Clear the map.
		void Clear()
		{
			// Prevent Find() from returning anything while the map is being cleared
			ResetPtrs();

			if (Size())
			{
				for (Iterator i = Begin(); i != End();)
				{
					FreeNode(static_cast<Node*>(i++.ptr_));
					i.ptr_->prev_ = 0;
				}

				head_ = tail_;
				SetSize(0);
			}
		}

		/// Sort pairs. After sorting the map can be iterated in order until new elements are inserted.
		void Sort()
		{
			unsigned numKeys = Size();
			if (!numKeys)
				return;

			Node** ptrs = new Node*[numKeys];
			Node* ptr = Head();

			for (unsigned i = 0; i < numKeys; ++i)
			{
				ptrs[i] = ptr;
				ptr = ptr->Next();
			}

			Sort(RandomAccessIterator<Node*>(ptrs), RandomAccessIterator<Node*>(ptrs + numKeys), CompareNodes);

			head_ = ptrs[0];
			ptrs[0]->prev_ = 0;
			for (unsigned i = 1; i < numKeys; ++i)
			{
				ptrs[i - 1]->next_ = ptrs[i];
				ptrs[i]->prev_ = ptrs[i - 1];
			}
			ptrs[numKeys - 1]->next_ = tail_;
			tail_->prev_ = ptrs[numKeys - 1];

			FreeMemoryP(ptrs);
		}

		/// Rehash to a specific bucket count, which must be a power of two. Return true if successful.
		bool Rehash(unsigned numBuckets)
		{
			if (numBuckets == NumBuckets())
				return true;
			if (!numBuckets || numBuckets < Size() / MAX_LOAD_FACTOR)
				return false;

			// Check for being power of two
			unsigned check = numBuckets;
			while (!(check & 1))
				check >>= 1;
			if (check != 1)
				return false;

			AllocateBuckets(Size(), numBuckets);
			Rehash();
			return true;
		}

		/// Return iterator to the pair with key, or end iterator if not found.
		Iterator Find(const T& key)
		{
			if (!ptrs_)
				return End();

			unsigned hashKey = Hash(key);
			Node* node = FindNode(key, hashKey);
			if (node)
				return Iterator(node);
			else
				return End();
		}

		/// Return const iterator to the pair with key, or end iterator if not found.
		ConstIterator Find(const T& key) const
		{
			if (!ptrs_)
				return End();

			unsigned hashKey = Hash(key);
			Node* node = FindNode(key, hashKey);
			if (node)
				return ConstIterator(node);
			else
				return End();
		}

		/// Return whether contains a pair with key.
		bool Contains(const T& key) const
		{
			if (!ptrs_)
				return false;

			unsigned hashKey = Hash(key);
			return FindNode(key, hashKey) != 0;
		}

		/// Try to copy value to output. Return true if was found.
		bool TryGetValue(const T& key, U& out) const
		{
			if (!ptrs_)
				return false;
			unsigned hashKey = Hash(key);
			Node* node = FindNode(key, hashKey);
			if (node)
			{
				out = node->pair_.second_;
				return true;
			}
			else
				return false;
		}

		/// Return all the keys.
		GrowableArray<T> Keys() const
		{
			GrowableArray<T> result;
			for (ConstIterator i = Begin(); i != End(); ++i)
				result.Add(i->first_);
			return result;
		}

		/// Return all the values.
		GrowableArray<U> Values() const
		{
			GrowableArray<U> result;
			for (ConstIterator i = Begin(); i != End(); ++i)
				result.Add(i->second_);
			return result;
		}

		/// Return iterator to the beginning.
		Iterator Begin() { return Iterator(Head()); }

		/// Return iterator to the beginning.
		ConstIterator Begin() const { return ConstIterator(Head()); }

		/// Return iterator to the end.
		Iterator End() { return Iterator(Tail()); }

		/// Return iterator to the end.
		ConstIterator End() const { return ConstIterator(Tail()); }

		/// Return first pair.
		const KeyValue& Front() const { return *Begin(); }

		/// Return last pair.
		const KeyValue& Back() const { return *(--End()); }

	private:
		/// Return the head node.
		Node* Head() const { return static_cast<Node*>(head_); }

		/// Return the tail node.
		Node* Tail() const { return static_cast<Node*>(tail_); }

		/// Find a node from the buckets. Do not call if the buckets have not been allocated.
		Node* FindNode(const T& key, unsigned hashKey) const
		{
			Node* node = static_cast<Node*>(Ptrs()[hashKey]);
			while (node)
			{
				if (node->pair_.first_ == key)
					return node;
				node = node->Down();
			}

			return 0;
		}

		/// Find a node and the previous node from the buckets. Do not call if the buckets have not been allocated.
		Node* FindNode(const T& key, unsigned hashKey, Node*& previous) const
		{
			previous = 0;

			Node* node = static_cast<Node*>(Ptrs()[hashKey]);
			while (node)
			{
				if (node->pair_.first_ == key)
					return node;
				previous = node;
				node = node->Down();
			}

			return 0;
		}

		/// Insert a key and value and return either the new or existing node.
		Node* InsertNode(const T& key, const U& value, bool findExisting = true)
		{
			// If no pointers yet, allocate with minimum bucket count
			if (!ptrs_)
			{
				AllocateBuckets(Size(), MIN_BUCKETS);
				Rehash();
			}

			unsigned hashKey = Hash(key);

			if (findExisting)
			{
				// If exists, just change the value
				Node* existing = FindNode(key, hashKey);
				if (existing)
				{
					existing->pair_.second_ = value;
					return existing;
				}
			}

			Node* newNode = InsertNode(Tail(), key, value);
			newNode->down_ = Ptrs()[hashKey];
			Ptrs()[hashKey] = newNode;

			// Rehash if the maximum load factor has been exceeded
			if (Size() > NumBuckets() * MAX_LOAD_FACTOR)
			{
				AllocateBuckets(Size(), NumBuckets() << 1);
				Rehash();
			}

			return newNode;
		}

		/// Insert a node into the list. Return the new node.
		Node* InsertNode(Node* dest, const T& key, const U& value)
		{
			if (!dest)
				return 0;

			Node* newNode = ReserveNode(key, value);
			Node* prev = dest->Prev();
			newNode->next_ = dest;
			newNode->prev_ = prev;
			if (prev)
				prev->next_ = newNode;
			dest->prev_ = newNode;

			// Reassign the head node if necessary
			if (dest == Head())
				head_ = newNode;

			SetSize(Size() + 1);

			return newNode;
		}

		/// Erase a node from the list. Return pointer to the next element, or to the end if could not erase.
		Node* EraseNode(Node* node)
		{
			// The tail node can not be removed
			if (!node || node == tail_)
				return Tail();

			Node* prev = node->Prev();
			Node* next = node->Next();
			if (prev)
				prev->next_ = next;
			next->prev_ = prev;

			// Reassign the head node if necessary
			if (node == Head())
				head_ = next;

			FreeNode(node);
			SetSize(Size() - 1);

			return next;
		}

		/// Reserve a node.
		Node* ReserveNode()
		{
			Node* newNode = (Node*)AllocateMemoryP(sizeof(Node));
			new(newNode)Node();
			return newNode;
		}

		/// Reserve a node with specified key and value.
		Node* ReserveNode(const T& key, const U& value)
		{
			Node* newNode = (Node*)AllocateMemoryP(sizeof(Node));
			new(newNode)Node(key, value);
			return newNode;
		}

		/// Free a node.
		void FreeNode(Node* node)
		{
			(node)->~Node();
			FreeMemoryP(node);
		}

		/// Rehash the buckets.
		void Rehash()
		{
			for (Iterator i = Begin(); i != End(); ++i)
			{
				Node* node = static_cast<Node*>(i.ptr_);
				unsigned hashKey = Hash(i->first_);
				node->down_ = Ptrs()[hashKey];
				Ptrs()[hashKey] = node;
			}
		}

		/// Compare two nodes.
		static bool CompareNodes(Node*& lhs, Node*& rhs) { return lhs->pair_.first_ < rhs->pair_.first_; }

		/// Compute a hash based on the key and the bucket size
		unsigned Hash(const T& key) const { return MakeHash(key) & (NumBuckets() - 1); }
	};

	template <class T, class U> typename HashMap<T, U>::ConstIterator begin(const HashMap<T, U>& v) { return v.Begin(); }

	template <class T, class U> typename HashMap<T, U>::ConstIterator end(const HashMap<T, U>& v) { return v.End(); }

	template <class T, class U> typename HashMap<T, U>::Iterator begin(HashMap<T, U>& v) { return v.Begin(); }

	template <class T, class U> typename HashMap<T, U>::Iterator end(HashMap<T, U>& v) { return v.End(); }

#pragma warning(pop)

#endif // _MLSTRING_H_252d9413_55ca_4d44_976f_c0dcecd5afd4_
#ifndef _HASHTABLE_H_f92cdc12_70f0_4679_aa3d_d9e1a22117ed_
#define _HASHTABLE_H_f92cdc12_70f0_4679_aa3d_d9e1a22117ed_

	template<typename TYPE, ULONG_PTR INITIAL_TABLE_SIZE = 521>
	class HashTableT
	{
		typedef TypeTraits<TYPE> VALUE_TYPE;

		typedef typename VALUE_TYPE::VALUE_TYPE      VALUE;
		typedef typename VALUE_TYPE::REF_TYPE        VALUE_REF;
		typedef typename VALUE_TYPE::CONST_REF_TYPE  CONST_VALUE_REF;
		typedef VALUE   *PVALUE;


		typedef struct HASH_VALUE
		{
			ULONG           Index;
			ULARGE_INTEGER  Key;

			HASH_VALUE()
			{
				Reset();
			}

			ForceInline BOOL Valid()
			{
				return this->Key.QuadPart != 0;
			}

			ForceInline VOID Reset()
			{
				ZeroMemory(this, sizeof(*this));
			}

			BOOL operator== (const HASH_VALUE& that)
			{
				return this->Key.QuadPart == that.Key.QuadPart;
			}

		} HASH_VALUE;

		typedef struct
		{
			HASH_VALUE  Hash;
			VALUE       Element;

		} HASH_TABLE_ITEM, *PHASH_TABLE_ITEM;


		typedef HASH_TABLE_ITEM HashTableEntry;

		template<class KEY_TYPE>
		class Hasher
		{
		public:
			static HASH_VALUE Hash(HashTableT* thiz, typename TypeTraits<KEY_TYPE>::CONST_REF_TYPE Key);
		};

#define HASHER_END };
#define HASHER(type, argtype) \
    template<> class Hasher<type> \
												    { \
    public: \
        static HASH_VALUE Hash(HashTableT* thiz, argtype Key)

		HASHER(PWSTR, PWSTR)
		{
			return thiz->HashString(Key);
		}
		HASHER_END

			HASHER(PCWSTR, PCWSTR)
		{
			return thiz->HashString(Key);
		}
		HASHER_END

			HASHER(INT32, INT32)
		{
			return thiz->HashData(&Key, sizeof(Key));
		}
		HASHER_END

			HASHER(INT64, INT64)
		{
			return thiz->HashData(&Key, sizeof(Key));
		}
		HASHER_END

			HASHER(UINT32, UINT32)
		{
			return thiz->HashData(&Key, sizeof(Key));
		}
		HASHER_END

			HASHER(UINT64, UINT64)
		{
			return thiz->HashData(&Key, sizeof(Key));
		}
		HASHER_END

			HASHER(LONG, LONG)
		{
			return thiz->HashData(&Key, sizeof(Key));
		}
		HASHER_END

			HASHER(ULONG, ULONG)
		{
			return thiz->HashData(&Key, sizeof(Key));
		}
		HASHER_END

													public:
														NoInline HashTableT()
														{
															this->Entries = nullptr;
															this->CalcTable = nullptr;
															this->TableUsedSize = 0;
															this->TableSize = 0;

															this->GrowthFactor = 1.3;
														}

														NoInline ~HashTableT()
														{
															SafeDeleteT(this->CalcTable);
															SafeDeleteArrayT(this->Entries);
														}

														NoInline NTSTATUS Initialize()
														{
															HashTableEntry *Entry;

															ml::MlInitialize();
															this->CalcTable = new ULONG[this->CalcTableSize];
															if (this->CalcTable == nullptr)
																return STATUS_NO_MEMORY;

															ULONG Seed = 0x00100001;

															for (int index1 = 0; index1 != 0x100; index1++)
															{
																for (int index2 = index1, i = 5; i != 0; index2 += 0x100, --i)
																{
																	ULONG temp1, temp2;

																	Seed = (Seed * 125 + 3) % 0x2AAAAB;
																	temp1 = (Seed & 0xFFFF) << 16;
																	Seed = (Seed * 125 + 3) % 0x2AAAAB;
																	temp2 = (Seed & 0xFFFF);
																	this->CalcTable[index2] = temp1 | temp2;
																}
															}

															return STATUS_SUCCESS;
														}

														ULONG_PTR Count()
														{
															return this->TableUsedSize;
														}

														ULONG_PTR Size()
														{
															return this->TableSize;
														}

														NoInline HASH_VALUE HashString(PCSTR Ansi, ULONG_PTR Length = -1)
														{
															PSTR Local;

															if (Length == -1)
																Length = StrLengthA(Ansi);

															//Local = (PSTR)AllocStack(Length);
															//CopyMemory(Local, Ansi, Length);
															//StringUpperA(Local, Length);
															Local = (PSTR)Ansi;

															return HashData(Local, Length);
														}

														NoInline HASH_VALUE HashString(PCWSTR Unicode, ULONG_PTR Length = -1)
														{
															PWSTR Local;

															if (Length == -1)
																Length = StrLengthW(Unicode);

															Length *= sizeof(Unicode[0]);

															//Local = (PWSTR)AllocStack(Length);
															//CopyMemory(Local, Unicode, Length);
															//StringUpperW(Local, Length / sizeof(Unicode[0]));
															Local = (PWSTR)Unicode;

															return HashData(Local, Length);
														}

														ForceInline VOID Update(ULONG b, ULONG& v1, ULONG& v2, ULONG t)
														{
															v1 = this->CalcTable[(t << 8) + b] ^ (v1 + v2);
															v2 = b + v1 + v2 + (v2 << 5) + 3;
														}

														NoInline HASH_VALUE HashData(PVOID Bytes, ULONG_PTR Length)
														{
															ULONG       Seed1, Seed2, Seed3, b;
															PBYTE       Data;
															HASH_VALUE  Hash;

															Data = (PBYTE)Bytes;

															Hash.Index = 0x7FED7FED;
															Hash.Key.LowPart = 0x7FED7FED;
															Hash.Key.HighPart = 0x7FED7FED;

															Seed1 = 0xEEEEEEEE;
															Seed2 = 0xEEEEEEEE;
															Seed3 = 0xEEEEEEEE;
															for (; Length; Length--)
															{
																b = *Data++;

																Update(b, Hash.Index, Seed1, 0);
																Update(b, Hash.Key.LowPart, Seed2, 1);
																Update(b, Hash.Key.HighPart, Seed3, 2);
															}

															return Hash;
														}

														template<typename KEY_TYPE>
														NoInline VALUE_REF Add(const KEY_TYPE& Key, CONST_VALUE_REF Value)
														{
															return AddElement(Hasher<KEY_TYPE>::Hash(this, Key), Value).Element;
														}

														NoInline VALUE_REF Add(PVOID Key, ULONG_PTR Length, CONST_VALUE_REF Value)
														{
															return AddElement(HashData(Key, Length), Value).Element;
														}

														template<typename KEY_TYPE>
														NoInline PVALUE Get(const KEY_TYPE& Key)
														{
															return LookupElement(Hasher<KEY_TYPE>::Hash(this, Key));
														}

														NoInline PVALUE Get(PVOID Key, ULONG_PTR Length)
														{
															return LookupElement(HashString(Key, Length));
														}

														template<class STRING_TYPE>
														NoInline BOOL Contains(STRING_TYPE StringKey)
														{
															return Get(StringKey) != nullptr;
														}

														NoInline BOOL Contains(PVOID Bytes, ULONG_PTR Length)
														{
															return Get(Bytes, Length) != nullptr;
														}

														template<class STRING_TYPE>
														NoInline VOID Remove(STRING_TYPE StringKey)
														{
															RemoveElement(HashString(StringKey));
														}

														NoInline VOID Remove(PVOID Bytes, ULONG_PTR Length)
														{
															RemoveElement(HashData(Bytes, Length));
														}

													protected:
														NoInline NTSTATUS IncreaseCapacity()
														{
															if (this->TableSize * 3 / 4 > this->TableUsedSize)
																return STATUS_SUCCESS;

															ULONG_PTR NewSize, OldSize;
															HashTableEntry *NewEntries, *OldEntries, *Entry;

															NewSize = GetTableSize(this->TableSize == 0 ? INITIAL_TABLE_SIZE : (ULONG_PTR)(this->TableSize * this->GrowthFactor));
															NewEntries = new HashTableEntry[NewSize];
															if (NewEntries == nullptr)
																return STATUS_NO_MEMORY;

															OldEntries = this->Entries;
															OldSize = this->TableSize;

															this->Entries = NewEntries;
															this->TableSize = NewSize;
															this->TableUsedSize = 0;

															if (OldEntries == nullptr)
																return STATUS_SUCCESS;

															FOR_EACH(Entry, OldEntries, OldSize)
															{
																if (Entry->Hash.Valid())
																	AddElement(Entry->Hash, Entry->Element);
															}

															delete[] OldEntries;

															return STATUS_SUCCESS;
														}

														NoInline HASH_TABLE_ITEM& AddElement(const HASH_VALUE& Hash, CONST_VALUE_REF Element)
														{
															IncreaseCapacity();

															auto Entry = LookupEntry(Hash, TRUE);

															Entry->Hash = Hash;
															Entry->Element = Element;
															++this->TableUsedSize;

															return *Entry;
														}

														NoInline VOID RemoveElement(const HASH_VALUE& Hash)
														{
															auto Entry = LookupEntry(Hash, FALSE);

															if (Entry == nullptr)
																return;

															Entry->Hash.Reset();
															Entry->Element.~TYPE();
															--this->TableUsedSize;
														}

														NoInline PVALUE LookupElement(const HASH_VALUE& Hash)
														{
															auto Entry = this->LookupEntry(Hash, FALSE);
															return Entry == nullptr ? nullptr : &Entry->Element;
														}

														NoInline HashTableEntry* LookupEntry(const HASH_VALUE& Hash, BOOL Empty)
														{
															ULONG_PTR       Index, InitialIndex;
															HashTableEntry* Entry;

															if (this->TableSize == 0)
																return nullptr;

															InitialIndex = Hash.Index % this->TableSize;
															Index = InitialIndex;
															Entry = &this->Entries[InitialIndex];

															if (Empty == FALSE)
															{
																do
																{
																	if (Entry->Hash == Hash)
																		return Entry;

																	if (Entry->Hash.Valid() == FALSE)
																		return nullptr;

																	++Index;
																	++Entry;
																	Index = Index == this->TableSize ? 0 : Index;
																	Entry = Index == 0 ? this->Entries : Entry;

																} while (Index != InitialIndex);
															}
															else
															{
																do
																{
																	if (Entry->Hash == Hash)
																		return Entry;

																	if (Entry->Hash.Valid() == FALSE)
																		return Entry;

																	++Index;
																	++Entry;
																	Index = Index == this->TableSize ? 0 : Index;
																	Entry = Index == 0 ? this->Entries : Entry;

																} while (Index != InitialIndex);
															}

															return nullptr;
														}

														BOOL MillerRabin(ULONG64 n, ULONG_PTR k)
														{
															if (n == k)
																return TRUE;

															if (n == 2 || n == 3)
																return TRUE;

															if (n <= 1 || !(n & 1))
																return FALSE;

															ULONG64 s, d, b, e, x;

															// Factor n-1 as d 2^s
															for (s = 0, d = n - 1; !(d & 1); s++)
																d >>= 1;

															// x = k^d mod n using exponentiation by squaring
															// The squaring overflows for n >= 2^32
															for (x = 1, b = k % n, e = d; e; e >>= 1)
															{
																if (e & 1)
																	x = (x * b) % n;

																b = (b * b) % n;
															}

															// Verify k^(d 2^[0¡­s-1]) mod n != 1
															if (x == 1 || x == n - 1)
																return TRUE;

															while (s-- > 1)
															{
																x = (x * x) % n;
																if (x == 1)
																	return FALSE;

																if (x == n - 1)
																	return TRUE;
															}

															return FALSE;
														}

														BOOL IsPrime(ULONG_PTR n)
														{
															return (n > 73 &&
																!(n % 2 && n % 3 && n % 5 && n % 7 &&
																n % 11 && n % 13 && n % 17 && n % 19 && n % 23 && n % 29 &&
																n % 31 && n % 37 && n % 41 && n % 43 && n % 47 && n % 53 &&
																n % 59 && n % 61 && n % 67 && n % 71 && n % 73)
																) ? FALSE :
																MillerRabin(n, 2) && MillerRabin(n, 7) && MillerRabin(n, 61);
														}

														ULONG_PTR GetTableSize(ULONG_PTR TableSize)
														{
															if ((TableSize & 1) == 0)
																++TableSize;

															while (IsPrime(TableSize) == FALSE)
																TableSize += 2;

															return TableSize;
														}

													protected:
														HashTableEntry* Entries;
														PULONG          CalcTable;
														ULONG_PTR       TableSize;
														ULONG_PTR       TableUsedSize;
														DOUBLE          GrowthFactor;

														static const ULONG_PTR CalcTableSize = 0x500;
		};

#endif // _HASHTABLE_H_f92cdc12_70f0_4679_aa3d_d9e1a22117ed_

		//Map


#ifndef _MLNATIVEAPI_H_c2e39676_dc3c_40cd_a77e_e9a22bb61ddc_
#define _MLNATIVEAPI_H_c2e39676_dc3c_40cd_a77e_e9a22bb61ddc_

#if CPP_DEFINED


		ML_NAMESPACE_BEGIN(Native)


#ifndef _MLNTLDR_H_ce875050_5f9f_4247_aca8_371c0807af3d_
#define _MLNTLDR_H_ce875050_5f9f_4247_aca8_371c0807af3d_

#ifndef _MLNTPROCESS_H_ea409cd9_d592_4611_ba82_ef00242f7ead_
#define _MLNTPROCESS_H_ea409cd9_d592_4611_ba82_ef00242f7ead_


			ML_NAMESPACE_BEGIN(Ps);

		static const HANDLE CurrentProcess = NtCurrentProcess();
		static const HANDLE CurrentThread = NtCurrentThread();

#define INVALID_SESSION_ID  ULONG_PTR_MAX
#define INVALID_CLIENT_ID   ULONG_PTR_MAX

		ForceInline ULONG_PTR CurrentPid()
		{
			return (ULONG_PTR)Nt_CurrentTeb()->ClientId.UniqueProcess;
		}

		ForceInline ULONG_PTR CurrentTid()
		{
			return (ULONG_PTR)Nt_CurrentTeb()->ClientId.UniqueThread;
		}

		ForceInline PPEB_BASE CurrentPeb()
		{
			return Nt_CurrentPeb();
		}

		ForceInline PTEB_BASE CurrentTeb()
		{
			return Nt_CurrentTeb();
		}

		ULONG_PTR
			HandleToProcessId(
			HANDLE Process
			);

		ULONG_PTR
			HandleToThreadId(
			HANDLE Thread
			);

		HANDLE
			ProcessIdToHandle(
			ULONG_PTR ProcessId,
			ULONG_PTR Access = PROCESS_ALL_ACCESS
			);

		NTSTATUS
			ProcessIdToHandleEx(
			PHANDLE     ProcessHandle,
			ULONG_PTR   ProcessId,
			ULONG_PTR   Access = PROCESS_ALL_ACCESS
			);

		HANDLE
			ThreadIdToHandle(
			ULONG_PTR ThreadId,
			ULONG_PTR Access = THREAD_ALL_ACCESS
			);

		NTSTATUS
			ThreadIdToHandleEx(
			PHANDLE     ThreadHandle,
			ULONG_PTR   ThreadId,
			ULONG_PTR   Access = THREAD_ALL_ACCESS
			);

		ForceInline ULONG_PTR HandleToPid(HANDLE Process)
		{
			return HandleToProcessId(Process);
		}

		ForceInline ULONG_PTR HandleToTid(HANDLE Process)
		{
			return HandleToThreadId(Process);
		}

		ULONG_PTR
			HandleToThreadId(
			HANDLE Thread
			);

		template<class PidType>
		ForceInline NTSTATUS PidToHandleEx(PHANDLE ProcessHandle, PidType ProcessId, ULONG_PTR Access = PROCESS_ALL_ACCESS)
		{
			return ProcessIdToHandleEx(ProcessHandle, (ULONG_PTR)ProcessId, Access);
		}

		ForceInline HANDLE ProcessIdToHandle(HANDLE ProcessId, ULONG_PTR Access = PROCESS_ALL_ACCESS)
		{
			return ProcessIdToHandle((ULONG_PTR)ProcessId, Access);
		}

		template<class PidType>
		ForceInline HANDLE PidToHandle(PidType ProcessId, ULONG_PTR Access = PROCESS_ALL_ACCESS)
		{
			return ProcessIdToHandle((ULONG_PTR)ProcessId, Access);
		}

		ForceInline HANDLE ThreadIdToHandle(HANDLE ThreadId, ULONG_PTR Access = THREAD_ALL_ACCESS)
		{
			return ThreadIdToHandle((ULONG_PTR)ThreadId, Access);
		}

		template<class TidType>
		ForceInline HANDLE TidToHandle(TidType ThreadId, ULONG_PTR Access = THREAD_ALL_ACCESS)
		{
			return ThreadIdToHandle((ULONG_PTR)ThreadId, Access);
		}

		ULONG_PTR
			GetSessionId(
			HANDLE Process
			);

		ULONG_PTR
			GetSessionId(
			ULONG_PTR ProcessId
			);

		inline ULONG_PTR GetCurrentSessionId()
		{
			return GetSessionId(CurrentProcess);
		}

		BOOL
			IsWow64Process(
			HANDLE Process = CurrentProcess
			);

		PSYSTEM_PROCESS_INFORMATION QuerySystemProcesses();

		typedef struct ML_THREAD_CONTEXT
		{
			union
			{
				struct
				{
					BOOLEAN Rdi : 1;
					BOOLEAN Rsi : 1;
					BOOLEAN Rbp : 1;
					BOOLEAN Rsp : 1;
					BOOLEAN Rbx : 1;
					BOOLEAN Rdx : 1;
					BOOLEAN Rcx : 1;
					BOOLEAN Rax : 1;
				};

				ULONG_PTR Value;

			} Flags;

			ULONG_PTR Rdi;
			ULONG_PTR Rsi;
			ULONG_PTR Rbp;
			ULONG_PTR Rsp;
			ULONG_PTR Rbx;
			ULONG_PTR Rdx;
			ULONG_PTR Rcx;
			ULONG_PTR Rax;

			ML_THREAD_CONTEXT()
			{
				Flags.Value = 0;
			}

		} ML_THREAD_CONTEXT, *PML_THREAD_CONTEXT;

		VOID
			CDECL
			CaptureRegisters(
			PML_THREAD_CONTEXT Context
			);

		VOID
			CDECL
			SetRegisters(
			PML_THREAD_CONTEXT Context
			);

		enum
		{
			ThreadNoAlertable = FALSE,
			ThreadAlertable = TRUE,
		};

		VOID
			Sleep(
			ULONG_PTR   Milliseconds,
			BOOL        Alertable = ThreadNoAlertable
			);

#if ML_USER_MODE

		PTEB_ACTIVE_FRAME
			FindThreadFrame(
			ULONG_PTR Context
			);

		PTEB_ACTIVE_FRAME
			FindThreadFrameEx(
			ULONG_PTR Context,
			ULONG_PTR Data
			);

		NTSTATUS
			CreateProcess(
			PCWSTR                  ApplicationName,
			PWSTR                   CommandLine = NULL,
			PCWSTR                  CurrentDirectory = NULL,
			ULONG                   CreationFlags = 0,
			LPSTARTUPINFOW          StartupInfo = NULL,
			LPPROCESS_INFORMATION   ProcessInformation = NULL,
			LPSECURITY_ATTRIBUTES   ProcessAttributes = NULL,
			LPSECURITY_ATTRIBUTES   ThreadAttributes = NULL,
			PVOID                   Environment = NULL,
			HANDLE                  Token = NULL,
			BOOL                    InheritHandles = FALSE
			);


#define CPWD_NORMAL                 0
#define CPWD_BEFORE_KERNEL32        (1 << 0)
#define CPWD_BEFORE_ENTRY_POINT     (1 << 1)
#define CPWD_BEFORE_TLS_CALLBACK    (1 << 2)

		typedef struct ML_PROCESS_INFORMATION : public PROCESS_INFORMATION
		{
			PVOID FirstCallLdrLoadDll;

		} ML_PROCESS_INFORMATION, *PML_PROCESS_INFORMATION;

		NTSTATUS
			CreateProcessWithDll(
			ULONG_PTR               Flags,
			PCWSTR                  DllPath,
			PCWSTR                  ApplicationName,
			PWSTR                   CommandLine = NULL,
			PCWSTR                  CurrentDirectory = NULL,
			ULONG                   CreationFlags = 0,
			LPSTARTUPINFOW          StartupInfo = NULL,
			PML_PROCESS_INFORMATION ProcessInformation = NULL,
			LPSECURITY_ATTRIBUTES   ProcessAttributes = NULL,
			LPSECURITY_ATTRIBUTES   ThreadAttributes = NULL,
			PVOID                   Environment = NULL,
			HANDLE                  Token = NULL
			);

		NTSTATUS
			CreateThread(
			PVOID                   StartAddress,
			PVOID                   StartParameter = NULL,
			BOOL                    CreateSuspended = FALSE,
			HANDLE                  ProcessHandle = Ps::CurrentProcess,
			PHANDLE                 ThreadHandle = NULL,
			PCLIENT_ID              ClientID = NULL,
			ULONG                   ZeroBits = 0,
			ULONG_PTR               MaximumStackSize = 0,
			ULONG_PTR               CommittedStackSize = 0,
			PSECURITY_DESCRIPTOR    SecurityDescriptor = NULL
			);

		DECL_NORETURN
			VOID
			ExitProcess(
			NTSTATUS ExitStatus
			);

		inline PWSTR GetCommandLine()
		{
			return CurrentPeb()->ProcessParameters->CommandLine.Buffer;
		}

#define ThreadCallbackM(...) (PTHREAD_START_ROUTINE)(LambdaCastHelper<ULONG(NTAPI *)(__VA_ARGS__)>::FUNC)[] (__VA_ARGS__) -> ULONG

#define ThreadLambdaType(_type, ...) [] (_type __VA_ARGS__) -> ULONG
#define ThreadLambdaType_(_type, ...)  (PTHREAD_START_ROUTINE)ThreadLambdaType(_type, __VA_ARGS__)
#define ThreadLambda(...) ThreadLambdaType(ULONG_PTR, __VA_ARGS__)

		template<typename F, typename P>
		NTSTATUS
			CreateThreadT(
			const F&                StartAddress,
			P                       StartParameter = nullptr,
			BOOL                    CreateSuspended = FALSE,
			HANDLE                  ProcessHandle = Ps::CurrentProcess,
			PHANDLE                 ThreadHandle = nullptr,
			PCLIENT_ID              ClientID = nullptr,
			ULONG                   StackZeroBits = 0,
			ULONG                   StackReserved = 0,
			ULONG                   StackCommit = 0,
			PSECURITY_DESCRIPTOR    SecurityDescriptor = nullptr
			)
		{
			NTSTATUS Status;

			typedef struct StartParameterWrapper
			{
				ml::Function<ULONG(P)> func;
				P StartParameter;

				StartParameterWrapper(const F &StartAddress, const P &Parameter) : func(StartAddress), StartParameter(Parameter)
				{
				}

			} StartParameterWrapper;

			StartParameterWrapper *func;

			func = new StartParameterWrapper(StartAddress, StartParameter);
			if (func == NULL)
				return STATUS_NO_MEMORY;

			Status = CreateThread(PTHREAD_START_ROUTINE(
				[](PVOID Function) -> ULONG
			{
				ULONG RetValue;
				StartParameterWrapper *func = (StartParameterWrapper *)Function;

				RetValue = (func->func)(func->StartParameter);

				delete func;

				return RetValue;
			}),
				func,
				CreateSuspended, ProcessHandle, ThreadHandle, ClientID, StackZeroBits, StackReserved, StackCommit, SecurityDescriptor
				);

			if (NT_FAILED(Status))
			{
				delete func;
			}

			return Status;
		}

		template<typename F>
		NTSTATUS QueueApcRoutine(const F &ApcFunction, HANDLE Thread = CurrentThread)
		{
			NTSTATUS Status;
			ml::Function<void()> *func;

			func = new ml::Function<void()>(ApcFunction);
			if (func == NULL)
				return STATUS_NO_MEMORY;

			Status = NtQueueApcThread(Thread,
				[](PVOID ApcFunction, PVOID, PVOID) -> VOID
			{
				ml::Function<void()> *func = (ml::Function<void()> *)ApcFunction;

				(*func)();

				delete func;
			},
				func,
				NULL,
				NULL
				);

			if (NT_FAILED(Status))
			{
				delete func;
			}

			return Status;
		}

#else // r0

#define LambdaKernelApc(Apc) [] (PKAPC Apc, PKNORMAL_ROUTINE* NormalRoutine, PVOID* NormalContext, PVOID* SystemArgument1, PVOID* SystemArgument2) -> VOID
#define LambdaNormalApc(NormalContext) [] (PVOID NormalContext, PVOID, PVOID) -> VOID
#define NormalApcCallbackM(...) (PKNORMAL_ROUTINE)(LambdaCastHelper<VOID(NTAPI *)(__VA_ARGS__, PVOID, PVOID)>::FUNC)[] (__VA_ARGS__, PVOID, PVOID) -> VOID

		typedef struct
		{
			KAPC                Apc;
			PKKERNEL_ROUTINE    Callback;
			PVOID               Argument1;
			PVOID               Argument2;

		} ML_KERNEL_APC, *PML_KERNEL_APC;

		inline
			NTSTATUS
			QueueNormalApc(
			PETHREAD            Thread,
			PKNORMAL_ROUTINE    NormalRoutine,
			PVOID               NormalContext = nullptr,
			KPRIORITY           Increment = IO_NO_INCREMENT
			)
		{
			PKAPC       Apc;
			NTSTATUS    Status;

			Apc = new KAPC;
			if (Apc == nullptr)
				return STATUS_NO_MEMORY;

			KeInitializeApc(Apc, Thread, OriginalApcEnvironment,
				LambdaKernelApc(Apc)
			{
				delete Apc;
			},
				nullptr,
				NormalRoutine,
				KernelMode,
				NormalContext
				);

			if (KeInsertQueueApc(Apc, Apc, nullptr, Increment) == FALSE)
			{
				delete Apc;
				return STATUS_UNSUCCESSFUL;
			}

			return STATUS_SUCCESS;
		}

		inline
			NTSTATUS
			QueueNormalApc(
			HANDLE              ThreadId,
			PKNORMAL_ROUTINE    NormalRoutine,
			PVOID               NormalContext = nullptr,
			KPRIORITY           Increment = IO_NO_INCREMENT
			)
		{
			NTSTATUS Status;
			PETHREAD Thread;

			Status = PsLookupThreadByThreadId(ThreadId, &Thread);
			FAIL_RETURN(Status);

			Status = QueueNormalApc(Thread, NormalRoutine, NormalContext, Increment);
			ObDereferenceObject(Thread);

			return Status;
		}

		inline PETHREAD TidToThreadObject(HANDLE ThreadId)
		{
			PETHREAD Thread;

			return NT_FAILED(PsLookupThreadByThreadId(ThreadId, &Thread)) ? nullptr : Thread;
		}

		inline PEPROCESS PidToProcessObject(HANDLE ProcessId)
		{
			PEPROCESS Process;

			return NT_FAILED(PsLookupProcessByProcessId(ProcessId, &Process)) ? nullptr : Process;
		}

#endif // r0

		ML_NAMESPACE_END_(Ps);

#endif // _MLNTPROCESS_H_ea409cd9_d592_4611_ba82_ef00242f7ead_

		ML_NAMESPACE_BEGIN(Ldr);

		inline PVOID GetExeModuleHandle()
		{
			return (PVOID)Ps::CurrentPeb()->ImageBaseAddress;
		}

		PLDR_MODULE
			FindLdrModuleByName(
			PUNICODE_STRING ModuleName
			);

		PLDR_MODULE
			FindLdrModuleByHandle(
			PVOID BaseAddress
			);

		PIMAGE_RESOURCE_DATA_ENTRY
			FindResource(
			PVOID   Module,
			PCWSTR  Name,
			PCWSTR  Type
			);

		PVOID
			LoadResource(
			PVOID                       Module,
			PIMAGE_RESOURCE_DATA_ENTRY  ResourceDataEntry,
			PULONG                      Size = nullptr
			);

#define LOAD_PE_IGNORE_IAT              0x00000001
#define LOAD_PE_IGNORE_RELOC            0x00000002
#define LOAD_PE_DLL_NOT_FOUND_CONTINUE  0x00000004
#define LOAD_PE_NOT_RESOLVE_PATH        0x00000010
#define LOAD_PE_TOP_TO_DOWN             0x00000020

		NTSTATUS
			LoadPeImage(
			PCWSTR      FullDllPath,
			PVOID*      DllBaseAddress,
			PVOID       OldBaseAddress = nullptr,
			ULONG_PTR   Flags = 0
			);

		NTSTATUS
			UnloadPeImage(
			PVOID DllBase
			);

		NTSTATUS
			RelocPeImage(
			PVOID   ImageBuffer,
			PVOID64 ImageDefaultBase,
			PVOID   ImageOldBase = nullptr,
			PVOID   ImageNewBase = nullptr
			);

		NTSTATUS
			RelocBlock(
			PVOID                   ImageBase,
			LONG64                  ImageBaseOffset,
			PIMAGE_BASE_RELOCATION2 Relocation
			);

		PVOID
			FASTCALL
			GetRoutineAddress(
			PVOID ModuleBase,
			PCSTR ProcedureName
			);

		inline
			PVOID
			FASTCALL
			GetRoutineAddress(
			PVOID ModuleBase,
			ULONG Ordinal
			)
		{
			return GetRoutineAddress(ModuleBase, (PCSTR)(ULONG_PTR)Ordinal);
		}

		PVOID
			LoadDll(
			PCWSTR ModuleFileName
			);

		NTSTATUS
			UnloadDll(
			PVOID DllHandle
			);

		ML_NAMESPACE_END_(Ldr);

#endif // _MLNTLDR_H_ce875050_5f9f_4247_aca8_371c0807af3d_
#ifndef _MLNTMEMORY_H_3b0738ba_74a9_48c5_9804_cd1307c21092_
#define _MLNTMEMORY_H_3b0738ba_74a9_48c5_9804_cd1307c21092_


		ML_NAMESPACE_BEGIN(Mm);

#define SEC_IMAGE         0x1000000

		NTSTATUS
			AllocVirtualMemory(
			PVOID*      BaseAddress,
			ULONG_PTR   Size,
			ULONG       Protect = PAGE_EXECUTE_READWRITE,
			ULONG       AllocationType = MEM_RESERVE | MEM_COMMIT,
			HANDLE      ProcessHandle = Ps::CurrentProcess
			);

		NTSTATUS
			AllocVirtualMemoryEx(
			HANDLE      ProcessHandle,
			PVOID*      BaseAddress,
			ULONG_PTR   Size,
			ULONG       Protect = PAGE_EXECUTE_READWRITE,
			ULONG       AllocationType = MEM_RESERVE | MEM_COMMIT
			);

		NTSTATUS
			ProtectVirtualMemory(
			PVOID       BaseAddress,
			ULONG_PTR   Size,
			ULONG       NewProtect,
			PULONG      OldProtect = nullptr,
			HANDLE      ProcessHandle = Ps::CurrentProcess
			);

		NTSTATUS
			ProtectMemory(
			HANDLE      ProcessHandle,
			PVOID       BaseAddress,
			ULONG_PTR   Size,
			ULONG       NewProtect,
			PULONG      OldProtect = nullptr
			);

		NTSTATUS
			FreeVirtualMemory(
			PVOID   BaseAddress,
			HANDLE  ProcessHandle = Ps::CurrentProcess,
			ULONG   FreeType = MEM_RELEASE
			);

		NTSTATUS
			ReadMemory(
			HANDLE      ProcessHandle,
			PVOID       BaseAddress,
			PVOID       Buffer,
			ULONG_PTR   Size,
			PULONG_PTR  BytesRead = nullptr
			);

		NTSTATUS
			WriteMemory(
			HANDLE      ProcessHandle,
			PVOID       BaseAddress,
			PVOID       Buffer,
			ULONG_PTR   Size,
			PULONG_PTR  BytesWritten = nullptr
			);

		NTSTATUS
			WriteProtectMemory(
			HANDLE      ProcessHandle,
			PVOID       BaseAddress,
			PVOID       Buffer,
			ULONG_PTR   Size,
			PULONG_PTR  BytesWritten = nullptr
			);

		NTSTATUS
			QueryMappedImageName(
			HANDLE  ProcessHandle,
			PVOID   ImageBase,
			String& ImageName
			);

		ML_NAMESPACE_END_(Mm);

#endif // _MLNTMEMORY_H_3b0738ba_74a9_48c5_9804_cd1307c21092_
#ifndef _MLNTRTL_H_8ca66ccf_34b3_42f8_8dae_1a65beec3402_
#define _MLNTRTL_H_8ca66ccf_34b3_42f8_8dae_1a65beec3402_


		ML_NAMESPACE_BEGIN(Rtl);

		inline PWSTR QueryCommandLine()
		{
			return Ps::CurrentPeb()->ProcessParameters->CommandLine.Buffer;
		}

		NTSTATUS
			DosPathNameToNtPathName(
			IN  PCWSTR                  DosName,
			OUT PUNICODE_STRING         NtName,
			OUT PCWSTR*                 DEF_VAL(DosFilePath, NULL) OPTIONAL,
			OUT PRTL_RELATIVE_NAME_U    DEF_VAL(FileName, NULL) OPTIONAL
			);

		NTSTATUS
			NtPathNameToDosPathName(
			IN  PUNICODE_STRING DosPath,
			OUT PUNICODE_STRING NtPath
			);

		NTSTATUS
			GetSystemDirectory(
			PUNICODE_STRING Buffer,
			BOOL            Wow64NoRedirect = FALSE
			);

		NTSTATUS
			GetModuleDirectory(
			ml::String& Path,
			PVOID       ModuleBase = nullptr
			);

		NTSTATUS
			GetWorkingDirectory(
			PUNICODE_STRING Buffer
			);

		NTSTATUS
			SetWorkingDirectory(
			PCWSTR PathName
			);

		NTSTATUS
			SetWorkingDirectory(
			PUNICODE_STRING PathName
			);

		NTSTATUS
			SetExeDirectoryAsCurrent(
			VOID
			);

		BOOL
			IsNameInExpression(
			IN PUNICODE_STRING  Expression,
			IN PUNICODE_STRING  Name,
			IN BOOL             DEF_VAL(IgnoreCase, TRUE),
			IN PWSTR            DEF_VAL(UpcaseTable, NULL) OPTIONAL
			);

		NTSTATUS
			EnvironmentAppend(
			PUNICODE_STRING Key,
			PUNICODE_STRING Value
			);

		inline
			BOOL
			IsNameInExpression(
			IN PCWSTR   Expression,
			IN PCWSTR   Name,
			IN BOOL     DEF_VAL(IgnoreCase, TRUE),
			IN PWSTR    DEF_VAL(UpcaseTable, NULL) OPTIONAL
			)
		{
			UNICODE_STRING ExpressionString, NameString;

			RtlInitUnicodeString(&ExpressionString, Expression);
			RtlInitUnicodeString(&NameString, Name);

			return IsNameInExpression(&ExpressionString, &NameString, IgnoreCase, UpcaseTable);
		}

		ML_NAMESPACE_END_(Rtl);

#endif // _MLNTRTL_H_8ca66ccf_34b3_42f8_8dae_1a65beec3402_
#ifndef _MLNTNLS_H_6adf14d1_ea54_410e_a7e3_0da09303e8d0_
#define _MLNTNLS_H_6adf14d1_ea54_410e_a7e3_0da09303e8d0_


		ML_NAMESPACE_BEGIN(Nls);

		NTSTATUS
			FASTCALL
			AnsiToUnicode(
			PWSTR       UnicodeBuffer,
			ULONG_PTR   BufferCount,
			PCSTR       AnsiString,
			LONG_PTR    AnsiLength = -1,
			PULONG_PTR  BytesInUnicode = nullptr
			);

		NTSTATUS
			UnicodeToAnsi(
			PSTR        AnsiBuffer,
			ULONG_PTR   BufferCount,
			PCWSTR      UnicodeString,
			LONG_PTR    UnicodeLength = -1,
			PULONG_PTR  BytesInAnsi = nullptr
			);

		NTSTATUS
			AnsiToUnicodeString(
			PUNICODE_STRING Unicode,
			PCSTR           AnsiString,
			LONG_PTR        AnsiLength = -1,
			BOOL            AllocateDestinationString = TRUE
			);

		NTSTATUS
			UnicodeToAnsiString(
			PANSI_STRING    Ansi,
			PCWSTR          UnicodeString,
			LONG_PTR        UnicodeLength = -1,
			BOOL            AllocateDestinationString = TRUE
			);

		ML_NAMESPACE_END_(Nls);

#endif // _MLNTNLS_H_6adf14d1_ea54_410e_a7e3_0da09303e8d0_
#ifndef _MLSTRING_H_8ceda0f8_e680_4166_a056_6300386e156d_
#define _MLSTRING_H_8ceda0f8_e680_4166_a056_6300386e156d_


		ML_NAMESPACE_BEGIN(Str);

		class UnicodeString : public UNICODE_STRING
		{
		protected:

		public:
			UnicodeString();
			~UnicodeString();

			NTSTATUS Create(PCWSTR Buffer, ULONG_PTR Length = -1);
			NTSTATUS Create(PCUNICODE_STRING Buffer);

			BOOL operator==(PCWSTR Buffer) const;
			BOOL operator==(PCUNICODE_STRING String) const;
			BOOL operator==(const UnicodeString &String) const;

			UnicodeString& operator=(PCWSTR Buffer);
			UnicodeString& operator=(PCUNICODE_STRING Buffer);
		};

		ML_NAMESPACE_END_(Str);

#endif // _MLSTRING_H_8ceda0f8_e680_4166_a056_6300386e156d_
#ifndef _MLNTREGISTRY_H_ffe728ea_b2d9_416c_bf5b_aea45e0fe4fc_
#define _MLNTREGISTRY_H_ffe728ea_b2d9_416c_bf5b_aea45e0fe4fc_


		ML_NAMESPACE_BEGIN(Reg);

#if !defined(HKEY_CURRENT_USER_LOCAL_SETTINGS)
#define HKEY_CURRENT_USER_LOCAL_SETTINGS    (( HKEY ) (ULONG_PTR)((LONG)0x80000007) )
#endif

#if ML_KERNEL_MODE

		typedef HANDLE HKEY;

#define HKEY_CLASSES_ROOT                   (( HKEY ) (ULONG_PTR)((LONG)0x80000000) )
#define HKEY_CURRENT_USER                   (( HKEY ) (ULONG_PTR)((LONG)0x80000001) )
#define HKEY_LOCAL_MACHINE                  (( HKEY ) (ULONG_PTR)((LONG)0x80000002) )
#define HKEY_USERS                          (( HKEY ) (ULONG_PTR)((LONG)0x80000003) )
#define HKEY_PERFORMANCE_DATA               (( HKEY ) (ULONG_PTR)((LONG)0x80000004) )
#define HKEY_PERFORMANCE_TEXT               (( HKEY ) (ULONG_PTR)((LONG)0x80000050) )
#define HKEY_PERFORMANCE_NLSTEXT            (( HKEY ) (ULONG_PTR)((LONG)0x80000060) )
#define HKEY_CURRENT_CONFIG                 (( HKEY ) (ULONG_PTR)((LONG)0x80000005) )
#define HKEY_DYN_DATA                       (( HKEY ) (ULONG_PTR)((LONG)0x80000006) )
#define HKEY_CURRENT_USER_LOCAL_SETTINGS    (( HKEY ) (ULONG_PTR)((LONG)0x80000007) )

#endif // r0

#define HKEY_MACHINE_CLASS                  (( HKEY ) (ULONG_PTR)((LONG)0x80000020) )

		PVOID
			AllocateKeyInfo(
			ULONG_PTR Size
			);

		VOID
			FreeKeyInfo(
			PVOID Info
			);

		NTSTATUS
			OpenPredefinedKeyHandle(
			PHANDLE     KeyHandle,
			HANDLE      PredefinedKey,
			ACCESS_MASK DEF_VAL(DesiredAccess, KEY_ALL_ACCESS)
			);

		NTSTATUS
			OpenKey(
			PHANDLE     KeyHandle,
			HANDLE      hKey,
			ACCESS_MASK DesiredAccess,
			PCWSTR      SubKey
			);

		NTSTATUS
			CloseKeyHandle(
			HANDLE KeyHandle
			);

		NTSTATUS
			GetKeyValue(
			HANDLE                      hKey,
			PCWSTR                      SubKey,
			PCWSTR                      ValueName,
			KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
			PVOID                       KeyValueInformation,
			ULONG                       Length,
			PULONG                      DEF_VAL(ResultLength, NULL),
			ULONG                       DEF_VAL(Flags, 0)
			);

		NTSTATUS
			GetKeyValue(
			HANDLE                          hKey,
			PCWSTR                          SubKey,
			PCWSTR                          ValueName,
			PKEY_VALUE_PARTIAL_INFORMATION* Value
			);

		NTSTATUS
			SetKeyValue(
			HANDLE      hKey,
			PCWSTR      SubKey,
			PCWSTR      ValueName,
			ULONG       ValueType,
			LPCVOID     ValueData,
			DWORD       ValueDataLength,
			ULONG_PTR   Flags = 0
			);

		NTSTATUS
			DeleteKey(
			HANDLE      hKey,
			PCWSTR      SubKey,
			ULONG_PTR   Flags = 0
			);

		NTSTATUS
			DeleteKeyValue(
			HANDLE      hKey,
			PCWSTR      SubKey,
			PCWSTR      ValueName,
			ULONG_PTR   Flags = 0
			);

		ML_NAMESPACE_END_(Reg);

#endif // _MLNTREGISTRY_H_ffe728ea_b2d9_416c_bf5b_aea45e0fe4fc_
#ifndef _MLNTEXCEPTION_H_ae088609_e9de_4aca_85ce_be784e368fc1_
#define _MLNTEXCEPTION_H_ae088609_e9de_4aca_85ce_be784e368fc1_


		ML_NAMESPACE_BEGIN(Exp);

#if ML_KERNEL_MODE

		/*
		* MessageBox() Flags
		*/
#define MB_OK                       0x00000000L
#define MB_OKCANCEL                 0x00000001L
#define MB_ABORTRETRYIGNORE         0x00000002L
#define MB_YESNOCANCEL              0x00000003L
#define MB_YESNO                    0x00000004L
#define MB_RETRYCANCEL              0x00000005L
#if(WINVER >= 0x0500)
#define MB_CANCELTRYCONTINUE        0x00000006L
#endif /* WINVER >= 0x0500 */


#define MB_ICONHAND                 0x00000010L
#define MB_ICONQUESTION             0x00000020L
#define MB_ICONEXCLAMATION          0x00000030L
#define MB_ICONASTERISK             0x00000040L

#if(WINVER >= 0x0400)
#define MB_USERICON                 0x00000080L
#define MB_ICONWARNING              MB_ICONEXCLAMATION
#define MB_ICONERROR                MB_ICONHAND
#endif /* WINVER >= 0x0400 */

#define MB_ICONINFORMATION          MB_ICONASTERISK
#define MB_ICONSTOP                 MB_ICONHAND

#define MB_DEFBUTTON1               0x00000000L
#define MB_DEFBUTTON2               0x00000100L
#define MB_DEFBUTTON3               0x00000200L
#if(WINVER >= 0x0400)
#define MB_DEFBUTTON4               0x00000300L
#endif /* WINVER >= 0x0400 */

#define MB_APPLMODAL                0x00000000L
#define MB_SYSTEMMODAL              0x00001000L
#define MB_TASKMODAL                0x00002000L
#if(WINVER >= 0x0400)
#define MB_HELP                     0x00004000L // Help Button
#endif /* WINVER >= 0x0400 */

#define MB_NOFOCUS                  0x00008000L
#define MB_SETFOREGROUND            0x00010000L
#define MB_DEFAULT_DESKTOP_ONLY     0x00020000L

#if(WINVER >= 0x0400)
#define MB_TOPMOST                  0x00040000L
#define MB_RIGHT                    0x00080000L
#define MB_RTLREADING               0x00100000L

#endif /* WINVER >= 0x0400 */

#ifdef _WIN32_WINNT
#if (_WIN32_WINNT >= 0x0400)
#define MB_SERVICE_NOTIFICATION          0x00200000L
#else
#define MB_SERVICE_NOTIFICATION          0x00040000L
#endif
#define MB_SERVICE_NOTIFICATION_NT3X     0x00040000L
#endif

#define MB_TYPEMASK                 0x0000000FL
#define MB_ICONMASK                 0x000000F0L
#define MB_DEFMASK                  0x00000F00L
#define MB_MODEMASK                 0x00003000L
#define MB_MISCMASK                 0x0000C000L

#endif // r0

		NTSTATUS
			ExceptionBox(
			PCWSTR      Text,
			PCWSTR      Title = nullptr,
			PULONG_PTR  Response = nullptr,
			ULONG_PTR   Type = MB_ICONASTERISK | MB_OK
			);

		ML_NAMESPACE_END_(Exp);

#endif // _MLNTEXCEPTION_H_ae088609_e9de_4aca_85ce_be784e368fc1_
#ifndef _MLNTLPC_H_a6aabfd9_718b_4fea_938c_b62ea34136b8_
#define _MLNTLPC_H_a6aabfd9_718b_4fea_938c_b62ea34136b8_


		ML_NAMESPACE_BEGIN(Lpc);

		typedef NTSTATUS IPC_STATUS;

		enum
		{
			IPCType_None,
			IPCType_ServerListen,
			IPCType_ServerConnected,
			IPCType_Client,
		};

		class InterProcessBase
		{
		protected:
			ULONG_PTR IpcType;

		public:
			InterProcessBase()
			{
				IpcType = IPCType_None;
			}

			ULONG_PTR GetIpcType()
			{
				return IpcType;
			}

			IPC_STATUS ReleaseAll()
			{
				return STATUS_NOT_IMPLEMENTED;
			}
		};

		class InterProcessServerBase : public InterProcessBase
		{
		public:
			InterProcessServerBase()
			{
			}
		};

		class InterProcessClientBase : public InterProcessBase
		{
		public:
			InterProcessClientBase()
			{
				IpcType = IPCType_Client;
			}
		};

		enum IPC_MESSAGE_TYPE
		{
			IpcMessageType_ConnectionRequest,
			IpcMessageType_SmallData,
		};

		typedef struct IPC_MESSAGE : public PORT_MESSAGE
		{
			PVOID GetMessageData()
			{
				return PtrAdd(this, sizeof(PORT_MESSAGE));
			}

			ULONG   MessageType;
			ULONG64 MessageDataLength;

			static const ULONG_PTR kOverhead = sizeof(ULONG) + sizeof(ULONG64);
			static const ULONG_PTR kMaxSmallDataLength = PORT_CREATE_MAXIMUM_MESSAGE_LENGTH - sizeof(PORT_MESSAGE) - kOverhead;

			union
			{
				struct
				{
					ULONG64 MaxMessageLength;

				} ConnectionRequest;

				struct
				{
					BYTE Buffer[kMaxSmallDataLength];

				} SmallData;

			} MessageData;

		} IPC_MESSAGE, *PIPC_MESSAGE;


		/************************************************************************
		InterProcessLpcServer
		************************************************************************/

		class InterProcessLpcServer : public InterProcessServerBase
		{
		protected:
			union
			{
				LPC_HANDLE          PortHandle;
				LPC_HANDLE          LpcPort;
				LPC_HANDLE          ConnectedPort;
			};

			union
			{
				struct
				{
					ULONG_PTR MaxConnectionInfoLength;
					ULONG_PTR MaxMessageLength;
					ULONG_PTR MaxSmallDataLength;

				} Listening;

				struct
				{
					PORT_VIEW           ServerView;
					REMOTE_PORT_VIEW    ClientView;
					PVOID               Context;

				} Connected;
			};

		public:
			InterProcessLpcServer();
			~InterProcessLpcServer();

			VOID Reset();
			IPC_STATUS ReleaseAll();

			operator LPC_HANDLE()
			{
				return PortHandle;
			}

			/************************************************************************
			listen
			************************************************************************/

			IPC_STATUS
				Create(
				IN PWSTR Name,
				IN ULONG MaxConnectionInfoLength = sizeof(IPC_MESSAGE),
				IN ULONG MaxMessageLength = PORT_CREATE_MAXIMUM_MESSAGE_LENGTH
				);

			IPC_STATUS
				Listen(
				IN PIPC_MESSAGE ConnectionRequest,
				IN ULONG        Timeout = INFINITE
				);

			IPC_STATUS
				Listen(
				IN PIPC_MESSAGE     ConnectionRequest,
				IN PLARGE_INTEGER   Timeout = NULL
				);

			IPC_STATUS
				Accept(
				OUT InterProcessLpcServer&  ConnectedPort,
				IN  PIPC_MESSAGE            ConnectionRequest,
				IN  BOOL                    AcceptConnection = TRUE,
				IN  PVOID                   Context = NULL OPTIONAL
				);

			/************************************************************************
			connected
			************************************************************************/

			PVOID GetDataBuffer(PIPC_MESSAGE Message)
			{
				return Message->MessageDataLength > Message->kMaxSmallDataLength ?
					this->Connected.ClientView.ViewBase :
					Message->MessageData.SmallData.Buffer;
			}

			IPC_STATUS
				Receive(
				OUT PVOID           Buffer,
				IN  ULONG_PTR       Size,
				OUT PULONG_PTR      BytesTransfered = NULL,
				OUT PVOID*          Context = NULL OPTIONAL,
				IN  ULONG           Timeout = INFINITE OPTIONAL
				);

			IPC_STATUS
				Receive(
				OUT PVOID           Buffer,
				IN  ULONG_PTR       Size,
				OUT PULONG_PTR      BytesTransfered = NULL,
				OUT PVOID*          Context = NULL OPTIONAL,
				IN  PLARGE_INTEGER  Timeout = NULL OPTIONAL
				);
		};


		/************************************************************************
		InterProcessLpcClient
		************************************************************************/

		class InterProcessLpcClient : public InterProcessClientBase
		{
		protected:
			LPC_HANDLE          ConnetionPort;
			PORT_VIEW           ClientView;
			REMOTE_PORT_VIEW    ServerView;
			PVOID               Context;
			ULONG_PTR           MaxSmallDataLength;

		public:
			InterProcessLpcClient();
			~InterProcessLpcClient();

			VOID Reset();
			IPC_STATUS ReleaseAll();

			LPC_STATUS
				Connect(
				IN PWSTR Name,
				IN ULONG MaxMessageLength = 0
				);

			LPC_STATUS
				Send(
				PVOID       Buffer,
				ULONG_PTR   Size,
				PULONG_PTR  BytesTransfered = NULL
				);
		};

		ML_NAMESPACE_END_(Lpc);

#endif // _MLNTLPC_H_a6aabfd9_718b_4fea_938c_b62ea34136b8_
#ifndef _MLNTFILEIO_H_03daa20f_84f6_4731_b996_cf4155164012_
#define _MLNTFILEIO_H_03daa20f_84f6_4731_b996_cf4155164012_


		ML_NAMESPACE_BEGIN(Io);

#if !defined(FILE_ATTRIBUTE_NO_SCRUB_DATA)
#define FILE_ATTRIBUTE_NO_SCRUB_DATA        0x00020000
#endif

#if ML_KERNEL_MODE

		//
		// Typedefs
		//

		typedef struct _SECURITY_ATTRIBUTES {
			DWORD nLength;
			LPVOID lpSecurityDescriptor;
			BOOL bInheritHandle;
		} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;


#endif // r0

		typedef struct _ML_FIND_DATA {
			ULONG           FileAttributes;
			LARGE_INTEGER   CreationTime;
			LARGE_INTEGER   LastAccessTime;
			LARGE_INTEGER   LastWriteTime;
			LARGE_INTEGER   FileSize;
			ULONG           Reserved0;
			ULONG           Reserved1;
			WCHAR           FileName[MAX_NTPATH];
			WCHAR           AlternateFileName[14];

		} ML_FIND_DATA, *PML_FIND_DATA;

		NTSTATUS
			QueryFirstFile(
			PHANDLE         Handle,
			PCWSTR          FileName,
			PML_FIND_DATA   FindFileData
			);

		NTSTATUS
			QueryNextFile(
			HANDLE          FindFileHandle,
			PML_FIND_DATA   FindFileData
			);

		inline
			NTSTATUS
			QueryClose(
			HANDLE FindFileHandle
			)
		{
#if ML_KERNEL_MODE
			return ZwClose(FindFileHandle);
#elif ML_USER_MODE
			return NtClose(FindFileHandle);
#endif
		}

		ULONG_PTR
			QueryFileAttributes(
			PCWSTR FileName
			);

		NTSTATUS
			QueryFileAttributesEx(
			PCWSTR      FileName,
			PULONG_PTR  FileAttributes
			);

		NTSTATUS
			ApplyFileAttributes(
			PCWSTR      FileName,
			ULONG_PTR   Attributes
			);

		NTSTATUS
			MoveFile(
			PCWSTR  ExistingFileName,
			PCWSTR  NewFileName,
			BOOL    DEF_VAL(ReplaceIfExists, FALSE)
			);

		NTSTATUS
			CopyFile(
			PCWSTR  ExistingFileName,
			PCWSTR  NewFileName,
			BOOL    FailIfExists
			);

		NTSTATUS
			DeleteFile(
			PCWSTR FileName
			);

		NTSTATUS
			DeleteDirectory(
			PCWSTR DirectoryName
			);

		BOOL
			IsPathExists(
			PCWSTR Path
			);

		NTSTATUS
			QueryDosLetterFromVolumeDeviceName(
			OUT PUNICODE_STRING DosLetter,
			IN  PUNICODE_STRING NtDeviceName
			);

		NTSTATUS
			QueryDosPathFromHandle(
			OUT PUNICODE_STRING DosPath,
			IN  HANDLE          FileHandle
			);

		NTSTATUS
			QueryDosDevice(
			PCWSTR          DeviceName,
			PUNICODE_STRING TargetPath
			);

		NTSTATUS
			QueryDosPathFromNtDeviceName(
			OUT PUNICODE_STRING DosPath,
			IN  PUNICODE_STRING NtDeviceName
			);

		NTSTATUS
			CreateNamedPipe(
			OUT PHANDLE                 ReadPipe,
			OUT PHANDLE                 WritePipe,
			IN  PUNICODE_STRING         DEF_VAL(PipeName, nullptr) OPTIONAL,
			IN  PSECURITY_ATTRIBUTES    DEF_VAL(PipeAttributes, nullptr) OPTIONAL,
			IN  ULONG_PTR               DEF_VAL(BufferSize, 0) OPTIONAL
			);

		template<typename F, typename P>
		NTSTATUS
			SetAsyncCall(
			CONST F&    Callback,
			ULONG64     DueTime,
			LONG        Period = 0,
			CONST P&    Context = nullptr
			)
		{
			NTSTATUS        Status;
			HANDLE          Timer;
			LARGE_INTEGER   _DueTime;

			typedef struct PARAMETER
			{
				ml::Function<BOOL(P)> func;
				P Context;
				LONG Period;
				HANDLE Timer;

				PARAMETER(const F &Callback, const P &Context, const LONG &Period) : func(Callback), Context(Context)
				{
					this->Period = Period;
					this->Timer = nullptr;
				}

				~PARAMETER()
				{
					if (this->Timer != nullptr)
					{
						NtCancelTimer(this->Timer, nullptr);
						NtClose(this->Timer);
					}
				}

			} PARAMETER;

			PARAMETER *func = new PARAMETER(Callback, Context, Period);
			if (func == nullptr)
				return STATUS_NO_MEMORY;

			Status = NtCreateTimer(&Timer, TIMER_ALL_ACCESS, nullptr, SynchronizationTimer);
			if (NT_FAILED(Status))
			{
				delete func;
				return Status;
			}

			func->Timer = Timer;
			FormatTimeOut(&_DueTime, DueTime);

			Status = NtSetTimer(Timer, &_DueTime,
				[](PVOID p, ULONG, LONG)
			{
				PARAMETER *param = (PARAMETER *)p;
				BOOL cancel = param->func(param->Context);
				if (param->Period == 0 || cancel)
				{
					delete param;
				}
			},
				func, FALSE, Period, nullptr
				);

			if (NT_FAILED(Status))
			{
				delete func;
			}

			return Status;
		}

		template<typename F>
		NTSTATUS
			SetAsyncCall(
			CONST F&    Callback,
			ULONG64     DueTime,
			LONG        Period = 0
			)
		{
			NTSTATUS        Status;
			HANDLE          Timer;
			LARGE_INTEGER   _DueTime;

			typedef struct PARAMETER
			{
				ml::Function<BOOL()> func;
				LONG Period;
				HANDLE Timer;

				PARAMETER(const F &Callback, const LONG &Period) : func(Callback)
				{
					this->Period = Period;
					this->Timer = nullptr;
				}

				~PARAMETER()
				{
					if (this->Timer != nullptr)
					{
						NtCancelTimer(this->Timer, nullptr);
						NtClose(this->Timer);
					}
				}

			} PARAMETER;

			PARAMETER *func = new PARAMETER(Callback, Period);
			if (func == nullptr)
				return STATUS_NO_MEMORY;

			Status = NtCreateTimer(&Timer, TIMER_ALL_ACCESS, nullptr, SynchronizationTimer);
			if (NT_FAILED(Status))
			{
				delete func;
				return Status;
			}

			func->Timer = Timer;
			FormatTimeOut(&_DueTime, DueTime);

			Status = NtSetTimer(Timer, &_DueTime,
				[](PVOID p, ULONG, LONG)
			{
				PARAMETER *param = (PARAMETER *)p;
				BOOL cancel = param->func();
				if (param->Period == 0 || cancel)
				{
					delete param;
				}
			},
				func, FALSE, Period, nullptr
				);

			if (NT_FAILED(Status))
			{
				delete func;
			}

			return Status;
		}

		ML_NAMESPACE_END_(Io);

#endif // _MLNTFILEIO_H_03daa20f_84f6_4731_b996_cf4155164012_
#ifndef _MLNTOBJECT_H_a9853fbd_9aa2_4bfd_8efc_84dfd9ff9679_
#define _MLNTOBJECT_H_a9853fbd_9aa2_4bfd_8efc_84dfd9ff9679_


		ML_NAMESPACE_BEGIN(Ob);

#if ML_KERNEL_MODE

		NTSTATUS
			CreateObjectType(
			IN  PUNICODE_STRING             TypeName,
			IN  POBJECT_TYPE_INITIALIZER    ObjectTypeInitializer,
			OUT POBJECT_TYPE*               ObjectType
			);

#endif // r0

		ML_NAMESPACE_END_(Ob);

#endif // _MLNTOBJECT_H_a9853fbd_9aa2_4bfd_8efc_84dfd9ff9679_
#ifndef _MLNTGDI_H_27034c70_52be_440c_9442_2e83bff34107_
#define _MLNTGDI_H_27034c70_52be_440c_9442_2e83bff34107_


#if ML_USER_MODE

		ML_NAMESPACE_BEGIN(Gdi);

		typedef struct
		{
			USHORT MajorVersion;
			USHORT MinorVersion;
			USHORT NumOfTables;
			USHORT SearchRange;
			USHORT EntrySelector;
			USHORT RangeShift;

		} TT_OFFSET_TABLE;

		// Tables in TTF file and there placement and name (tag)

		typedef struct
		{
			ULONG Tag;      // table name
			ULONG CheckSum; // Check sum
			ULONG Offset;   // Offset from beginning of file
			ULONG Length;   // length of the table in bytes

		} TT_TABLE_DIRECTORY;

		//Header of names table

		typedef struct
		{
			USHORT FormatSelector;    // format selector. Always 0
			USHORT NameRecordCount;   // Name Records count
			USHORT StorageOffset;     // Offset for strings storage, from start of the table

		} TT_NAME_TABLE_HEADER, *PTT_NAME_TABLE_HEADER;

		// Record in names table

		enum
		{
			TT_PLATFORM_ID_MAC_OS = 0x0100,
			TT_PLATFORM_ID_WINDOWS = 0x0300,

			TT_TABLE_TAG_NAME = TAG4('name'),
			TT_TABLE_TAG_CMAP = TAG4('cmap'),

			TT_ENCODEING_ID_ANSI = 0x0000,
			TT_ENCODEING_ID_UTF16_BE = 0x0100,

			TT_NAME_ID_FACENAME = 0x0100,
			TT_NAME_ID_TYPE = 0x0200,
			TT_NAME_ID_FOUNDER = 0x0300,
			TT_NAME_ID_FULLNAME = 0x0400,
			TT_NAME_ID_VERSION = 0x0500,
		};

		typedef struct
		{
			USHORT PlatformID;
			USHORT EncodingID;
			USHORT LanguageID;
			USHORT NameID;
			USHORT StringLength;
			USHORT StringOffset; // from start of storage area

		} TT_NAME_RECORD, *PTT_NAME_RECORD;

		typedef struct
		{
			USHORT  Version;        // Table version number (0).
			USHORT	NumberOfTables; // Number of encoding tables, n.

		} TT_CMAP_TABLE_HEADER, *PTT_CMAP_TABLE_HEADER;

		typedef struct
		{
			USHORT	PlatformID;                 // Platform ID.
			USHORT	EncodingID;                 // Platform-specific encoding ID.
			ULONG	DataOffset;                 // Byte offset from beginning of table to the subtable for this encoding.

		} TT_CMAP_RECORD, *PTT_CMAP_RECORD;

#pragma pack()

		ML_NAMESPACE_END_(Gdi);

#endif // r3

#endif // _MLNTGDI_H_27034c70_52be_440c_9442_2e83bff34107_


		ML_NAMESPACE_END_(Native);

#endif // cpp

#endif // _MLNATIVEAPI_H_c2e39676_dc3c_40cd_a77e_e9a22bb61ddc_

		ML_NAMESPACE_END;

#ifndef _PATCHMEMORY_H_99edde6e_777d_4444_9611_1ae8abbe5e02_
#define _PATCHMEMORY_H_99edde6e_777d_4444_9611_1ae8abbe5e02_


#if CPP_DEFINED

#define NOP  0x90
#define CALL 0xE8
#define JUMP 0xE9
#define PUSH 0x68
#define REXW 0x49

#pragma push_macro("MP_INLINE")

#define MP_INLINE ForceInline
#define MP_CALL FASTCALL


		ML_NAMESPACE_BEGIN(Mp);

#if ML_X86
#define TRAMPOLINE_SIZE     0x40
#elif ML_AMD64
#define TRAMPOLINE_SIZE     0x100
#endif

		ML_NAMESPACE_BEGIN(PatchMemoryTypes);

		enum
		{
			MemoryPatch,
			FunctionPatch,
		};

		ML_NAMESPACE_END_(PatchMemoryTypes);

		enum
		{
			VirtualAddress = 0x00000001,

			// patch
			BackupData = 0x00000002,
			DataIsBuffer = 0x00000004,

			// function
			DoNotDisassemble = 0x00000002,
			NakedTrampoline = 0x00000004,
			KeepRawTrampoline = 0x00000008,
			ExecuteTrampoline = 0x00000010,

			OpMask = 0xF0000000,
			OpJump = 0x00000000,
			OpCall = 0x10000000,
			OpPush = 0x20000000,
			OpJRax = 0x30000000,
			OpJRcx = 0x40000000,
			OpJRdx = 0x50000000,
			OpJRbx = 0x60000000,
			OpJRbp = 0x70000000,
			OpJRsi = 0x80000000,
			OpJRdi = 0x90000000,
			OpJR10 = 0xA0000000,
		};

		typedef struct
		{

#if ML_X86

			ULONG_PTR EFlags;
			ULONG_PTR Rdi;
			ULONG_PTR Rsi;
			ULONG_PTR Rbp;
			ULONG_PTR Rbx;
			ULONG_PTR Rdx;
			ULONG_PTR Rcx;
			ULONG_PTR Rax;
			ULONG_PTR Rsp;

#elif ML_AMD64

			ULONG_PTR EFlags;
			ULONG_PTR Rax;
			ULONG_PTR Rcx;
			ULONG_PTR Rdx;
			ULONG_PTR Rbx;
			//ULONG_PTR Rsp;
			ULONG_PTR Rbp;
			ULONG_PTR Rsi;
			ULONG_PTR Rdi;

			ULONG_PTR R8;
			ULONG_PTR R9;
			ULONG_PTR R10;
			ULONG_PTR R11;
			ULONG_PTR R12;
			ULONG_PTR R13;
			ULONG_PTR R14;
			ULONG_PTR R15;

#endif // arch

			ULONG_PTR ReturnAddress;

#if ML_X86

			PVOID GetArgument(LONG_PTR Index)
			{
				return *(PVOID *)(this->Rsp + (Index + 1) * sizeof(this->Rsp));
			}

			template<class T>
			VOID SetArgument(LONG_PTR Index, T Value)
			{
				*(T *)(this->Rsp + (Index + 1) * sizeof(this->Rsp)) = Value;;
			}

#endif

		} TRAMPOLINE_NAKED_CONTEXT, *PTRAMPOLINE_NAKED_CONTEXT;

		typedef struct
		{
			ULONG_PTR PatchType;

			union
			{
				struct
				{
					union
					{
						ULONG Flags;
						struct
						{
							BOOLEAN VirtualAddress : 1;
							BOOLEAN BackupData : 1;
							BOOLEAN DataIsBuffer : 1;
						};
					} Options;

					ULONG64     Data;
					ULONG_PTR   Size;
					ULONG_PTR   Address;
					ULONG64     Backup;

				} Memory;

				struct
				{
					union
					{
						ULONG Flags;
						struct
						{
							BOOLEAN VirtualAddress : 1;
							BOOLEAN DoNotDisassemble : 1;
							BOOLEAN NakedTrampoline : 1;
							BOOLEAN KeepRawTrampoline : 1;
							BOOLEAN ExecuteTrampoline : 1;
						};
					} Options;

					ULONG_PTR   HookOp;
					ULONG_PTR   Source;
					PVOID       Target;
					PVOID*      Trampoline;
					ULONG_PTR   NopBytes;

				} Function;
			};

		} PATCH_MEMORY_DATA, *PPATCH_MEMORY_DATA;

		typedef struct _TRAMPOLINE_DATA
		{
			BYTE                Trampoline[TRAMPOLINE_SIZE];
			BYTE                OriginalCode[TRAMPOLINE_SIZE];
			ULONG               TrampolineSize;
			ULONG               OriginSize;
			PVOID               JumpBackAddress;
			PATCH_MEMORY_DATA   PatchData;

		} TRAMPOLINE_DATA, *PTRAMPOLINE_DATA;



		template<class TYPE>
		MP_INLINE PVOID __AnyToPtr__(const TYPE &Val)
		{
			union
			{
				TYPE Val;
				PVOID Ptr;
			} u;

			u.Ptr = nullptr;
			u.Val = Val;

			return u.Ptr;
		}

		/************************************************************************
		MemoryPatch
		************************************************************************/

		MP_INLINE PATCH_MEMORY_DATA MemoryPatch(ULONG64 Data, ULONG_PTR Size, ULONG_PTR Address, ULONG Flags)
		{
			PATCH_MEMORY_DATA PatchData;

			PatchData.PatchType = PatchMemoryTypes::MemoryPatch;
			PatchData.Memory.Options.Flags = Flags;

			PatchData.Memory.Data = Data;
			PatchData.Memory.Size = Size;
			PatchData.Memory.Address = Address;

			PatchData.Memory.Backup = 0;

			return PatchData;
		}

		MP_INLINE PATCH_MEMORY_DATA MemoryPatchRva(ULONG64 Data, ULONG_PTR Size, ULONG_PTR RVA, ULONG Flags = 0)
		{
			return MemoryPatch((ULONG64)Data, Size, (ULONG_PTR)RVA, Flags);
		}

		MP_INLINE PATCH_MEMORY_DATA MemoryPatchRva(PVOID Data, ULONG_PTR Size, ULONG_PTR RVA, ULONG Flags = 0)
		{
			return MemoryPatch((ULONG64)Data, Size, (ULONG_PTR)RVA, Flags | DataIsBuffer);
		}

		template<class VA_TYPE>
		MP_INLINE PATCH_MEMORY_DATA MemoryPatchVa(ULONG64 Data, ULONG_PTR Size, VA_TYPE Address, ULONG Flags = 0)
		{
			return MemoryPatch((ULONG64)Data, Size, (ULONG_PTR)__AnyToPtr__(Address), Flags | VirtualAddress);
		}

		template<class VA_TYPE>
		MP_INLINE PATCH_MEMORY_DATA MemoryPatchVa(PVOID Data, ULONG_PTR Size, VA_TYPE Address, ULONG Flags = 0)
		{
			return MemoryPatchVa((ULONG64)Data, Size, Address, Flags | VirtualAddress | DataIsBuffer);
		}

		/************************************************************************
		FunctionPatch
		************************************************************************/

		MP_INLINE PATCH_MEMORY_DATA FunctionPatch(PVOID Source, PVOID Target, PVOID Trampoline, ULONG Flags)
		{
			PATCH_MEMORY_DATA PatchData;

			PatchData.PatchType = PatchMemoryTypes::FunctionPatch;
			PatchData.Function.Options.Flags = Flags;
			PatchData.Function.HookOp = Flags & OpMask;

			PatchData.Function.Source = (ULONG_PTR)Source;
			PatchData.Function.Target = Target;
			PatchData.Function.Trampoline = (PVOID *)Trampoline;
			PatchData.Function.NopBytes = 0;

			return PatchData;
		}

		template<class SOURCE_TYPE, class TARGET_TYPE>
		MP_INLINE PATCH_MEMORY_DATA FunctionJumpVa(SOURCE_TYPE Source, TARGET_TYPE Target, PVOID Trampoline = nullptr, ULONG Flags = OpJump)
		{
			return FunctionPatch(__AnyToPtr__(Source), __AnyToPtr__((SOURCE_TYPE)Target), Trampoline, Flags | VirtualAddress);
		}

		template<class TARGET_TYPE>
		MP_INLINE PATCH_MEMORY_DATA FunctionJumpRva(ULONG_PTR SourceRva, TARGET_TYPE Target, PVOID Trampoline = nullptr, ULONG Flags = OpJump)
		{
			return FunctionPatch((PVOID)SourceRva, __AnyToPtr__(Target), Trampoline, Flags);
		}

		template<class SOURCE_TYPE, class TARGET_TYPE>
		MP_INLINE PATCH_MEMORY_DATA FunctionCallVa(SOURCE_TYPE Source, TARGET_TYPE Target, PVOID Trampoline = nullptr, ULONG Flags = OpCall)
		{
			return FunctionPatch(__AnyToPtr__(Source), __AnyToPtr__((SOURCE_TYPE)Target), Trampoline, Flags | VirtualAddress);
		}

		template<class TARGET_TYPE>
		MP_INLINE PATCH_MEMORY_DATA FunctionCallRva(ULONG_PTR SourceRva, TARGET_TYPE Target, PVOID Trampoline = nullptr, ULONG Flags = OpCall)
		{
			return FunctionPatch((PVOID)SourceRva, __AnyToPtr__(Target), Trampoline, Flags);
		}


		NTSTATUS
			MP_CALL
			PatchMemory(
			PPATCH_MEMORY_DATA  PatchData,
			ULONG_PTR           PatchCount,
			PVOID               BaseAddress = nullptr
			);

		NTSTATUS
			MP_CALL
			RestoreMemory(
			PTRAMPOLINE_DATA TrampolineData
			);

		template<class TRAMPOLINE_PTR> inline NTSTATUS RestoreMemory(TRAMPOLINE_PTR& Trampoline)
		{
			NTSTATUS Status;

			if (Trampoline == nullptr)
				return STATUS_SUCCESS;

			Status = RestoreMemory(FIELD_BASE(Trampoline, TRAMPOLINE_DATA, Trampoline));
			if (NT_SUCCESS(Status))
				Trampoline = nullptr;

			return Status;
		}

		inline NTSTATUS RestoreMemory(PPATCH_MEMORY_DATA PatchData, ULONG_PTR PatchCount)
		{
			FOR_EACH(PatchData, PatchData, PatchCount)
			{
				switch (PatchData->PatchType)
				{
				case PatchMemoryTypes::MemoryPatch:
					break;

				case PatchMemoryTypes::FunctionPatch:
					if (PatchData->Function.Trampoline != nullptr)
						RestoreMemory(*PatchData->Function.Trampoline);
					break;
				}
			}

			return STATUS_SUCCESS;
		}

		ML_NAMESPACE_END_(Mp);

		/************************************************************************
		helper function
		************************************************************************/

		template<class PtrType>
		MP_INLINE
			PtrType GetCallDestination(PtrType Buffer)
		{
			union
			{
				PtrType     Pointer;
				ULONG_PTR   Value;
			};

			Pointer = Buffer;
			Value = *(PLONG)(Value + 1) + Value + sizeof(ULONG) + 1;

			return Pointer;
		}

		NTSTATUS
			CopyOneOpCode(
			PVOID       Target,
			PVOID       Source,
			PULONG_PTR  DestinationOpLength,
			PULONG_PTR  SourceOpLength,
			ULONG_PTR   ForwardSize,
			ULONG_PTR   BackwardSize,
			PVOID       TargetIp = IMAGE_INVALID_VA
			);

		MP_INLINE ULONG_PTR GetOpCodeSize32(PVOID Buffer)
		{
			return LdeGetOpCodeSize32(Buffer);
		}

		MP_INLINE ULONG_PTR GetOpCodeSize64(PVOID Buffer)
		{
			return LdeGetOpCodeSize64(Buffer);
		}

		MP_INLINE ULONG_PTR GetOpCodeSize(PVOID Buffer)
		{
#if ML_AMD64
			return GetOpCodeSize64(Buffer);
#elif ML_X86
			return GetOpCodeSize32(Buffer);
#endif
		}

		//#pragma pop_macro("MP_CALL")
#pragma pop_macro("MP_INLINE")

#endif // cpp


#endif // _PATCHMEMORY_H_99edde6e_777d_4444_9611_1ae8abbe5e02_
#ifndef _SUNDAY_H_067e925d_ef1c_4241_b685_578bcbcf26d4_
#define _SUNDAY_H_067e925d_ef1c_4241_b685_578bcbcf26d4_


		inline PVoid Sunday(PCVoid Buffer, LongPtr BufferSize, PCVoid Pattern, LongPtr PatternSize)
		{
			LongPtr occ[256];
			LongPtr Index, SearchLength;

			if (PatternSize > BufferSize)
				return nullptr;

			FillMemory(occ, sizeof(occ), -1);
			for (Index = 0; Index != PatternSize; ++Index)
			{
				occ[((PByte)Pattern)[Index]] = Index;
			}

			for (LongPtr Begin = 0; Begin != BufferSize - PatternSize;)
			{
				LongPtr i = Begin, j = 0;

				for (; j < PatternSize && i < BufferSize && ((PByte)Buffer)[i] == ((PByte)Pattern)[j]; ++i, ++j);

				if (j == PatternSize)
					return &((PByte)Buffer)[Begin];

				if (Begin + PatternSize >= BufferSize)
					return nullptr;

				Begin += PatternSize - occ[((PByte)Buffer)[Begin + PatternSize]];
			}

			return nullptr;
		}

#endif // _SUNDAY_H_067e925d_ef1c_4241_b685_578bcbcf26d4_
#ifndef _ACAUTOMATION_H_c7409518_683e_4837_902d_973c3a4ca8ed_
#define _ACAUTOMATION_H_c7409518_683e_4837_902d_973c3a4ca8ed_


#if CPP_DEFINED



#if !defined(COMPACT_TRIE_MAGIC)
#define COMPACT_TRIE_MAGIC  TAG4('TRIE')
#endif // COMPACT_TRIE_MAGIC

#define TRIE_DEBUG 1


		_ML_CPP_HEAD_


			using ml::GrowableArray;


		typedef ULONG NODE_CONTEXT, *PNODE_CONTEXT;

		typedef ULONG  UNSIGNED_OFFSET, *PUNSIGNED_OFFSET;
		//typedef LONG   SIGNED_OFFSET, *PSIGNED_OFFSET;

		ML_NAMESPACE_BEGIN(TrieBitsIndex)

		enum
		{
			Flags = 32,
			NodeCount = 33,

			Max,
		};

		ML_NAMESPACE_END_(TrieBitsIndex);

		ML_NAMESPACE_BEGIN(TrieBitsFlags)

		enum
		{
			HasContext = 0x01,
			HasNodes = 0x02,
		};

		ML_NAMESPACE_END_(TrieBitsFlags);

		static const ULONG_PTR MAXIMUM_NEXT_NODE = 256;

		typedef struct TRIE_NODE
		{
			typedef TRIE_NODE *PTRIE_NODE;

			static const ULONG_PTR kInvalidIndex = ULONG_PTR_MAX;

			union
			{
				PVOID           Pointer;
				NODE_CONTEXT    Value;

			} Context;

			PTRIE_NODE Failure;

			BYTE SlotsFlags[TrieBitsIndex::Flags + 1];
			BYTE SlotIndex[MAXIMUM_NEXT_NODE];

			GrowableArray<PTRIE_NODE> Next2;

			TRIE_NODE()
			{
				ZeroMemory(this, sizeof(*this));
				Context.Pointer = (PVOID)-1;
			}

			VOID SetFlags(ULONG_PTR Flags)
			{
				SET_FLAG(SlotsFlags[TrieBitsIndex::Flags], Flags);
			}

			BOOL TestFlags(ULONG_PTR Flags)
			{
				return FLAG_ON(SlotsFlags[TrieBitsIndex::Flags], Flags);
			}

			PTRIE_NODE GetNext(ULONG_PTR Index)
			{
				if (FLAG_OFF(SlotsFlags[Index / 8], 1 << (Index % 8)))
					return nullptr;

				return Next2[SlotIndex[Index]];
			}

			PTRIE_NODE* AllocateSlot(ULONG_PTR Index)
			{
				NTSTATUS Status;

				if (FLAG_OFF(SlotsFlags[Index / 8], 1 << (Index % 8)))
				{
					PTRIE_NODE empty = nullptr;
					Status = Next2.Add(empty);
					if (NT_FAILED(Status))
						return nullptr;

					SET_FLAG(SlotsFlags[Index / 8], 1 << (Index % 8));
					SlotIndex[Index] = (BYTE)(Next2.GetSize() - 1);
				}

				return &Next2[SlotIndex[Index]];
			}

		} TRIE_NODE, *PTRIE_NODE;

		typedef struct
		{
			PVOID           Data;
			ULONG_PTR       SizeInBytes;
			NODE_CONTEXT    Context;

		} TRIE_BYTES_ENTRY, *PTRIE_BYTES_ENTRY;

#define ADD_TRIE_STRING(_str, ...) { _str, CONST_STRLEN(_str) * sizeof(_str[0]), __VA_ARGS__ }

		typedef struct
		{
			ULONG Magic;
			ULONG IndexBitsTableOffset;
			ULONG IndexTableOffset;
			ULONG OffsetTableOffset;
			ULONG NodesDataOffset;
			ULONG Reserve[3];

		} COMPACT_TRIE_HEADER, *PCOMPACT_TRIE_HEADER;

		typedef struct TRIE_NODE_OFFSET_TABLE_ENTRY
		{
			UNSIGNED_OFFSET   IndexBitsOffset;
			UNSIGNED_OFFSET   IndexOffset;

			TRIE_NODE_OFFSET_TABLE_ENTRY(ULONG_PTR IndexBitsOffset = 0, ULONG_PTR IndexOffset = 0)
			{
				this->IndexBitsOffset = (UNSIGNED_OFFSET)IndexBitsOffset;
				this->IndexOffset = (UNSIGNED_OFFSET)IndexOffset;
			}

			BOOL operator==(const TRIE_NODE_OFFSET_TABLE_ENTRY &entry)
			{
				return CompareMemory(this, &entry, sizeof(entry)) == 0;
			}

		} TRIE_NODE_OFFSET_TABLE_ENTRY, *PTRIE_NODE_OFFSET_TABLE_ENTRY;


		typedef struct COMPACT_TRIE_NODE
		{
			USHORT  OffsetTableIndex;

			//ULONG   Context;
			// ULONG RVOffsetOfNodes[];

		} COMPACT_TRIE_NODE, *PCOMPACT_TRIE_NODE;


		class CompactTrie
		{
		protected:
			PCOMPACT_TRIE_HEADER            Header;
			PBYTE                           IndexBitsTable;
			PBYTE                           IndexTable;
			PTRIE_NODE_OFFSET_TABLE_ENTRY   OffsetTable;
			PCOMPACT_TRIE_NODE              Root;

		public:

			CompactTrie()
			{
				ZeroMemory(this, sizeof(*this));
			}

			~CompactTrie()
			{
				FreeMemoryP(Header);
			}

			NTSTATUS Initialize(PVOID CompactTree, ULONG_PTR SizeOfTree)
			{
				if (((PCOMPACT_TRIE_HEADER)CompactTree)->Magic * 2 != COMPACT_TRIE_MAGIC * 2)
					return STATUS_CONTEXT_MISMATCH;

				Header = (PCOMPACT_TRIE_HEADER)AllocateMemoryP(SizeOfTree);
				if (Header == nullptr)
					return STATUS_NO_MEMORY;

				CopyMemory(Header, CompactTree, SizeOfTree);

				IndexBitsTable = (PBYTE)PtrAdd(Header, Header->IndexBitsTableOffset);
				IndexTable = (PBYTE)PtrAdd(Header, Header->IndexTableOffset);
				OffsetTable = (PTRIE_NODE_OFFSET_TABLE_ENTRY)PtrAdd(Header, Header->OffsetTableOffset);
				Root = (PCOMPACT_TRIE_NODE)PtrAdd(Header, Header->NodesDataOffset);

				return STATUS_SUCCESS;
			}

			NoInline NTSTATUS Lookup(PTRIE_BYTES_ENTRY Entry, PNODE_CONTEXT Context = nullptr)
			{
				ULONG_PTR           Index;
				PBYTE               Buffer, IndexBitsTable, IndexTable;
				PUNSIGNED_OFFSET    NextNodeOffset;
				PCOMPACT_TRIE_NODE  Node;

				if (this->Root == nullptr)
					return STATUS_NO_MORE_ENTRIES;

				if (Entry->SizeInBytes == 0)
					return STATUS_NOT_FOUND;

				Node = this->Root;

				IndexBitsTable = PtrAdd(this->IndexBitsTable, (LONG_PTR)this->OffsetTable[Node->OffsetTableIndex].IndexBitsOffset);
				IndexTable = PtrAdd(this->IndexTable, (LONG_PTR)this->OffsetTable[Node->OffsetTableIndex].IndexOffset);

				FOR_EACH(Buffer, (PBYTE)Entry->Data, Entry->SizeInBytes)
				{
					Index = Buffer[0];

					if (FLAG_OFF(IndexBitsTable[Index / 8], 1 << (Index % 8)))
						return STATUS_NOT_FOUND;

					NextNodeOffset = (PUNSIGNED_OFFSET)(Node + 1);
					Node = PtrAdd(Node, NextNodeOffset[IndexTable[Index]]);

					IndexBitsTable = PtrAdd(this->IndexBitsTable, (LONG_PTR)this->OffsetTable[Node->OffsetTableIndex].IndexBitsOffset);
					IndexTable = PtrAdd(this->IndexTable, (LONG_PTR)this->OffsetTable[Node->OffsetTableIndex].IndexOffset);
				}

				if (FLAG_OFF(IndexBitsTable[TrieBitsIndex::Flags], TrieBitsFlags::HasContext))
					return STATUS_CONTEXT_MISMATCH;

				if (Context != nullptr)
				{
					ULONG_PTR NodeCount;
					PNODE_CONTEXT NodeContext;

					NodeContext = (PNODE_CONTEXT)Node;

					NodeCount = (IndexBitsTable[TrieBitsIndex::NodeCount] + 1) & -FLAG_ON(IndexBitsTable[TrieBitsIndex::Flags], TrieBitsFlags::HasNodes);
					NodeContext = PtrAdd(NodeContext, NodeCount * sizeof(*NextNodeOffset) + sizeof(*Node));

					*Context = *NodeContext;
				}

				return STATUS_SUCCESS;
			}
		};


		template<typename NodeType = TRIE_NODE>
		class StaticTrieT
		{
		public:
			typedef NodeType *PNodeType;
			typedef GrowableArray<NodeType> NodeArray;
			typedef GrowableArray<PNodeType> NodePArray;

		protected:
			typedef struct NODE_OFFSET_MAP
			{
				PNodeType Node;
				ULONG     Offset;

				NODE_OFFSET_MAP(PNodeType Node = nullptr, ULONG Offset = 0)
				{
					this->Node = Node;
					this->Offset = Offset;
				}

			} NODE_OFFSET_MAP, *PNODE_OFFSET_MAP;

			typedef struct NODE_FIX_ENTRY
			{
				PCOMPACT_TRIE_NODE  Compact;
				PNodeType           Node;
				PUNSIGNED_OFFSET    Offset;

				NODE_FIX_ENTRY()
				{
				}

				NODE_FIX_ENTRY(PCOMPACT_TRIE_NODE Compact, PNodeType Node, PVOID Offset)
				{
					this->Compact = Compact;
					this->Node = Node;
					this->Offset = (PUNSIGNED_OFFSET)Offset;
				}

			} NODE_FIX_ENTRY, *PNODE_FIX_ENTRY;

		protected:

			PNodeType Root;

		public:
			StaticTrieT()
			{
				this->Root = nullptr;
			}

			NoInline PVOID FindReuseData(PVOID Begin, PVOID End, PVOID Data, ULONG_PTR Size)
			{
				PVOID     Found;
				ULONG_PTR SearchLength;

				if (Begin >= End)
					return Begin;

				SearchLength = PtrOffset(End, Begin);

				Found = Sunday(Begin, SearchLength, Data, Size);
				if (Found == nullptr && SearchLength != 0)
				{
					for (ULONG_PTR Count = Size - 1; Count != 0; --Count)
					{
						if (Count > SearchLength)
							continue;

						if (RtlCompareMemory(PtrSub(End, Count), Data, Count) != Count)
							continue;

						Found = PtrSub(End, Count);
						break;
					}
				}

				return Found == nullptr ? End : Found;
			}

			NoInline PNODE_OFFSET_MAP LookupNodeOffsetEntry(GrowableArray<NODE_OFFSET_MAP> &NodeOffsetTable, PNodeType Node)
			{
				PNODE_OFFSET_MAP Entry;

				FOR_EACH_VEC(Entry, NodeOffsetTable)
				{
					if (Entry->Node == Node)
						return Entry;
				}

				return nullptr;
			}

			NTSTATUS BuildCompactTree(PVOID *CompactTree, PULONG_PTR CompactSize)
			{
				NTSTATUS                Status;
				PBYTE                   IndexBitsBase, IndexBits;
				PBYTE                   IndexBufferBase, IndexBuffer;
				PBYTE                   NodesBufferBase, NodesBuffer;
				ULONG_PTR               FinalSize, NodeCount, IndexBufferSize, IndexBitsSize, NodesBufferSize, OffsetTableSize;
				PCOMPACT_TRIE_HEADER    CompactHeader;
				PNODE_FIX_ENTRY         FixEntry;

				NodeCount = 0;
				Status = EnumNodes(
					[&](PNodeType Parent, PNodeType Node, ULONG_PTR IndexOfNext)
				{
					++NodeCount;
					return STATUS_SUCCESS;
				}
				);
				FAIL_RETURN(Status);

				GrowableArray<NODE_OFFSET_MAP>              NodeOffsetTable;
				GrowableArray<NODE_FIX_ENTRY>               NodeFixEntries;
				GrowableArray<TRIE_NODE_OFFSET_TABLE_ENTRY> OffsetEntries;

				IndexBitsBase = nullptr;
				IndexBufferBase = nullptr;
				NodesBufferBase = nullptr;

				SCOPE_EXIT
				{
					FreeMemoryP(IndexBitsBase);
					FreeMemoryP(IndexBufferBase);
					FreeMemoryP(NodesBufferBase);
				}
				SCOPE_EXIT_END;

				IndexBitsSize = NodeCount * TrieBitsIndex::Max;
				IndexBufferSize = NodeCount * MAXIMUM_NEXT_NODE;
				NodesBufferSize = NodeCount * sizeof(*this->Root);

				IndexBufferBase = (PBYTE)AllocateMemoryP(IndexBufferSize);
				if (IndexBufferBase == nullptr)
					return STATUS_NO_MEMORY;

				IndexBitsBase = (PBYTE)AllocateMemoryP(IndexBitsSize);
				if (IndexBitsBase == nullptr)
					return STATUS_NO_MEMORY;

				NodesBufferBase = (PBYTE)AllocateMemoryP(NodesBufferSize);
				if (NodesBufferBase == nullptr)
					return STATUS_NO_MEMORY;

				IndexBits = IndexBitsBase;
				IndexBuffer = IndexBufferBase;
				NodesBuffer = NodesBufferBase;

				ZeroMemory(IndexBits, IndexBitsSize);
				ZeroMemory(IndexBuffer, IndexBufferSize);
				ZeroMemory(NodesBuffer, NodesBufferSize);

				Status = EnumNodes(
					[&](PNodeType Parent, PNodeType Node, ULONG_PTR IndexOfNext)
				{
					BYTE                            LocalIndex[MAXIMUM_NEXT_NODE];
					BYTE                            LocalBits[TrieBitsIndex::Max];
					ULONG_PTR                       OffsetTableIndex;
					ULONG_PTR                       NodeCount, Length, FirstNodeIndex, LastNodeIndex;
					PNodeType                      *NextBase, Next;
					PBYTE                           ReferenceBuffer, SearchBase, SearchEnd;
					TRIE_NODE_OFFSET_TABLE_ENTRY    TableEntry;
					PCOMPACT_TRIE_NODE              CompactNode;

					ZeroMemory(LocalIndex, sizeof(LocalIndex));
					ZeroMemory(LocalBits, sizeof(LocalBits));

					CompactNode = (PCOMPACT_TRIE_NODE)NodesBuffer;
					NodesBuffer += sizeof(*CompactNode);

					NodeCount = 0;

					FirstNodeIndex = ULONG_PTR_MAX;
					LastNodeIndex = 0;

					for (ULONG_PTR Index = 0; Index != MAXIMUM_NEXT_NODE; ++Index)
					{
						Next = Node->GetNext(Index);
						if (Next == nullptr)
							continue;

						LocalBits[Index / 8] |= 1 << (Index % 8);
						LocalIndex[Index] = (BYTE)NodeCount++;

						NodeFixEntries.Add(NODE_FIX_ENTRY(CompactNode, Next, NodesBuffer));

						NodesBuffer += sizeof(*NodeFixEntries[0].Offset);

						FirstNodeIndex = ML_MIN(FirstNodeIndex, Index);
						LastNodeIndex = Index + 1;
					}

					if (Node->TestFlags(TrieBitsFlags::HasContext))
					{
						*(PNODE_CONTEXT)NodesBuffer = Node->Context.Value;
						NodesBuffer += sizeof(Node->Context.Value);
						SET_FLAG(LocalBits[TrieBitsIndex::Flags], TrieBitsFlags::HasContext);
					}

					if (NodeCount != 0)
					{
						SET_FLAG(LocalBits[TrieBitsIndex::Flags], TrieBitsFlags::HasNodes);
						LocalBits[TrieBitsIndex::NodeCount] = (BYTE)(NodeCount - 1);
					}

					NodeOffsetTable.Add(NODE_OFFSET_MAP(Node, PtrOffset(CompactNode, NodesBufferBase)));

					SearchBase = IndexBitsBase;
					SearchEnd = IndexBits;
					Length = sizeof(LocalBits);
					ReferenceBuffer = (PBYTE)FindReuseData(SearchBase, SearchEnd, LocalBits, Length);

					TableEntry.IndexBitsOffset = (UNSIGNED_OFFSET)PtrOffset(ReferenceBuffer, IndexBitsBase);

					if (ReferenceBuffer + Length > SearchEnd)
					{
						CopyMemory(ReferenceBuffer, LocalBits, Length);
						IndexBits = PtrAdd(ReferenceBuffer, Length);
					}

					TableEntry.IndexOffset = (UNSIGNED_OFFSET)-1;

					if (NodeCount != 0)
					{
						ULONG_PTR ForwardLength;

						ForwardLength = FirstNodeIndex * sizeof(LocalIndex[0]);

						SearchBase = IndexBufferBase + sizeof(LocalIndex);
						SearchEnd = IndexBuffer;
						Length = (LastNodeIndex - FirstNodeIndex) * sizeof(LocalIndex[0]);
						ReferenceBuffer = (PBYTE)FindReuseData(SearchBase, SearchEnd, &LocalIndex[FirstNodeIndex], Length);

						TableEntry.IndexOffset = (UNSIGNED_OFFSET)(PtrOffset(ReferenceBuffer, IndexBufferBase) - ForwardLength);

						if (ReferenceBuffer + Length > SearchEnd)
						{
							CopyMemory(ReferenceBuffer, &LocalIndex[FirstNodeIndex], Length);
							IndexBuffer = PtrAdd(ReferenceBuffer, Length);
						}
					}

					OffsetTableIndex = OffsetEntries.IndexOf(TableEntry);
					if (OffsetTableIndex == OffsetEntries.kInvalidIndex)
					{
						OffsetEntries.Add(TableEntry);
						OffsetTableIndex = OffsetEntries.GetSize() - 1;
					}

					if (OffsetTableIndex > 0xFFFF)
						DbgBreakPoint();

					CompactNode->OffsetTableIndex = (USHORT)OffsetTableIndex;

					return STATUS_SUCCESS;
				}
				);

				FOR_EACH_VEC(FixEntry, NodeFixEntries)
				{
					ULONG_PTR   CompactSize, NodeCount, Offset, ContextSize;
					PBYTE       IndexBits, IndexTable;
					PVOID       CompactEnd;
					PTRIE_NODE_OFFSET_TABLE_ENTRY TableEntry = &OffsetEntries[FixEntry->Compact->OffsetTableIndex];

					IndexBits = PtrAdd(IndexBitsBase, TableEntry->IndexBitsOffset);
					IndexTable = PtrAdd(IndexBufferBase, TableEntry->IndexOffset);

					NodeCount = (IndexBits[TrieBitsIndex::NodeCount] + 1) & -FLAG_ON(IndexBits[TrieBitsIndex::Flags], TrieBitsFlags::HasNodes);
					ContextSize = FLAG_ON(IndexBits[TrieBitsIndex::Flags], TrieBitsFlags::HasContext) ? sizeof(NODE_CONTEXT) : 0;

					CompactSize = sizeof(*FixEntry->Compact);
					CompactSize += NodeCount * sizeof(*FixEntry->Offset);
					CompactSize += ContextSize;

					//CompactEnd = PtrAdd(FixEntry->Compact, CompactSize);

					Offset = LookupNodeOffsetEntry(NodeOffsetTable, FixEntry->Node)->Offset;
					Offset = PtrOffset(Offset, PtrOffset(FixEntry->Compact, NodesBufferBase));

					//if (Offset >= 0xFFFF) DbgBreakPoint();

					*FixEntry->Offset = (UNSIGNED_OFFSET)Offset;
				}

				IndexBitsSize = PtrOffset(IndexBits, IndexBitsBase);
				IndexBufferSize = PtrOffset(IndexBuffer, IndexBufferBase);
				NodesBufferSize = PtrOffset(NodesBuffer, NodesBufferBase);
				OffsetTableSize = OffsetEntries.GetSize() * sizeof(OffsetEntries[0]);

				FinalSize = sizeof(*CompactHeader) + IndexBitsSize + IndexBufferSize + OffsetTableSize + NodesBufferSize + 0x200;

				*CompactTree = AllocateMemoryP(FinalSize);

				if (*CompactTree != nullptr)
				{
					CompactHeader = (PCOMPACT_TRIE_HEADER)*CompactTree;

					ZeroMemory(CompactHeader, FinalSize);

					CompactHeader->Magic = COMPACT_TRIE_MAGIC;
					CompactHeader->IndexBitsTableOffset = sizeof(*CompactHeader);
					CompactHeader->IndexTableOffset = CompactHeader->IndexBitsTableOffset + ROUND_UP(IndexBitsSize, 16);
					CompactHeader->OffsetTableOffset = CompactHeader->IndexTableOffset + ROUND_UP(IndexBufferSize, 16);
					CompactHeader->NodesDataOffset = CompactHeader->OffsetTableOffset + ROUND_UP(OffsetTableSize, 16);

					++CompactHeader;

					CopyMemory(CompactHeader, IndexBitsBase, IndexBitsSize);
					CompactHeader = PtrAdd(CompactHeader, ROUND_UP(IndexBitsSize, 16));

					CopyMemory(CompactHeader, IndexBufferBase, IndexBufferSize);
					CompactHeader = PtrAdd(CompactHeader, ROUND_UP(IndexBufferSize, 16));

					CopyMemory(CompactHeader, OffsetEntries.GetData(), OffsetTableSize);
					CompactHeader = PtrAdd(CompactHeader, ROUND_UP(OffsetTableSize, 16));

					CopyMemory(CompactHeader, NodesBufferBase, NodesBufferSize);
					CompactHeader = PtrAdd(CompactHeader, ROUND_UP(NodesBufferSize, 16));

					*CompactSize = PtrOffset(CompactHeader, *CompactTree);
				}
				else
				{
					Status = STATUS_NO_MEMORY;
				}

				return Status;
			}

			/*++

			NTSTATUS CallBack(PNodeType Parent, PNodeType Node, ULONG_PTR IndexOfNext);

			--*/

			template<typename CALL_BACK> NTSTATUS EnumNodes(CALL_BACK CallBack)
			{
				NTSTATUS    Status;
				ULONG_PTR   QueueIndex;
				PNodeType   Root, Node, Next;

				static const ULONG_PTR NumberOfNext = MAXIMUM_NEXT_NODE;

				Root = this->Root;
				QueueIndex = 0;

				if (Root == nullptr)
					return STATUS_NO_MORE_ENTRIES;


				NodePArray Queue;

				Status = Queue.Add(Root);
				FAIL_RETURN(Status);

				Status = CallBack(nullptr, Root, Queue.kInvalidIndex);
				FAIL_RETURN(Status);

				do
				{
					Node = Queue[QueueIndex++];

					for (ULONG_PTR Index = 0; Index != NumberOfNext; ++Index)
					{
						Next = Node->GetNext(Index);
						if (Next == nullptr)
							continue;

						Status = CallBack(Node, Next, Index);
						FAIL_RETURN(Status);

						Status = Queue.Add(Next);
						FAIL_RETURN(Status);
					}

				} while (QueueIndex != Queue.GetSize());

				return STATUS_SUCCESS;
			}

			NTSTATUS LookupWithoutFailure(PTRIE_BYTES_ENTRY DataToLookup, PNODE_CONTEXT Context = nullptr)
			{
				return LookupWorker(
					[](PNodeType)
				{
					return nullptr;
				},
					DataToLookup,
					Context
					);
			}

			NTSTATUS Lookup(PTRIE_BYTES_ENTRY DataToLookup, PNODE_CONTEXT Context = nullptr)
			{
				return LookupWorker(
					[](PNodeType Node)
				{
					return Node->Failure;
				},
					DataToLookup,
					Context
					);
			}


		protected:

			template<typename T>
			NoInline
				NTSTATUS
				LookupWorker(
				T                   GetFailureRoutine,
				PTRIE_BYTES_ENTRY   DataToLookup,
				PNODE_CONTEXT       Context = nullptr
				)
			{
				PBYTE       Buffer;
				ULONG_PTR   Index;
				PNodeType   Node, Next;

				Node = this->Root;
				if (Node == nullptr)
					return STATUS_FLT_NOT_INITIALIZED;

				FOR_EACH(Buffer, (PBYTE)DataToLookup->Data, DataToLookup->SizeInBytes)
				{
					Index = Buffer[0];
					Next = Node->GetNext(Index);
					while (Next == nullptr)
					{
						Node = GetFailureRoutine(Node);
						if (Node == nullptr)
							return STATUS_NOT_FOUND;

						Next = Node->GetNext(Index);
					}

					Node = Next;
				}

				if (!Node->TestFlags(TrieBitsFlags::HasContext))
					return STATUS_CONTEXT_MISMATCH;

				if (Context != nullptr)
					*Context = Node->Context.Value;

				return STATUS_SUCCESS;
			}
		};

		template<typename NodeType = TRIE_NODE>
		class TrieT : public StaticTrieT<NodeType>
		{
		public:

#if TRIE_DEBUG

			LONG_PTR NodeCount;

#endif

			TrieT()
			{
#if TRIE_DEBUG
				NodeCount = 0;
#endif
			}

			~TrieT()
			{
				PNodeType *Node;
				NodePArray FreeList;

				this->EnumNodes(
					[&](PNodeType Parent, PNodeType Node, ULONG_PTR IndexOfNext) -> NTSTATUS
				{
					if (Parent != nullptr)
						FreeList.Add(Node);

					return STATUS_SUCCESS;
				}
				);

				FOR_EACH_VEC(Node, FreeList)
				{
					DestroyNode(*Node);
				}

				DestroyNode(this->Root);
			}

		public:

			NTSTATUS InsertBytesEntry(PTRIE_BYTES_ENTRY Bytes)
			{
				PBYTE       Buffer;
				ULONG_PTR   Index;
				PNodeType   Node, Next, *Slot;

				if (this->Root == nullptr)
					return STATUS_FLT_NOT_INITIALIZED;

				if (Bytes->SizeInBytes == 0)
					return STATUS_BUFFER_TOO_SMALL;

				Node = this->Root;

				FOR_EACH(Buffer, (PBYTE)Bytes->Data, Bytes->SizeInBytes)
				{
					Index = Buffer[0];

					Slot = Node->AllocateSlot(Index);
					if (Slot == nullptr)
						return STATUS_NO_MEMORY;

					Next = *Slot;
					if (Next == nullptr)
					{
						Next = CreateNode();
						if (Next == nullptr)
							return STATUS_NO_MEMORY;

						*Slot = Next;
					}

					Node = Next;
				}

				Node->SetFlags(TrieBitsFlags::HasContext);
				Node->Context.Value = Bytes->Context;

				return STATUS_SUCCESS;
			}

			NTSTATUS UpdateFailurePointers()
			{
				return EnumNodes(
					[=](PNodeType Parent, PNodeType Node, ULONG_PTR IndexOfNext) -> NTSTATUS
				{
					PNodeType Failure, Next;

					if (Parent == nullptr)
						return STATUS_SUCCESS;

					if (Parent == this->Root)
					{
						Node->Failure = nullptr;
					}
					else
					{
						Failure = Parent->Failure;
						while (Failure != nullptr)
						{
							Next = Failure->GetNext(IndexOfNext);
							if (Next != nullptr)
							{
								Failure = Next;
								break;
							}

							Failure = Failure->Failure;
						}

						Node->Failure = Failure;
					}

					return STATUS_SUCCESS;
				}
				);
			}

			NoInline NTSTATUS InitializeRootNode()
			{
				this->Root = CreateNode();
				if (this->Root == nullptr)
					return STATUS_NO_MEMORY;

				return STATUS_SUCCESS;
			}

			NoInline NTSTATUS BuildFromBytesList(PTRIE_BYTES_ENTRY BytesList, ULONG_PTR NumberOfBytes)
			{
				NTSTATUS Status = STATUS_NO_MORE_ENTRIES;

				FOR_EACH(BytesList, BytesList, NumberOfBytes)
				{
					Status = InsertBytesEntry(BytesList);
					FAIL_BREAK(Status);
				}

				if (NT_SUCCESS(Status))
					Status = UpdateFailurePointers();

				return Status;
			}

			NTSTATUS Release()
			{
				if (this == nullptr)
					return STATUS_SUCCESS;

				delete this;

				return STATUS_SUCCESS;
			}

			static NTSTATUS CreateTrieFromBytesList(TrieT **Tree, PTRIE_BYTES_ENTRY BytesList, ULONG_PTR NumberOfBytes)
			{
				TrieT*      root;
				NTSTATUS    Status;

				root = new TrieT();
				if (root == nullptr)
					return STATUS_NO_MEMORY;

				Status = root->InitializeRootNode();
				if (NT_FAILED(Status))
				{
					root->Release();
					return Status;
				}

				Status = root->BuildFromBytesList(BytesList, NumberOfBytes);
				if (NT_FAILED(Status))
				{
					root->Release();
					return Status;
				}

				*Tree = root;
				return Status;
			}

		protected:

			PNodeType CreateNode()
			{
				PNodeType Node = new NodeType();

#if TRIE_DEBUG
				NodeCount += Node != nullptr;
#endif

				return Node;
			}

			VOID DestroyNode(PNodeType Node)
			{

#if TRIE_DEBUG
				NodeCount -= Node != nullptr;
				if (NodeCount < 0)
					DbgBreakPoint();
#endif
				delete Node;
			}
		};

		typedef TrieT<> Trie;


		_ML_CPP_TAIL_

#endif // CPP_DEFINED

#endif // _ACAUTOMATION_H_c7409518_683e_4837_902d_973c3a4ca8ed_
#ifndef _SEARCHPATTERN_H_214862b7_e205_40fb_ba78_ccfbe9d04321_
#define _SEARCHPATTERN_H_214862b7_e205_40fb_ba78_ccfbe9d04321_


#if CPP_DEFINED

			_ML_CPP_HEAD_


			typedef struct
		{
			PVOID       Pattern;
			ULONG_PTR   Size;
			ULONG_PTR   Flags;
			LONG_PTR    HeadOffsetToNext;
			LONG_PTR    OffsetToPrevHead;
			ULONG_PTR   Extra;

		} SEARCH_PATTERN_DATA, *PSEARCH_PATTERN_DATA;

#define PATTERN_AUTO_SEARCH     (1u << 0)
#define PATTERN_SEARCH_RANGE    (1u << 1)

#define ADD_PATTERN_(_bytes, _size, ...) { _bytes, _size, __VA_ARGS__ }

#define ADD_PATTERN(_bytes_arr, ...) ADD_PATTERN_((_bytes_arr), sizeof(_bytes_arr), __VA_ARGS__)
#define ADD_PATTERN_F(_bytes_arr, _flags, _offset_to_next, _offset_to_prev) ADD_PATTERN_((_bytes_arr), sizeof(_bytes_arr), _flags, _offset_to_next, _offset_to_prev)

		template<typename CallbackRoutine, typename ContextType>
		inline
			PVOID
			SearchPatternT(
			PSEARCH_PATTERN_DATA    Patterns,
			ULONG_PTR               PatternCount,
			PVOID                   Begin,
			LONG_PTR                Length,
			CallbackRoutine         Callback,
			ContextType             Context
			)
		{
			LONG_PTR                RemainSize;
			ULONG_PTR               Offset;
			PVOID                   Found;
			PBYTE                   Buffer, End;
			NTSTATUS                Status;
			PSEARCH_PATTERN_DATA    Data;

			Buffer = (PBYTE)Begin;
			End = Buffer + Length;
			while (Length > 0)
			{
				ULONG_PTR Count;

				Data = Patterns;
				RemainSize = Length;

				Found = Sunday(Buffer, RemainSize, Data->Pattern, Data->Size);
				if (Found == nullptr)
					return Found;

				Buffer = (PBYTE)Found + Data->Size;

				if (Data->HeadOffsetToNext != 0)
				{
					Buffer += Data->HeadOffsetToNext - Data->Size;
				}

				RemainSize = PtrOffset(End, Buffer);

				if (RemainSize < 0)
					return nullptr;

				if (PatternCount != 1)
				{
					for (Count = PatternCount - 1; Count != 0; --Count)
					{
						++Data;

						if (Data->OffsetToPrevHead != 0)
						{
							Offset = Data->OffsetToPrevHead - Data[-1].Size;
							Buffer += Offset;
							RemainSize -= Offset;
						}

						if ((ULONG_PTR)RemainSize < Data->Size)
							return nullptr;

						if (FLAG_ON(Data->Flags, PATTERN_AUTO_SEARCH))
						{
							PVOID AutoSearch;

							Offset = FLAG_ON(Data->Flags, PATTERN_SEARCH_RANGE) ? Data->Extra : RemainSize;
							AutoSearch = Sunday(Buffer, Offset, Data->Pattern, Data->Size);
							if (AutoSearch == nullptr)
								return nullptr;

							Buffer = (PBYTE)AutoSearch + Data->Size;

							if (Data->HeadOffsetToNext != 0)
							{
								Buffer += Data->HeadOffsetToNext - Data->Size;
							}

							RemainSize = PtrOffset(End, Buffer);

							continue;
						}

						if (RtlCompareMemory(Buffer, Data->Pattern, Data->Size) != Data->Size)
							break;

						Buffer += Data->Size;

						if (Data->HeadOffsetToNext != 0)
						{
							Buffer += Data->HeadOffsetToNext - Data->Size;
						}

						RemainSize = PtrOffset(End, Buffer);

						if (RemainSize < 0)
							return nullptr;
					}

					if (Count != 0)
					{
						Buffer = (PBYTE)Found + Patterns[0].Size + Patterns[0].HeadOffsetToNext;

						if (Patterns[0].HeadOffsetToNext != 0)
						{
							Buffer += Patterns[0].HeadOffsetToNext - Patterns[0].Size;
						}

						Length = PtrOffset(End, Buffer);
						continue;
					}
				}
				else
				{
					;
				}

				Status = Callback(Found, Begin, RemainSize, Context);
				if (NT_SUCCESS(Status))
					return Found;

				Buffer = (PBYTE)Found + Patterns[0].Size + Patterns[0].HeadOffsetToNext;
				Length = PtrOffset(End, Buffer);
			}

			return nullptr;
		}

		ForceInline
			PVOID
			SearchPattern(
			PSEARCH_PATTERN_DATA    Patterns,
			ULONG_PTR               PatternCount,
			PVOID                   Begin,
			LONG_PTR                Length
			)
		{
			auto AutoPatternCheck = [](PVOID, PVOID, ULONG_PTR, PVOID) { return STATUS_SUCCESS; };

			return SearchPatternT(Patterns, PatternCount, Begin, Length, AutoPatternCheck, (PVOID)0);
		}

		inline
			PVOID
			SearchPatternSafe(
			PSEARCH_PATTERN_DATA    Patterns,
			ULONG_PTR               PatternCount,
			PVOID                   Begin,
			LONG_PTR                Length
			)
		{
			SEH_TRY
			{
				return SearchPattern(Patterns, PatternCount, Begin, Length);
			}
				SEH_EXCEPT(EXCEPTION_EXECUTE_HANDLER)
			{
				return nullptr;
			}
		}

		template<class T = VOID>
		inline PVOID SearchPatternSafe(const ml::String& Pattern, PVOID Begin, LONG_PTR Length)
		{
			GrowableArray<SEARCH_PATTERN_DATA>  Patterns;
			GrowableArray<ml::String::ByteArray *>  BytesArray;
			ml::String::ByteArray*                  CurrentBytes;
			SEARCH_PATTERN_DATA                 CurrentPattern;
			ULONG_PTR                           GapBytes;

			SCOPE_EXIT
			{
				for (auto &p : BytesArray)
				delete p;
			}
			SCOPE_EXIT_END;

			CurrentBytes = nullptr;
			GapBytes = 0;
			ZeroMemory(&CurrentPattern, sizeof(CurrentPattern));

			for (ml::String &p : Pattern.Split(' '))
			{
				if (!p)
					continue;

				if (p.GetCount() != 2)
					return nullptr;

				if (p[0] == '?' && p[1] == '?')
				{
					++GapBytes;
				}
				else
				{
					ULONG Hex;

					if (GapBytes != 0)
					{
						CurrentPattern.Pattern = CurrentBytes->GetData();
						CurrentPattern.Size = CurrentBytes->GetSize();
						CurrentPattern.HeadOffsetToNext = CurrentPattern.Size + GapBytes;
						Patterns.Add(CurrentPattern);

						ZeroMemory(&CurrentPattern, sizeof(CurrentPattern));

						GapBytes = 0;
						BytesArray.Add(CurrentBytes);
						CurrentBytes = nullptr;
					}

					if (CurrentBytes == nullptr)
						CurrentBytes = new ml::String::ByteArray;

					Hex = p.ToHex();
					CurrentBytes->Add(Hex);
				}
			}

			if (CurrentBytes != nullptr)
			{
				BytesArray.Add(CurrentBytes);

				CurrentPattern.Pattern = CurrentBytes->GetData();
				CurrentPattern.Size = CurrentBytes->GetSize();
				Patterns.Add(CurrentPattern);
			}

			return SearchPatternSafe(Patterns.GetData(), Patterns.GetSize(), Begin, Length);
		}

		template<class T = VOID>
		inline PVOID SearchPatternSafe(PCSTR Pattern, PVOID Begin, LONG_PTR Length)
		{
			return SearchPatternSafe(ml::String::Decode((PVOID)Pattern, StrLengthA(Pattern), CP_ACP), Begin, Length);
		}

		inline PVOID ReverseSearchFunctionHeader(PVOID Start, ULONG_PTR Length)
		{
			PBYTE Buffer;

			Buffer = (PBYTE)Start;

			for (; Length != 0; --Buffer, --Length)
			{
				switch (Buffer[0])
				{
				case CALL:
					// push    local_var_size
					// mov     eax, exception_handler
					// call    _SEH_prolog

					if (Buffer[-5] != 0xB8)
						continue;

					if (Buffer[-7] == 0x6A)
					{
						Buffer -= 7;
					}
					else if (Buffer[-10] == 0x68)
					{
						Buffer -= 10;
					}
					else
					{
						continue;
					}

					break;

				case 0x55:
					if (Buffer[1] != 0x8B || Buffer[2] != 0xEC)
						continue;

					// push ebp
					// mov ebp, esp

					break;

				default:
					continue;
				}

				return Buffer;
			}

			return nullptr;
		}

		inline PVOID SearchStringReference(PLDR_MODULE Module, PVOID String, ULONG_PTR SizeInBytes, ULONG_PTR BeginOffset = 0)
		{
			PVOID StringValue, StringReference;

			SEARCH_PATTERN_DATA Str[] =
			{
				ADD_PATTERN_(String, SizeInBytes),
			};

			StringValue = SearchPattern(Str, countof(Str), Module->DllBase, Module->SizeOfImage);
			if (StringValue == nullptr)
				return nullptr;

			SEARCH_PATTERN_DATA Stub[] =
			{
				ADD_PATTERN(&StringValue),
			};

			StringReference = SearchPattern(Stub, countof(Stub), PtrAdd(Module->DllBase, BeginOffset), PtrSub(Module->SizeOfImage, BeginOffset));
			if (StringReference == nullptr)
				return nullptr;

			return StringReference;
		}


		_ML_CPP_TAIL_

#endif // CPP_DEFINED

#endif // _SEARCHPATTERN_H_214862b7_e205_40fb_ba78_ccfbe9d04321_

#endif // CPP_DEFINED

#endif // _MYLIBRARYUSER_H_e5b0d13b_823a_4f24_88ec_6515f58a7140_
#endif

#if CPP_DEFINED
#endif

			ML_NAMESPACE

			LONG_PTR MlInitialize();
		LONG_PTR MlUnInitialize();

		ML_NAMESPACE_END;

#if CPP_DEFINED
#ifndef _MLNS_H_6cb317cc_3fcc_4a63_87ee_12bcfeb1db61_
#define _MLNS_H_6cb317cc_3fcc_4a63_87ee_12bcfeb1db61_

		using namespace ml::Native;
		using namespace ml::Native::Ldr;
		using namespace ml::Native::Mm;
		using namespace ml::Native::Ps;
		using namespace ml::Native::Reg;
		using namespace ml::Native::Rtl;
		using namespace ml::Native::Nls;
		using namespace ml::Native::Exp;
		using namespace ml::Native::Lpc;
		using namespace ml::Native::Io;

#endif // _MLNS_H_6cb317cc_3fcc_4a63_87ee_12bcfeb1db61_
#if ML_KERNEL_MODE

		ML_NAMESPACE_BEGIN(WindowsVersionsInfoClass)

		enum
		{
			Windows7 = 0x00000601,
			Windows7SP1 = 0x01000601,
			Windows2008R2 = 0x80000601,

			Windows8 = 0x00000602,
			WindowsServer2012 = 0x80000602,

			Windows81 = 0x00000603,
			WindowsServer2012R2 = 0x80000603,

			InvalidVersion = 0xFFFFFFFF,
		};

		inline ULONG GetWindowsVersion()
		{
			NTSTATUS                        Status;
			ULONG                           CSDVersion;
			RTL_OSVERSIONINFOEXW            Version;
			PKEY_VALUE_PARTIAL_INFORMATION  Value;

			static ULONG WindowsVersion = 0;

			if (WindowsVersion != 0)
			{
				return WindowsVersion;
			}

			Version.dwOSVersionInfoSize = sizeof(Version);
			Status = RtlGetVersion((PRTL_OSVERSIONINFOW)&Version);
			if (NT_FAILED(Status))
				return InvalidVersion;

			Status = Reg::GetKeyValue(HKEY_LOCAL_MACHINE, L"System\\CurrentControlSet\\Control\\Windows", L"CSDVersion", &Value);
			if (NT_FAILED(Status))
				return InvalidVersion;

			if (Value->Type != REG_DWORD || Value->DataLength != sizeof(CSDVersion))
			{
				FreeKeyInfo(Value);
				return InvalidVersion;
			}

			CSDVersion = *(PULONG)Value->Data;
			FreeKeyInfo(Value);

			WindowsVersion = (Version.dwMajorVersion << 8 | Version.dwMinorVersion | ((CSDVersion << 16) & 0x7FFF0000)) | (Version.wProductType != VER_NT_WORKSTATION ? 0x80000000 : 0);

			return WindowsVersion;
		}

		inline BOOL IsSupportedVersion()
		{
			switch (WindowsVersionsInfoClass::GetWindowsVersion())
			{
			case WindowsVersionsInfoClass::Windows7:
			case WindowsVersionsInfoClass::Windows7SP1:
			case WindowsVersionsInfoClass::Windows8:
			case WindowsVersionsInfoClass::Windows81:
				return TRUE;

			default:
				return FALSE;
			}
		}

		ML_NAMESPACE_END_(WindowsVersionsInfoClass);

#pragma push_macro("DEFINE_PROPERTY")
#pragma push_macro("DECLARE_ACCESSOR")
#pragma push_macro("FIELD_ACCESSOR")
#pragma push_macro("SET_ACCESSOR")
#pragma push_macro("CALL_ACCESSOR")

#undef DEFINE_PROPERTY
#undef DECLARE_ACCESSOR
#undef FIELD_ACCESSOR
#undef SET_ACCESSOR
#undef CALL_ACCESSOR


		typedef struct _OBJECT_TYPE_INITIALIZER_WIN7_760X               // 25 elements, 0x50 bytes (sizeof)
		{
			/*0x000*/     USHORT       Length;
			union                                             // 2 elements, 0x1 bytes (sizeof)
			{
				/*0x002*/         UCHAR        ObjectTypeFlags;
				struct                                        // 7 elements, 0x1 bytes (sizeof)
				{
					/*0x002*/             UCHAR        CaseInsensitive : 1;         // 0 BitPosition
					/*0x002*/             UCHAR        UnnamedObjectsOnly : 1;      // 1 BitPosition
					/*0x002*/             UCHAR        UseDefaultObject : 1;        // 2 BitPosition
					/*0x002*/             UCHAR        SecurityRequired : 1;        // 3 BitPosition
					/*0x002*/             UCHAR        MaintainHandleCount : 1;     // 4 BitPosition
					/*0x002*/             UCHAR        MaintainTypeList : 1;        // 5 BitPosition
					/*0x002*/             UCHAR        SupportsObjectCallbacks : 1; // 6 BitPosition
				};
			};
			/*0x004*/     ULONG      ObjectTypeCode;
			/*0x008*/     ULONG      InvalidAttributes;
			/*0x00C*/     struct _GENERIC_MAPPING GenericMapping;           // 4 elements, 0x10 bytes (sizeof)
			/*0x01C*/     ULONG      ValidAccessMask;
			/*0x020*/     ULONG      RetainAccess;
			/*0x024*/     enum _POOL_TYPE PoolType;
			/*0x028*/     ULONG      DefaultPagedPoolCharge;
			/*0x02C*/     ULONG      DefaultNonPagedPoolCharge;
			/*0x030*/     PVOID      DumpProcedure;                       // FUNCT_00A4_0ED5_DumpProcedure*
			/*0x034*/     PVOID      OpenProcedure;                       // FUNCT_000F_0EDD_OpenProcedure*
			/*0x038*/     PVOID      CloseProcedure;                      // FUNCT_00A4_0EEB_CloseProcedure*
			/*0x03C*/     PVOID      DeleteProcedure;                     // FUNCT_00A4_0662_Free_InterfaceReference_InterfaceDereference_DeleteProcedure_WorkerRoutine_Callback_ReleaseFromLazyWrite_ReleaseFromReadAhead*
			/*0x040*/     PVOID      ParseProcedure;                      // FUNCT_000F_0EF1_ParseProcedure*
			/*0x044*/     PVOID      SecurityProcedure;                   // FUNCT_000F_0EFD_SecurityProcedure*
			/*0x048*/     PVOID      QueryNameProcedure;                  // FUNCT_000F_0F0E_QueryNameProcedure*
			/*0x04C*/     PVOID      OkayToCloseProcedure;                // FUNCT_0067_0F16_OkayToCloseProcedure*

		} OBJECT_TYPE_INITIALIZER_WIN7_760X, *POBJECT_TYPE_INITIALIZER_WIN7_760X;


		typedef struct _OBJECT_TYPE_INITIALIZER_WIN8_9X00                    // 29 elements, 0x58 bytes (sizeof)
		{
			/*0x000*/     USHORT       Length;
			union                                             // 2 elements, 0x1 bytes (sizeof)
			{
				/*0x002*/         UCHAR        ObjectTypeFlags;
				struct                                        // 8 elements, 0x1 bytes (sizeof)
				{
					/*0x002*/             UCHAR        CaseInsensitive : 1;         // 0 BitPosition
					/*0x002*/             UCHAR        UnnamedObjectsOnly : 1;      // 1 BitPosition
					/*0x002*/             UCHAR        UseDefaultObject : 1;        // 2 BitPosition
					/*0x002*/             UCHAR        SecurityRequired : 1;        // 3 BitPosition
					/*0x002*/             UCHAR        MaintainHandleCount : 1;     // 4 BitPosition
					/*0x002*/             UCHAR        MaintainTypeList : 1;        // 5 BitPosition
					/*0x002*/             UCHAR        SupportsObjectCallbacks : 1; // 6 BitPosition
					/*0x002*/             UCHAR        CacheAligned : 1;            // 7 BitPosition
				};
			};

			/*0x004*/     ULONG      ObjectTypeCode;
			/*0x008*/     ULONG      InvalidAttributes;
			/*0x00C*/     struct _GENERIC_MAPPING GenericMapping;           // 4 elements, 0x10 bytes (sizeof)
			/*0x01C*/     ULONG      ValidAccessMask;
			/*0x020*/     ULONG      RetainAccess;
			/*0x024*/     enum _POOL_TYPE PoolType;
			/*0x028*/     ULONG      DefaultPagedPoolCharge;
			/*0x02C*/     ULONG      DefaultNonPagedPoolCharge;
			/*0x030*/     PVOID      DumpProcedure;                       // FUNCT_00BC_140F_DumpProcedure*
			/*0x034*/     PVOID      OpenProcedure;                       // FUNCT_0072_1417_OpenProcedure*
			/*0x038*/     PVOID      CloseProcedure;                      // FUNCT_00BC_1425_CloseProcedure*
			/*0x03C*/     PVOID      DeleteProcedure;                     // FUNCT_00BC_06F1_Free_WorkerRoutine_DeleteCallback_InterfaceReference_InterfaceDereference_DeleteProcedure_DevicePowerRequired_DevicePowerNotRequired_Callback_ReleaseFromLazyWrite_ReleaseFromReadAhead*
			/*0x040*/     PVOID      ParseProcedure;                      // FUNCT_0072_142B_ParseProcedure*
			/*0x044*/     PVOID      SecurityProcedure;                   // FUNCT_0072_1437_SecurityProcedure*
			/*0x048*/     PVOID      QueryNameProcedure;                  // FUNCT_0072_1448_QueryNameProcedure*
			/*0x04C*/     PVOID      OkayToCloseProcedure;                // FUNCT_007B_1450_OkayToCloseProcedure*
			/*0x050*/     ULONG      WaitObjectFlagMask;
			/*0x054*/     USHORT     WaitObjectFlagOffset;
			/*0x056*/     USHORT     WaitObjectPointerOffset;

		} OBJECT_TYPE_INITIALIZER_WIN8_9X00, *POBJECT_TYPE_INITIALIZER_WIN8_9X00;


		typedef struct _OBJECT_TYPE_WIN8                            // 12 elements, 0x90 bytes (sizeof)
		{
			/*0x000*/     LIST_ENTRY        TypeList;                   // 2 elements, 0x8 bytes (sizeof)
			/*0x008*/     UNICODE_STRING    Name;                       // 3 elements, 0x8 bytes (sizeof)
			/*0x010*/     PVOID             DefaultObject;              // VOID*
			/*0x014*/     UCHAR             Index;
			/*0x018*/     ULONG             TotalNumberOfObjects;
			/*0x01C*/     ULONG             TotalNumberOfHandles;
			/*0x020*/     ULONG             HighWaterNumberOfObjects;
			/*0x024*/     ULONG             HighWaterNumberOfHandles;
			OBJECT_TYPE_INITIALIZER_WIN8_9X00 TypeInfo[1];
#if 0
			/*0x028*/     struct _OBJECT_TYPE_INITIALIZER TypeInfo;     // 29 elements, 0x58 bytes (sizeof)
			/*0x080*/     struct _EX_PUSH_LOCK TypeLock;                // 7 elements, 0x4 bytes (sizeof)
			/*0x084*/     ULONG32      Key;
			/*0x088*/     struct _LIST_ENTRY CallbackList;              // 2 elements, 0x8 bytes (sizeof)
#endif

		} OBJECT_TYPE_WIN8_9X00, *POBJECT_TYPE_WIN8_9X00;

		typedef OBJECT_TYPE_WIN8_9X00 OBJECT_TYPE_WIN7_760X, *POBJECT_TYPE_WIN7_760X;


		template<class _FIELD_TYPE, ULONG_PTR FieldOffset>
		ForceInline _FIELD_TYPE& FieldAccessor(PVOID Object)
		{
			return *(_FIELD_TYPE *)PtrAdd(Object, FieldOffset);
		}


#define DEFINE_PROPERTY_(_RetType, _Object, _Type, _Field) \
            READONLY_PROPERTY(_RetType, _Field) \
												            { \
                CALL_ACCESSOR(_Object, _Field); \
												            }

#define DEFINE_PROPERTY(_Object, _Type, _Field) DEFINE_PROPERTY_(FIELD_TYPE(_Type, _Field)&, _Object, _Type, _Field)


#define DECLARE_ACCESSOR_(_RetType, _Object, _Type, _Field) \
            protected: _RetType (*Accessor_##_Field)(PVOID Object);\
            public: DEFINE_PROPERTY_(_RetType, _Object, _Type, _Field)

#define DECLARE_ACCESSOR(_Object, _Type, _Field) DECLARE_ACCESSOR_(FIELD_TYPE(_Type, _Field)&, _Object, _Type, _Field)


#define FIELD_ACCESSOR(_Type, _Field) FieldAccessor<FIELD_TYPE(_Type, _Field), FIELD_OFFSET(_Type,_Field)>

#define SET_ACCESSOR(_Type, _Field) \
            IF_EXIST(_Type::_Field) \
												            { \
                *(PVOID *)&Accessor_##_Field = PtrAdd((PVOID)0, FIELD_ACCESSOR(_Type, _Field)) \
												            } \
            IF_NOT_EXIST(_Type::_Field) \
												            { \
                *(PVOID *)&Accessor_##_Field = PtrSub(IMAGE_INVALID_VA, 0x5432) \
												            }

#define CALL_ACCESSOR(_Object, _Field) return this->Accessor_##_Field(_Object)

		class ML_OBJECT_TYPE
		{
		protected:
			POBJECT_TYPE_WIN8_9X00 ObjectType;

		public:

			BOOL Success;

			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, TypeList);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, Name);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, DefaultObject);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, Index);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, TotalNumberOfObjects);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, TotalNumberOfHandles);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, HighWaterNumberOfObjects);
			DECLARE_ACCESSOR(this->ObjectType, OBJECT_TYPE_WIN8_9X00, HighWaterNumberOfHandles);
			DECLARE_ACCESSOR_(POBJECT_TYPE_INITIALIZER, this->ObjectType, OBJECT_TYPE_WIN8_9X00, TypeInfo);

			NoInline ML_OBJECT_TYPE(POBJECT_TYPE ObjectType = nullptr)
			{
				this->Success = FALSE;

				if (WindowsVersionsInfoClass::IsSupportedVersion() == FALSE)
					return;

				*(POBJECT_TYPE *)&this->ObjectType = ObjectType;
				Initialize<OBJECT_TYPE_WIN8_9X00>();

				this->Success = TRUE;
			}

			ML_OBJECT_TYPE* operator->()
			{
				return this;
			}

			operator POBJECT_TYPE()
			{
				return (POBJECT_TYPE)this->ObjectType;
			}

		protected:

			template<class OBJECT_TYPE_TYPE>
			VOID Initialize()
			{
				SET_ACCESSOR(OBJECT_TYPE_TYPE, TypeList);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, Name);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, DefaultObject);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, Index);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, TotalNumberOfObjects);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, TotalNumberOfHandles);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, HighWaterNumberOfObjects);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, HighWaterNumberOfHandles);
				SET_ACCESSOR(OBJECT_TYPE_TYPE, TypeInfo);
			}
		};

		class ML_OBJECT_TYPE_INITIALIZER_DATA
		{
		protected:
			POBJECT_TYPE_INITIALIZER ObjectTypeInitializerPointer;

			union
			{
				OBJECT_TYPE_INITIALIZER_WIN7_760X   Win7;
				OBJECT_TYPE_INITIALIZER_WIN8_9X00   Win8;

			} ObjectTypeInitializer;

		public:

			BOOL Success;

			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, Length);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, ObjectTypeFlags);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, ObjectTypeCode);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, InvalidAttributes);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, GenericMapping);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, ValidAccessMask);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, RetainAccess);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, PoolType);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, DefaultPagedPoolCharge);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, DefaultNonPagedPoolCharge);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, DumpProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, OpenProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, CloseProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, DeleteProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, ParseProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, SecurityProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, QueryNameProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, OkayToCloseProcedure);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, WaitObjectFlagMask);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, WaitObjectFlagOffset);
			DECLARE_ACCESSOR(&this->ObjectTypeInitializer, OBJECT_TYPE_INITIALIZER_WIN8_9X00, WaitObjectPointerOffset);

			NoInline ML_OBJECT_TYPE_INITIALIZER_DATA(POBJECT_TYPE ObjectType = nullptr)
			{
				*(PVOID *)&this->ObjectTypeInitializerPointer = IMAGE_INVALID_VA;
				this->Success = FALSE;

				switch (WindowsVersionsInfoClass::GetWindowsVersion())
				{
				case WindowsVersionsInfoClass::Windows7:
				case WindowsVersionsInfoClass::Windows7SP1:
					InitializeObjectTypeInitializer(&this->ObjectTypeInitializer.Win7);
					break;

				case WindowsVersionsInfoClass::Windows8:
				case WindowsVersionsInfoClass::Windows81:
					InitializeObjectTypeInitializer(&this->ObjectTypeInitializer.Win8);
					break;

				default:
					return;
				}

				if (ObjectType != nullptr)
					(*this) = ObjectType;

				this->Success = TRUE;
			}

			ML_OBJECT_TYPE_INITIALIZER_DATA* operator->()
			{
				return this;
			}

			NoInline ML_OBJECT_TYPE_INITIALIZER_DATA& operator=(POBJECT_TYPE ObjectType)
			{
				ML_OBJECT_TYPE Type = ObjectType;

				CopyMemory(&this->ObjectTypeInitializer, Type->TypeInfo, this->Length);
				return *this;
			}

			operator POBJECT_TYPE_INITIALIZER()
			{
				return this->ObjectTypeInitializerPointer;
			}

		protected:

			POBJECT_TYPE_INITIALIZER FindObjectTypeInitializerFromObjectType(POBJECT_TYPE ObjectType)
			{
				USHORT  Length;
				PBYTE   Buffer;

				Length = this->Length;
				Buffer = (PBYTE)ObjectType;

				for (;; Buffer += sizeof(ULONG_PTR))
				{
					if (*(PUSHORT)Buffer != Length)
						continue;
				}
			}

			template<class OBJECT_TYPE_INITIALIZER_TYPE>
			VOID InitializeObjectTypeInitializer(OBJECT_TYPE_INITIALIZER_TYPE *Ptr)
			{
				*(OBJECT_TYPE_INITIALIZER_TYPE **)&this->ObjectTypeInitializerPointer = Ptr;

				ZeroMemory(Ptr, sizeof(OBJECT_TYPE_INITIALIZER_TYPE));
				Ptr->Length = sizeof(*Ptr);

				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, Length);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, ObjectTypeFlags);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, ObjectTypeCode);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, InvalidAttributes);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, GenericMapping);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, ValidAccessMask);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, RetainAccess);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, PoolType);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, DefaultPagedPoolCharge);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, DefaultNonPagedPoolCharge);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, DumpProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, OpenProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, CloseProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, DeleteProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, ParseProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, SecurityProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, QueryNameProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, OkayToCloseProcedure);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, WaitObjectFlagMask);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, WaitObjectFlagOffset);
				SET_ACCESSOR(OBJECT_TYPE_INITIALIZER_TYPE, WaitObjectPointerOffset);
			}
		};


		class ML_EPROCESS_DYNAMIC
		{
		protected:
			PEPROCESS Process;

			static ULONG_PTR Offset_ProcessLock;
			static ULONG_PTR Offset_RundownProtect;
			static ULONG_PTR Offset_UniqueProcessId;

		public:
			ML_EPROCESS_DYNAMIC(PEPROCESS Process = nullptr)
			{
				(*this) = Process;
			}

			ML_EPROCESS_DYNAMIC& operator=(PEPROCESS Process)
			{
				this->Process = Process;
				return *this;
			}

			operator PEPROCESS()
			{
				return this->Process;
			}

			READONLY_PROPERTY(EX_RUNDOWN_REF&, RundownProtect)
			{
				return *(PEX_RUNDOWN_REF)PtrAdd(this->Process, Offset_RundownProtect);
			}

			READONLY_PROPERTY(HANDLE, UniqueProcessId)
			{
				return *(PHANDLE)PtrAdd(this->Process, Offset_UniqueProcessId);
			}

			ML_EPROCESS_DYNAMIC* operator->()
			{
				return this;
			}

			NoInline static NTSTATUS InitializeOffset()
			{
				ULONG_PTR   Index, OffsetTable[0x1000 / sizeof(ULONG_PTR)];
				PULONG_PTR  Buffer;

				Index = 0;
				FOR_EACH_ARRAY(Buffer, OffsetTable)
				{
					*Buffer = Index++;
				}

				Index = (ULONG_PTR)PsGetProcessId((PEPROCESS)OffsetTable);

				Offset_UniqueProcessId = Index * sizeof(Index);
				Offset_RundownProtect = PtrSub(Offset_UniqueProcessId, sizeof(((ML_EPROCESS_DYNAMIC *)0)->RundownProtect));

				return STATUS_SUCCESS;
			}
		};

		DECL_SELECTANY ULONG_PTR ML_EPROCESS_DYNAMIC::Offset_ProcessLock = 0;
		DECL_SELECTANY ULONG_PTR ML_EPROCESS_DYNAMIC::Offset_RundownProtect = 0;
		DECL_SELECTANY ULONG_PTR ML_EPROCESS_DYNAMIC::Offset_UniqueProcessId = 0;



		class ML_ETHREAD_DYNAMIC
		{
		protected:
			PETHREAD Thread;

			static ULONG_PTR Offset_Teb;
			static ULONG_PTR Offset_CreateTime;

		public:
			ML_ETHREAD_DYNAMIC(PETHREAD Thread = nullptr)
			{
				(*this) = Thread;
			}

			ML_ETHREAD_DYNAMIC& operator=(PETHREAD Thread)
			{
				this->Thread = Thread;
				return *this;
			}

			operator PETHREAD()
			{
				return this->Thread;
			}

			PROPERTY(PVOID, Teb);

			GET(Teb)
			{
				return *(PVOID *)PtrAdd(this->Thread, Offset_Teb);
			}

			SET(Teb)
			{
				*(PVOID *)PtrAdd(this->Thread, Offset_Teb) = value;
			}

			PROPERTY(LARGE_INTEGER&, CreateTime);

			GET(CreateTime)
			{
				return *(PLARGE_INTEGER)PtrAdd(this->Thread, Offset_CreateTime);
			}

			SET(CreateTime)
			{
				((PLARGE_INTEGER)PtrAdd(this->Thread, Offset_CreateTime))->QuadPart = value.QuadPart;
			}

			ML_ETHREAD_DYNAMIC* operator->()
			{
				return this;
			}

			NoInline static NTSTATUS InitializeOffset()
			{
				NTSTATUS            Status;
				ULONG_PTR           Index, OffsetTable[0x1000 / sizeof(ULONG_PTR)];
				PULONG_PTR          Buffer;
				KERNEL_USER_TIMES   Times;
				HANDLE              Handle;
				PLARGE_INTEGER      Begin, End;

				Index = 0;
				FOR_EACH_ARRAY(Buffer, OffsetTable)
				{
					*Buffer = Index++;
				}

				Index = (ULONG_PTR)PsGetThreadTeb((PETHREAD)OffsetTable);
				Offset_Teb = Index * sizeof(Index);

				Status = ThreadIdToHandleEx(&Handle, (ULONG_PTR)PsGetCurrentThreadId());
				FAIL_RETURN(Status);

				Status = ZwQueryInformationThread(Handle, ThreadTimes, &Times, sizeof(Times), nullptr);
				ZwClose(Handle);
				FAIL_RETURN(Status);

				Begin = (PLARGE_INTEGER)PsGetCurrentThread();
				End = PtrAdd(Begin, 0x1000);
				for (; Begin < End; ++Begin)
				{
					if (Begin->QuadPart == Times.CreateTime.QuadPart)
					{
						Offset_CreateTime = PtrOffset(Begin, PsGetCurrentThread());
						return STATUS_SUCCESS;
					}
				}

				return STATUS_NOT_FOUND;
			}
		};

		DECL_SELECTANY ULONG_PTR ML_ETHREAD_DYNAMIC::Offset_Teb = 0;
		DECL_SELECTANY ULONG_PTR ML_ETHREAD_DYNAMIC::Offset_CreateTime = 0;


		class ML_OBJECT_HEADER_DYNAMIC
		{
		protected:
			PVOID Object;

			static ULONG_PTR Offset_TypeIndex;

		public:
			ML_OBJECT_HEADER_DYNAMIC(PVOID Object = nullptr)
			{
				(*this) = Object;
			}

			ML_OBJECT_HEADER_DYNAMIC* operator->()
			{
				return this;
			}

			ML_OBJECT_HEADER_DYNAMIC& operator=(PVOID Object)
			{
				this->Object = Object;
				return *this;
			}

			PROPERTY(UCHAR, TypeIndex);

			GET(TypeIndex)
			{
				return *(PUCHAR)PtrAdd(this->Object, Offset_TypeIndex);
			}

			SET(TypeIndex)
			{
				_InterlockedExchange8((PCHAR)PtrAdd(this->Object, Offset_TypeIndex), value);
			}

			NoInline static NTSTATUS InitializeOffset()
			{
				BYTE            TypeIndexTable[0x60];
				PBYTE           Buffer, TypeIndexTableEnd;
				ULONG_PTR       TypeIndex;
				ML_OBJECT_TYPE  TypeObjectType;

				ZeroMemory(TypeIndexTable, sizeof(TypeIndexTable));

				TypeIndexTableEnd = &TypeIndexTable[countof(TypeIndexTable)];

				TypeObjectType = ObGetObjectType(*TmResourceManagerObjectType);
				TypeIndex = TypeObjectType->Index;

				for (Buffer = TypeIndexTableEnd - 1; Buffer != TypeIndexTable; --Buffer)
				{
					*Buffer = TypeIndex;
					if (ObGetObjectType(TypeIndexTableEnd) == TypeObjectType)
					{
						Offset_TypeIndex = PtrOffset(Buffer, TypeIndexTableEnd);
						return STATUS_SUCCESS;
					}
					*Buffer = 0;
				}

				return STATUS_UNSUCCESSFUL;
			}
		};

		DECL_SELECTANY ULONG_PTR ML_OBJECT_HEADER_DYNAMIC::Offset_TypeIndex = 0;


#pragma pop_macro("DEFINE_PROPERTY")
#pragma pop_macro("DECLARE_ACCESSOR")
#pragma pop_macro("FIELD_ACCESSOR")
#pragma pop_macro("SET_ACCESSOR")
#pragma pop_macro("CALL_ACCESSOR")

		class StructAccessorManager
		{
		public:

			NoInline static NTSTATUS Initialize()
			{
				FAIL_RETURN(ML_OBJECT_HEADER_DYNAMIC::InitializeOffset());
				FAIL_RETURN(ML_EPROCESS_DYNAMIC::InitializeOffset());
				FAIL_RETURN(ML_ETHREAD_DYNAMIC::InitializeOffset());

				ML_OBJECT_TYPE ObjectType;

				if (ObjectType->Success == FALSE)
					return STATUS_NOT_SUPPORTED;

				ML_OBJECT_TYPE_INITIALIZER_DATA ObjectTypeInitializer;

				if (ObjectTypeInitializer->Success == FALSE)
					return STATUS_NOT_SUPPORTED;

				return STATUS_SUCCESS;
			}
		};

#endif // r0
#endif

#endif // _MYLIBRARY_H_9fb91137_38ac_4d5e_8572_b6e12d23cb15_

