// Haruno_decry.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"

#include <cstdio>
#include <Windows.h>
#include "lzss.h"
#include <string>

#include "zlib128\zlib-1.2.8\zlib.h"
#pragma comment(lib,"zlib1.lib")

using std::wstring;
using namespace std;

#pragma pack (1)
union FileNameKeyInfo
{
	unsigned char c_key[8];
	WORD          w_key[4];
	DWORD         d_key[2];
};
#pragma pack ()

int DecodeFileName(byte* in_file, size_t len)
{
	FileNameKeyInfo Info;
	memcpy(Info.c_key, ".d36st8f2dw%^-s)", 16);
	Info.d_key[0] ^= 0x36F51A97;
	Info.d_key[1] ^= 0x65DE7A20;

	Info.w_key[0] ^= 0xFCFC;
	Info.w_key[1] ^= 0x561F;
	Info.w_key[2] ^= 0xCA1A;
	Info.w_key[3] ^= 0x61F7;

	int i;
	for (i = 0; i < 16; i++)
	{
		Info.c_key[i] *= 0x23;
	}

	for (i = 0; i < len; i++)
	{
		in_file[i] ^= Info.w_key[i % 4];
	}
	return i;
}



static char Sign[16] = { 'S', 'T', 'm', 'o', 'e', 'S', 'T', 'm', 'o', 'e', 'C', 'h', 'u', '>', '_', '<' };


union RecordInfo
{
	DWORD size;
	char  c_key[4];
};

static DWORD DKey[1024] =
{
	0x07014674, 0x4bd43e22, 0x1ec9712d, 0x03c0622f, 0x681f2a72, 0x631e5dfe, 0x19780536, 0x40d4504a,
	0x67ad0040, 0x4f300acb, 0x463c0af4, 0x47296c55, 0x236e1081, 0x7fb6687f, 0x49ba2702, 0x3db7396c,
	0x00b565e1, 0x3e051ef1, 0x699461a7, 0x16105901, 0x04ec1a12, 0x07c62668, 0x45bd0e69, 0x4cb71bbc,
	0x55af6c0c, 0x1c776691, 0x6e9b0b4f, 0x724450ed, 0x6d4d2e88, 0x55e918fc, 0x01893767, 0x2be27104,
	0x1f4b4686, 0x50c13b9a, 0x15537941, 0x03d15817, 0x6ce139c8, 0x64f81346, 0x76be5572, 0x09e2105f,
	0x297b4d55, 0x6e5b3e39, 0x34fd1513, 0x43fd2cbb, 0x6f3a33f6, 0x650c5694, 0x7e3d7c40, 0x6e9e332b,
	0x63704cbc, 0x45ff24d9, 0x4c1a1099, 0x0d531757, 0x4b277178, 0x4b7d6272, 0x60286fc4, 0x4b404506,
	0x6f9a5542, 0x75a40c29, 0x106b35e9, 0x2b9c3aa7, 0x52ba72f3, 0x62e544af, 0x63df7434, 0x0a3133cb,
	0x33ab0bab, 0x78854715, 0x7ef03757, 0x6be063a9, 0x6344354b, 0x5b1d6956, 0x60031e05, 0x1f1a3f99,
	0x689378fc, 0x371a2ecb, 0x6bec7f78, 0x2c685999, 0x755701a6, 0x593e6ab5, 0x4a7521ec, 0x16e44acb,
	0x2a845a7a, 0x171c72b7, 0x12de0122, 0x6cbe2df5, 0x2cc23d69, 0x07a06158, 0x485724de, 0x27b829ff,
	0x08ee71aa, 0x0b856886, 0x26880769, 0x5daa0c79, 0x68983a38, 0x25dd340e, 0x3e0a0c0f, 0x40ff7413,
	0x16835452, 0x248c5c25, 0x60eb05a2, 0x71360b23, 0x532905f9, 0x18cd67e2, 0x5f2d4cf6, 0x1b625222,
	0x79343c75, 0x1fac5fc1, 0x13476763, 0x6aab7a2f, 0x72053ad1, 0x7a8a7022, 0x3ea33d46, 0x48ca4f8b,
	0x7a31585a, 0x779d1bc8, 0x361f6080, 0x6e90341b, 0x35ff4f24, 0x2a6d7e5b, 0x5e8c62f6, 0x446029e9,
	0x15ec1a85, 0x74581ee6, 0x79323d0f, 0x12b06da3, 0x0b276597, 0x5d0f5259, 0x404a4439, 0x028d211b,
	0x0c1509bb, 0x3b172e08, 0x53823164, 0x6e1405c5, 0x68ce1d11, 0x2c480a2b, 0x747d3785, 0x00f9473c,
	0x6f9e1101, 0x5e51145c, 0x13502a14, 0x290455be, 0x618560b5, 0x2733721c, 0x2b06338f, 0x568f50ab,
	0x36b84f9c, 0x6dc1734e, 0x6e1d1bf5, 0x0d0a0109, 0x331d37e9, 0x622654b9, 0x43071f4c, 0x43776403,
	0x4ad36911, 0x065f128b, 0x10aa541c, 0x14ee4566, 0x56a81651, 0x06bd4ad1, 0x5ae021f1, 0x41196a23,
	0x18a05526, 0x62643000, 0x2ef747dc, 0x7cb94ad0, 0x10752bd3, 0x63cf0b6f, 0x603272f2, 0x12205e26,
	0x20112fdf, 0x694a4fdb, 0x144664cc, 0x51b57384, 0x00163494, 0x7d763be2, 0x1fde2a06, 0x52731d6b,
	0x04570980, 0x3fc80c88, 0x331860c1, 0x026a2c00, 0x305d48f8, 0x1d0a3fb4, 0x56060f20, 0x073d378e,
	0x1be33690, 0x57d966b4, 0x352e09ce, 0x6ea23b01, 0x27592da5, 0x612608b5, 0x3e0b6a77, 0x2ee53e6b,
	0x00651fd4, 0x00b5154c, 0x0b89164a, 0x77651183, 0x765d237f, 0x4da166f0, 0x228c547e, 0x51151621,
	0x1ece124f, 0x76d6557e, 0x7e6a74ca, 0x0efd1ac3, 0x49f937ac, 0x5b9558b4, 0x6d6c05eb, 0x0eb7450c,
	0x47500f47, 0x73f33ab6, 0x3d511c22, 0x48f20c3f, 0x79fd1391, 0x095a5a8c, 0x37cb27b3, 0x31f243c8,
	0x3d5c1c42, 0x3f077ea1, 0x6f005b67, 0x6a0e35b4, 0x197c4cd3, 0x6a8a3745, 0x5a0b230b, 0x3e304d34,
	0x47a21303, 0x3c49512c, 0x417829ef, 0x7859511e, 0x06c63556, 0x37fe57ee, 0x7bcb7168, 0x001a2e6c,
	0x40147191, 0x7d342885, 0x79fa774e, 0x4b1c52bb, 0x7b6c2b40, 0x5fce13d2, 0x23ef6c7f, 0x1d9916cc,
	0x23e22a30, 0x50811118, 0x05077b5a, 0x1ae13907, 0x1c3f68f5, 0x1555007f, 0x48951e44, 0x25d667f3,
	0x237e7365, 0x52277d92, 0x065f0627, 0x11715cbf, 0x0950551b, 0x612a41c2, 0x5f2010ee, 0x213a05bd,
	0x329917f5, 0x7b6116e1, 0x6905500a, 0x59d340e1, 0x6df15297, 0x312659a7, 0x6c301ef0, 0x216e2647,
	0x182346e6, 0x32a70c31, 0x6f384999, 0x305362aa, 0x10b1108d, 0x6863787d, 0x13a74300, 0x515b21ed,
	0x7e4e637b, 0x5bb262ef, 0x427a6ba8, 0x72770996, 0x63625a63, 0x6f3b4ccf, 0x28a46813, 0x052a434e,
	0x028a553b, 0x677b46c8, 0x038c074c, 0x2f0b1763, 0x131667be, 0x4344536b, 0x3d8b395e, 0x4a441746,
	0x458957ea, 0x643b59aa, 0x5a6f15db, 0x3615580d, 0x181c2c82, 0x075a275d, 0x33fa7256, 0x77523cf2,
	0x7b3c4b8d, 0x0d6c03c1, 0x066308e9, 0x28e051d2, 0x460728d5, 0x139451f4, 0x4cd42eb0, 0x3c3d35af,
	0x7ad30469, 0x5bc6437a, 0x6dea1a4c, 0x09f5152e, 0x5ba7391b, 0x054c1abb, 0x38393a61, 0x322d3519,
	0x4ebf1b03, 0x15427d82, 0x2ec61c18, 0x4d1c0cdf, 0x130c65fa, 0x4f1a5780, 0x258a619d, 0x6b8d710f,
	0x44b23c20, 0x5d194cc7, 0x2df648a2, 0x675f4de1, 0x31893457, 0x48d83c4f, 0x536940db, 0x040471ad,
	0x7d9d78c6, 0x43c55275, 0x27bb1280, 0x5f056772, 0x17ae7557, 0x3f9f2b77, 0x1fb614ce, 0x307d6150,
	0x7db01638, 0x56fe05f9, 0x3f987486, 0x5b9a330e, 0x514c165e, 0x05c80583, 0x17930a6d, 0x4f1f5c95,
	0x3c5d5dfd, 0x31bc0500, 0x104d41ca, 0x35e52473, 0x25747111, 0x02eb7941, 0x07600eeb, 0x77554259,
	0x34556dd9, 0x0c3a6378, 0x3bda75a0, 0x07ef199d, 0x26771b57, 0x43e353be, 0x0abe1fbe, 0x09c603b9,
	0x738807d1, 0x4bf17b8d, 0x7b81039d, 0x3d022aca, 0x41e73753, 0x0ac65046, 0x1c8e1a9b, 0x405d7412,
	0x2b28622a, 0x13983dac, 0x2fc32797, 0x21a67a76, 0x5093436a, 0x5ef06867, 0x26f20d77, 0x3e411901,
	0x3fa5776a, 0x532a0083, 0x706135a2, 0x73a5055f, 0x268d6a43, 0x1cf823ee, 0x134a0686, 0x1fdc7a63,
	0x58b15654, 0x57df50fe, 0x1c5b6a14, 0x72077282, 0x232752c1, 0x06b868e8, 0x5a37643f, 0x0ad77255,
	0x713c71ef, 0x5c30424a, 0x69f43981, 0x6d15631a, 0x40f17009, 0x53484ba2, 0x139b2555, 0x3e1c7d34,
	0x6778717e, 0x17d63dd4, 0x76ab20be, 0x565942a7, 0x25bb5181, 0x3f035ea8, 0x069638bf, 0x21d2099d,
	0x0cd60088, 0x4fcb534a, 0x574274e1, 0x509c16e4, 0x329872ce, 0x1b8002c8, 0x398a4db0, 0x5763486d,
	0x36061ed1, 0x66470897, 0x27ba333e, 0x3fe64fce, 0x13d80bd5, 0x5f98370f, 0x0216239e, 0x49787cc1,
	0x4afa705f, 0x6ac229ea, 0x1b54516a, 0x598017a3, 0x510c60ba, 0x376668ca, 0x151d5a3e, 0x3bfa4bf6,
	0x56e20d75, 0x29f819b0, 0x0c910d3b, 0x33f422e0, 0x5d0511e3, 0x14414385, 0x16c04185, 0x5c120da9,
	0x18305299, 0x3ddf2095, 0x0d313cc5, 0x570a0041, 0x25d46bf4, 0x3cc3010e, 0x2a5e29a8, 0x50291bb7,
	0x10943091, 0x1db13d85, 0x76361e5e, 0x4bcc68c3, 0x24ca37d3, 0x5cc43972, 0x029a331c, 0x47e7223e,
	0x15007c61, 0x2de875b0, 0x77e1289a, 0x2c820fa4, 0x6e780aa5, 0x155e32fe, 0x71551e95, 0x0c376f99,
	0x5da53f4e, 0x503c2480, 0x29b35a4f, 0x34b67261, 0x42af15ce, 0x0cea323e, 0x77af1d0a, 0x0f414466,
	0x15f306dd, 0x73a64ba4, 0x1a6d0a90, 0x513028b6, 0x1c8076f4, 0x7f014a00, 0x56091fae, 0x7c6e2382,
	0x6c9c34d3, 0x24606308, 0x601038b5, 0x2ff934a0, 0x423d07fc, 0x4c7b2b51, 0x1c0427f8, 0x4866220a,
	0x23904f35, 0x1be128d9, 0x27dc5c50, 0x505b525d, 0x55752f0a, 0x0b72757e, 0x3882179b, 0x4114375b,
	0x20015049, 0x50e47184, 0x46533538, 0x12df486a, 0x62fb2e84, 0x173f0614, 0x09a3008d, 0x1d9f0d13,
	0x7a5f7692, 0x076177b7, 0x47361b82, 0x494d3783, 0x72df750e, 0x207a48df, 0x6cc87503, 0x0e724f0d,
	0x0e5d14d7, 0x60912c5e, 0x7d864f81, 0x46ae6aa6, 0x18716d8e, 0x3cfe07ed, 0x4e935772, 0x4d347b67,
	0x0ae9621c, 0x6aed06a7, 0x138449cd, 0x6f4c270f, 0x02444f29, 0x77e13b8b, 0x3ae42a8f, 0x2cd0327f,
	0x023649a6, 0x322f53fd, 0x1ab00b38, 0x48af7c3c, 0x0a286d44, 0x617f5a45, 0x6cdc614e, 0x296d06f0,
	0x79b53afa, 0x4f4f080f, 0x1bcd6cd9, 0x09a113e9, 0x452e0783, 0x1f6f28ea, 0x5edd2ee6, 0x78764d98,
	0x7a1779dd, 0x78860cc9, 0x26da7005, 0x2a2a0213, 0x13a719cc, 0x7c8b0a85, 0x5a8756ca, 0x18926d94,
	0x1f4c6e55, 0x114d1258, 0x63190e4f, 0x739414f9, 0x31242c43, 0x78ec5064, 0x08bb7cb0, 0x61ab3042,
	0x288574a5, 0x3a5d5f2a, 0x1f0b098e, 0x10672515, 0x4476234e, 0x59ea0a13, 0x019a748e, 0x14ea113d,
	0x08342d54, 0x61b01feb, 0x60703bd7, 0x1c6c6527, 0x6faf0f92, 0x3a1f5561, 0x5c861297, 0x6cb80e64,
	0x740a4d26, 0x527d3788, 0x744b677e, 0x34ad3229, 0x601e7df3, 0x19642e59, 0x40207b41, 0x2cbe77d2,
	0x74f76d20, 0x453f0f2e, 0x7edb0718, 0x0773635b, 0x5e564797, 0x6cd13f49, 0x72477341, 0x31e53fe5,
	0x772d5a87, 0x6faf664b, 0x0ba21d7b, 0x64461a37, 0x5e2661e2, 0x2ec030bd, 0x681e2f8b, 0x02564b3b,
	0x5a1c66e0, 0x14c4228b, 0x1d6105bb, 0x4bef127d, 0x0ea12e7b, 0x6eca7984, 0x56062556, 0x5d7a40af,
	0x007737f1, 0x14b91fdb, 0x3e19432d, 0x00787228, 0x6a164b44, 0x61c82ea9, 0x3f9e5a16, 0x4bfa5960,
	0x602c17bd, 0x7d050069, 0x0f0b5167, 0x15291975, 0x46186265, 0x71d2537a, 0x07c9337f, 0x2fbf30a9,
	0x126e448b, 0x18637ca1, 0x58b7743e, 0x7e8c72e2, 0x63777a41, 0x4e422984, 0x00a74787, 0x53f21429,
	0x63ae40df, 0x7ecc3330, 0x1ae007c5, 0x2269432b, 0x7e44457e, 0x7bb10093, 0x7b9a2c64, 0x7cfc53bb,
	0x639c237e, 0x25777903, 0x1c855053, 0x67ca794e, 0x5dd07300, 0x63f706b6, 0x59424889, 0x7885117e,
	0x752a676d, 0x6edf2947, 0x7be84a7d, 0x46f77e87, 0x64ac7ded, 0x662e1838, 0x198022ac, 0x2d7811cd,
	0x5e893bf1, 0x3abb756a, 0x3e897b17, 0x59790654, 0x20a97daa, 0x66af0fa7, 0x6b7631c2, 0x2bfd0b47,
	0x5929548f, 0x76063518, 0x612b3f36, 0x6a1a5e72, 0x5ad875db, 0x5f1315cf, 0x3d842cff, 0x3d7c76c7,
	0x21bb390d, 0x2af9363f, 0x67cd1c2f, 0x04e23edd, 0x278a2666, 0x6e3271bf, 0x4d4b5bda, 0x74a05f6c,
	0x0832156f, 0x110b0d0a, 0x6db20f98, 0x071b19d2, 0x76515b70, 0x682658c2, 0x37ac6607, 0x3d503291,
	0x7fbc09f9, 0x1cf763e8, 0x35595f46, 0x2f4e6bcf, 0x21fc3d5d, 0x66473e66, 0x08c9237a, 0x6cb70fd5,
	0x2ecd7b32, 0x10b54b85, 0x3884694d, 0x2d420b91, 0x009e20d3, 0x57302477, 0x4c026c69, 0x513c1914,
	0x7f1461de, 0x0b7e0acf, 0x38337402, 0x32037a14, 0x738656b7, 0x0eb86b04, 0x1bf9694a, 0x4289426a,
	0x2d821b03, 0x19cb6ef1, 0x4ca97dfa, 0x7fd73295, 0x77477c2d, 0x55f82058, 0x328e62d0, 0x31882236,
	0x5a4937e4, 0x45551b5a, 0x75650e0b, 0x7a4a7a92, 0x33b14a9b, 0x7b4b5101, 0x78e211f1, 0x38604114,
	0x18da4e08, 0x251659b7, 0x292a034a, 0x362231c8, 0x0bd567a5, 0x624857cb, 0x17576fe2, 0x2a7b69e0,
	0x7fe54732, 0x6d4669f3, 0x65f7650a, 0x096a2233, 0x2e043531, 0x13c92dc5, 0x058c0618, 0x248279b9,
	0x395c3169, 0x7f5e523d, 0x410e32e2, 0x1b6b5010, 0x23cf2164, 0x4de63a3a, 0x1a653e47, 0x1c5e2ffb,
	0x12700ef1, 0x7a172f01, 0x76ef34a7, 0x74ad49dd, 0x620776a2, 0x13f922b8, 0x1c003266, 0x71387e42,
	0x0b91264f, 0x496a02ec, 0x7b5d4a6d, 0x0ef97857, 0x58bd2b92, 0x3e9b1b0c, 0x4fc07ca8, 0x7b79586d,
	0x68705248, 0x369106ec, 0x09573c89, 0x65596e7a, 0x03423316, 0x0ba53542, 0x0a450784, 0x1cca0498,
	0x3fff51e2, 0x78047a2c, 0x331f0b91, 0x04153984, 0x78274c56, 0x2e2f31a9, 0x3f715dad, 0x50146b20,
	0x0c6f1860, 0x417c721b, 0x72364059, 0x18b730f1, 0x793e52b4, 0x5e934ecc, 0x12637a19, 0x398066a1,
	0x3b301d49, 0x53f22a66, 0x375d3bf6, 0x0207467f, 0x03960dd8, 0x6a6a1979, 0x657f17fd, 0x367713fa,
	0x3cf42c61, 0x0da054f8, 0x7a9507be, 0x600f562a, 0x5f8201a5, 0x448c3cbc, 0x6a6302ce, 0x6da22247,
	0x15ac35ad, 0x79fd6a00, 0x4b1f2545, 0x24177630, 0x30923e41, 0x151451e4, 0x31f26641, 0x5eea22e5,
	0x6c881d72, 0x61c477ea, 0x5f7b5e61, 0x20a9470d, 0x05963011, 0x4958307c, 0x3c4c1e4b, 0x73775971,
	0x1bf90c35, 0x5aed7364, 0x256b1526, 0x198d437f, 0x68a16fb9, 0x23f43e52, 0x08d20720, 0x0db40bc8,
	0x41b23ebb, 0x58b20759, 0x51f013e9, 0x53cc1082, 0x6f03121f, 0x4cbf3f72, 0x26264d37, 0x19485207,
	0x4ea1560a, 0x3b8a64f8, 0x714b5d40, 0x25b04d54, 0x494d7867, 0x60d3262b, 0x42283d43, 0x1b1e668a,
	0x16fa2765, 0x613013ad, 0x76fd7bff, 0x06c16371, 0x53501ff7, 0x02896308, 0x39fa143a, 0x415d75f0,
	0x622c0c53, 0x349c4126, 0x4dc6533c, 0x1fc95697, 0x241d7274, 0x697934d7, 0x29fb4f51, 0x73706f15,
	0x7ae83298, 0x3e07114f, 0x67a86e4b, 0x5ad114c2, 0x1e0515c2, 0x727d78a5, 0x7dcf7bfd, 0x61fe5316,
	0x3f206c39, 0x32ea6e55, 0x4de450c1, 0x73204630, 0x7e993c07, 0x2fae79be, 0x005407f3, 0x16f20550,
	0x30057f7b, 0x05ff58a5, 0x30fb4674, 0x05411d5d, 0x6eab73a8, 0x786541b0, 0x6bad1128, 0x05731b60,
	0x020776e4, 0x773d36ec, 0x78ae3378, 0x1efd2707, 0x124a7749, 0x793a6848, 0x793a35d1, 0x19eb2d23,
	0x2cd87137, 0x23df2618, 0x53fe6423, 0x4f5c1a2a, 0x18c97dd0, 0x44076393, 0x719c6463, 0x4a0324b6,
	0x7b68717b, 0x165d4955, 0x492b5d09, 0x36a82804, 0x4cb70a62, 0x5fe457de, 0x3cb52b92, 0x24a50e76,
	0x1be92ef3, 0x56711a11, 0x45b82aff, 0x16694c12, 0x23e73c63, 0x592b67b5, 0x71a50a54, 0x61f86900,
	0x2fcc6526, 0x791237f7, 0x2e64331b, 0x61681c10, 0x4f691f79, 0x517503e6, 0x66cd3fdf, 0x73667531,
	0x5bc123d8, 0x307b38f6, 0x6f3102b1, 0x4baf17fb, 0x4b8d7b88, 0x0f9b3b7e, 0x41cf1ba6, 0x13980626,
	0x57ba1f0f, 0x5c24793a, 0x0b5f1f56, 0x5a877a11, 0x6fe624b6, 0x0fb60bca, 0x078b4d5f, 0x5677513d,
	0x7ee77f0e, 0x18c66b30, 0x2d7156e0, 0x747706cf, 0x7f444b68, 0x131e3056, 0x2c2334ff, 0x392c3e11,
	0x5fba305b, 0x505a6786, 0x37260f64, 0x714b5cf1, 0x37b84c42, 0x306c72f0, 0x22f632bb, 0x32203680,
	0x4be333bc, 0x4a1a7d28, 0x51811735, 0x2a094574, 0x6293002a, 0x637b7ba5, 0x6ea77708, 0x40fb76a7,
	0x68546e35, 0x3a7d4143, 0x7cc174ea, 0x08fd0396, 0x64660c45, 0x1d6220c2, 0x3117529a, 0x7ea85ce3,
	0x3d3e790b, 0x533e1f45, 0x20683758, 0x19ad24d4, 0x4d0331f8, 0x547b36d3, 0x3b650668, 0x2d4f39d1,
	0x461171c3, 0x535528d9, 0x1b364593, 0x18e450ea, 0x67791ee6, 0x145f60a6, 0x1df413a5, 0x4859204e,
	0x017f4a22, 0x16fc65ee, 0x532e2ef0, 0x04ab19d5, 0x4a1b3cf7, 0x0de65f48, 0x38650bc7, 0x146e3578,
	0x0178182d, 0x27aa24b1, 0x458f7b04, 0x2c4a4bd3, 0x6678024e, 0x272a6206, 0x49976084, 0x2f7900aa,
	0x7b2e662a, 0x4c1a498d, 0x16dc79a5, 0x404a3d61, 0x19634151, 0x0b84566d, 0x7fae33cf, 0x20a13b82,
	0x5712029c, 0x18441f31, 0x22d412e8, 0x62751f3b, 0x3aeb78a5, 0x3b8c3849, 0x080827de, 0x685121dd
};


static byte ucKey[1024];


union KeyInfo3
{
	DWORD d_key;
	char  c_key[4];
};

void init()
{
	for (unsigned int i = 0; i < 1024; i++)
	{
		KeyInfo3 a;
		a.d_key = DKey[i];
		unsigned char k = a.c_key[0] ^ a.c_key[1] ^ a.c_key[2] ^ a.c_key[3];
		ucKey[i] = k;
	}
}


void Encode3(byte* in, size_t size)
{
	for (size_t i = 0; i < size; i++)
	{
		in[i] ^= ucKey[i % 1024];
	}
}


typedef unsigned __int32 tjs_uint;
typedef unsigned __int64 tjs_uint64;
typedef unsigned __int32 tjs_uint32;
typedef unsigned __int8  tjs_uint8;

#pragma pack(push, 4)
struct tTVPXP3ExtractionFilterInfo
{
	tjs_uint SizeOfSelf; // structure size of tTVPXP3ExtractionFilterInfo itself
	tjs_uint64 Offset; // offset of the buffer data in uncompressed stream position
	void * Buffer; // target data buffer
	tjs_uint BufferSize; // buffer size in bytes pointed by "Buffer"
	tjs_uint32 FileHash; // hash value of the file (since inteface v2)
};
#pragma pack(pop)


void ExtractionFilter(tTVPXP3ExtractionFilterInfo *Info)
{
	int v2; // eax@2
	int v3; // ST14_4@3
	int TempHash; // eax@5
	DWORD zPos; // ecx@5
	unsigned int iPos; // esi@7
	unsigned char InfoTable[32] = { 0 }; // [sp+8h] [bp-24h]@1


	TempHash = ((Info->FileHash & 0x7FFFFFFF) << 31) | Info->FileHash & 0x7FFFFFFF;
	zPos = 0;
	do
	{
		InfoTable[zPos++] = TempHash;
		TempHash = ((TempHash & 0xFFFFFFFE) << 23) | ((unsigned int)TempHash >> 8);
	} while (zPos < 31);
	iPos = 0;
	unsigned char Key = 0;
	if (Info->BufferSize)
	{
		do
		{
			TempHash = InfoTable[(Info->Offset + iPos) % 0x1F];
			Key = TempHash & 0xFF;
			*((BYTE *)Info->Buffer + iPos++) ^= TempHash;
		} while (iPos < Info->BufferSize);
	}
}

int _tmain(int argc, TCHAR* argv[])
{
	if (argc != 2)
	{
		return -1;
	}
	init();
	FILE *file = _wfopen(argv[1], L"rb");
	if (file == NULL)
	{
		return -1;
	}
	wstring outName = wstring(argv[1]) + L".o";
	fseek(file, 0, SEEK_END);
	size_t size = ftell(file);
	rewind(file);
	unsigned char* buff = new unsigned char[size];
	fread(buff, 1, size, file);
	fclose(file);

	if (memcmp(Sign, buff, 16))
	{
		MessageBoxW(NULL, L"不是自定义加密文件", L"Haruno_D", MB_OK);
		return -1;
	}

	DWORD e_ori_size = *(DWORD*)(buff + 16) ^ 0x474D12F6;
	DWORD e_zip_size = *(DWORD*)(buff + 20) ^ 0xCF129DE1;
	DWORD e_hash = *(DWORD*)(buff + 24) ^ 0x51FD3AE5;


	tTVPXP3ExtractionFilterInfo info;
	info.SizeOfSelf = sizeof(info);
	info.Buffer = buff + 28;
	info.Offset = 0;
	info.FileHash = e_hash;
	info.BufferSize = e_zip_size;

	ExtractionFilter(&info);
	//Encode3(buff + 28, e_ori_size);

	byte* out_buff = new byte[e_ori_size];
	//uLongf out_size = e_ori_size;

	/*
	if (uncompress(out_buff, &out_size, buff+24, e_zip_size)!= Z_OK)
	{
		MessageBoxW(NULL, L"解压失败", L"Harono_E", MB_OK);
		return -1;
	}
	*/
	LZSS lzss;
	unsigned long out_size = lzss.UnCompress(buff + 28, e_zip_size, out_buff);

	
	if (out_size != e_ori_size)
	{
		printf("old : %08x  now : %08x\n", e_ori_size, out_size);
		MessageBoxW(NULL, L"长度不同", L"Harono_E", MB_OK);
		return -1;
	}
	

	//DecodeFileName(out_buff, out_size);

	//DecodeFileName(buff + 24, e_ori_size);

	FILE* out = _wfopen(outName.c_str(), L"wb");
	fwrite(out_buff, 1, out_size, out);

	//fwrite(buff + 24, 1, e_ori_size, out);
	fclose(out);
	return 0;
}
